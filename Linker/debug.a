;#include <stdio.h>
;#include <stdlib.h>
;#include <string.h>
;#include <stdarg.h>
;#include <ctype.h>
;#include <stdint.h>
;#include <debug.h>
;#include <uart.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <adc.h>
;#include <initial_system.h>
;
;/* ================================================================================= */
;void printDebug(flash char *fmtstr, ...)
; 0001 000E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0001 000F     char textBuffer[256];
; 0001 0010     va_list argptr;
; 0001 0011 
; 0001 0012     va_start(argptr, fmtstr);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;	*fmtstr -> Y+258
;	textBuffer -> Y+2
;	*argptr -> R16,R17
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 0013     vsprintf(textBuffer,fmtstr,argptr);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 0014     send_uart(0, textBuffer);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 0015     va_end(argptr);
; 0001 0016 
; 0001 0017     return;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 0018 }
;PCODE: $00000029 VOL: 0
;/* ================================================================================= */
; void print_payload(const unsigned char *payload, int len) {
; 0001 001A void print_payload(const unsigned char *payload, int len) {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 001B 
; 0001 001C     int len_rem = len;
; 0001 001D     int line_width = 16;            // number of bytes per line //
; 0001 001E     int line_len;
; 0001 001F     int offset = 0;                  // zero-based offset counter //
; 0001 0020     const unsigned char *ch = payload;
; 0001 0021 
; 0001 0022     if (len <= 0)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;	*payload -> Y+12
;	len -> Y+10
;	len_rem -> R16,R17
;	line_width -> R18,R19
;	line_len -> R20,R21
;	offset -> Y+8
;	*ch -> Y+6
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0001 0023         return;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 0024 
; 0001 0025     // data fits on one line //
; 0001 0026     if (len <= line_width) {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0001 0027         print_hex_ascii_line(ch, len, offset);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0001 0028         return;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 0029     }
; 0001 002A     // data spans multiple lines //
; 0001 002B     for ( ;; ) {
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0001 002C         // compute current line length //
; 0001 002D         line_len = line_width % len_rem;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0001 002E         // print line //
; 0001 002F         print_hex_ascii_line(ch, line_len, offset);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 0030         // compute total remaining //
; 0001 0031         len_rem = len_rem - line_len;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0001 0032         // shift pointer to remaining bytes to print //
; 0001 0033         ch = ch + line_len;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 0034         // add offset //
; 0001 0035         offset = offset + line_width;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0001 0036         // check if we have line width chars or less //
; 0001 0037         if (len_rem <= line_width) {
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0001 0038             // print last line and get out //
; 0001 0039             print_hex_ascii_line(ch, len_rem, offset);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 003A             break;
;PCODE: $0000006A VOL: 0
; 0001 003B         }
; 0001 003C     }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0001 003D     return;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0001 003E 
; 0001 003F }
;PCODE: $00000072 VOL: 0
;/* ================================================================================= */
;void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
; 0001 0041 void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0001 0042 
; 0001 0043     int i;
; 0001 0044     int gap;
; 0001 0045     const unsigned char *ch;
; 0001 0046 
; 0001 0047     // offset //
; 0001 0048     printDebug("%05d   ", offset);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;	*payload -> Y+10
;	len -> Y+8
;	offset -> Y+6
;	i -> R16,R17
;	gap -> R18,R19
;	*ch -> R20,R21
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 0049 
; 0001 004A     // hex //
; 0001 004B     ch = payload;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0001 004C     for(i = 0; i < len; i++) {
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0001 004D         printDebug("%02X ", *ch);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0001 004E 
; 0001 004F         ch++;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 0050         // print extra space after 8th byte for visual aid //
; 0001 0051         if (i == 7){
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0001 0052             printDebug(" ");
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0001 0053 
; 0001 0054         }
; 0001 0055     }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0001 0056     // print space to handle line less than 8 bytes //
; 0001 0057     if (len < 8){
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0001 0058         printDebug(" ");
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0001 0059 
; 0001 005A     }
; 0001 005B 
; 0001 005C     // fill hex gap with spaces if not full line //
; 0001 005D     if (len < 16) {
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0001 005E         gap = 16 - len;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0001 005F         for (i = 0; i < gap; i++) {
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0001 0060             printDebug("   ");
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0001 0061 
; 0001 0062         }
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0001 0063     }
; 0001 0064     printDebug("   ");
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0001 0065 
; 0001 0066 
; 0001 0067     // ascii (if printable) //
; 0001 0068     ch = payload;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0001 0069     for(i = 0; i < len; i++) {
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0001 006A         if (isprint(*ch)){
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0001 006B             printDebug("%c", *ch);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0001 006C 
; 0001 006D         }
; 0001 006E         else{
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0001 006F             printDebug(".");
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0001 0070 
; 0001 0071         }
;PCODE: $000000FC VOL: 0
; 0001 0072         ch++;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0001 0073     }
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0001 0074 
; 0001 0075     printDebug("\r\n");
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0001 0076     return;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0001 0077 }
;PCODE: $0000010E VOL: 0
