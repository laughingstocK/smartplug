;#include <mega128a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <stdlib.h>
;#include <delay.h>
;#include <io.h>
;#include <initial_system.h>
;#include <uart.h>
;#include <debug.h>
;#include <xbee.h>
;#include <timer.h>
;#include <int_protocol.h>
;#include <adc.h>
;
;/* ================================================================================= */
;int initial_system(void) {
; 0005 000F int initial_system(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0005 0010 
; 0005 0011     init_IO();
;PCODE: $0000000F VOL: 0
; 0005 0012 
; 0005 0013     //============ Uart Initial ============//
; 0005 0014     init_uart(0, 38400);     // uart0 for printDebug
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0005 0015     init_uart(1, 38400);    // uart1 for xbee
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0005 0016 
; 0005 0017     //============ Timer Initial ============//
; 0005 0018     init_timer();
;PCODE: $00000018 VOL: 0
; 0005 0019     enable_timerOverflow(0);      // interrupt every 0.021 sec.
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0005 001A     enable_timerOverflow(1);      // interrupt every 1 sec.
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0005 001B     enable_timerOverflow(3);      // interrupt every 0.5 sec.
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0005 001C 
; 0005 001D     //============ Module Initial ============//
; 0005 001E     init_adc(VREF_AVCC);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0005 001F 
; 0005 0020     return 0;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0005 0021 }
;PCODE: $00000026 VOL: 0
;
;/* ================================================================================= */
;void init_IO(void) {
; 0005 0024 void init_IO(void) {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0005 0025 
; 0005 0026     /*----- Digital Input -----*/
; 0005 0027     // Initial Direction
; 0005 0028     SW_BUTTON_DDR;           // Switch Button, Join Button
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0005 0029     // pull up
; 0005 002A     SW_BUTTON_PORT = 1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0005 002B 
; 0005 002C     D_SW1_DDR;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0005 002D     D_SW2_DDR;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0005 002E     D_SW3_DDR;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0005 002F     D_SW4_DDR;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0005 0030 
; 0005 0031     /*----- Digital Output -----*/
; 0005 0032     // Initial Direction
; 0005 0033     LED_STAT_DDR;                   // LED Status
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0005 0034     POWER_RELAY_DDR;                // Drive relay
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0005 0035     XBEE_RESET_DDR;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0005 0036     XBEE_SLEEP_DDR;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0005 0037 
; 0005 0038     LED_STAT_OFF;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0005 0039     POWER_RELAY_OFF;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0005 003A     XBEE_RESET_HIGH;      // XBee Reset active low
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0005 003B     XBEE_SLEEP_LOW;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0005 003C 
; 0005 003D }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;/* ================================================================================= */
;int8_t read_dSwitch() {
; 0005 003F int8_t read_dSwitch() {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0005 0040     int8_t read1, read2;
; 0005 0041     read1 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;	read1 -> R17
;	read2 -> R16
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0005 0042     delay_ms(100);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0005 0043     read2 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0005 0044     if(read1 == read2) {
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0005 0045         return read1;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0005 0046     }else {
;PCODE: $00000082 VOL: 0
; 0005 0047         return -1;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0005 0048     }
;PCODE: $00000086 VOL: 0
; 0005 0049 }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;
