;#include <mega128a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <stdint.h>
;#include <delay.h>
;#include <string.h>
;#include <uart.h>
;#include <int_protocol.h>
;#include <debug.h>
;#include <adc.h>
;#include <math.h>
;#include <meansure.h>
;
;float SENSOR_SENSITIVE;
;float AMP_ADJ_ZERO;
;float total                 = 0.0;
;float avg                   = 2500.0;

	.DSEG
;float value                 = 0.0;
;float Viout                 = 0.0;
;float Vdif                  = 0.0;
;float Vsq_avg               = 0.0;
;float volt                  = 0.0;
;float amp                   = 0.0;
;float power                 = 0.0;
;float whour                 = 0.0;
;float Vsum                  = 0.0;
;float Isum                  = 0.0;
;float Psum                  = 0.0;
;float WHsum                 = 0.0;
;float Vavg                  = 0.0;
;float Iavg                  = 0.0;
;float Pavg                  = 0.0;
;float CURRENT_VOLT          = 0.0;
;float CURRENT_AMP           = 0.0;
;uint16_t number             = 0;
;uint16_t adcValue           = 0;
;uint16_t countSampling      = 0;
;eeprom float ADJ0_SENSOR5A  = 0.090;
;eeprom float ADJ0_SENSOR20A = 0.11;
;eeprom float ADJ0_SENSOR30A = 0.11;
;
;void ReadCurrent(void){
; 0009 0029 void ReadCurrent(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0009 002A     adcValue = read_adc(ADC1);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0009 002B     printDebug("ADC = %d\r\n", adcValue);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0009 002C     value = adcValue * (5000.0 / 1023.0);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0009 002D 
; 0009 002E     // Keep track of the moving average
; 0009 002F     // See more : http://jeelabs.org/2011/09/15/power-measurement-acs-code/
; 0009 0030     avg = (499.0*avg + value) / 500.0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0009 0031 
; 0009 0032     if(value > avg){
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0009 0033         Vdif = value - avg;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0009 0034         total += (Vdif*Vdif);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0009 0035     }else if(value < avg) {
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0009 0036         Vdif = avg - value;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0009 0037         total += (Vdif*Vdif);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0009 0038     }
; 0009 0039     countSampling++;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0009 003A }
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;
;void ReadVoltage(void){
; 0009 003C void ReadVoltage(void){
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0009 003D    /*---------- Voltage ----------*/
; 0009 003E     adcValue = read_adc(ADC0);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0009 003F     volt = (((adcValue*5.0)/1023.0)/0.01);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0009 0040     if(volt < 223.0) {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0009 0041         volt += 9.0;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0009 0042     }else if(volt > 233.0) {
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0009 0043         volt -= 4.0;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0009 0044     }
; 0009 0045     printDebug("Volt = %f\r\n", volt);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0009 0046     Vsum += volt;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0009 0047 
; 0009 0048     /*---------- Current ----------*/
; 0009 0049     // V-rms
; 0009 004A     // See more : http://www.electronics-tutorials.ws/blog/rms-voltage.html
; 0009 004B     Vsq_avg = total / countSampling;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0009 004C     Viout = sqrt(Vsq_avg);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0009 004D     amp = Viout / SENSOR_SENSITIVE;                  // ACS712 +-5 or +-20 or +-30 Amp.
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0009 004E 
; 0009 004F     /* Adjust Current to 0 */
; 0009 0050     if(amp < AMP_ADJ_ZERO) {
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0009 0051         amp = 0.0;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0009 0052     }
; 0009 0053 
; 0009 0054     total = 0.0;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0009 0055     countSampling = 0;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0009 0056     Isum += amp;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0009 0057 
; 0009 0058     /*---------- Power ----------*/
; 0009 0059     power = volt*amp;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0009 005A     Psum += power;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0009 005B 
; 0009 005C     /*----------  Watt-hour ----------*/
; 0009 005D     whour = power*(0.5/3600.0);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0009 005E     WHsum += whour;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0009 005F     number++;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0009 0060 }
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
