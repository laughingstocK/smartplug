
AVRASM ver. 2.1.30  C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm Tue Oct 31 15:03:18 2017

C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1074): warning: Register r5 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1075): warning: Register r4 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1076): warning: Register r6 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1077): warning: Register r8 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1078): warning: Register r10 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1079): warning: Register r13 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1080): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128A
                 ;Program type             : Application
                 ;Clock frequency          : 11.059200 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : float, width, precision
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1280 byte(s)
                 ;Heap size                : 1024 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0500
                 	.EQU __HEAP_SIZE=0x0400
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _error=R5
                 	.DEF _read_D_SW=R4
                 	.DEF _start_event=R6
                 	.DEF _counter=R8
                 	.DEF _rx_wr_index1=R10
                 	.DEF _rxPackageIndex0=R13
                 	.DEF _rxPackageIndexCount0=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 03de 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 06dd 	JMP  _timer1_ovf_isr
00001e 940c 0000 	JMP  0x00
000020 940c 06cf 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 077e 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 06fc 	JMP  _timer3_ovf_isr
00003c 940c 07a4 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000046 0000      	.DW  0x0000
                 
                 ;HEAP START MARKER INITIALIZATION
                 __HEAP_START_MARKER:
000047 0000
000048 0000      	.DW  0,0
                 
                 _0x3:
000049 0000
00004a 0000
00004b 0000
00004c 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004d ff00
00004e ffff
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1135): warning: .cseg .db misalignment - padding zero byte
00004f 00ff      	.DB  0x0,0xFF,0xFF,0xFF,0xFF
                 _0x4D:
000050 0000      	.DB  0x0,0x0
                 _0x0:
000051 0a0d
000052 2b2b
000053 2b2b
000054 2b2b      	.DB  0xD,0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000055 2b2b
000056 2b2b
000057 5320
000058 616d      	.DB  0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x6D,0x61
000059 7472
00005a 5320
00005b 6977
00005c 6374      	.DB  0x72,0x74,0x20,0x53,0x77,0x69,0x74,0x63
00005d 2068
00005e 2b2b
00005f 2b2b
000060 2b2b      	.DB  0x68,0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000061 2b2b
000062 2b2b
000063 0a0d
000064 0d00      	.DB  0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0,0xD
000065 460a
000066 7269
000067 776d
000068 7261      	.DB  0xA,0x46,0x69,0x72,0x6D,0x77,0x61,0x72
000069 2065
00006a 6556
00006b 7372
00006c 6f69      	.DB  0x65,0x20,0x56,0x65,0x72,0x73,0x69,0x6F
00006d 206e
00006e 203a
00006f 3025
000070 312e      	.DB  0x6E,0x20,0x3A,0x20,0x25,0x30,0x2E,0x31
000071 0d66
000072 000a
000073 7543
000074 7272      	.DB  0x66,0xD,0xA,0x0,0x43,0x75,0x72,0x72
000075 6e65
000076 2074
000077 6553
000078 736e      	.DB  0x65,0x6E,0x74,0x20,0x53,0x65,0x6E,0x73
000079 726f
00007a 2020
00007b 3a20
00007c 4120      	.DB  0x6F,0x72,0x20,0x20,0x20,0x3A,0x20,0x41
00007d 5343
00007e 3137
00007f 4532
000080 434c      	.DB  0x43,0x53,0x37,0x31,0x32,0x45,0x4C,0x43
000081 5254
000082 302d
000083 4235
000084 542d      	.DB  0x54,0x52,0x2D,0x30,0x35,0x42,0x2D,0x54
000085 2820
000086 3025
000087 312e
000088 2066      	.DB  0x20,0x28,0x25,0x30,0x2E,0x31,0x66,0x20
000089 566d
00008a 412f
00008b 706d
00008c 292e      	.DB  0x6D,0x56,0x2F,0x41,0x6D,0x70,0x2E,0x29
00008d 0a0d
00008e 0d00
00008f 2b0a
000090 2b2b      	.DB  0xD,0xA,0x0,0xD,0xA,0x2B,0x2B,0x2B
000091 2b2b
000092 2b2b
000093 2b2b
000094 202b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
000095 6d53
000096 7261
000097 2074
000098 6c50      	.DB  0x53,0x6D,0x61,0x72,0x74,0x20,0x50,0x6C
000099 6775
00009a 2b20
00009b 2b2b
00009c 2b2b      	.DB  0x75,0x67,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
00009d 2b2b
00009e 2b2b
00009f 0d2b
0000a0 000a      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0
0000a1 7543
0000a2 7272
0000a3 6e65
0000a4 2074      	.DB  0x43,0x75,0x72,0x72,0x65,0x6E,0x74,0x20
0000a5 6553
0000a6 736e
0000a7 726f
0000a8 2020      	.DB  0x53,0x65,0x6E,0x73,0x6F,0x72,0x20,0x20
0000a9 3a20
0000aa 4120
0000ab 5343
0000ac 3137      	.DB  0x20,0x3A,0x20,0x41,0x43,0x53,0x37,0x31
0000ad 4532
0000ae 434c
0000af 5254
0000b0 322d      	.DB  0x32,0x45,0x4C,0x43,0x54,0x52,0x2D,0x32
0000b1 4130
0000b2 542d
0000b3 2820
0000b4 3025      	.DB  0x30,0x41,0x2D,0x54,0x20,0x28,0x25,0x30
0000b5 312e
0000b6 2066
0000b7 566d
0000b8 412f      	.DB  0x2E,0x31,0x66,0x20,0x6D,0x56,0x2F,0x41
0000b9 706d
0000ba 292e
0000bb 0a0d
0000bc 0d00      	.DB  0x6D,0x70,0x2E,0x29,0xD,0xA,0x0,0xD
0000bd 2b0a
0000be 2b2b
0000bf 2b2b
0000c0 2b2b      	.DB  0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000c1 2b2b
0000c2 202b
0000c3 6d53
0000c4 7261      	.DB  0x2B,0x2B,0x2B,0x20,0x53,0x6D,0x61,0x72
0000c5 2074
0000c6 7242
0000c7 6165
0000c8 656b      	.DB  0x74,0x20,0x42,0x72,0x65,0x61,0x6B,0x65
0000c9 2072
0000ca 2b2b
0000cb 2b2b
0000cc 2b2b      	.DB  0x72,0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000cd 2b2b
0000ce 2b2b
0000cf 0a0d
0000d0 4300      	.DB  0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0,0x43
0000d1 7275
0000d2 6572
0000d3 746e
0000d4 5320      	.DB  0x75,0x72,0x72,0x65,0x6E,0x74,0x20,0x53
0000d5 6e65
0000d6 6f73
0000d7 2072
0000d8 2020      	.DB  0x65,0x6E,0x73,0x6F,0x72,0x20,0x20,0x20
0000d9 203a
0000da 4341
0000db 3753
0000dc 3231      	.DB  0x3A,0x20,0x41,0x43,0x53,0x37,0x31,0x32
0000dd 4c45
0000de 5443
0000df 2d52
0000e0 3033      	.DB  0x45,0x4C,0x43,0x54,0x52,0x2D,0x33,0x30
0000e1 2d41
0000e2 2054
0000e3 2528
0000e4 2e30      	.DB  0x41,0x2D,0x54,0x20,0x28,0x25,0x30,0x2E
0000e5 6631
0000e6 6d20
0000e7 2f56
0000e8 6d41      	.DB  0x31,0x66,0x20,0x6D,0x56,0x2F,0x41,0x6D
0000e9 2e70
0000ea 0d29
0000eb 000a
0000ec 6552      	.DB  0x70,0x2E,0x29,0xD,0xA,0x0,0x52,0x65
0000ed 6461
0000ee 4420
0000ef 7069
0000f0 532d      	.DB  0x61,0x64,0x20,0x44,0x69,0x70,0x2D,0x53
0000f1 6977
0000f2 6374
0000f3 2068
0000f4 5245      	.DB  0x77,0x69,0x74,0x63,0x68,0x20,0x45,0x52
0000f5 4f52
0000f6 2152
0000f7 0a0d
0000f8 0d00      	.DB  0x52,0x4F,0x52,0x21,0xD,0xA,0x0,0xD
0000f9 2b0a
0000fa 2b2b
0000fb 2b2b
0000fc 2b2b      	.DB  0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000fd 2b2b
0000fe 202b
0000ff 6544
000100 6166      	.DB  0x2B,0x2B,0x2B,0x20,0x44,0x65,0x66,0x61
000101 6c75
000102 2074
000103 7954
000104 6570      	.DB  0x75,0x6C,0x74,0x20,0x54,0x79,0x70,0x65
000105 3a20
000106 5320
000107 616d
000108 7472      	.DB  0x20,0x3A,0x20,0x53,0x6D,0x61,0x72,0x74
000109 5320
00010a 6977
00010b 6374
00010c 2068      	.DB  0x20,0x53,0x77,0x69,0x74,0x63,0x68,0x20
00010d 2b2b
00010e 2b2b
00010f 2b2b
000110 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000111 2b2b
000112 0a0d
000113 4300
000114 7275      	.DB  0x2B,0x2B,0xD,0xA,0x0,0x43,0x75,0x72
000115 6572
000116 746e
000117 4d20
000118 6165      	.DB  0x72,0x65,0x6E,0x74,0x20,0x4D,0x65,0x61
000119 7573
00011a 6572
00011b 2020
00011c 203a      	.DB  0x73,0x75,0x72,0x65,0x20,0x20,0x3A,0x20
00011d 203e
00011e 3025
00011f 322e
000120 2066      	.DB  0x3E,0x20,0x25,0x30,0x2E,0x32,0x66,0x20
000121 6d41
000122 2e70
000123 0a0d
000124 0d00      	.DB  0x41,0x6D,0x70,0x2E,0xD,0xA,0x0,0xD
000125 2d0a
000126 2d2d
000127 2d2d
000128 2d2d      	.DB  0xA,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000129 202d
00012a 6e49
00012b 7469
00012c 6169      	.DB  0x2D,0x20,0x49,0x6E,0x69,0x74,0x69,0x61
00012d 206c
00012e 6f43
00012f 706d
000130 656c      	.DB  0x6C,0x20,0x43,0x6F,0x6D,0x70,0x6C,0x65
000131 6574
000132 2d20
000133 2d2d
000134 2d2d      	.DB  0x74,0x65,0x20,0x2D,0x2D,0x2D,0x2D,0x2D
000135 2d2d
000136 0d2d
000137 000a
000138 0a0d      	.DB  0x2D,0x2D,0x2D,0xD,0xA,0x0,0xD,0xA
000139 2d2d
00013a 2d2d
00013b 2d2d
00013c 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00013d 5320
00013e 6174
00013f 7472
000140 5020      	.DB  0x20,0x53,0x74,0x61,0x72,0x74,0x20,0x50
000141 6f72
000142 7267
000143 6d61
000144 2d20      	.DB  0x72,0x6F,0x67,0x72,0x61,0x6D,0x20,0x2D
000145 2d2d
000146 2d2d
000147 2d2d
000148 0d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD
000149 000a
00014a 0a0d
00014b 2d2d
00014c 2d2d      	.DB  0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D,0x2D
00014d 2d2d
00014e 2d2d
00014f 4920
000150 6c64      	.DB  0x2D,0x2D,0x2D,0x2D,0x20,0x49,0x64,0x6C
000151 2065
000152 2d2d
000153 2d2d
000154 2d2d      	.DB  0x65,0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000155 2d2d
000156 0a0d
000157 0d00
000158 2d0a      	.DB  0x2D,0x2D,0xD,0xA,0x0,0xD,0xA,0x2D
000159 2d2d
00015a 2d2d
00015b 2d2d
00015c 202d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x20
00015d 4f50
00015e 2050
00015f 5645
000160 4e45      	.DB  0x50,0x4F,0x50,0x20,0x45,0x56,0x45,0x4E
000161 2054
000162 2d2d
000163 2d2d
000164 2d2d      	.DB  0x54,0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000165 2d2d
000166 0a0d
000167 0d00
000168 2d0a      	.DB  0x2D,0x2D,0xD,0xA,0x0,0xD,0xA,0x2D
000169 2d2d
00016a 2d2d
00016b 2d2d
00016c 202d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x20
00016d 6341
00016e 6974
00016f 6576
000170 2d20      	.DB  0x41,0x63,0x74,0x69,0x76,0x65,0x20,0x2D
000171 2d2d
000172 2d2d
000173 2d2d
000174 0d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD
000175 000a      	.DB  0xA,0x0
                 _0x20000:
000176 3025
000177 6435
000178 2020
000179 0020      	.DB  0x25,0x30,0x35,0x64,0x20,0x20,0x20,0x0
00017a 3025
00017b 5832
00017c 0020
00017d 6325      	.DB  0x25,0x30,0x32,0x58,0x20,0x0,0x25,0x63
00017e 2e00
00017f 0d00
000180 000a      	.DB  0x0,0x2E,0x0,0xD,0xA,0x0
                 _0x60000:
000181 4157
000182 4e52
000183 4e49
000184 2047      	.DB  0x57,0x41,0x52,0x4E,0x49,0x4E,0x47,0x20
000185 203a
000186 4155
000187 5452
000188 2030      	.DB  0x3A,0x20,0x55,0x41,0x52,0x54,0x30,0x20
000189 5542
00018a 4646
00018b 5245
00018c 4f20      	.DB  0x42,0x55,0x46,0x46,0x45,0x52,0x20,0x4F
00018d 4556
00018e 4652
00018f 4f4c
000190 2057      	.DB  0x56,0x45,0x52,0x46,0x4C,0x4F,0x57,0x20
000191 6425
000192 0a0d
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1222): warning: .cseg .db misalignment - padding zero byte
000193 0000      	.DB  0x25,0x64,0xD,0xA,0x0
                 _0x80003:
000194 007e
000195 0804
000196 4101
000197 6c49      	.DB  0x7E,0x0,0x4,0x8,0x1,0x41,0x49,0x6C
                 _0x80004:
000198 007e
000199 0804
00019a 5301
00019b 574c      	.DB  0x7E,0x0,0x4,0x8,0x1,0x53,0x4C,0x57
                 _0x80005:
00019c 007e
00019d 0804
00019e 5301
00019f 5b48      	.DB  0x7E,0x0,0x4,0x8,0x1,0x53,0x48,0x5B
                 _0x80000:
0001a0 0a0d
0001a1 2b20
0001a2 2b2b
0001a3 2b2b      	.DB  0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
0001a4 2b2b
0001a5 2b2b
0001a6 202b
0001a7 6553      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x65
0001a8 646e
0001a9 4120
0001aa 2049
0001ab 2b2b      	.DB  0x6E,0x64,0x20,0x41,0x49,0x20,0x2B,0x2B
0001ac 2b2b
0001ad 2b2b
0001ae 2b2b
0001af 0a0d      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA
0001b0 0d00
0001b1 200a
0001b2 2b2b
0001b3 2b2b      	.DB  0x0,0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B
0001b4 2b2b
0001b5 2b2b
0001b6 2b2b
0001b7 5320      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53
0001b8 6e65
0001b9 2064
0001ba 4853
0001bb 2b20      	.DB  0x65,0x6E,0x64,0x20,0x53,0x48,0x20,0x2B
0001bc 2b2b
0001bd 2b2b
0001be 2b2b
0001bf 0d2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD
0001c0 000a
0001c1 0a0d
0001c2 2b20
0001c3 2b2b      	.DB  0xA,0x0,0xD,0xA,0x20,0x2B,0x2B,0x2B
0001c4 2b2b
0001c5 2b2b
0001c6 2b2b
0001c7 202b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
0001c8 6553
0001c9 646e
0001ca 5320
0001cb 204c      	.DB  0x53,0x65,0x6E,0x64,0x20,0x53,0x4C,0x20
0001cc 2b2b
0001cd 2b2b
0001ce 2b2b
0001cf 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0001d0 0a0d
0001d1 0d00
0001d2 200a
0001d3 2b2b      	.DB  0xD,0xA,0x0,0xD,0xA,0x20,0x2B,0x2B
0001d4 2b2b
0001d5 2b2b
0001d6 2b2b
0001d7 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0001d8 5220
0001d9 6365
0001da 6572
0001db 7669      	.DB  0x20,0x52,0x65,0x63,0x72,0x65,0x69,0x76
0001dc 2065
0001dd 6144
0001de 6174
0001df 2b20      	.DB  0x65,0x20,0x44,0x61,0x74,0x61,0x20,0x2B
0001e0 2b2b
0001e1 2b2b
0001e2 2b2b
0001e3 0d2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD
0001e4 000a      	.DB  0xA,0x0
                 _0xC0003:
0001e5 007e
0001e6 1023
0001e7 0001
0001e8 0000      	.DB  0x7E,0x0,0x23,0x10,0x1,0x0,0x0,0x0
0001e9 0000
0001ea 0000
0001eb ff00
0001ec 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
0001ed 3000
0001ee 0000
0001ef 0000
0001f0 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
0001f1 0000
0001f2 0000
0001f3 0000
0001f4 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001f5 0000
0001f6 007e
0001f7 a101      	.DB  0x0,0x0,0x7E,0x0,0x1,0xA1
                 _0xC0004:
0001f8 007e
0001f9 1023
0001fa 0001
0001fb 0000      	.DB  0x7E,0x0,0x23,0x10,0x1,0x0,0x0,0x0
0001fc 0000
0001fd 0000
0001fe ff00
0001ff 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
000200 3000
000201 0000
000202 0000
000203 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
000204 0000
000205 0000
000206 0000
000207 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000208 0000
000209 007e
00020a a401      	.DB  0x0,0x0,0x7E,0x0,0x1,0xA4
                 _0xC0005:
00020b 007e
00020c 1025
00020d 0001
00020e 0000      	.DB  0x7E,0x0,0x25,0x10,0x1,0x0,0x0,0x0
00020f 0000
000210 0000
000211 ff00
000212 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
000213 3000
000214 0000
000215 0000
000216 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
000217 0000
000218 0000
000219 0000
00021a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00021b 0000
00021c 007e
00021d a501
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1265): warning: .cseg .db misalignment - padding zero byte
00021e 0001      	.DB  0x0,0x0,0x7E,0x0,0x1,0xA5,0x1
                 _0xC0006:
00021f 007e
000220 1048
000221 0001
000222 0000      	.DB  0x7E,0x0,0x48,0x10,0x1,0x0,0x0,0x0
000223 0000
000224 0000
000225 ff00
000226 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
000227 3000
000228 0000
000229 0000
00022a 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
00022b 0000
00022c 0000
00022d 0000
00022e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00022f 0000
000230 007e
000231 a726
000232 0101      	.DB  0x0,0x0,0x7E,0x0,0x26,0xA7,0x1,0x1
000233 0000
000234 0000
000235 0000
000236 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000237 0002
000238 0000
000239 0000
00023a 0000      	.DB  0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00023b 0300
00023c 0000
00023d 0000
00023e 0000      	.DB  0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0
00023f 0000
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1275): warning: .cseg .db misalignment - padding zero byte
000240 0004      	.DB  0x0,0x0,0x4
                 _0xC0000:
000241 0a0d
000242 2b20
000243 2b2b
000244 2b2b      	.DB  0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
000245 2b2b
000246 2b2b
000247 202b
000248 6553      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x65
000249 646e
00024a 4c20
00024b 4445
00024c 2b20      	.DB  0x6E,0x64,0x20,0x4C,0x45,0x44,0x20,0x2B
00024d 2b2b
00024e 2b2b
00024f 2b2b
000250 0d2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD
000251 000a
000252 0a0d
000253 2b20
000254 2b2b      	.DB  0xA,0x0,0xD,0xA,0x20,0x2B,0x2B,0x2B
000255 2b2b
000256 2b2b
000257 2b2b
000258 202b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
000259 6553
00025a 646e
00025b 4a20
00025c 696f      	.DB  0x53,0x65,0x6E,0x64,0x20,0x4A,0x6F,0x69
00025d 206e
00025e 2b2b
00025f 2b2b
000260 2b2b      	.DB  0x6E,0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000261 2b2b
000262 0a0d
000263 0d00
000264 200a      	.DB  0x2B,0x2B,0xD,0xA,0x0,0xD,0xA,0x20
000265 2b2b
000266 2b2b
000267 2b2b
000268 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000269 2b2b
00026a 5320
00026b 6e65
00026c 2064      	.DB  0x2B,0x2B,0x20,0x53,0x65,0x6E,0x64,0x20
00026d 6950
00026e 676e
00026f 2b20
000270 2b2b      	.DB  0x50,0x69,0x6E,0x67,0x20,0x2B,0x2B,0x2B
000271 2b2b
000272 2b2b
000273 0d2b
000274 000a      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0
000275 0a0d
000276 2b20
000277 2b2b
000278 2b2b      	.DB  0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
000279 2b2b
00027a 2b2b
00027b 202b
00027c 6553      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x65
00027d 646e
00027e 4520
00027f 4556
000280 544e      	.DB  0x6E,0x64,0x20,0x45,0x56,0x45,0x4E,0x54
000281 5220
000282 4345
000283 5649
000284 2045      	.DB  0x20,0x52,0x45,0x43,0x49,0x56,0x45,0x20
000285 2b2b
000286 2b2b
000287 2b2b
000288 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000289 0a0d
00028a 0d00
00028b 200a
00028c 2b2b      	.DB  0xD,0xA,0x0,0xD,0xA,0x20,0x2B,0x2B
00028d 2b2b
00028e 2b2b
00028f 2b2b
000290 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000291 5320
000292 6e65
000293 2064
000294 4552      	.DB  0x20,0x53,0x65,0x6E,0x64,0x20,0x52,0x45
000295 4f50
000296 5452
000297 2b20
000298 2b2b      	.DB  0x50,0x4F,0x52,0x54,0x20,0x2B,0x2B,0x2B
000299 2b2b
00029a 2b2b
00029b 0d2b
00029c 000a      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0
00029d 0a0d
00029e 3d3d
00029f 3d3d
0002a0 3d3d      	.DB  0xD,0xA,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002a1 3d3d
0002a2 3d3d
0002a3 3d3d
0002a4 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002a5 3d3d
0002a6 3d3d
0002a7 3d3d
0002a8 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002a9 3d3d
0002aa 3d3d
0002ab 3d3d
0002ac 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002ad 3d3d
0002ae 3d3d
0002af 3d3d
0002b0 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002b1 3d3d
0002b2 3d3d
0002b3 3d3d
0002b4 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002b5 3d3d
0002b6 3d3d
0002b7 3d3d
0002b8 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002b9 0a0d
0002ba 5600
0002bb 7573
0002bc 206d      	.DB  0xD,0xA,0x0,0x56,0x73,0x75,0x6D,0x20
0002bd 203d
0002be 3025
0002bf 342e
0002c0 2066      	.DB  0x3D,0x20,0x25,0x30,0x2E,0x34,0x66,0x20
0002c1 0020
0002c2 7349
0002c3 6d75
0002c4 3d20      	.DB  0x20,0x0,0x49,0x73,0x75,0x6D,0x20,0x3D
0002c5 2520
0002c6 2e30
0002c7 6634
0002c8 2020      	.DB  0x20,0x25,0x30,0x2E,0x34,0x66,0x20,0x20
0002c9 5000
0002ca 7573
0002cb 206d
0002cc 203d      	.DB  0x0,0x50,0x73,0x75,0x6D,0x20,0x3D,0x20
0002cd 3025
0002ce 342e
0002cf 0d66
0002d0 000a      	.DB  0x25,0x30,0x2E,0x34,0x66,0xD,0xA,0x0
0002d1 6156
0002d2 6776
0002d3 3d20
0002d4 2520      	.DB  0x56,0x61,0x76,0x67,0x20,0x3D,0x20,0x25
0002d5 2e30
0002d6 6634
0002d7 2020
0002d8 0020      	.DB  0x30,0x2E,0x34,0x66,0x20,0x20,0x20,0x0
0002d9 6149
0002da 6776
0002db 3d20
0002dc 2520      	.DB  0x49,0x61,0x76,0x67,0x20,0x3D,0x20,0x25
0002dd 2e30
0002de 6634
0002df 2020
0002e0 0020      	.DB  0x30,0x2E,0x34,0x66,0x20,0x20,0x20,0x0
0002e1 6150
0002e2 6776
0002e3 3d20
0002e4 2520      	.DB  0x50,0x61,0x76,0x67,0x20,0x3D,0x20,0x25
0002e5 2e30
0002e6 6634
0002e7 0a0d
0002e8 5700      	.DB  0x30,0x2E,0x34,0x66,0xD,0xA,0x0,0x57
0002e9 7461
0002ea 2d74
0002eb 6f48
0002ec 7275      	.DB  0x61,0x74,0x74,0x2D,0x48,0x6F,0x75,0x72
0002ed 5320
0002ee 6d75
0002ef 3d20
0002f0 2520      	.DB  0x20,0x53,0x75,0x6D,0x20,0x3D,0x20,0x25
0002f1 2e30
0002f2 6634
0002f3 0a0d
0002f4 4e00      	.DB  0x30,0x2E,0x34,0x66,0xD,0xA,0x0,0x4E
0002f5 6d75
0002f6 6562
0002f7 2072
0002f8 6153      	.DB  0x75,0x6D,0x62,0x65,0x72,0x20,0x53,0x61
0002f9 706d
0002fa 696c
0002fb 676e
0002fc 3d20      	.DB  0x6D,0x70,0x6C,0x69,0x6E,0x67,0x20,0x3D
0002fd 2520
0002fe 0d64
0002ff 000a
000300 3d3d      	.DB  0x20,0x25,0x64,0xD,0xA,0x0,0x3D,0x3D
000301 3d3d
000302 3d3d
000303 3d3d
000304 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000305 3d3d
000306 3d3d
000307 3d3d
000308 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000309 3d3d
00030a 3d3d
00030b 3d3d
00030c 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00030d 3d3d
00030e 3d3d
00030f 3d3d
000310 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000311 3d3d
000312 3d3d
000313 3d3d
000314 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000315 3d3d
000316 3d3d
000317 3d3d
000318 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000319 3d3d
00031a 3d3d
00031b 0a0d
00031c 0a0d      	.DB  0x3D,0x3D,0x3D,0x3D,0xD,0xA,0xD,0xA
00031d 4300
00031e 7275
00031f 6572
000320 746e      	.DB  0x0,0x43,0x75,0x72,0x72,0x65,0x6E,0x74
000321 4520
000322 6378
000323 6565
000324 2064      	.DB  0x20,0x45,0x78,0x63,0x65,0x65,0x64,0x20
000325 2d2d
000326 5753
000327 5449
000328 4843      	.DB  0x2D,0x2D,0x53,0x57,0x49,0x54,0x43,0x48
000329 4f20
00032a 4646
00032b 0d21
00032c 000a      	.DB  0x20,0x4F,0x46,0x46,0x21,0xD,0xA,0x0
                 _0xE0003:
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1337): warning: .cseg .db misalignment - padding zero byte
00032d 0040      	.DB  0x40
                 _0x100003:
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1339): warning: .cseg .db misalignment - padding zero byte
00032e 0005      	.DB  0x5
                 _0x120003:
00032f 4000
000330 451c      	.DB  0x0,0x40,0x1C,0x45
                 _0x120000:
000331 4441
000332 2043
000333 203d
000334 6425      	.DB  0x41,0x44,0x43,0x20,0x3D,0x20,0x25,0x64
000335 0a0d
000336 5600
000337 6c6f
000338 2074      	.DB  0xD,0xA,0x0,0x56,0x6F,0x6C,0x74,0x20
000339 203d
00033a 6625
00033b 0a0d
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1345): warning: .cseg .db misalignment - padding zero byte
00033c 0000      	.DB  0x3D,0x20,0x25,0x66,0xD,0xA,0x0
                 _0x140000:
00033d 5645
00033e 4e45
00033f 2054
000340 203d      	.DB  0x45,0x56,0x45,0x4E,0x54,0x20,0x3D,0x20
000341 6425
000342 0a0d
000343 6300
000344 756f      	.DB  0x25,0x64,0xD,0xA,0x0,0x63,0x6F,0x75
000345 746e
000346 655f
000347 6576
000348 746e      	.DB  0x6E,0x74,0x5F,0x65,0x76,0x65,0x6E,0x74
000349 3d20
00034a 2520
00034b 0d64
00034c 000a      	.DB  0x20,0x3D,0x20,0x25,0x64,0xD,0xA,0x0
00034d 0a0d
00034e 2d2d
00034f 2d2d
000350 2d2d      	.DB  0xD,0xA,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000351 2d2d
000352 4a20
000353 494f
000354 544e      	.DB  0x2D,0x2D,0x20,0x4A,0x4F,0x49,0x4E,0x54
000355 5320
000356 4355
000357 4543
000358 5353      	.DB  0x20,0x53,0x55,0x43,0x43,0x45,0x53,0x53
000359 2d20
00035a 2d2d
00035b 2d2d
00035c 2d2d      	.DB  0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00035d 0d2d
00035e 000a
00035f 0a0d
000360 2d2d      	.DB  0x2D,0xD,0xA,0x0,0xD,0xA,0x2D,0x2D
000361 2d2d
000362 2d2d
000363 2d2d
000364 5220      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x20,0x52
000365 4345
000366 5649
000367 2045
000368 4950      	.DB  0x45,0x43,0x49,0x56,0x45,0x20,0x50,0x49
000369 474e
00036a 2d20
00036b 2d2d
00036c 2d2d      	.DB  0x4E,0x47,0x20,0x2D,0x2D,0x2D,0x2D,0x2D
00036d 2d2d
00036e 0d2d
00036f 000a
000370 0a0d      	.DB  0x2D,0x2D,0x2D,0xD,0xA,0x0,0xD,0xA
000371 2d2d
000372 2d2d
000373 2d2d
000374 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000375 5220
000376 4345
000377 5649
000378 2045      	.DB  0x20,0x52,0x45,0x43,0x49,0x56,0x45,0x20
000379 5645
00037a 4e45
00037b 2054
00037c 2d2d      	.DB  0x45,0x56,0x45,0x4E,0x54,0x20,0x2D,0x2D
00037d 2d2d
00037e 2d2d
00037f 2d2d
000380 0a0d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD,0xA
000381 0d00
000382 2d0a
000383 2d2d
000384 2d2d      	.DB  0x0,0xD,0xA,0x2D,0x2D,0x2D,0x2D,0x2D
000385 2d2d
000386 202d
000387 4553
000388 444e      	.DB  0x2D,0x2D,0x2D,0x20,0x53,0x45,0x4E,0x44
000389 4520
00038a 4556
00038b 544e
00038c 2d20      	.DB  0x20,0x45,0x56,0x45,0x4E,0x54,0x20,0x2D
00038d 2d2d
00038e 2d2d
00038f 2d2d
000390 0d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD
000391 000a
000392 0a0d
000393 2d2d
000394 2d2d      	.DB  0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D,0x2D
000395 2d2d
000396 2d2d
000397 5320
000398 4e45      	.DB  0x2D,0x2D,0x2D,0x2D,0x20,0x53,0x45,0x4E
000399 2044
00039a 4552
00039b 4f50
00039c 5452      	.DB  0x44,0x20,0x52,0x45,0x50,0x4F,0x52,0x54
00039d 5320
00039e 4355
00039f 4543
0003a0 5353      	.DB  0x20,0x53,0x55,0x43,0x43,0x45,0x53,0x53
0003a1 2d20
0003a2 2d2d
0003a3 2d2d
0003a4 2d2d      	.DB  0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
0003a5 0d2d
0003a6 000a      	.DB  0x2D,0xD,0xA,0x0
                 _0x2000060:
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1375): warning: .cseg .db misalignment - padding zero byte
0003a7 0001      	.DB  0x1
                 _0x2000000:
0003a8 4e2d
0003a9 4e41
0003aa 4900
0003ab 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1378): warning: .cseg .db misalignment - padding zero byte
0003ac 0000      	.DB  0x0
                 _0x2020000:
0003ad 4e2d
0003ae 4e41
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1380): warning: .cseg .db misalignment - padding zero byte
0003af 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 
                 __GLOBAL_INI_TBL:
0003b0 0001      	.DW  0x01
0003b1 0002      	.DW  0x02
0003b2 008c      	.DW  __REG_BIT_VARS*2
                 
0003b3 0004      	.DW  0x04
0003b4 0d00      	.DW  0xD00
0003b5 008e      	.DW  __HEAP_START_MARKER*2
                 
0003b6 000d      	.DW  0x0D
0003b7 08df      	.DW  _specData
0003b8 0092      	.DW  _0x3*2
                 
0003b9 0002      	.DW  0x02
0003ba 0008      	.DW  0x08
0003bb 00a0      	.DW  _0x4D*2
                 
0003bc 0008      	.DW  0x08
0003bd 08ec      	.DW  _AI_COMMAND
0003be 0328      	.DW  _0x80003*2
                 
0003bf 0008      	.DW  0x08
0003c0 08f4      	.DW  _SL_COMMAND
0003c1 0330      	.DW  _0x80004*2
                 
0003c2 0008      	.DW  0x08
0003c3 08fc      	.DW  _SH_COMMAND
0003c4 0338      	.DW  _0x80005*2
                 
0003c5 0026      	.DW  0x26
0003c6 0904      	.DW  _JOIN_A1
0003c7 03ca      	.DW  _0xC0003*2
                 
0003c8 0026      	.DW  0x26
0003c9 092b      	.DW  _PING_A4
0003ca 03f0      	.DW  _0xC0004*2
                 
0003cb 0027      	.DW  0x27
0003cc 0952      	.DW  _SEND_EVENT_
0003cd 0416      	.DW  _0xC0005*2
                 
0003ce 0043      	.DW  0x43
0003cf 097b      	.DW  _SEND_REPORT_
0003d0 043e      	.DW  _0xC0006*2
                 
0003d1 0001      	.DW  0x01
0003d2 09e7      	.DW  _Vreferent
0003d3 065a      	.DW  _0xE0003*2
                 
0003d4 0001      	.DW  0x01
0003d5 089e      	.DW  _Eaddress
0003d6 065c      	.DW  _0x100003*2
                 
0003d7 0004      	.DW  0x04
0003d8 0840      	.DW  _avg
0003d9 065e      	.DW  _0x120003*2
                 
0003da 0001      	.DW  0x01
0003db 09e8      	.DW  __seed_G100
0003dc 074e      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
0003dd 0000      	.DW  0
                 
                 __RESET:
0003de 94f8      	CLI
0003df 27ee      	CLR  R30
0003e0 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0003e1 e0f1      	LDI  R31,1
0003e2 bff5      	OUT  MCUCR,R31
0003e3 bfe5      	OUT  MCUCR,R30
0003e4 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
0003e6 e1f8      	LDI  R31,0x18
0003e7 bdf1      	OUT  WDTCR,R31
0003e8 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0003e9 e08d      	LDI  R24,(14-2)+1
0003ea e0a2      	LDI  R26,2
0003eb 27bb      	CLR  R27
                 __CLEAR_REG:
0003ec 93ed      	ST   X+,R30
0003ed 958a      	DEC  R24
0003ee f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0003ef e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0003f0 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0003f1 e0a0      	LDI  R26,LOW(__SRAM_START)
0003f2 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
0003f3 93ed      	ST   X+,R30
0003f4 9701      	SBIW R24,1
0003f5 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0003f6 e6e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0003f7 e0f7      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0003f8 9185      	LPM  R24,Z+
0003f9 9195      	LPM  R25,Z+
0003fa 9700      	SBIW R24,0
0003fb f061      	BREQ __GLOBAL_INI_END
0003fc 91a5      	LPM  R26,Z+
0003fd 91b5      	LPM  R27,Z+
0003fe 9005      	LPM  R0,Z+
0003ff 9015      	LPM  R1,Z+
000400 01bf      	MOVW R22,R30
000401 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000402 9005      	LPM  R0,Z+
000403 920d      	ST   X+,R0
000404 9701      	SBIW R24,1
000405 f7e1      	BRNE __GLOBAL_INI_LOOP
000406 01fb      	MOVW R30,R22
000407 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000408 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000409 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00040a bfed      	OUT  SPL,R30
00040b e0ec      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00040c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00040d e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00040e e0d6      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00040f 940c 0428 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x600
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Project         : Smart_Plug
                 ;Date            : 9/2017
                 ;Author          : Krerkkiat Hemadhulin
                 ;Company         : NextCrop Co.,Ltd.
                 ;Comments        :
                 ;Version Format  :
                 ;Chip type       : ATmega128a
                 ;Program type    : Application
                 ;Frequency       : 11.059200 MHz
                 ;*****************************************************/
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <main.h>
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <sleep.h>
                 ;#include <io.h>
                 ;#include <math.h>
                 ;#include <initial_system.h>
                 ;#include <int_protocol.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <timer.h>
                 ;#include <adc.h>
                 ;#include <eeprom.h>
                 ;#include <meansure.h>
                 ;#include <queue.h>
                 ;#define SWITCH_PRESSED !(PINC & (1<<PINC0))
                 ;
                 ;uint8_t SWITCH          = TURN_OFF;
                 ;uint8_t specData[]      = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF};   // Specific Stucture of Join Req packet
                 
                 	.DSEG
                 ;uint8_t error;
                 ;int8_t read_D_SW;
                 ;int start_event;
                 ;int counter = 0;
                 ;//int e = 0;
                 ;//uint8_t SEND_EVENT_TEST[38];
                 ;
                 ;void device_state(int state){
                 ; 0000 002B void device_state(int state){
                 
                 	.CSEG
                 _device_state:
                 ; 0000 002C     if(state == 0){
000411 940e 15ff 	CALL SUBOPT_0x0
                 ;	state -> Y+0
000413 f429      	BRNE _0x4
                 ; 0000 002D         POWER_RELAY_OFF;
000414 940e 1605 	CALL SUBOPT_0x1
                 ; 0000 002E         LED_STAT_OFF;
000416 9aaf      	SBI  0x15,7
                 ; 0000 002F         STATUS_DEVICE = 0;
000417 e0e0      	LDI  R30,LOW(0)
000418 c00b      	RJMP _0x44
                 ; 0000 0030     }else if(state == 1){
                 _0x4:
000419 81a8      	LD   R26,Y
00041a 81b9      	LDD  R27,Y+1
00041b 9711      	SBIW R26,1
00041c f449      	BRNE _0x8
                 ; 0000 0031         POWER_RELAY_ON;
00041d 91e0 0065 	LDS  R30,101
00041f 60e4      	ORI  R30,4
000420 93e0 0065 	STS  101,R30
                 ; 0000 0032         LED_STAT_ON;
000422 98af      	CBI  0x15,7
                 ; 0000 0033         STATUS_DEVICE = 1;
000423 e0e1      	LDI  R30,LOW(1)
                 _0x44:
000424 93e0 0892 	STS  _STATUS_DEVICE,R30
                 ; 0000 0034     }
                 ; 0000 0035 
                 ; 0000 0036 }
                 _0x8:
000426 940c 08ad 	JMP  _0x20C0010
                 ;void main(void) {
                 ; 0000 0037 void main(void) {
                 _main:
                 ; 0000 0038 
                 ; 0000 0039     start_event = 0;
000428 2466      	CLR  R6
000429 2477      	CLR  R7
                 ; 0000 003A     STATUS_DEVICE = EEPROM_read(Eaddress);
00042a 940e 160b 	CALL SUBOPT_0x2
                 ; 0000 003B     if(STATUS_DEVICE == 0xFF){
00042c 91a0 0892 	LDS  R26,_STATUS_DEVICE
00042e 3faf      	CPI  R26,LOW(0xFF)
00042f f439      	BRNE _0xB
                 ; 0000 003C         EEPROM_write(Eaddress,0);
000430 940e 1613 	CALL SUBOPT_0x3
000432 e0a0      	LDI  R26,LOW(0)
000433 940e 0d8f 	CALL _EEPROM_write
                 ; 0000 003D         STATUS_DEVICE = EEPROM_read(Eaddress);
000435 940e 160b 	CALL SUBOPT_0x2
                 ; 0000 003E     }
                 ; 0000 003F 
                 ; 0000 0040     /*=============== System Initialize ===============*/
                 ; 0000 0041     do{ error = initial_system(); }while(error);
                 _0xB:
                 _0xD:
000437 940e 0a11 	CALL _initial_system
000439 2e5e      	MOV  R5,R30
00043a 2055      	TST  R5
00043b f7d9      	BRNE _0xD
                 ; 0000 0042 
                 ; 0000 0043     /*=============== Select Device Type ===============*/
                 ; 0000 0044 
                 ; 0000 0045     do {
                 _0x10:
                 ; 0000 0046         read_D_SW = read_dSwitch();
00043c 940e 0a48 	CALL _read_dSwitch
00043e 2e4e      	MOV  R4,R30
                 ; 0000 0047         if(read_D_SW == 0x0F) {
00043f e0ef      	LDI  R30,LOW(15)
000440 15e4      	CP   R30,R4
000441 f531      	BRNE _0x12
                 ; 0000 0048             SENSOR_SENSITIVE = SENSOR5A;
000442 940e 1619 	CALL SUBOPT_0x4
                 ; 0000 0049             if((ADJ0_SENSOR5A > 0.0) && (ADJ0_SENSOR5A < 0.12)) {
000444 940e 162a 	CALL SUBOPT_0x5
000446 f44c      	BRGE _0x14
000447 01df      	MOVW R26,R30
000448 01cb      	MOVW R24,R22
                +
000449 e8ef     +LDI R30 , LOW ( 0x3DF5C28F )
00044a ecf2     +LDI R31 , HIGH ( 0x3DF5C28F )
00044b ef65     +LDI R22 , BYTE3 ( 0x3DF5C28F )
00044c e37d     +LDI R23 , BYTE4 ( 0x3DF5C28F )
                 	__GETD1N 0x3DF5C28F
00044d 940e 1b9b 	CALL __CMPF12
00044f f008      	BRLO _0x15
                 _0x14:
000450 c005      	RJMP _0x13
                 _0x15:
                 ; 0000 004A                 AMP_ADJ_ZERO = ADJ0_SENSOR5A;
000451 e0a0      	LDI  R26,LOW(_ADJ0_SENSOR5A)
000452 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR5A)
000453 940e 1cd4 	CALL __EEPROMRDD
000455 c004      	RJMP _0x45
                 ; 0000 004B             }else {AMP_ADJ_ZERO = 0.09;}
                 _0x13:
                +
000456 eeec     +LDI R30 , LOW ( 0x3DB851EC )
000457 e5f1     +LDI R31 , HIGH ( 0x3DB851EC )
000458 eb68     +LDI R22 , BYTE3 ( 0x3DB851EC )
000459 e37d     +LDI R23 , BYTE4 ( 0x3DB851EC )
                 	__GETD1N 0x3DB851EC
                 _0x45:
00045a 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
00045c 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
00045e 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
000460 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 004C             specData[8] = TYPE_SMART_SWITCH;                             // Device Type
000462 e1e2      	LDI  R30,LOW(18)
                +
000463 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 004D             printDebug("\r\n++++++++++ Smart Switch ++++++++++\r\n");
                +
000465 eae2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000466 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000467 c081      	RJMP _0x46
                 ; 0000 004E             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                 ; 0000 004F             printDebug("Current Sensor   : ACS712ELCTR-05B-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                 ; 0000 0050         }else if(read_D_SW == 0x0E) {
                 _0x12:
000468 e0ee      	LDI  R30,LOW(14)
000469 15e4      	CP   R30,R4
00046a f591      	BRNE _0x18
                 ; 0000 0051             SENSOR_SENSITIVE = SENSOR20A;
                +
00046b e0e0     +LDI R30 , LOW ( 0x42C80000 )
00046c e0f0     +LDI R31 , HIGH ( 0x42C80000 )
00046d ec68     +LDI R22 , BYTE3 ( 0x42C80000 )
00046e e472     +LDI R23 , BYTE4 ( 0x42C80000 )
                 	__GETD1N 0x42C80000
00046f 940e 162f 	CALL SUBOPT_0x6
                 ; 0000 0052             if((ADJ0_SENSOR20A > 0.0) && (ADJ0_SENSOR20A < 0.14)) {
000471 e0a4      	LDI  R26,LOW(_ADJ0_SENSOR20A)
000472 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR20A)
000473 940e 1cd4 	CALL __EEPROMRDD
000475 940e 162a 	CALL SUBOPT_0x5
000477 f44c      	BRGE _0x1A
000478 01df      	MOVW R26,R30
000479 01cb      	MOVW R24,R22
                +
00047a e2e9     +LDI R30 , LOW ( 0x3E0F5C29 )
00047b e5fc     +LDI R31 , HIGH ( 0x3E0F5C29 )
00047c e06f     +LDI R22 , BYTE3 ( 0x3E0F5C29 )
00047d e37e     +LDI R23 , BYTE4 ( 0x3E0F5C29 )
                 	__GETD1N 0x3E0F5C29
00047e 940e 1b9b 	CALL __CMPF12
000480 f008      	BRLO _0x1B
                 _0x1A:
000481 c005      	RJMP _0x19
                 _0x1B:
                 ; 0000 0053                 AMP_ADJ_ZERO = ADJ0_SENSOR20A;
000482 e0a4      	LDI  R26,LOW(_ADJ0_SENSOR20A)
000483 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR20A)
000484 940e 1cd4 	CALL __EEPROMRDD
000486 c004      	RJMP _0x47
                 ; 0000 0054             }else {AMP_ADJ_ZERO = 0.11;}
                 _0x19:
                +
000487 eaee     +LDI R30 , LOW ( 0x3DE147AE )
000488 e4f7     +LDI R31 , HIGH ( 0x3DE147AE )
000489 ee61     +LDI R22 , BYTE3 ( 0x3DE147AE )
00048a e37d     +LDI R23 , BYTE4 ( 0x3DE147AE )
                 	__GETD1N 0x3DE147AE
                 _0x47:
00048b 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
00048d 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
00048f 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
000491 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 0055             specData[8] = TYPE_SMART_PLUG;                               // Device Type
000493 e1e1      	LDI  R30,LOW(17)
                +
000494 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 0056             printDebug("\r\n++++++++++ Smart Plug ++++++++++\r\n");
                +
000496 e1ed     +LDI R30 , LOW ( 2 * _0x0 + ( 123 ) )
000497 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 123 ) )
                 	__POINTW1FN _0x0,123
000498 940e 1638 	CALL SUBOPT_0x7
                 ; 0000 0057             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                 ; 0000 0058             printDebug("Current Sensor   : ACS712ELCTR-20A-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
00049a e4e2     +LDI R30 , LOW ( 2 * _0x0 + ( 160 ) )
00049b e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 160 ) )
                 	__POINTW1FN _0x0,160
00049c c05b      	RJMP _0x48
                 ; 0000 0059         }else if(read_D_SW == 0x0D) {
                 _0x18:
00049d e0ed      	LDI  R30,LOW(13)
00049e 15e4      	CP   R30,R4
00049f f591      	BRNE _0x1E
                 ; 0000 005A             SENSOR_SENSITIVE = SENSOR30A;
                +
0004a0 e0e0     +LDI R30 , LOW ( 0x42840000 )
0004a1 e0f0     +LDI R31 , HIGH ( 0x42840000 )
0004a2 e864     +LDI R22 , BYTE3 ( 0x42840000 )
0004a3 e472     +LDI R23 , BYTE4 ( 0x42840000 )
                 	__GETD1N 0x42840000
0004a4 940e 162f 	CALL SUBOPT_0x6
                 ; 0000 005B             if((ADJ0_SENSOR30A > 0.0) && (ADJ0_SENSOR30A < 0.15)) {
0004a6 e0a8      	LDI  R26,LOW(_ADJ0_SENSOR30A)
0004a7 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR30A)
0004a8 940e 1cd4 	CALL __EEPROMRDD
0004aa 940e 162a 	CALL SUBOPT_0x5
0004ac f44c      	BRGE _0x20
0004ad 01df      	MOVW R26,R30
0004ae 01cb      	MOVW R24,R22
                +
0004af e9ea     +LDI R30 , LOW ( 0x3E19999A )
0004b0 e9f9     +LDI R31 , HIGH ( 0x3E19999A )
0004b1 e169     +LDI R22 , BYTE3 ( 0x3E19999A )
0004b2 e37e     +LDI R23 , BYTE4 ( 0x3E19999A )
                 	__GETD1N 0x3E19999A
0004b3 940e 1b9b 	CALL __CMPF12
0004b5 f008      	BRLO _0x21
                 _0x20:
0004b6 c005      	RJMP _0x1F
                 _0x21:
                 ; 0000 005C                 AMP_ADJ_ZERO = ADJ0_SENSOR30A;
0004b7 e0a8      	LDI  R26,LOW(_ADJ0_SENSOR30A)
0004b8 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR30A)
0004b9 940e 1cd4 	CALL __EEPROMRDD
0004bb c004      	RJMP _0x49
                 ; 0000 005D             }else {AMP_ADJ_ZERO = 0.12;}
                 _0x1F:
                +
0004bc e8ef     +LDI R30 , LOW ( 0x3DF5C28F )
0004bd ecf2     +LDI R31 , HIGH ( 0x3DF5C28F )
0004be ef65     +LDI R22 , BYTE3 ( 0x3DF5C28F )
0004bf e37d     +LDI R23 , BYTE4 ( 0x3DF5C28F )
                 	__GETD1N 0x3DF5C28F
                 _0x49:
0004c0 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
0004c2 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
0004c4 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
0004c6 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 005E             specData[8] = TYPE_SMART_BREAKER;                            // Device Type
0004c8 e1e3      	LDI  R30,LOW(19)
                +
0004c9 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 005F             printDebug("\r\n++++++++++ Smart Breaker ++++++++++\r\n");
                +
0004cb e7e9     +LDI R30 , LOW ( 2 * _0x0 + ( 215 ) )
0004cc e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 215 ) )
                 	__POINTW1FN _0x0,215
0004cd 940e 1638 	CALL SUBOPT_0x7
                 ; 0000 0060             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                 ; 0000 0061             printDebug("Current Sensor   : ACS712ELCTR-30A-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
0004cf eae1     +LDI R30 , LOW ( 2 * _0x0 + ( 255 ) )
0004d0 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 255 ) )
                 	__POINTW1FN _0x0,255
0004d1 c026      	RJMP _0x48
                 ; 0000 0062         }else if(read_D_SW < 0) {
                 _0x1E:
0004d2 e0e0      	LDI  R30,LOW(0)
0004d3 164e      	CP   R4,R30
0004d4 f42c      	BRGE _0x24
                 ; 0000 0063             printDebug("Read Dip-Switch ERROR!\r\n");
                +
0004d5 ede8     +LDI R30 , LOW ( 2 * _0x0 + ( 310 ) )
0004d6 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 310 ) )
                 	__POINTW1FN _0x0,310
0004d7 940e 164d 	CALL SUBOPT_0x8
                 ; 0000 0064         }else {
0004d9 c024      	RJMP _0x25
                 _0x24:
                 ; 0000 0065             SENSOR_SENSITIVE = SENSOR5A;
0004da 940e 1619 	CALL SUBOPT_0x4
                 ; 0000 0066             AMP_ADJ_ZERO = ADJ0_SENSOR5A;
0004dc 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
0004de 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
0004e0 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
0004e2 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 0067             specData[8] = TYPE_SMART_SWITCH;
0004e4 e1e2      	LDI  R30,LOW(18)
                +
0004e5 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 0068             printDebug("\r\n++++++++++ Default Type : Smart Switch ++++++++++\r\n");
                +
0004e7 efe1     +LDI R30 , LOW ( 2 * _0x0 + ( 335 ) )
0004e8 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 335 ) )
                 	__POINTW1FN _0x0,335
                 _0x46:
0004e9 93fa      	ST   -Y,R31
0004ea 93ea      	ST   -Y,R30
0004eb e080      	LDI  R24,0
0004ec d106      	RCALL _printDebug
0004ed 9622      	ADIW R28,2
                 ; 0000 0069             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                +
0004ee ece9     +LDI R30 , LOW ( 2 * _0x0 + ( 39 ) )
0004ef e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 39 ) )
                 	__POINTW1FN _0x0,39
0004f0 93fa      	ST   -Y,R31
0004f1 93ea      	ST   -Y,R30
0004f2 940e 1654 	CALL SUBOPT_0x9
0004f4 940e 1659 	CALL SUBOPT_0xA
                 ; 0000 006A             printDebug("Current Sensor   : ACS712ELCTR-05B-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
0004f6 eee6     +LDI R30 , LOW ( 2 * _0x0 + ( 68 ) )
0004f7 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 68 ) )
                 	__POINTW1FN _0x0,68
                 _0x48:
0004f8 93fa      	ST   -Y,R31
0004f9 93ea      	ST   -Y,R30
0004fa 940e 1660 	CALL SUBOPT_0xB
0004fc 940e 1659 	CALL SUBOPT_0xA
                 ; 0000 006B         }
                 _0x25:
                 ; 0000 006C     }while(read_D_SW < 0);
0004fe e0e0      	LDI  R30,LOW(0)
0004ff 164e      	CP   R4,R30
000500 f40c      	BRGE _0x11
000501 cf3a      	RJMP _0x10
                 _0x11:
                 ; 0000 006D 
                 ; 0000 006E     /*=============== Current Measurement ===============*/
                 ; 0000 006F     printDebug("Current Measure  : > %0.2f Amp.\r\n", AMP_ADJ_ZERO);
                +
000502 e2e7     +LDI R30 , LOW ( 2 * _0x0 + ( 389 ) )
000503 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 389 ) )
                 	__POINTW1FN _0x0,389
000504 93fa      	ST   -Y,R31
000505 93ea      	ST   -Y,R30
000506 940e 1669 	CALL SUBOPT_0xC
000508 940e 1659 	CALL SUBOPT_0xA
                 ; 0000 0070 
                 ; 0000 0071 
                 ; 0000 0072     #asm("sei")    // Global enable interrupts
00050a 9478      	sei
                 ; 0000 0073 
                 ; 0000 0074     printDebug("\r\n-------- Initial Complete --------\r\n");
                +
00050b e4e9     +LDI R30 , LOW ( 2 * _0x0 + ( 423 ) )
00050c e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 423 ) )
                 	__POINTW1FN _0x0,423
00050d 940e 164d 	CALL SUBOPT_0x8
                 ; 0000 0075     delay_ms(5000);
00050f e8a8      	LDI  R26,LOW(5000)
000510 e1b3      	LDI  R27,HIGH(5000)
000511 940e 19eb 	CALL _delay_ms
                 ; 0000 0076 
                 ; 0000 0077     printDebug("\r\n-------- Start Program --------\r\n");
                +
000513 e7e0     +LDI R30 , LOW ( 2 * _0x0 + ( 462 ) )
000514 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 462 ) )
                 	__POINTW1FN _0x0,462
000515 940e 164d 	CALL SUBOPT_0x8
                 ; 0000 0078     while(1) {
                 _0x26:
                 ; 0000 0079         xbee_read();
000517 940e 09cd 	CALL _xbee_read
                 ; 0000 007A 
                 ; 0000 007B //        if(counter%111 == 0 && counter >= 111){
                 ; 0000 007C //        if(e%2 == 0){
                 ; 0000 007D //            SEND_EVENT_TEST[2] = 0x90;
                 ; 0000 007E //            SEND_EVENT_TEST[3] = 0x90;
                 ; 0000 007F //            SEND_EVENT_TEST[35] = 0xA5;
                 ; 0000 0080 //            SEND_EVENT_TEST[36] = 0x01;
                 ; 0000 0081 //            SEND_EVENT_TEST[37] = 0x01;
                 ; 0000 0082 //            xbee_receivePacket(SEND_EVENT_TEST,38);
                 ; 0000 0083 //        }else{
                 ; 0000 0084 //            SEND_EVENT_TEST[2] = 0x90;
                 ; 0000 0085 //            SEND_EVENT_TEST[3] = 0x90;
                 ; 0000 0086 //            SEND_EVENT_TEST[35] = 0xA5;
                 ; 0000 0087 //            SEND_EVENT_TEST[36] = 0x01;
                 ; 0000 0088 //            SEND_EVENT_TEST[37] = 0x00;
                 ; 0000 0089 //            xbee_receivePacket(SEND_EVENT_TEST,38);
                 ; 0000 008A //       }
                 ; 0000 008B //       e++;
                 ; 0000 008C //}
                 ; 0000 008D         switch (flag_state) {
000519 91e0 062a 	LDS  R30,_flag_state
00051b 91f0 062b 	LDS  R31,_flag_state+1
                 ; 0000 008E 
                 ; 0000 008F             /*=============== Send AI ===============*/
                 ; 0000 0090             case 0 :
00051d 9730      	SBIW R30,0
00051e f4c1      	BRNE _0x2C
                 ; 0000 0091                 xbee_sendATCommand(AI);
00051f 940e 1672 	CALL SUBOPT_0xD
000521 940e 1675 	CALL SUBOPT_0xE
                 ; 0000 0092                 delay_ms(100);
                 ; 0000 0093 
                 ; 0000 0094                 /*=============== Check last state from eeprom ===============*/
                 ; 0000 0095 
                 ; 0000 0096                 if(STATUS_DEVICE == 1){
000523 91a0 0892 	LDS  R26,_STATUS_DEVICE
000525 30a1      	CPI  R26,LOW(0x1)
000526 f479      	BRNE _0x2D
                 ; 0000 0097                     delay_ms(100);
000527 940e 167b 	CALL SUBOPT_0xF
                 ; 0000 0098                     device_state(1);   //on
000529 940e 167f 	CALL SUBOPT_0x10
00052b 940e 1682 	CALL SUBOPT_0x11
                 ; 0000 0099                     EEPROM_write(Eaddress,STATUS_DEVICE);
00052d 940e 1685 	CALL SUBOPT_0x12
                 ; 0000 009A                     start_event = 1;
00052f e0e1      	LDI  R30,LOW(1)
000530 e0f0      	LDI  R31,HIGH(1)
000531 013f      	MOVW R6,R30
                 ; 0000 009B                     push_event(5110);
000532 efa6      	LDI  R26,LOW(5110)
000533 e1b3      	LDI  R27,HIGH(5110)
000534 940e 0f2e 	CALL _push_event
                 ; 0000 009C                 }
                 ; 0000 009D             break;
                 _0x2D:
000536 c0ba      	RJMP _0x2B
                 ; 0000 009E 
                 ; 0000 009F             /*=============== Send SH( High Bits MacAddress) ===============*/
                 ; 0000 00A0             case 1 :
                 _0x2C:
000537 30e1      	CPI  R30,LOW(0x1)
000538 e0a0      	LDI  R26,HIGH(0x1)
000539 07fa      	CPC  R31,R26
00053a f429      	BRNE _0x2E
                 ; 0000 00A1                 xbee_sendATCommand(SH);
00053b 940e 167f 	CALL SUBOPT_0x10
00053d 940e 1675 	CALL SUBOPT_0xE
                 ; 0000 00A2                 delay_ms(100);
                 ; 0000 00A3             break;
00053f c0b1      	RJMP _0x2B
                 ; 0000 00A4 
                 ; 0000 00A5             /*=============== Send SL( LOW Bits MacAddress) ===============*/
                 ; 0000 00A6             case 2 :
                 _0x2E:
000540 30e2      	CPI  R30,LOW(0x2)
000541 e0a0      	LDI  R26,HIGH(0x2)
000542 07fa      	CPC  R31,R26
000543 f429      	BRNE _0x2F
                 ; 0000 00A7                 xbee_sendATCommand(SL);
000544 940e 1689 	CALL SUBOPT_0x13
000546 940e 1675 	CALL SUBOPT_0xE
                 ; 0000 00A8                 delay_ms(100);
                 ; 0000 00A9             break;
000548 c0a8      	RJMP _0x2B
                 ; 0000 00AA 
                 ; 0000 00AB             /*=============== Send Join ===============*/
                 ; 0000 00AC             case 3 :
                 _0x2F:
000549 30e3      	CPI  R30,LOW(0x3)
00054a e0a0      	LDI  R26,HIGH(0x3)
00054b 07fa      	CPC  R31,R26
00054c f541      	BRNE _0x30
                 ; 0000 00AD                 delay_ms(2000);
00054d eda0      	LDI  R26,LOW(2000)
00054e e0b7      	LDI  R27,HIGH(2000)
00054f 940e 19eb 	CALL _delay_ms
                 ; 0000 00AE                 send_join();
000551 940e 0b3e 	CALL _send_join
                 ; 0000 00AF                 delay_ms(100);
000553 940e 167b 	CALL SUBOPT_0xF
                 ; 0000 00B0 
                 ; 0000 00B1                 if(SWITCH_PRESSED){
000555 9998      	SBIC 0x13,0
000556 c01d      	RJMP _0x31
                 ; 0000 00B2                     delay_ms(100);
000557 940e 167b 	CALL SUBOPT_0xF
                 ; 0000 00B3                     if(STATUS_DEVICE == 0){
000559 91e0 0892 	LDS  R30,_STATUS_DEVICE
00055b 30e0      	CPI  R30,0
00055c f449      	BRNE _0x32
                 ; 0000 00B4                         device_state(1);      //on
00055d 940e 167f 	CALL SUBOPT_0x10
00055f 940e 1682 	CALL SUBOPT_0x11
                 ; 0000 00B5                         EEPROM_write(Eaddress,STATUS_DEVICE);
000561 940e 1685 	CALL SUBOPT_0x12
                 ; 0000 00B6                         push_event(5110);
000563 efa6      	LDI  R26,LOW(5110)
000564 e1b3      	LDI  R27,HIGH(5110)
000565 c00c      	RJMP _0x4A
                 ; 0000 00B7 
                 ; 0000 00B8                     }else if(STATUS_DEVICE == 1){
                 _0x32:
000566 91a0 0892 	LDS  R26,_STATUS_DEVICE
000568 30a1      	CPI  R26,LOW(0x1)
000569 f451      	BRNE _0x34
                 ; 0000 00B9                         device_state(0);      //off
00056a 940e 1672 	CALL SUBOPT_0xD
00056c 940e 1682 	CALL SUBOPT_0x11
                 ; 0000 00BA                         EEPROM_write(Eaddress,STATUS_DEVICE);
00056e 940e 1685 	CALL SUBOPT_0x12
                 ; 0000 00BB                         push_event(5100);
000570 eeac      	LDI  R26,LOW(5100)
000571 e1b3      	LDI  R27,HIGH(5100)
                 _0x4A:
000572 940e 0f2e 	CALL _push_event
                 ; 0000 00BC 
                 ; 0000 00BD                     }
                 ; 0000 00BE                 }
                 _0x34:
                 ; 0000 00BF             break;
                 _0x31:
000574 c07c      	RJMP _0x2B
                 ; 0000 00C0 
                 ; 0000 00C1             /*=============== Idle State ===============*/
                 ; 0000 00C2             case 4 :
                 _0x30:
000575 30e4      	CPI  R30,LOW(0x4)
000576 e0a0      	LDI  R26,HIGH(0x4)
000577 07fa      	CPC  R31,R26
000578 f011      	BREQ PC+3
000579 940c 05c4 	JMP _0x35
                 ; 0000 00C3                 printDebug("\r\n-------- Idle --------\r\n");
                +
00057b e9e4     +LDI R30 , LOW ( 2 * _0x0 + ( 498 ) )
00057c e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 498 ) )
                 	__POINTW1FN _0x0,498
00057d 940e 164d 	CALL SUBOPT_0x8
                 ; 0000 00C4                 counter++;
00057f 940e 168c 	CALL SUBOPT_0x14
                 ; 0000 00C5                 if(counter%10 == 0 ){
000581 f431      	BRNE _0x36
                 ; 0000 00C6                     pop_event();
000582 940e 0f41 	CALL _pop_event
                 ; 0000 00C7                     printDebug("\r\n-------- POP EVENT --------\r\n");
                +
000584 eaef     +LDI R30 , LOW ( 2 * _0x0 + ( 525 ) )
000585 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 525 ) )
                 	__POINTW1FN _0x0,525
000586 940e 164d 	CALL SUBOPT_0x8
                 ; 0000 00C8                 }
                 ; 0000 00C9 
                 ; 0000 00CA                 if(start_event == 1){
                 _0x36:
000588 e0e1      	LDI  R30,LOW(1)
000589 e0f0      	LDI  R31,HIGH(1)
00058a 15e6      	CP   R30,R6
00058b 05f7      	CPC  R31,R7
00058c f499      	BRNE _0x37
                 ; 0000 00CB                     if(STATUS_DEVICE == 1){
00058d 91a0 0892 	LDS  R26,_STATUS_DEVICE
00058f 30a1      	CPI  R26,LOW(0x1)
000590 f419      	BRNE _0x38
                 ; 0000 00CC                         flag_state = 5;
000591 e0e5      	LDI  R30,LOW(5)
000592 e0f0      	LDI  R31,HIGH(5)
000593 c006      	RJMP _0x4B
                 ; 0000 00CD                     }else if(STATUS_DEVICE == 0){
                 _0x38:
000594 91e0 0892 	LDS  R30,_STATUS_DEVICE
000596 30e0      	CPI  R30,0
000597 f431      	BRNE _0x3A
                 ; 0000 00CE                         flag_state = 4;
000598 e0e4      	LDI  R30,LOW(4)
000599 e0f0      	LDI  R31,HIGH(4)
                 _0x4B:
00059a 93e0 062a 	STS  _flag_state,R30
00059c 93f0 062b 	STS  _flag_state+1,R31
                 ; 0000 00CF                     }
                 ; 0000 00D0                     start_event = 0;
                 _0x3A:
00059e 2466      	CLR  R6
00059f 2477      	CLR  R7
                 ; 0000 00D1                 }
                 ; 0000 00D2 
                 ; 0000 00D3 
                 ; 0000 00D4                 if(SWITCH_PRESSED){
                 _0x37:
0005a0 9998      	SBIC 0x13,0
0005a1 c021      	RJMP _0x3B
                 ; 0000 00D5                     delay_ms(200);
0005a2 940e 1696 	CALL SUBOPT_0x15
                 ; 0000 00D6                        if(STATUS_DEVICE == 0){
0005a4 91e0 0892 	LDS  R30,_STATUS_DEVICE
0005a6 30e0      	CPI  R30,0
0005a7 f469      	BRNE _0x3C
                 ; 0000 00D7                             device_state(1);      //on
0005a8 940e 167f 	CALL SUBOPT_0x10
0005aa 940e 1682 	CALL SUBOPT_0x11
                 ; 0000 00D8                             EEPROM_write(Eaddress,STATUS_DEVICE);
0005ac 940e 1685 	CALL SUBOPT_0x12
                 ; 0000 00D9                             flag_state = 5;
0005ae e0e5      	LDI  R30,LOW(5)
0005af e0f0      	LDI  R31,HIGH(5)
0005b0 940e 169a 	CALL SUBOPT_0x16
                 ; 0000 00DA                             //printDebug("count_input = %d\r\n", count_input);
                 ; 0000 00DB                             push_event(5110);
0005b2 efa6      	LDI  R26,LOW(5110)
0005b3 e1b3      	LDI  R27,HIGH(5110)
0005b4 c00c      	RJMP _0x4C
                 ; 0000 00DC                        }else if(STATUS_DEVICE == 1){
                 _0x3C:
0005b5 91a0 0892 	LDS  R26,_STATUS_DEVICE
0005b7 30a1      	CPI  R26,LOW(0x1)
0005b8 f451      	BRNE _0x3E
                 ; 0000 00DD                             device_state(0);     //off
0005b9 940e 1672 	CALL SUBOPT_0xD
0005bb 940e 1682 	CALL SUBOPT_0x11
                 ; 0000 00DE                             EEPROM_write(Eaddress,STATUS_DEVICE);
0005bd 940e 1685 	CALL SUBOPT_0x12
                 ; 0000 00DF                             flag_state = 4;
0005bf 940e 169f 	CALL SUBOPT_0x17
                 ; 0000 00E0                             //printDebug("count_input = %d\r\n", count_input);
                 ; 0000 00E1                             push_event(5100);
                 _0x4C:
0005c1 940e 0f2e 	CALL _push_event
                 ; 0000 00E2                        }
                 ; 0000 00E3                 }
                 _0x3E:
                 ; 0000 00E4             break;
                 _0x3B:
0005c3 c02d      	RJMP _0x2B
                 ; 0000 00E5 
                 ; 0000 00E6             /*=============== Active State ===============*/
                 ; 0000 00E7             case 5 :
                 _0x35:
0005c4 30e5      	CPI  R30,LOW(0x5)
0005c5 e0a0      	LDI  R26,HIGH(0x5)
0005c6 07fa      	CPC  R31,R26
0005c7 f549      	BRNE _0x2B
                 ; 0000 00E8             printDebug("\r\n-------- Active --------\r\n");
                +
0005c8 ecef     +LDI R30 , LOW ( 2 * _0x0 + ( 557 ) )
0005c9 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 557 ) )
                 	__POINTW1FN _0x0,557
0005ca 940e 164d 	CALL SUBOPT_0x8
                 ; 0000 00E9                 ReadCurrent();
0005cc 940e 0da8 	CALL _ReadCurrent
                 ; 0000 00EA                 ReadVoltage();
0005ce 940e 0e1e 	CALL _ReadVoltage
                 ; 0000 00EB 
                 ; 0000 00EC                 counter++;
0005d0 940e 168c 	CALL SUBOPT_0x14
                 ; 0000 00ED                 if(counter%10 == 0 ){
0005d2 f431      	BRNE _0x40
                 ; 0000 00EE                     printDebug("\r\n-------- POP EVENT --------\r\n");
                +
0005d3 eaef     +LDI R30 , LOW ( 2 * _0x0 + ( 525 ) )
0005d4 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 525 ) )
                 	__POINTW1FN _0x0,525
0005d5 940e 164d 	CALL SUBOPT_0x8
                 ; 0000 00EF                     pop_event();
0005d7 940e 0f41 	CALL _pop_event
                 ; 0000 00F0                 }
                 ; 0000 00F1 
                 ; 0000 00F2 
                 ; 0000 00F3                 if(number == 1000){
                 _0x40:
0005d9 91a0 0830 	LDS  R26,_number
0005db 91b0 0831 	LDS  R27,_number+1
0005dd 3ea8      	CPI  R26,LOW(0x3E8)
0005de e0e3      	LDI  R30,HIGH(0x3E8)
0005df 07be      	CPC  R27,R30
0005e0 f411      	BRNE _0x41
                 ; 0000 00F4                     SendStatusReport();
0005e1 940e 0c29 	CALL _SendStatusReport
                 ; 0000 00F5                 }
                 ; 0000 00F6 
                 ; 0000 00F7                 if(SWITCH_PRESSED){
                 _0x41:
0005e3 9998      	SBIC 0x13,0
0005e4 c00c      	RJMP _0x42
                 ; 0000 00F8                     delay_ms(200);
0005e5 940e 1696 	CALL SUBOPT_0x15
                 ; 0000 00F9                     device_state(0); // off
0005e7 940e 1672 	CALL SUBOPT_0xD
0005e9 940e 1682 	CALL SUBOPT_0x11
                 ; 0000 00FA                     EEPROM_write(Eaddress,STATUS_DEVICE);
0005eb 940e 1685 	CALL SUBOPT_0x12
                 ; 0000 00FB                     flag_state = 4;
0005ed 940e 169f 	CALL SUBOPT_0x17
                 ; 0000 00FC //                  printDebug("count_input = %d\r\n", count_input);
                 ; 0000 00FD                     push_event(5100);
0005ef 940e 0f2e 	CALL _push_event
                 ; 0000 00FE                 }
                 ; 0000 00FF             break;
                 _0x42:
                 ; 0000 0100         }
                 _0x2B:
                 ; 0000 0101     }
0005f1 cf25      	RJMP _0x26
                 ; 0000 0102 }
                 _0x43:
0005f2 cfff      	RJMP _0x43
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <stdarg.h>
                 ;#include <ctype.h>
                 ;#include <stdint.h>
                 ;#include <debug.h>
                 ;#include <uart.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <adc.h>
                 ;#include <initial_system.h>
                 ;
                 ;/* ================================================================================= */
                 ;void printDebug(flash char *fmtstr, ...)
                 ; 0001 000E {
                 
                 	.CSEG
                 _printDebug:
0005f3 92ff      	PUSH R15
0005f4 2ef8      	MOV  R15,R24
                 ; 0001 000F     char textBuffer[256];
                 ; 0001 0010     va_list argptr;
                 ; 0001 0011 
                 ; 0001 0012     va_start(argptr, fmtstr);
0005f5 50d1      	SUBI R29,1
0005f6 931a      	ST   -Y,R17
0005f7 930a      	ST   -Y,R16
                 ;	*fmtstr -> Y+258
                 ;	textBuffer -> Y+2
                 ;	*argptr -> R16,R17
0005f8 01de      	MOVW R26,R28
0005f9 50a2      	SUBI R26,LOW(-(254))
0005fa 4fbf      	SBCI R27,HIGH(-(254))
0005fb 940e 1bf2 	CALL __ADDW2R15
0005fd 018d      	MOVW R16,R26
                 ; 0001 0013     vsprintf(textBuffer,fmtstr,argptr);
0005fe 940e 16a5 	CALL SUBOPT_0x18
000600 01de      	MOVW R26,R28
000601 5fac      	SUBI R26,LOW(-(260))
000602 4fbe      	SBCI R27,HIGH(-(260))
000603 940e 1bf2 	CALL __ADDW2R15
000605 940e 1c95 	CALL __GETW1P
000607 93fa      	ST   -Y,R31
000608 93ea      	ST   -Y,R30
000609 01d8      	MOVW R26,R16
00060a 940e 13eb 	CALL _vsprintf
                 ; 0001 0014     send_uart(0, textBuffer);
00060c e0e0      	LDI  R30,LOW(0)
00060d 93ea      	ST   -Y,R30
00060e 01de      	MOVW R26,R28
00060f 9613      	ADIW R26,3
000610 940e 07ee 	CALL _send_uart
                 ; 0001 0015     va_end(argptr);
                 ; 0001 0016 
                 ; 0001 0017     return;
000612 8119      	LDD  R17,Y+1
000613 8108      	LDD  R16,Y+0
000614 9622      	ADIW R28,2
000615 5fdf      	SUBI R29,-1
000616 90ff      	POP  R15
000617 9508      	RET
                 ; 0001 0018 }
                 ;/* ================================================================================= */
                 ; void print_payload(const unsigned char *payload, int len) {
                 ; 0001 001A void print_payload(const unsigned char *payload, int len) {
                 _print_payload:
                 ; 0001 001B 
                 ; 0001 001C     int len_rem = len;
                 ; 0001 001D     int line_width = 16;            // number of bytes per line //
                 ; 0001 001E     int line_len;
                 ; 0001 001F     int offset = 0;                  // zero-based offset counter //
                 ; 0001 0020     const unsigned char *ch = payload;
                 ; 0001 0021 
                 ; 0001 0022     if (len <= 0)
000618 940e 16aa 	CALL SUBOPT_0x19
00061a 83ea      	STD  Y+2,R30
00061b e0e0      	LDI  R30,LOW(0)
00061c 83eb      	STD  Y+3,R30
00061d 940e 1cfb 	CALL __SAVELOCR6
                 ;	*payload -> Y+12
                 ;	len -> Y+10
                 ;	len_rem -> R16,R17
                 ;	line_width -> R18,R19
                 ;	line_len -> R20,R21
                 ;	offset -> Y+8
                 ;	*ch -> Y+6
                +
00061f 850a     +LDD R16 , Y + 10
000620 851b     +LDD R17 , Y + 10 + 1
                 	__GETWRS 16,17,10
                +
000621 e120     +LDI R18 , LOW ( 16 )
000622 e030     +LDI R19 , HIGH ( 16 )
                 	__GETWRN 18,19,16
000623 85ec      	LDD  R30,Y+12
000624 85fd      	LDD  R31,Y+12+1
000625 83ee      	STD  Y+6,R30
000626 83ff      	STD  Y+6+1,R31
000627 85aa      	LDD  R26,Y+10
000628 85bb      	LDD  R27,Y+10+1
000629 940e 1cec 	CALL __CPW02
00062b f584      	BRGE _0x20C0012
                 ; 0001 0023         return;
                 ; 0001 0024 
                 ; 0001 0025     // data fits on one line //
                 ; 0001 0026     if (len <= line_width) {
00062c 172a      	CP   R18,R26
00062d 073b      	CPC  R19,R27
00062e f04c      	BRLT _0x20004
                 ; 0001 0027         print_hex_ascii_line(ch, len, offset);
00062f 940e 16af 	CALL SUBOPT_0x1A
000631 85ec      	LDD  R30,Y+12
000632 85fd      	LDD  R31,Y+12+1
000633 93fa      	ST   -Y,R31
000634 93ea      	ST   -Y,R30
000635 940e 16b4 	CALL SUBOPT_0x1B
                 ; 0001 0028         return;
000637 c024      	RJMP _0x20C0012
                 ; 0001 0029     }
                 ; 0001 002A     // data spans multiple lines //
                 ; 0001 002B     for ( ;; ) {
                 _0x20004:
                 _0x20006:
                 ; 0001 002C         // compute current line length //
                 ; 0001 002D         line_len = line_width % len_rem;
000638 01f8      	MOVW R30,R16
000639 01d9      	MOVW R26,R18
00063a 940e 1c69 	CALL __MODW21
00063c 01af      	MOVW R20,R30
                 ; 0001 002E         // print line //
                 ; 0001 002F         print_hex_ascii_line(ch, line_len, offset);
00063d 940e 16af 	CALL SUBOPT_0x1A
00063f 935a      	ST   -Y,R21
000640 934a      	ST   -Y,R20
000641 940e 16b4 	CALL SUBOPT_0x1B
                 ; 0001 0030         // compute total remaining //
                 ; 0001 0031         len_rem = len_rem - line_len;
                +
000643 1b04     +SUB R16 , R20
000644 0b15     +SBC R17 , R21
                 	__SUBWRR 16,17,20,21
                 ; 0001 0032         // shift pointer to remaining bytes to print //
                 ; 0001 0033         ch = ch + line_len;
000645 01fa      	MOVW R30,R20
000646 81ae      	LDD  R26,Y+6
000647 81bf      	LDD  R27,Y+6+1
000648 0fea      	ADD  R30,R26
000649 1ffb      	ADC  R31,R27
00064a 83ee      	STD  Y+6,R30
00064b 83ff      	STD  Y+6+1,R31
                 ; 0001 0034         // add offset //
                 ; 0001 0035         offset = offset + line_width;
00064c 01f9      	MOVW R30,R18
00064d 940e 16b8 	CALL SUBOPT_0x1C
00064f 87e8      	STD  Y+8,R30
000650 87f9      	STD  Y+8+1,R31
                 ; 0001 0036         // check if we have line width chars or less //
                 ; 0001 0037         if (len_rem <= line_width) {
                +
000651 1720     +CP R18 , R16
000652 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
000653 f03c      	BRLT _0x20008
                 ; 0001 0038             // print last line and get out //
                 ; 0001 0039             print_hex_ascii_line(ch, len_rem, offset);
000654 940e 16af 	CALL SUBOPT_0x1A
000656 931a      	ST   -Y,R17
000657 930a      	ST   -Y,R16
000658 940e 16b4 	CALL SUBOPT_0x1B
                 ; 0001 003A             break;
00065a c001      	RJMP _0x20007
                 ; 0001 003B         }
                 ; 0001 003C     }
                 _0x20008:
00065b cfdc      	RJMP _0x20006
                 _0x20007:
                 ; 0001 003D     return;
                 _0x20C0012:
00065c 940e 1d02 	CALL __LOADLOCR6
00065e 962e      	ADIW R28,14
00065f 9508      	RET
                 ; 0001 003E 
                 ; 0001 003F }
                 ;/* ================================================================================= */
                 ;void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
                 ; 0001 0041 void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
                 _print_hex_ascii_line:
                 ; 0001 0042 
                 ; 0001 0043     int i;
                 ; 0001 0044     int gap;
                 ; 0001 0045     const unsigned char *ch;
                 ; 0001 0046 
                 ; 0001 0047     // offset //
                 ; 0001 0048     printDebug("%05d   ", offset);
000660 93ba      	ST   -Y,R27
000661 93aa      	ST   -Y,R26
000662 940e 1cfb 	CALL __SAVELOCR6
                 ;	*payload -> Y+10
                 ;	len -> Y+8
                 ;	offset -> Y+6
                 ;	i -> R16,R17
                 ;	gap -> R18,R19
                 ;	*ch -> R20,R21
                +
000664 eeec     +LDI R30 , LOW ( 2 * _0x20000 + ( 0 ) )
000665 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 0 ) )
                 	__POINTW1FN _0x20000,0
000666 93fa      	ST   -Y,R31
000667 93ea      	ST   -Y,R30
000668 85e8      	LDD  R30,Y+8
000669 85f9      	LDD  R31,Y+8+1
00066a 940e 16bd 	CALL SUBOPT_0x1D
                 ; 0001 0049 
                 ; 0001 004A     // hex //
                 ; 0001 004B     ch = payload;
                +
00066c 854a     +LDD R20 , Y + 10
00066d 855b     +LDD R21 , Y + 10 + 1
                 	__GETWRS 20,21,10
                 ; 0001 004C     for(i = 0; i < len; i++) {
                +
00066e e000     +LDI R16 , LOW ( 0 )
00066f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2000A:
000670 85e8      	LDD  R30,Y+8
000671 85f9      	LDD  R31,Y+8+1
000672 170e      	CP   R16,R30
000673 071f      	CPC  R17,R31
000674 f494      	BRGE _0x2000B
                 ; 0001 004D         printDebug("%02X ", *ch);
                +
000675 efe4     +LDI R30 , LOW ( 2 * _0x20000 + ( 8 ) )
000676 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 8 ) )
                 	__POINTW1FN _0x20000,8
000677 940e 16c0 	CALL SUBOPT_0x1E
                 ; 0001 004E 
                 ; 0001 004F         ch++;
                +
000679 5f4f     +SUBI R20 , LOW ( - 1 )
00067a 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0001 0050         // print extra space after 8th byte for visual aid //
                 ; 0001 0051         if (i == 7){
00067b e0e7      	LDI  R30,LOW(7)
00067c e0f0      	LDI  R31,HIGH(7)
00067d 17e0      	CP   R30,R16
00067e 07f1      	CPC  R31,R17
00067f f421      	BRNE _0x2000C
                 ; 0001 0052             printDebug(" ");
                +
000680 efe2     +LDI R30 , LOW ( 2 * _0x20000 + ( 6 ) )
000681 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 6 ) )
                 	__POINTW1FN _0x20000,6
000682 940e 164d 	CALL SUBOPT_0x8
                 ; 0001 0053 
                 ; 0001 0054         }
                 ; 0001 0055     }
                 _0x2000C:
                +
000684 5f0f     +SUBI R16 , LOW ( - 1 )
000685 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000686 cfe9      	RJMP _0x2000A
                 _0x2000B:
                 ; 0001 0056     // print space to handle line less than 8 bytes //
                 ; 0001 0057     if (len < 8){
000687 85a8      	LDD  R26,Y+8
000688 85b9      	LDD  R27,Y+8+1
000689 9718      	SBIW R26,8
00068a f424      	BRGE _0x2000D
                 ; 0001 0058         printDebug(" ");
                +
00068b efe2     +LDI R30 , LOW ( 2 * _0x20000 + ( 6 ) )
00068c e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 6 ) )
                 	__POINTW1FN _0x20000,6
00068d 940e 164d 	CALL SUBOPT_0x8
                 ; 0001 0059 
                 ; 0001 005A     }
                 ; 0001 005B 
                 ; 0001 005C     // fill hex gap with spaces if not full line //
                 ; 0001 005D     if (len < 16) {
                 _0x2000D:
00068f 85a8      	LDD  R26,Y+8
000690 85b9      	LDD  R27,Y+8+1
000691 9750      	SBIW R26,16
000692 f49c      	BRGE _0x2000E
                 ; 0001 005E         gap = 16 - len;
000693 85a8      	LDD  R26,Y+8
000694 85b9      	LDD  R27,Y+8+1
000695 e1e0      	LDI  R30,LOW(16)
000696 e0f0      	LDI  R31,HIGH(16)
000697 1bea      	SUB  R30,R26
000698 0bfb      	SBC  R31,R27
000699 019f      	MOVW R18,R30
                 ; 0001 005F         for (i = 0; i < gap; i++) {
                +
00069a e000     +LDI R16 , LOW ( 0 )
00069b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20010:
                +
00069c 1702     +CP R16 , R18
00069d 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
00069e f43c      	BRGE _0x20011
                 ; 0001 0060             printDebug("   ");
                +
00069f efe0     +LDI R30 , LOW ( 2 * _0x20000 + ( 4 ) )
0006a0 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 4 ) )
                 	__POINTW1FN _0x20000,4
0006a1 940e 164d 	CALL SUBOPT_0x8
                 ; 0001 0061 
                 ; 0001 0062         }
                +
0006a3 5f0f     +SUBI R16 , LOW ( - 1 )
0006a4 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0006a5 cff6      	RJMP _0x20010
                 _0x20011:
                 ; 0001 0063     }
                 ; 0001 0064     printDebug("   ");
                 _0x2000E:
                +
0006a6 efe0     +LDI R30 , LOW ( 2 * _0x20000 + ( 4 ) )
0006a7 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 4 ) )
                 	__POINTW1FN _0x20000,4
0006a8 940e 164d 	CALL SUBOPT_0x8
                 ; 0001 0065 
                 ; 0001 0066 
                 ; 0001 0067     // ascii (if printable) //
                 ; 0001 0068     ch = payload;
                +
0006aa 854a     +LDD R20 , Y + 10
0006ab 855b     +LDD R21 , Y + 10 + 1
                 	__GETWRS 20,21,10
                 ; 0001 0069     for(i = 0; i < len; i++) {
                +
0006ac e000     +LDI R16 , LOW ( 0 )
0006ad e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20013:
0006ae 85e8      	LDD  R30,Y+8
0006af 85f9      	LDD  R31,Y+8+1
0006b0 170e      	CP   R16,R30
0006b1 071f      	CPC  R17,R31
0006b2 f4a4      	BRGE _0x20014
                 ; 0001 006A         if (isprint(*ch)){
0006b3 01da      	MOVW R26,R20
0006b4 91ac      	LD   R26,X
0006b5 940e 15f6 	CALL _isprint
0006b7 30e0      	CPI  R30,0
0006b8 f029      	BREQ _0x20015
                 ; 0001 006B             printDebug("%c", *ch);
                +
0006b9 efea     +LDI R30 , LOW ( 2 * _0x20000 + ( 14 ) )
0006ba e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 14 ) )
                 	__POINTW1FN _0x20000,14
0006bb 940e 16c0 	CALL SUBOPT_0x1E
                 ; 0001 006C 
                 ; 0001 006D         }
                 ; 0001 006E         else{
0006bd c004      	RJMP _0x20016
                 _0x20015:
                 ; 0001 006F             printDebug(".");
                +
0006be efed     +LDI R30 , LOW ( 2 * _0x20000 + ( 17 ) )
0006bf e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 17 ) )
                 	__POINTW1FN _0x20000,17
0006c0 940e 164d 	CALL SUBOPT_0x8
                 ; 0001 0070 
                 ; 0001 0071         }
                 _0x20016:
                 ; 0001 0072         ch++;
                +
0006c2 5f4f     +SUBI R20 , LOW ( - 1 )
0006c3 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0001 0073     }
                +
0006c4 5f0f     +SUBI R16 , LOW ( - 1 )
0006c5 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0006c6 cfe7      	RJMP _0x20013
                 _0x20014:
                 ; 0001 0074 
                 ; 0001 0075     printDebug("\r\n");
                +
0006c7 efef     +LDI R30 , LOW ( 2 * _0x20000 + ( 19 ) )
0006c8 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 19 ) )
                 	__POINTW1FN _0x20000,19
0006c9 940e 164d 	CALL SUBOPT_0x8
                 ; 0001 0076     return;
0006cb 940e 1d02 	CALL __LOADLOCR6
0006cd 962c      	ADIW R28,12
0006ce 9508      	RET
                 ; 0001 0077 }
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <timer.h>
                 ;#include <debug.h>
                 ;#include <int_protocol.h>
                 ;#include <initial_system.h>
                 ;
                 ;TIMER baseCounter = 0;    // -- increase continually by 1 second timer. use for timer comparison -- //
                 ;uint8_t pressedBTCounter = 0;
                 ;uint8_t _FlagBT = 0;
                 ;uint8_t _Flag05INT = 0;
                 ;uint8_t _Flag0001INT = 0;
                 ;uint8_t _BlinkLED_1Hz = 0;
                 ;
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/******************************* Software Timer Support ******************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;
                 ;/* ================================================================================= */
                 ;
                 ;/* ================================================================================= */
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/********************************* Hardware Support **********************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;// Timer 0 overflow interrupt service routine (1 ms.)
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0002 0021 interrupt [17] void timer0_ovf_isr(void) {
                 
                 	.CSEG
                 _timer0_ovf_isr:
0006cf 93aa      	ST   -Y,R26
0006d0 93ea      	ST   -Y,R30
0006d1 b7ef      	IN   R30,SREG
0006d2 93ea      	ST   -Y,R30
                 ; 0002 0022 
                 ; 0002 0023     // Reinitialize Timer 0 value
                 ; 0002 0024     TCNT0 = 0xD7;
0006d3 ede7      	LDI  R30,LOW(215)
0006d4 bfe2      	OUT  0x32,R30
                 ; 0002 0025     // Place your code here
                 ; 0002 0026     if(SWITCH == TURN_ON /*&& _pired*/) {
0006d5 91a0 0600 	LDS  R26,_SWITCH
0006d7 30a1      	CPI  R26,LOW(0x1)
0006d8 f419      	BRNE _0x40003
                 ; 0002 0027         _Flag0001INT = 1;
0006d9 e0e1      	LDI  R30,LOW(1)
0006da 93e0 089c 	STS  __Flag0001INT,R30
                 ; 0002 0028     }
                 ; 0002 0029 
                 ; 0002 002A }
                 _0x40003:
0006dc c03e      	RJMP _0x40015
                 ;/* ================================================================================= */
                 ;// Timer1 overflow interrupt service routine (1 sec.)
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void) {
                 ; 0002 002D interrupt [15] void timer1_ovf_isr(void) {
                 _timer1_ovf_isr:
0006dd 936a      	ST   -Y,R22
0006de 937a      	ST   -Y,R23
0006df 93aa      	ST   -Y,R26
0006e0 93ba      	ST   -Y,R27
0006e1 93ea      	ST   -Y,R30
0006e2 93fa      	ST   -Y,R31
0006e3 b7ef      	IN   R30,SREG
0006e4 93ea      	ST   -Y,R30
                 ; 0002 002E 
                 ; 0002 002F     //char i;
                 ; 0002 0030 
                 ; 0002 0031     // Reinitialize Timer1 value
                 ; 0002 0032     TCNT1H = 0x57;
0006e5 e5e7      	LDI  R30,LOW(87)
0006e6 bded      	OUT  0x2D,R30
                 ; 0002 0033     TCNT1L = 0x40;
0006e7 e4e0      	LDI  R30,LOW(64)
0006e8 bdec      	OUT  0x2C,R30
                 ; 0002 0034 
                 ; 0002 0035     baseCounter++;
0006e9 e9a5      	LDI  R26,LOW(_baseCounter)
0006ea e0b8      	LDI  R27,HIGH(_baseCounter)
0006eb 940e 1c9f 	CALL __GETD1P_INC
                +
0006ed 5fef     +SUBI R30 , LOW ( - 1 )
0006ee 4fff     +SBCI R31 , HIGH ( - 1 )
0006ef 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0006f0 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
0006f1 940e 1ca9 	CALL __PUTDP1_DEC
                 ; 0002 0036 }
0006f3 91e9      	LD   R30,Y+
0006f4 bfef      	OUT  SREG,R30
0006f5 91f9      	LD   R31,Y+
0006f6 91e9      	LD   R30,Y+
0006f7 91b9      	LD   R27,Y+
0006f8 91a9      	LD   R26,Y+
0006f9 9179      	LD   R23,Y+
0006fa 9169      	LD   R22,Y+
0006fb 9518      	RETI
                 ;/* ================================================================================= */
                 ;// Timer3 overflow interrupt service routine (0.5 sec.)
                 ;interrupt [TIM3_OVF] void timer3_ovf_isr(void) {
                 ; 0002 0039 interrupt [30] void timer3_ovf_isr(void) {
                 _timer3_ovf_isr:
0006fc 93aa      	ST   -Y,R26
0006fd 93ea      	ST   -Y,R30
0006fe b7ef      	IN   R30,SREG
0006ff 93ea      	ST   -Y,R30
                 ; 0002 003A 
                 ; 0002 003B     // Reinitialize Timer3 value
                 ; 0002 003C     TCNT3H = 0xAB;
000700 940e 16c8 	CALL SUBOPT_0x1F
                 ; 0002 003D     TCNT3L = 0xA0;
                 ; 0002 003E 
                 ; 0002 003F     /*----- Count time pressed button -----*/
                 ; 0002 0040     if(_FlagBT) {
000702 91e0 089a 	LDS  R30,__FlagBT
000704 30e0      	CPI  R30,0
000705 f029      	BREQ _0x40004
                 ; 0002 0041         pressedBTCounter++;
000706 91e0 0899 	LDS  R30,_pressedBTCounter
000708 5fef      	SUBI R30,-LOW(1)
000709 93e0 0899 	STS  _pressedBTCounter,R30
                 ; 0002 0042     }
                 ; 0002 0043 
                 ; 0002 0044     /*----- 0.5 millisecond flag -----*/
                 ; 0002 0045     if(SWITCH == TURN_ON /*&& _pired*/) {
                 _0x40004:
00070b 91a0 0600 	LDS  R26,_SWITCH
00070d 30a1      	CPI  R26,LOW(0x1)
00070e f419      	BRNE _0x40005
                 ; 0002 0046         _Flag05INT = 1;
00070f e0e1      	LDI  R30,LOW(1)
000710 93e0 089b 	STS  __Flag05INT,R30
                 ; 0002 0047     }
                 ; 0002 0048 
                 ; 0002 0049     /*----- Blink Power LED 1 Hz -----*/
                 ; 0002 004A     if(_BlinkLED_1Hz) {
                 _0x40005:
000712 91e0 089d 	LDS  R30,__BlinkLED_1Hz
000714 30e0      	CPI  R30,0
000715 f029      	BREQ _0x40006
                 ; 0002 004B         if(LED_STAT_PIN == 1) {
000716 9b9f      	SBIS 0x13,7
000717 c002      	RJMP _0x40007
                 ; 0002 004C             LED_STAT_ON;
000718 98af      	CBI  0x15,7
                 ; 0002 004D         }else {
000719 c001      	RJMP _0x4000A
                 _0x40007:
                 ; 0002 004E             LED_STAT_OFF;
00071a 9aaf      	SBI  0x15,7
                 ; 0002 004F         }
                 _0x4000A:
                 ; 0002 0050     }
                 ; 0002 0051 
                 ; 0002 0052 }
                 _0x40006:
                 _0x40015:
00071b 91e9      	LD   R30,Y+
00071c bfef      	OUT  SREG,R30
00071d 91e9      	LD   R30,Y+
00071e 91a9      	LD   R26,Y+
00071f 9518      	RETI
                 ;/* ================================================================================= */
                 ;void init_timer(void) {
                 ; 0002 0054 void init_timer(void) {
                 _init_timer:
                 ; 0002 0055 
                 ; 0002 0056     // Timer/Counter 0 initialization (1 ms.)
                 ; 0002 0057     // Clock source: System Clock
                 ; 0002 0058     // Clock value: 43.200 kHz
                 ; 0002 0059     // Mode: Normal top=0xFF
                 ; 0002 005A     // OC0 output: Disconnected
                 ; 0002 005B     ASSR=0x00;
000720 e0e0      	LDI  R30,LOW(0)
000721 bfe0      	OUT  0x30,R30
                 ; 0002 005C     TCCR0=0x06;
000722 e0e6      	LDI  R30,LOW(6)
000723 bfe3      	OUT  0x33,R30
                 ; 0002 005D     TCNT0=0xD7;
000724 ede7      	LDI  R30,LOW(215)
000725 bfe2      	OUT  0x32,R30
                 ; 0002 005E     OCR0=0x00;
000726 e0e0      	LDI  R30,LOW(0)
000727 bfe1      	OUT  0x31,R30
                 ; 0002 005F 
                 ; 0002 0060     // Timer/Counter 1 initialization (1 sec.)
                 ; 0002 0061     // Clock source: System Clock
                 ; 0002 0062     // Clock value: 43.200 kHz
                 ; 0002 0063     // Mode: Normal top=0xFFFF
                 ; 0002 0064     // OC1A output: Discon.
                 ; 0002 0065     // OC1B output: Discon.
                 ; 0002 0066     // OC1C output: Discon.
                 ; 0002 0067     // Noise Canceler: Off
                 ; 0002 0068     // Input Capture on Falling Edge
                 ; 0002 0069     // Timer1 Overflow Interrupt: On
                 ; 0002 006A     // Input Capture Interrupt: Off
                 ; 0002 006B     // Compare A Match Interrupt: Off
                 ; 0002 006C     // Compare B Match Interrupt: Off
                 ; 0002 006D     // Compare C Match Interrupt: Off
                 ; 0002 006E     TCCR1A=0x00;
000728 bdef      	OUT  0x2F,R30
                 ; 0002 006F     TCCR1B=0x04;
000729 e0e4      	LDI  R30,LOW(4)
00072a bdee      	OUT  0x2E,R30
                 ; 0002 0070     TCNT1H=0x57;
00072b e5e7      	LDI  R30,LOW(87)
00072c bded      	OUT  0x2D,R30
                 ; 0002 0071     TCNT1L=0x40;
00072d e4e0      	LDI  R30,LOW(64)
00072e bdec      	OUT  0x2C,R30
                 ; 0002 0072     ICR1H=0x00;
00072f e0e0      	LDI  R30,LOW(0)
000730 bde7      	OUT  0x27,R30
                 ; 0002 0073     ICR1L=0x00;
000731 bde6      	OUT  0x26,R30
                 ; 0002 0074     OCR1AH=0x00;
000732 bdeb      	OUT  0x2B,R30
                 ; 0002 0075     OCR1AL=0x00;
000733 bdea      	OUT  0x2A,R30
                 ; 0002 0076     OCR1BH=0x00;
000734 bde9      	OUT  0x29,R30
                 ; 0002 0077     OCR1BL=0x00;
000735 bde8      	OUT  0x28,R30
                 ; 0002 0078     OCR1CH=0x00;
000736 93e0 0079 	STS  121,R30
                 ; 0002 0079     OCR1CL=0x00;
000738 93e0 0078 	STS  120,R30
                 ; 0002 007A 
                 ; 0002 007B     // Timer/Counter 2 initialization
                 ; 0002 007C     // Clock source: System Clock
                 ; 0002 007D     // Clock value: Timer2 Stopped
                 ; 0002 007E     // Mode: Normal top=0xFF
                 ; 0002 007F     // OC2 output: Disconnected
                 ; 0002 0080     TCCR2=0x00;
00073a bde5      	OUT  0x25,R30
                 ; 0002 0081     TCNT2=0x00;
00073b bde4      	OUT  0x24,R30
                 ; 0002 0082     OCR2=0x00;
00073c bde3      	OUT  0x23,R30
                 ; 0002 0083 
                 ; 0002 0084     // Timer/Counter 3 initialization (0.5 sec.)
                 ; 0002 0085     // Clock source: System Clock
                 ; 0002 0086     // Clock value: 43.200 kHz
                 ; 0002 0087     // Mode: Normal top=0xFFFF
                 ; 0002 0088     // OC3A output: Discon.
                 ; 0002 0089     // OC3B output: Discon.
                 ; 0002 008A     // OC3C output: Discon.
                 ; 0002 008B     // Noise Canceler: Off
                 ; 0002 008C     // Input Capture on Falling Edge
                 ; 0002 008D     // Timer3 Overflow Interrupt: On
                 ; 0002 008E     // Input Capture Interrupt: Off
                 ; 0002 008F     // Compare A Match Interrupt: Off
                 ; 0002 0090     // Compare B Match Interrupt: Off
                 ; 0002 0091     // Compare C Match Interrupt: Off
                 ; 0002 0092     TCCR3A=0x00;
00073d 93e0 008b 	STS  139,R30
                 ; 0002 0093     TCCR3B=0x04;
00073f e0e4      	LDI  R30,LOW(4)
000740 93e0 008a 	STS  138,R30
                 ; 0002 0094     TCNT3H=0xAB;
000742 940e 16c8 	CALL SUBOPT_0x1F
                 ; 0002 0095     TCNT3L=0xA0;
                 ; 0002 0096     ICR3H=0x00;
000744 e0e0      	LDI  R30,LOW(0)
000745 93e0 0081 	STS  129,R30
                 ; 0002 0097     ICR3L=0x00;
000747 93e0 0080 	STS  128,R30
                 ; 0002 0098     OCR3AH=0x00;
000749 93e0 0087 	STS  135,R30
                 ; 0002 0099     OCR3AL=0x00;
00074b 93e0 0086 	STS  134,R30
                 ; 0002 009A     OCR3BH=0x00;
00074d 93e0 0085 	STS  133,R30
                 ; 0002 009B     OCR3BL=0x00;
00074f 93e0 0084 	STS  132,R30
                 ; 0002 009C     OCR3CH=0x00;
000751 93e0 0083 	STS  131,R30
                 ; 0002 009D     OCR3CL=0x00;
000753 93e0 0082 	STS  130,R30
                 ; 0002 009E 
                 ; 0002 009F     // Watchdog Timer initialization
                 ; 0002 00A0     // Watchdog Timer Prescaler: OSC/2048k
                 ; 0002 00A1     #pragma optsize-
                 ; 0002 00A2     WDTCR=0x1F;
000755 e1ef      	LDI  R30,LOW(31)
000756 bde1      	OUT  0x21,R30
                 ; 0002 00A3     WDTCR=0x0F;
000757 e0ef      	LDI  R30,LOW(15)
000758 bde1      	OUT  0x21,R30
                 ; 0002 00A4     #ifdef _OPTIMIZE_SIZE_
                 ; 0002 00A5     #pragma optsize+
                 ; 0002 00A6     #endif
                 ; 0002 00A7 
                 ; 0002 00A8     // Timer/Counter 0 Interrupt(s) initialization
                 ; 0002 00A9     TIMSK = 0x00;
000759 e0e0      	LDI  R30,LOW(0)
00075a bfe7      	OUT  0x37,R30
                 ; 0002 00AA 
                 ; 0002 00AB     // Timer/Counter 1 Interrupt(s) initialization
                 ; 0002 00AC     TIMSK = 0x00;
00075b bfe7      	OUT  0x37,R30
                 ; 0002 00AD 
                 ; 0002 00AE     // Timer/Counter 3 Interrupt(s) initialization
                 ; 0002 00AF     ETIMSK = 0x00;
00075c 93e0 007d 	STS  125,R30
                 ; 0002 00B0 
                 ; 0002 00B1 }
00075e 9508      	RET
                 ;/* ================================================================================= */
                 ;void enable_timerOverflow(int ch) {
                 ; 0002 00B3 void enable_timerOverflow(int ch) {
                 _enable_timerOverflow:
                 ; 0002 00B4 
                 ; 0002 00B5     /*-------------- enable timer ---------------*/
                 ; 0002 00B6     switch(ch){
00075f 940e 15ff 	CALL SUBOPT_0x0
                 ;	ch -> Y+0
                 ; 0002 00B7         case 0: // Timer/Counter 0 Interrupt(s) initialization
000761 f421      	BRNE _0x40010
                 ; 0002 00B8                 TIMSK |= 0x01;
000762 b7e7      	IN   R30,0x37
000763 60e1      	ORI  R30,1
000764 bfe7      	OUT  0x37,R30
                 ; 0002 00B9                 break;
000765 c015      	RJMP _0x4000F
                 ; 0002 00BA         case 1: // Timer/Counter 1 Interrupt(s) initialization
                 _0x40010:
000766 30e1      	CPI  R30,LOW(0x1)
000767 e0a0      	LDI  R26,HIGH(0x1)
000768 07fa      	CPC  R31,R26
000769 f421      	BRNE _0x40011
                 ; 0002 00BB                 TIMSK |= 0x04;
00076a b7e7      	IN   R30,0x37
00076b 60e4      	ORI  R30,4
00076c bfe7      	OUT  0x37,R30
                 ; 0002 00BC                 break;
00076d c00d      	RJMP _0x4000F
                 ; 0002 00BD         case 2: // Timer/Counter 2 Interrupt(s) initialization
                 _0x40011:
00076e 30e2      	CPI  R30,LOW(0x2)
00076f e0a0      	LDI  R26,HIGH(0x2)
000770 07fa      	CPC  R31,R26
000771 f049      	BREQ _0x4000F
                 ; 0002 00BE                 //TIMSK2=0x01;
                 ; 0002 00BF                 break;
                 ; 0002 00C0         case 3: // Timer/Counter 3 Interrupt(s) initialization
000772 30e3      	CPI  R30,LOW(0x3)
000773 e0a0      	LDI  R26,HIGH(0x3)
000774 07fa      	CPC  R31,R26
000775 f429      	BRNE _0x40013
                 ; 0002 00C1                 ETIMSK |= 0x04;
000776 91e0 007d 	LDS  R30,125
000778 60e4      	ORI  R30,4
000779 93e0 007d 	STS  125,R30
                 ; 0002 00C2                 break;
                 ; 0002 00C3         case 4: // Timer/Counter 4 Interrupt(s) initialization
                 _0x40013:
                 ; 0002 00C4                 //TIMSK4=0x01;
                 ; 0002 00C5                 break;
                 ; 0002 00C6     }
                 _0x4000F:
                 ; 0002 00C7     // Global enable interrupts
                 ; 0002 00C8     #asm("sei")
00077b 9478      	sei
                 ; 0002 00C9 }
00077c 940c 08ad 	JMP  _0x20C0010
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;
                 ;// UART 1
                 ;uint8_t rx_buffer1[RX_BUFFER_SIZE1];                                       // USART0 Receiver buffer
                 ;uint16_t rx_wr_index1, rx_rd_index1, rx_counter1;
                 ;bit rx_buffer_overflow1;                                                // This flag is set on USART0 Receiver buffer overflow
                 ;
                 ;// UART 0
                 ;flash uint8_t charHeader            = '$';
                 ;flash uint8_t charTerminate         = '#';
                 ;uint8_t _FlagPackageTerminate0      = 0;
                 ;uint8_t rxPackageIndex0;
                 ;uint8_t rxPackage0[RX_BUFFER_SIZE0];
                 ;uint8_t rxPackageIndexCount0;
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;#else
                 ;#endif
                 ;
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void) {
                 ; 0003 001B interrupt [19] void usart0_rx_isr(void) {
                 
                 	.CSEG
                 _usart0_rx_isr:
00077e 940e 16cf 	CALL SUBOPT_0x20
                 ; 0003 001C 
                 ; 0003 001D     uint8_t status, data;
                 ; 0003 001E     status  = UCSR0A;
                 ;	status -> R17
                 ;	data -> R16
000780 b11b      	IN   R17,11
                 ; 0003 001F     data    = UDR0;
000781 b10c      	IN   R16,12
                 ; 0003 0020 
                 ; 0003 0021     if((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
000782 2fe1      	MOV  R30,R17
000783 71ec      	ANDI R30,LOW(0x1C)
000784 f4c1      	BRNE _0x60003
                 ; 0003 0022 
                 ; 0003 0023         putchar0(data);
000785 2fa0      	MOV  R26,R16
000786 d017      	RCALL _putchar0
                 ; 0003 0024         // Detect Package Header
                 ; 0003 0025         if(data == charHeader) {
000787 3204      	CPI  R16,36
000788 f409      	BRNE _0x60004
                 ; 0003 0026             rxPackageIndex0 = 0;
000789 24dd      	CLR  R13
                 ; 0003 0027         }
                 ; 0003 0028 
                 ; 0003 0029         rxPackage0[rxPackageIndex0++] = data;
                 _0x60004:
00078a 2ded      	MOV  R30,R13
00078b 94d3      	INC  R13
00078c e0f0      	LDI  R31,0
00078d 5fe6      	SUBI R30,LOW(-_rxPackage0)
00078e 4ff9      	SBCI R31,HIGH(-_rxPackage0)
00078f 8300      	ST   Z,R16
                 ; 0003 002A 
                 ; 0003 002B         if(rxPackageIndex0 >= RX_BUFFER_SIZE0) {
000790 e2e0      	LDI  R30,LOW(32)
000791 16de      	CP   R13,R30
000792 f008      	BRLO _0x60005
                 ; 0003 002C             rxPackageIndex0 = 0;
000793 24dd      	CLR  R13
                 ; 0003 002D         }
                 ; 0003 002E 
                 ; 0003 002F         if(data == charTerminate) {
                 _0x60005:
000794 3203      	CPI  R16,35
000795 f439      	BRNE _0x60006
                 ; 0003 0030             rxPackageIndexCount0 = (rxPackageIndex0 - 1);
000796 2ded      	MOV  R30,R13
000797 50e1      	SUBI R30,LOW(1)
000798 2ece      	MOV  R12,R30
                 ; 0003 0031             rxPackageIndex0 = 0;
000799 24dd      	CLR  R13
                 ; 0003 0032             _FlagPackageTerminate0 = 1;
00079a e0e1      	LDI  R30,LOW(1)
00079b 93e0 0609 	STS  __FlagPackageTerminate0,R30
                 ; 0003 0033         }
                 ; 0003 0034     }
                 _0x60006:
                 ; 0003 0035 }
                 _0x60003:
00079d c036      	RJMP _0x6003E
                 ;/* ================================================================================= */
                 ;// Write a character to the USART0 Transmitter
                 ;#pragma used+
                 ;void putchar0(uint8_t c) {
                 ; 0003 0039 void putchar0(uint8_t c) {
                 _putchar0:
                 ; 0003 003A     while((UCSR0A & DATA_REGISTER_EMPTY) == 0);
00079e 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x60007:
00079f 9b5d      	SBIS 0xB,5
0007a0 cffe      	RJMP _0x60007
                 ; 0003 003B     UDR0 = c;
0007a1 81e8      	LD   R30,Y
0007a2 b9ec      	OUT  0xC,R30
                 ; 0003 003C }
0007a3 c048      	RJMP _0x20C0011
                 ;#pragma used-
                 ;
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void) {
                 ; 0003 003F interrupt [31] void usart1_rx_isr(void) {
                 _usart1_rx_isr:
0007a4 940e 16cf 	CALL SUBOPT_0x20
                 ; 0003 0040 
                 ; 0003 0041     uint8_t status, data;
                 ; 0003 0042     status  = UCSR1A;
                 ;	status -> R17
                 ;	data -> R16
0007a6 9110 009b 	LDS  R17,155
                 ; 0003 0043     data    = UDR1;
0007a8 9100 009c 	LDS  R16,156
                 ; 0003 0044 
                 ; 0003 0045     if((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
0007aa 2fe1      	MOV  R30,R17
0007ab 71ec      	ANDI R30,LOW(0x1C)
0007ac f539      	BRNE _0x6000A
                 ; 0003 0046         rx_buffer1[rx_wr_index1++] = data;
0007ad 01f5      	MOVW R30,R10
0007ae 9631      	ADIW R30,1
0007af 015f      	MOVW R10,R30
0007b0 9731      	SBIW R30,1
0007b1 5de0      	SUBI R30,LOW(-_rx_buffer1)
0007b2 4ff9      	SBCI R31,HIGH(-_rx_buffer1)
0007b3 8300      	ST   Z,R16
                 ; 0003 0047          //printDebug("%02X ",data);
                 ; 0003 0048         if (rx_wr_index1 == RX_BUFFER_SIZE1)
0007b4 e0e0      	LDI  R30,LOW(512)
0007b5 e0f2      	LDI  R31,HIGH(512)
0007b6 15ea      	CP   R30,R10
0007b7 05fb      	CPC  R31,R11
0007b8 f411      	BRNE _0x6000B
                 ; 0003 0049             rx_wr_index1 = 0;
0007b9 24aa      	CLR  R10
0007ba 24bb      	CLR  R11
                 ; 0003 004A         if (++rx_counter1 == RX_BUFFER_SIZE1) {
                 _0x6000B:
0007bb e2ae      	LDI  R26,LOW(_rx_counter1)
0007bc e0b6      	LDI  R27,HIGH(_rx_counter1)
0007bd 940e 16df 	CALL SUBOPT_0x21
0007bf 30e0      	CPI  R30,LOW(0x200)
0007c0 e0a2      	LDI  R26,HIGH(0x200)
0007c1 07fa      	CPC  R31,R26
0007c2 f489      	BRNE _0x6000C
                 ; 0003 004B             printDebug("WARNING : UART0 BUFFER OVERFLOW %d\r\n", rx_counter1);
                +
0007c3 e0e2     +LDI R30 , LOW ( 2 * _0x60000 + ( 0 ) )
0007c4 e0f3     +LDI R31 , HIGH ( 2 * _0x60000 + ( 0 ) )
                 	__POINTW1FN _0x60000,0
0007c5 93fa      	ST   -Y,R31
0007c6 93ea      	ST   -Y,R30
0007c7 91e0 062e 	LDS  R30,_rx_counter1
0007c9 91f0 062f 	LDS  R31,_rx_counter1+1
0007cb 940e 16e5 	CALL SUBOPT_0x22
                 ; 0003 004C             rx_counter1 = 0;
0007cd e0e0      	LDI  R30,LOW(0)
0007ce 93e0 062e 	STS  _rx_counter1,R30
0007d0 93e0 062f 	STS  _rx_counter1+1,R30
                 ; 0003 004D             rx_buffer_overflow1 = 1;
0007d2 9468      	SET
0007d3 f820      	BLD  R2,0
                 ; 0003 004E         }
                 ; 0003 004F     }
                 _0x6000C:
                 ; 0003 0050 }
                 _0x6000A:
                 _0x6003E:
0007d4 9109      	LD   R16,Y+
0007d5 9119      	LD   R17,Y+
0007d6 91e9      	LD   R30,Y+
0007d7 bfef      	OUT  SREG,R30
0007d8 91f9      	LD   R31,Y+
0007d9 91e9      	LD   R30,Y+
0007da 91b9      	LD   R27,Y+
0007db 91a9      	LD   R26,Y+
0007dc 9199      	LD   R25,Y+
0007dd 9189      	LD   R24,Y+
0007de 9179      	LD   R23,Y+
0007df 9169      	LD   R22,Y+
0007e0 90f9      	LD   R15,Y+
0007e1 9019      	LD   R1,Y+
0007e2 9009      	LD   R0,Y+
0007e3 9518      	RETI
                 ;
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART1 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void) {
                 ; 0003 0057 char getchar(void) {
                 ; 0003 0058 
                 ; 0003 0059     uint8_t data;
                 ; 0003 005A 
                 ; 0003 005B     while (rx_counter1 == 0);
                 ;	data -> R17
                 ; 0003 005C     data = rx_buffer1[rx_rd_index1++];
                 ; 0003 005D     if(rx_rd_index1 == RX_BUFFER_SIZE1)
                 ; 0003 005E         rx_rd_index1 = 0;
                 ; 0003 005F     #asm("cli")
                 ; 0003 0060     --rx_counter1;
                 ; 0003 0061     #asm("sei")
                 ; 0003 0062     return data;
                 ; 0003 0063 }
                 ;
                 ;
                 ;#pragma used-
                 ;// Write a character to the USART1 Transmitter
                 ;#pragma used+
                 ;void putchar1(uint8_t c) {
                 ; 0003 0069 void putchar1(uint8_t c) {
                 _putchar1:
                 ; 0003 006A 
                 ; 0003 006B     while((UCSR1A & DATA_REGISTER_EMPTY) == 0);
0007e4 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x60011:
0007e5 91e0 009b 	LDS  R30,155
0007e7 72e0      	ANDI R30,LOW(0x20)
0007e8 f3e1      	BREQ _0x60011
                 ; 0003 006C     UDR1 = c;
0007e9 81e8      	LD   R30,Y
0007ea 93e0 009c 	STS  156,R30
                 ; 0003 006D }
                 _0x20C0011:
0007ec 9621      	ADIW R28,1
0007ed 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;
                 ;void send_uart(uint8_t port, uint8_t *buffer) {
                 ; 0003 0071 void send_uart(uint8_t port, uint8_t *buffer) {
                 _send_uart:
                 ; 0003 0072 
                 ; 0003 0073     uint8_t i = 0;
                 ; 0003 0074 
                 ; 0003 0075     switch(port) {
0007ee 93ba      	ST   -Y,R27
0007ef 93aa      	ST   -Y,R26
0007f0 931a      	ST   -Y,R17
                 ;	port -> Y+3
                 ;	*buffer -> Y+1
                 ;	i -> R17
0007f1 e010      	LDI  R17,0
0007f2 81eb      	LDD  R30,Y+3
0007f3 e0f0      	LDI  R31,0
                 ; 0003 0076         case 0:
0007f4 9730      	SBIW R30,0
0007f5 f461      	BRNE _0x60017
                 ; 0003 0077             while(buffer[i] != 0) {
                 _0x60018:
0007f6 940e 16e8 	CALL SUBOPT_0x23
0007f8 91ec      	LD   R30,X
0007f9 30e0      	CPI  R30,0
0007fa f031      	BREQ _0x6001A
                 ; 0003 0078                 putchar0(buffer[i]);
0007fb 940e 16e8 	CALL SUBOPT_0x23
0007fd 91ac      	LD   R26,X
0007fe df9f      	RCALL _putchar0
                 ; 0003 0079                 i++;
0007ff 5f1f      	SUBI R17,-1
                 ; 0003 007A             }
000800 cff5      	RJMP _0x60018
                 _0x6001A:
                 ; 0003 007B             break;
000801 c00f      	RJMP _0x60016
                 ; 0003 007C         case 1:
                 _0x60017:
000802 30e1      	CPI  R30,LOW(0x1)
000803 e0a0      	LDI  R26,HIGH(0x1)
000804 07fa      	CPC  R31,R26
000805 f459      	BRNE _0x60016
                 ; 0003 007D             while(buffer[i] != 0) {
                 _0x6001C:
000806 940e 16e8 	CALL SUBOPT_0x23
000808 91ec      	LD   R30,X
000809 30e0      	CPI  R30,0
00080a f031      	BREQ _0x6001E
                 ; 0003 007E                 putchar1(buffer[i]);
00080b 940e 16e8 	CALL SUBOPT_0x23
00080d 91ac      	LD   R26,X
00080e dfd5      	RCALL _putchar1
                 ; 0003 007F                 i++;
00080f 5f1f      	SUBI R17,-1
                 ; 0003 0080             }
000810 cff5      	RJMP _0x6001C
                 _0x6001E:
                 ; 0003 0081             break;
                 ; 0003 0082     }
                 _0x60016:
                 ; 0003 0083 }
000811 8118      	LDD  R17,Y+0
000812 c0c8      	RJMP _0x20C000F
                 ;
                 ;
                 ;void init_uart(uint8_t channel, uint32_t baud) {
                 ; 0003 0086 void init_uart(uint8_t channel, uint32_t baud) {
                 _init_uart:
                 ; 0003 0087 
                 ; 0003 0088     switch(channel) {
000813 940e 1cc2 	CALL __PUTPARD2
                 ;	channel -> Y+4
                 ;	baud -> Y+0
000815 81ec      	LDD  R30,Y+4
000816 e0f0      	LDI  R31,0
                 ; 0003 0089     case 0:
000817 9730      	SBIW R30,0
000818 f571      	BRNE _0x60022
                 ; 0003 008A         // USART0 initialization
                 ; 0003 008B         // FOSC = 11.0592 MHz
                 ; 0003 008C         // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0003 008D         // USART0 Receiver: On
                 ; 0003 008E         // USART0 Transmitter: On
                 ; 0003 008F         // USART0 Mode: Asynchronous
                 ; 0003 0090         // USART0 Baud Rate: 9600
                 ; 0003 0091         UCSR0A=0x00;
000819 e0e0      	LDI  R30,LOW(0)
00081a b9eb      	OUT  0xB,R30
                 ; 0003 0092         UCSR0B=0x98;
00081b e9e8      	LDI  R30,LOW(152)
00081c b9ea      	OUT  0xA,R30
                 ; 0003 0093         UCSR0C=0x06;
00081d e0e6      	LDI  R30,LOW(6)
00081e 93e0 0095 	STS  149,R30
                 ; 0003 0094         UBRR0H=0x00;
000820 e0e0      	LDI  R30,LOW(0)
000821 93e0 0090 	STS  144,R30
                 ; 0003 0095         switch (baud) {
000823 940e 16ee 	CALL SUBOPT_0x24
                 ; 0003 0096         case 2400:
000825 f411      	BRNE _0x60026
                 ; 0003 0097             UBRR0L = 0x1F;
000826 e1ef      	LDI  R30,LOW(31)
000827 c01d      	RJMP _0x6003A
                 ; 0003 0098             break;
                 ; 0003 0099         case 9600:
                 _0x60026:
000828 940e 16f8 	CALL SUBOPT_0x25
00082a f0c9      	BREQ _0x6003B
                 ; 0003 009A             UBRR0L = 0x47;
                 ; 0003 009B             break;
                 ; 0003 009C         case 14400:
00082b 940e 1700 	CALL SUBOPT_0x26
00082d f411      	BRNE _0x60028
                 ; 0003 009D             UBRR0L = 0x2F;
00082e e2ef      	LDI  R30,LOW(47)
00082f c015      	RJMP _0x6003A
                 ; 0003 009E             break;
                 ; 0003 009F         case 19200:
                 _0x60028:
000830 940e 1708 	CALL SUBOPT_0x27
000832 f411      	BRNE _0x60029
                 ; 0003 00A0             UBRR0L = 0x23;
000833 e2e3      	LDI  R30,LOW(35)
000834 c010      	RJMP _0x6003A
                 ; 0003 00A1             break;
                 ; 0003 00A2         case 38400:
                 _0x60029:
000835 940e 1710 	CALL SUBOPT_0x28
000837 f411      	BRNE _0x6002A
                 ; 0003 00A3             UBRR0L = 0x11;
000838 e1e1      	LDI  R30,LOW(17)
000839 c00b      	RJMP _0x6003A
                 ; 0003 00A4             break;
                 ; 0003 00A5         case 57600:
                 _0x6002A:
00083a 940e 1718 	CALL SUBOPT_0x29
00083c f411      	BRNE _0x6002B
                 ; 0003 00A6             UBRR0L = 0x0B;
00083d e0eb      	LDI  R30,LOW(11)
00083e c006      	RJMP _0x6003A
                 ; 0003 00A7             break;
                 ; 0003 00A8         case 115200:
                 _0x6002B:
00083f 940e 1720 	CALL SUBOPT_0x2A
000841 f411      	BRNE _0x6002D
                 ; 0003 00A9             UBRR0L = 0x05;
000842 e0e5      	LDI  R30,LOW(5)
000843 c001      	RJMP _0x6003A
                 ; 0003 00AA             break;
                 ; 0003 00AB         default:
                 _0x6002D:
                 ; 0003 00AC             UBRR0L = 0x47;       // default baudrate is 9600
                 _0x6003B:
000844 e4e7      	LDI  R30,LOW(71)
                 _0x6003A:
000845 b9e9      	OUT  0x9,R30
                 ; 0003 00AD         }
                 ; 0003 00AE         break;
000846 c034      	RJMP _0x60021
                 ; 0003 00AF     case 1:
                 _0x60022:
000847 30e1      	CPI  R30,LOW(0x1)
000848 e0a0      	LDI  R26,HIGH(0x1)
000849 07fa      	CPC  R31,R26
00084a f581      	BRNE _0x60021
                 ; 0003 00B0         // USART1 initialization
                 ; 0003 00B1         // FOSC = 11.0592 MHz
                 ; 0003 00B2         // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0003 00B3         // USART1 Receiver: On
                 ; 0003 00B4         // USART1 Transmitter: On
                 ; 0003 00B5         // USART1 Mode: Asynchronous
                 ; 0003 00B6         // USART1 Baud Rate: 9600
                 ; 0003 00B7         UCSR1A=0x00;
00084b e0e0      	LDI  R30,LOW(0)
00084c 93e0 009b 	STS  155,R30
                 ; 0003 00B8         UCSR1B=0x98;
00084e e9e8      	LDI  R30,LOW(152)
00084f 93e0 009a 	STS  154,R30
                 ; 0003 00B9         UCSR1C=0x06;
000851 e0e6      	LDI  R30,LOW(6)
000852 93e0 009d 	STS  157,R30
                 ; 0003 00BA         UBRR1H=0x00;
000854 e0e0      	LDI  R30,LOW(0)
000855 93e0 0098 	STS  152,R30
                 ; 0003 00BB         switch ( baud ) {
000857 940e 16ee 	CALL SUBOPT_0x24
                 ; 0003 00BC         case 2400:
000859 f411      	BRNE _0x60032
                 ; 0003 00BD             UBRR1L = 0x1F;
00085a e1ef      	LDI  R30,LOW(31)
00085b c01d      	RJMP _0x6003C
                 ; 0003 00BE             break;
                 ; 0003 00BF         case 9600:
                 _0x60032:
00085c 940e 16f8 	CALL SUBOPT_0x25
00085e f0c9      	BREQ _0x6003D
                 ; 0003 00C0             UBRR1L = 0x47;
                 ; 0003 00C1             break;
                 ; 0003 00C2         case 14400:
00085f 940e 1700 	CALL SUBOPT_0x26
000861 f411      	BRNE _0x60034
                 ; 0003 00C3             UBRR1L = 0x2F;
000862 e2ef      	LDI  R30,LOW(47)
000863 c015      	RJMP _0x6003C
                 ; 0003 00C4             break;
                 ; 0003 00C5         case 19200:
                 _0x60034:
000864 940e 1708 	CALL SUBOPT_0x27
000866 f411      	BRNE _0x60035
                 ; 0003 00C6             UBRR1L = 0x23;
000867 e2e3      	LDI  R30,LOW(35)
000868 c010      	RJMP _0x6003C
                 ; 0003 00C7             break;
                 ; 0003 00C8         case 38400:
                 _0x60035:
000869 940e 1710 	CALL SUBOPT_0x28
00086b f411      	BRNE _0x60036
                 ; 0003 00C9             UBRR1L = 0x11;
00086c e1e1      	LDI  R30,LOW(17)
00086d c00b      	RJMP _0x6003C
                 ; 0003 00CA             break;
                 ; 0003 00CB         case 57600:
                 _0x60036:
00086e 940e 1718 	CALL SUBOPT_0x29
000870 f411      	BRNE _0x60037
                 ; 0003 00CC             UBRR1L = 0x0B;
000871 e0eb      	LDI  R30,LOW(11)
000872 c006      	RJMP _0x6003C
                 ; 0003 00CD             break;
                 ; 0003 00CE         case 115200:
                 _0x60037:
000873 940e 1720 	CALL SUBOPT_0x2A
000875 f411      	BRNE _0x60039
                 ; 0003 00CF             UBRR1L = 0x05;
000876 e0e5      	LDI  R30,LOW(5)
000877 c001      	RJMP _0x6003C
                 ; 0003 00D0             break;
                 ; 0003 00D1         default:
                 _0x60039:
                 ; 0003 00D2             UBRR1L = 0x47;       // default baudrate is 9600
                 _0x6003D:
000878 e4e7      	LDI  R30,LOW(71)
                 _0x6003C:
000879 93e0 0099 	STS  153,R30
                 ; 0003 00D3         }
                 ; 0003 00D4         break;
                 ; 0003 00D5 
                 ; 0003 00D6     }
                 _0x60021:
                 ; 0003 00D7 
                 ; 0003 00D8 }
00087b 9625      	ADIW R28,5
00087c 9508      	RET
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <uart.h>
                 ;#include <xbee.h>
                 ;#include <queue.h>
                 ;#include <debug.h>
                 ;#include <int_protocol.h>
                 ;#include <eeprom.h>
                 ;
                 ;#define XBEE_RESET PORTE.2
                 ;
                 ;char EndDevice_MacAddress[8];
                 ;char Gateway_MacAddress[8];
                 ;
                 ;uint8_t AI_COMMAND[]            = {0x7E,0x00,0x04,0x08,0x01,0x41,0x49,0x6C};
                 
                 	.DSEG
                 ;uint8_t SL_COMMAND[]            = {0x7E,0x00,0x04,0x08,0x01,0x53,0x4C,0x57};
                 ;uint8_t SH_COMMAND[]            = {0x7E,0x00,0x04,0x08,0x01,0x53,0x48,0x5B};
                 ;uint8_t EVENT[2]                = {0x00,0x00};
                 ;uint8_t STATUS_DEVICE           = 0;
                 ;int flag_state                  = 0;
                 ;
                 ;
                 ;void xbee_sendATCommand(int param){
                 ; 0004 001A void xbee_sendATCommand(int param){
                 
                 	.CSEG
                 _xbee_sendATCommand:
                 ; 0004 001B      switch(param) {
00087d 940e 15ff 	CALL SUBOPT_0x0
                 ;	param -> Y+0
                 ; 0004 001C         case 0  :
00087f f459      	BRNE _0x80009
                 ; 0004 001D             printDebug("\r\n ++++++++++ Send AI ++++++++\r\n");
                +
000880 e4e0     +LDI R30 , LOW ( 2 * _0x80000 + ( 0 ) )
000881 e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 0 ) )
                 	__POINTW1FN _0x80000,0
000882 940e 164d 	CALL SUBOPT_0x8
                 ; 0004 001E             print_payload(AI_COMMAND,8);
000884 eeec      	LDI  R30,LOW(_AI_COMMAND)
000885 e0f8      	LDI  R31,HIGH(_AI_COMMAND)
000886 940e 1728 	CALL SUBOPT_0x2B
                 ; 0004 001F             xbee_send(AI_COMMAND,8);
000888 eeec      	LDI  R30,LOW(_AI_COMMAND)
000889 e0f8      	LDI  R31,HIGH(_AI_COMMAND)
00088a c01d      	RJMP _0x80035
                 ; 0004 0020 
                 ; 0004 0021         break;
                 ; 0004 0022 
                 ; 0004 0023         case 1  :
                 _0x80009:
00088b 30e1      	CPI  R30,LOW(0x1)
00088c e0a0      	LDI  R26,HIGH(0x1)
00088d 07fa      	CPC  R31,R26
00088e f459      	BRNE _0x8000A
                 ; 0004 0024             printDebug("\r\n ++++++++++ Send SH ++++++++\r\n");
                +
00088f e6e1     +LDI R30 , LOW ( 2 * _0x80000 + ( 33 ) )
000890 e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 33 ) )
                 	__POINTW1FN _0x80000,33
000891 940e 164d 	CALL SUBOPT_0x8
                 ; 0004 0025             print_payload(SH_COMMAND,8);
000893 efec      	LDI  R30,LOW(_SH_COMMAND)
000894 e0f8      	LDI  R31,HIGH(_SH_COMMAND)
000895 940e 1728 	CALL SUBOPT_0x2B
                 ; 0004 0026             xbee_send(SH_COMMAND,8);
000897 efec      	LDI  R30,LOW(_SH_COMMAND)
000898 e0f8      	LDI  R31,HIGH(_SH_COMMAND)
000899 c00e      	RJMP _0x80035
                 ; 0004 0027 
                 ; 0004 0028         break;
                 ; 0004 0029 
                 ; 0004 002A         case 2  :
                 _0x8000A:
00089a 30e2      	CPI  R30,LOW(0x2)
00089b e0a0      	LDI  R26,HIGH(0x2)
00089c 07fa      	CPC  R31,R26
00089d f479      	BRNE _0x80008
                 ; 0004 002B             printDebug("\r\n ++++++++++ Send SL ++++++++\r\n");
                +
00089e e8e2     +LDI R30 , LOW ( 2 * _0x80000 + ( 66 ) )
00089f e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 66 ) )
                 	__POINTW1FN _0x80000,66
0008a0 940e 164d 	CALL SUBOPT_0x8
                 ; 0004 002C             print_payload(SL_COMMAND,8);
0008a2 efe4      	LDI  R30,LOW(_SL_COMMAND)
0008a3 e0f8      	LDI  R31,HIGH(_SL_COMMAND)
0008a4 940e 1728 	CALL SUBOPT_0x2B
                 ; 0004 002D             xbee_send(SL_COMMAND,8);
0008a6 efe4      	LDI  R30,LOW(_SL_COMMAND)
0008a7 e0f8      	LDI  R31,HIGH(_SL_COMMAND)
                 _0x80035:
0008a8 93fa      	ST   -Y,R31
0008a9 93ea      	ST   -Y,R30
0008aa 940e 172e 	CALL SUBOPT_0x2C
0008ac d10b      	RCALL _xbee_send
                 ; 0004 002E         break;
                 ; 0004 002F      }
                 _0x80008:
                 ; 0004 0030 }
                 _0x20C0010:
0008ad 9622      	ADIW R28,2
0008ae 9508      	RET
                 ;
                 ;int xbee_checksum(char buf[],int len) {
                 ; 0004 0032 int xbee_checksum(char buf[],int len) {
                 _xbee_checksum:
                 ; 0004 0033 
                 ; 0004 0034     int i;
                 ; 0004 0035     char sum = 0;
                 ; 0004 0036     for (i = 0; i < len; i++) {
0008af 93ba      	ST   -Y,R27
0008b0 93aa      	ST   -Y,R26
0008b1 940e 1cfd 	CALL __SAVELOCR4
                 ;	buf -> Y+6
                 ;	len -> Y+4
                 ;	i -> R16,R17
                 ;	sum -> R19
0008b3 e030      	LDI  R19,0
                +
0008b4 e000     +LDI R16 , LOW ( 0 )
0008b5 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x8000D:
0008b6 81ec      	LDD  R30,Y+4
0008b7 81fd      	LDD  R31,Y+4+1
0008b8 170e      	CP   R16,R30
0008b9 071f      	CPC  R17,R31
0008ba f454      	BRGE _0x8000E
                 ; 0004 0037         sum += buf[i];
0008bb 01f8      	MOVW R30,R16
0008bc 81ae      	LDD  R26,Y+6
0008bd 81bf      	LDD  R27,Y+6+1
0008be 0fae      	ADD  R26,R30
0008bf 1fbf      	ADC  R27,R31
0008c0 91ec      	LD   R30,X
0008c1 0f3e      	ADD  R19,R30
                 ; 0004 0038     }
                +
0008c2 5f0f     +SUBI R16 , LOW ( - 1 )
0008c3 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0008c4 cff1      	RJMP _0x8000D
                 _0x8000E:
                 ; 0004 0039     return (0xFF - (sum & 0xFF));
0008c5 2fe3      	MOV  R30,R19
0008c6 e0f0      	LDI  R31,0
0008c7 70f0      	ANDI R31,HIGH(0xFF)
0008c8 efaf      	LDI  R26,LOW(255)
0008c9 e0b0      	LDI  R27,HIGH(255)
0008ca 940e 1ccd 	CALL __SWAPW12
0008cc 1bea      	SUB  R30,R26
0008cd 0bfb      	SBC  R31,R27
0008ce 940e 1d04 	CALL __LOADLOCR4
0008d0 940c 0ac4 	JMP  _0x20C000C
                 ; 0004 003A }
                 ;
                 ;
                 ;void xbee_sendAPI(uint8_t buff[],uint16_t len){
                 ; 0004 003D void xbee_sendAPI(uint8_t buff[],uint16_t len){
                 _xbee_sendAPI:
                 ; 0004 003E     xbee_send(buff,len);
0008d2 93ba      	ST   -Y,R27
0008d3 93aa      	ST   -Y,R26
                 ;	buff -> Y+2
                 ;	len -> Y+0
0008d4 81ea      	LDD  R30,Y+2
0008d5 81fb      	LDD  R31,Y+2+1
0008d6 93fa      	ST   -Y,R31
0008d7 93ea      	ST   -Y,R30
0008d8 81aa      	LDD  R26,Y+2
0008d9 81bb      	LDD  R27,Y+2+1
0008da d0dd      	RCALL _xbee_send
                 ; 0004 003F }
                 _0x20C000F:
0008db 9624      	ADIW R28,4
0008dc 9508      	RET
                 ;
                 ;
                 ;void xbee_receivePacket( uint8_t recvPacket[],uint16_t size){
                 ; 0004 0042 void xbee_receivePacket( uint8_t recvPacket[],uint16_t size){
                 _xbee_receivePacket:
                 ; 0004 0043 
                 ; 0004 0044     int start = 3;
                 ; 0004 0045     if(size <= 5)
0008dd 940e 1731 	CALL SUBOPT_0x2D
                 ;	recvPacket -> Y+4
                 ;	size -> Y+2
                 ;	start -> R16,R17
                +
0008df e003     +LDI R16 , LOW ( 3 )
0008e0 e010     +LDI R17 , HIGH ( 3 )
                 	__GETWRN 16,17,3
0008e1 81aa      	LDD  R26,Y+2
0008e2 81bb      	LDD  R27,Y+2+1
0008e3 9716      	SBIW R26,6
0008e4 f408      	BRSH _0x8000F
                 ; 0004 0046         return;
0008e5 c0e3      	RJMP _0x20C000E
                 ; 0004 0047     printDebug("\r\n ++++++++++ Recreive Data ++++++++\r\n");
                 _0x8000F:
                +
0008e6 eae3     +LDI R30 , LOW ( 2 * _0x80000 + ( 99 ) )
0008e7 e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 99 ) )
                 	__POINTW1FN _0x80000,99
0008e8 940e 164d 	CALL SUBOPT_0x8
                 ; 0004 0048     print_payload(recvPacket, size);
0008ea 81ec      	LDD  R30,Y+4
0008eb 81fd      	LDD  R31,Y+4+1
0008ec 93fa      	ST   -Y,R31
0008ed 93ea      	ST   -Y,R30
0008ee 81ac      	LDD  R26,Y+4
0008ef 81bd      	LDD  R27,Y+4+1
0008f0 940e 0618 	CALL _print_payload
                 ; 0004 0049     xbee_processPacket(&recvPacket[start]);
0008f2 940e 1736 	CALL SUBOPT_0x2E
0008f4 d001      	RCALL _xbee_processPacket
                 ; 0004 004A 
                 ; 0004 004B }
0008f5 c0d3      	RJMP _0x20C000E
                 ;
                 ;void xbee_processPacket(char *buf) {
                 ; 0004 004D void xbee_processPacket(char *buf) {
                 _xbee_processPacket:
                 ; 0004 004E       uint8_t frameType;
                 ; 0004 004F       frameType = buf[0];
0008f6 93ba      	ST   -Y,R27
0008f7 93aa      	ST   -Y,R26
0008f8 931a      	ST   -Y,R17
                 ;	*buf -> Y+1
                 ;	frameType -> R17
0008f9 81a9      	LDD  R26,Y+1
0008fa 81ba      	LDD  R27,Y+1+1
0008fb 911c      	LD   R17,X
                 ; 0004 0050       switch(frameType) {
0008fc 2fe1      	MOV  R30,R17
0008fd e0f0      	LDI  R31,0
                 ; 0004 0051 
                 ; 0004 0052         /*=============== Recive AI ===============*/
                 ; 0004 0053         case 0x88  :
0008fe 38e8      	CPI  R30,LOW(0x88)
0008ff e0a0      	LDI  R26,HIGH(0x88)
000900 07fa      	CPC  R31,R26
000901 f591      	BRNE _0x80013
                 ; 0004 0054             if(buf[2] == 0x41 && buf[3] == 0x49){
000902 940e 173c 	CALL SUBOPT_0x2F
000904 34a1      	CPI  R26,LOW(0x41)
000905 f421      	BRNE _0x80015
000906 940e 1741 	CALL SUBOPT_0x30
000908 34a9      	CPI  R26,LOW(0x49)
000909 f009      	BREQ _0x80016
                 _0x80015:
00090a c003      	RJMP _0x80014
                 _0x80016:
                 ; 0004 0055                 flag_state = 1;
00090b e0e1      	LDI  R30,LOW(1)
00090c e0f0      	LDI  R31,HIGH(1)
00090d c021      	RJMP _0x80036
                 ; 0004 0056             }
                 ; 0004 0057 
                 ; 0004 0058         /*=============== Recive SH ===============*/
                 ; 0004 0059 
                 ; 0004 005A             else if (buf[2] == 0x53 && buf[3] == 0x48){
                 _0x80014:
00090e 940e 173c 	CALL SUBOPT_0x2F
000910 35a3      	CPI  R26,LOW(0x53)
000911 f421      	BRNE _0x80019
000912 940e 1741 	CALL SUBOPT_0x30
000914 34a8      	CPI  R26,LOW(0x48)
000915 f009      	BREQ _0x8001A
                 _0x80019:
000916 c007      	RJMP _0x80018
                 _0x8001A:
                 ; 0004 005B                 memcpy(EndDevice_MacAddress,&buf[5],4);
000917 940e 1746 	CALL SUBOPT_0x31
000919 940e 174b 	CALL SUBOPT_0x32
                 ; 0004 005C                 flag_state = 2;
00091b e0e2      	LDI  R30,LOW(2)
00091c e0f0      	LDI  R31,HIGH(2)
00091d c011      	RJMP _0x80036
                 ; 0004 005D             }
                 ; 0004 005E 
                 ; 0004 005F         /*=============== Recive SL ===============*/
                 ; 0004 0060 
                 ; 0004 0061             else if( buf[2] == 0x53 && buf[3] == 0x4C){
                 _0x80018:
00091e 940e 173c 	CALL SUBOPT_0x2F
000920 35a3      	CPI  R26,LOW(0x53)
000921 f421      	BRNE _0x8001D
000922 940e 1741 	CALL SUBOPT_0x30
000924 34ac      	CPI  R26,LOW(0x4C)
000925 f009      	BREQ _0x8001E
                 _0x8001D:
000926 c00c      	RJMP _0x8001C
                 _0x8001E:
                 ; 0004 0062                 memcpy(&EndDevice_MacAddress[4],&buf[5],4);
                +
000927 e8e6     +LDI R30 , LOW ( _EndDevice_MacAddress + ( 4 ) )
000928 e0f8     +LDI R31 , HIGH ( _EndDevice_MacAddress + ( 4 ) )
                 	__POINTW1MN _EndDevice_MacAddress,4
000929 93fa      	ST   -Y,R31
00092a 93ea      	ST   -Y,R30
00092b 940e 174b 	CALL SUBOPT_0x32
                 ; 0004 0063                 flag_state = 3;
00092d e0e3      	LDI  R30,LOW(3)
00092e e0f0      	LDI  R31,HIGH(3)
                 _0x80036:
00092f 93e0 062a 	STS  _flag_state,R30
000931 93f0 062b 	STS  _flag_state+1,R31
                 ; 0004 0064             }
                 ; 0004 0065 
                 ; 0004 0066         break;
                 _0x8001C:
000933 c062      	RJMP _0x80012
                 ; 0004 0067 
                 ; 0004 0068         /*=============== Recive ACK ===============*/
                 ; 0004 0069         case 0x90  :
                 _0x80013:
000934 39e0      	CPI  R30,LOW(0x90)
000935 e0a0      	LDI  R26,HIGH(0x90)
000936 07fa      	CPC  R31,R26
000937 f011      	BREQ PC+3
000938 940c 0996 	JMP _0x80012
                 ; 0004 006A 
                 ; 0004 006B         if(buf[32] == 0xA2){
00093a 940e 1754 	CALL SUBOPT_0x33
00093c 3aa2      	CPI  R26,LOW(0xA2)
00093d f449      	BRNE _0x80020
                 ; 0004 006C             memcpy(Gateway_MacAddress,&buf[1],8);
00093e 940e 1759 	CALL SUBOPT_0x34
000940 940e 1416 	CALL _memcpy
                 ; 0004 006D             //input[count_input] = 2;
                 ; 0004 006E             flag_state = 4;
000942 e0e4      	LDI  R30,LOW(4)
000943 e0f0      	LDI  R31,HIGH(4)
000944 940e 169a 	CALL SUBOPT_0x16
                 ; 0004 006F         }
                 ; 0004 0070         else if(buf[32] == 0xA3){
000946 c04f      	RJMP _0x80021
                 _0x80020:
000947 940e 1754 	CALL SUBOPT_0x33
000949 3aa3      	CPI  R26,LOW(0xA3)
00094a f439      	BRNE _0x80022
                 ; 0004 0071             memcpy(Gateway_MacAddress,&buf[1],8);
00094b 940e 1759 	CALL SUBOPT_0x34
00094d 940e 1763 	CALL SUBOPT_0x35
                 ; 0004 0072             input[count_input] = 3;
00094f e0e3      	LDI  R30,LOW(3)
000950 e0f0      	LDI  R31,HIGH(3)
000951 c03e      	RJMP _0x80037
                 ; 0004 0073             count_input++;
                 ; 0004 0074         }
                 ; 0004 0075         else if(buf[32] == 0xA5){
                 _0x80022:
000952 940e 1754 	CALL SUBOPT_0x33
000954 3aa5      	CPI  R26,LOW(0xA5)
000955 f4d9      	BRNE _0x80024
                 ; 0004 0076             memcpy(Gateway_MacAddress,&buf[1],8);
000956 940e 1759 	CALL SUBOPT_0x34
000958 940e 1416 	CALL _memcpy
                 ; 0004 0077             if(buf[34] == 0x01)
00095a 81a9      	LDD  R26,Y+1
00095b 81ba      	LDD  R27,Y+1+1
00095c 9692      	ADIW R26,34
00095d 91ac      	LD   R26,X
00095e 30a1      	CPI  R26,LOW(0x1)
00095f f429      	BRNE _0x80025
                 ; 0004 0078                 input[count_input] = 511;
000960 940e 1770 	CALL SUBOPT_0x36
000962 efef      	LDI  R30,LOW(511)
000963 e0f1      	LDI  R31,HIGH(511)
000964 c009      	RJMP _0x80038
                 ; 0004 0079             else if(buf[34] == 0x00)
                 _0x80025:
000965 81e9      	LDD  R30,Y+1
000966 81fa      	LDD  R31,Y+1+1
000967 a1e2      	LDD  R30,Z+34
000968 30e0      	CPI  R30,0
000969 f431      	BRNE _0x80027
                 ; 0004 007A                 input[count_input] = 510;
00096a 940e 1770 	CALL SUBOPT_0x36
00096c efee      	LDI  R30,LOW(510)
00096d e0f1      	LDI  R31,HIGH(510)
                 _0x80038:
00096e 93ed      	ST   X+,R30
00096f 93fc      	ST   X,R31
                 ; 0004 007B             count_input++;
                 _0x80027:
000970 c021      	RJMP _0x80039
                 ; 0004 007C         }
                 ; 0004 007D         else if(buf[32] == 0xA6){
                 _0x80024:
000971 940e 1754 	CALL SUBOPT_0x33
000973 3aa6      	CPI  R26,LOW(0xA6)
000974 f489      	BRNE _0x80029
                 ; 0004 007E             EVENT[0] = buf[33];
000975 81e9      	LDD  R30,Y+1
000976 81fa      	LDD  R31,Y+1+1
000977 a1e1      	LDD  R30,Z+33
000978 93e0 0893 	STS  _EVENT,R30
                 ; 0004 007F             EVENT[1] = buf[34];
00097a 81e9      	LDD  R30,Y+1
00097b 81fa      	LDD  R31,Y+1+1
00097c a1e2      	LDD  R30,Z+34
                +
00097d 93e0 0894+STS _EVENT + ( 1 ) , R30
                 	__PUTB1MN _EVENT,1
                 ; 0004 0080             memcpy(Gateway_MacAddress,&buf[1],8);
00097f 940e 1759 	CALL SUBOPT_0x34
000981 940e 1763 	CALL SUBOPT_0x35
                 ; 0004 0081             input[count_input] = 6;
000983 e0e6      	LDI  R30,LOW(6)
000984 e0f0      	LDI  R31,HIGH(6)
000985 c00a      	RJMP _0x80037
                 ; 0004 0082             count_input++;
                 ; 0004 0083         }
                 ; 0004 0084         else if(buf[32] == 0xA8){
                 _0x80029:
000986 940e 1754 	CALL SUBOPT_0x33
000988 3aa8      	CPI  R26,LOW(0xA8)
000989 f461      	BRNE _0x8002B
                 ; 0004 0085             memcpy(Gateway_MacAddress,&buf[1],8);
00098a 940e 1759 	CALL SUBOPT_0x34
00098c 940e 1763 	CALL SUBOPT_0x35
                 ; 0004 0086             input[count_input] = 8;
00098e e0e8      	LDI  R30,LOW(8)
00098f e0f0      	LDI  R31,HIGH(8)
                 _0x80037:
000990 93ed      	ST   X+,R30
000991 93fc      	ST   X,R31
                 ; 0004 0087             count_input++;
                 _0x80039:
000992 edab      	LDI  R26,LOW(_count_input)
000993 e0b8      	LDI  R27,HIGH(_count_input)
000994 940e 16df 	CALL SUBOPT_0x21
                 ; 0004 0088         }
                 ; 0004 0089 
                 ; 0004 008A         break;
                 _0x8002B:
                 _0x80021:
                 ; 0004 008B       }
                 _0x80012:
                 ; 0004 008C       if(input[count_input-1] != 0) do_event(input[count_input]);
000996 91e0 08db 	LDS  R30,_count_input
000998 91f0 08dc 	LDS  R31,_count_input+1
00099a 9731      	SBIW R30,1
00099b 940e 177b 	CALL SUBOPT_0x37
00099d 0fae      	ADD  R26,R30
00099e 1fbf      	ADC  R27,R31
00099f 940e 1c95 	CALL __GETW1P
0009a1 9730      	SBIW R30,0
0009a2 f039      	BREQ _0x8002C
0009a3 940e 1770 	CALL SUBOPT_0x36
0009a5 940e 1c95 	CALL __GETW1P
0009a7 01df      	MOVW R26,R30
0009a8 940e 0f77 	CALL _do_event
                 ; 0004 008D       if(count_input == 30)  count_input = 0;
                 _0x8002C:
0009aa 91a0 08db 	LDS  R26,_count_input
0009ac 91b0 08dc 	LDS  R27,_count_input+1
0009ae 975e      	SBIW R26,30
0009af f429      	BRNE _0x8002D
0009b0 e0e0      	LDI  R30,LOW(0)
0009b1 93e0 08db 	STS  _count_input,R30
0009b3 93e0 08dc 	STS  _count_input+1,R30
                 ; 0004 008E }
                 _0x8002D:
0009b5 8118      	LDD  R17,Y+0
0009b6 940c 0d9a 	JMP  _0x20C000A
                 ;
                 ;uint16_t xbee_send(uint8_t buff[],uint16_t len){
                 ; 0004 0090 uint16_t xbee_send(uint8_t buff[],uint16_t len){
                 _xbee_send:
                 ; 0004 0091     uint16_t i;
                 ; 0004 0092     for(i = 0; i < len; i++) {
0009b8 940e 1731 	CALL SUBOPT_0x2D
                 ;	buff -> Y+4
                 ;	len -> Y+2
                 ;	i -> R16,R17
                +
0009ba e000     +LDI R16 , LOW ( 0 )
0009bb e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x8002F:
0009bc 81ea      	LDD  R30,Y+2
0009bd 81fb      	LDD  R31,Y+2+1
0009be 170e      	CP   R16,R30
0009bf 071f      	CPC  R17,R31
0009c0 f438      	BRSH _0x80030
                 ; 0004 0093         putchar1(buff[i]);
0009c1 940e 1736 	CALL SUBOPT_0x2E
0009c3 91ac      	LD   R26,X
0009c4 de1f      	RCALL _putchar1
                 ; 0004 0094     }
                +
0009c5 5f0f     +SUBI R16 , LOW ( - 1 )
0009c6 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0009c7 cff4      	RJMP _0x8002F
                 _0x80030:
                 ; 0004 0095     return i;
0009c8 01f8      	MOVW R30,R16
                 _0x20C000E:
0009c9 8119      	LDD  R17,Y+1
0009ca 8108      	LDD  R16,Y+0
0009cb 9626      	ADIW R28,6
0009cc 9508      	RET
                 ; 0004 0096 }
                 ;
                 ;void xbee_read() {
                 ; 0004 0098 void xbee_read() {
                 _xbee_read:
                 ; 0004 0099 
                 ; 0004 009A     uint8_t readbuf[256];
                 ; 0004 009B     uint8_t data;
                 ; 0004 009C     uint16_t len = 0;
                 ; 0004 009D     int i = 0;
                 ; 0004 009E     delay_ms(100);
0009cd 50d1      	SUBI R29,1
0009ce 940e 1cfb 	CALL __SAVELOCR6
                 ;	readbuf -> Y+6
                 ;	data -> R17
                 ;	len -> R18,R19
                 ;	i -> R20,R21
                +
0009d0 e020     +LDI R18 , LOW ( 0 )
0009d1 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0009d2 e040     +LDI R20 , LOW ( 0 )
0009d3 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0009d4 940e 167b 	CALL SUBOPT_0xF
                 ; 0004 009F 
                 ; 0004 00A0     while (rx_counter1>0){
                 _0x80031:
0009d6 91a0 062e 	LDS  R26,_rx_counter1
0009d8 91b0 062f 	LDS  R27,_rx_counter1+1
0009da 940e 1cec 	CALL __CPW02
0009dc f548      	BRSH _0x80033
                 ; 0004 00A1         data=rx_buffer1[rx_rd_index1++];
0009dd e2ac      	LDI  R26,LOW(_rx_rd_index1)
0009de e0b6      	LDI  R27,HIGH(_rx_rd_index1)
0009df 940e 16df 	CALL SUBOPT_0x21
0009e1 9731      	SBIW R30,1
0009e2 5de0      	SUBI R30,LOW(-_rx_buffer1)
0009e3 4ff9      	SBCI R31,HIGH(-_rx_buffer1)
0009e4 8110      	LD   R17,Z
                 ; 0004 00A2         readbuf[i++] = data;
0009e5 01fa      	MOVW R30,R20
                +
0009e6 5f4f     +SUBI R20 , LOW ( - 1 )
0009e7 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0009e8 01de      	MOVW R26,R28
0009e9 9616      	ADIW R26,6
0009ea 0fea      	ADD  R30,R26
0009eb 1ffb      	ADC  R31,R27
0009ec 8310      	ST   Z,R17
                 ; 0004 00A3         len++;
                +
0009ed 5f2f     +SUBI R18 , LOW ( - 1 )
0009ee 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0004 00A4         #if RX_BUFFER_SIZE1 != 256
                 ; 0004 00A5         if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
0009ef 91a0 062c 	LDS  R26,_rx_rd_index1
0009f1 91b0 062d 	LDS  R27,_rx_rd_index1+1
0009f3 30a0      	CPI  R26,LOW(0x200)
0009f4 e0e2      	LDI  R30,HIGH(0x200)
0009f5 07be      	CPC  R27,R30
0009f6 f429      	BRNE _0x80034
0009f7 e0e0      	LDI  R30,LOW(0)
0009f8 93e0 062c 	STS  _rx_rd_index1,R30
0009fa 93e0 062d 	STS  _rx_rd_index1+1,R30
                 ; 0004 00A6         #endif
                 ; 0004 00A7         #asm("cli")
                 _0x80034:
0009fc 94f8      	cli
                 ; 0004 00A8         --rx_counter1;
0009fd e2ae      	LDI  R26,LOW(_rx_counter1)
0009fe e0b6      	LDI  R27,HIGH(_rx_counter1)
0009ff 91ed      	LD   R30,X+
000a00 91fd      	LD   R31,X+
000a01 9731      	SBIW R30,1
000a02 93fe      	ST   -X,R31
000a03 93ee      	ST   -X,R30
                 ; 0004 00A9         #asm("sei")
000a04 9478      	sei
                 ; 0004 00AA     }
000a05 cfd0      	RJMP _0x80031
                 _0x80033:
                 ; 0004 00AB 
                 ; 0004 00AC     xbee_receivePacket(readbuf, len);
000a06 01fe      	MOVW R30,R28
000a07 9636      	ADIW R30,6
000a08 93fa      	ST   -Y,R31
000a09 93ea      	ST   -Y,R30
000a0a 01d9      	MOVW R26,R18
000a0b ded1      	RCALL _xbee_receivePacket
                 ; 0004 00AD }
000a0c 940e 1d02 	CALL __LOADLOCR6
000a0e 9626      	ADIW R28,6
000a0f 5fdf      	SUBI R29,-1
000a10 9508      	RET
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;#include <io.h>
                 ;#include <initial_system.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <timer.h>
                 ;#include <int_protocol.h>
                 ;#include <adc.h>
                 ;
                 ;/* ================================================================================= */
                 ;int initial_system(void) {
                 ; 0005 000F int initial_system(void) {
                 
                 	.CSEG
                 _initial_system:
                 ; 0005 0010 
                 ; 0005 0011     init_IO();
000a11 d01a      	RCALL _init_IO
                 ; 0005 0012 
                 ; 0005 0013     //============ Uart Initial ============//
                 ; 0005 0014     init_uart(0, 38400);     // uart0 for printDebug
000a12 e0e0      	LDI  R30,LOW(0)
000a13 940e 1780 	CALL SUBOPT_0x38
                 ; 0005 0015     init_uart(1, 38400);    // uart1 for xbee
000a15 e0e1      	LDI  R30,LOW(1)
000a16 940e 1780 	CALL SUBOPT_0x38
                 ; 0005 0016 
                 ; 0005 0017     //============ Timer Initial ============//
                 ; 0005 0018     init_timer();
000a18 940e 0720 	CALL _init_timer
                 ; 0005 0019     enable_timerOverflow(0);      // interrupt every 0.021 sec.
000a1a 940e 1672 	CALL SUBOPT_0xD
000a1c 940e 075f 	CALL _enable_timerOverflow
                 ; 0005 001A     enable_timerOverflow(1);      // interrupt every 1 sec.
000a1e 940e 167f 	CALL SUBOPT_0x10
000a20 940e 075f 	CALL _enable_timerOverflow
                 ; 0005 001B     enable_timerOverflow(3);      // interrupt every 0.5 sec.
000a22 e0a3      	LDI  R26,LOW(3)
000a23 e0b0      	LDI  R27,0
000a24 940e 075f 	CALL _enable_timerOverflow
                 ; 0005 001C 
                 ; 0005 001D     //============ Module Initial ============//
                 ; 0005 001E     init_adc(VREF_AVCC);
000a26 e4a0      	LDI  R26,LOW(64)
000a27 940e 0d69 	CALL _init_adc
                 ; 0005 001F 
                 ; 0005 0020     return 0;
000a29 e0e0      	LDI  R30,LOW(0)
000a2a e0f0      	LDI  R31,HIGH(0)
000a2b 9508      	RET
                 ; 0005 0021 }
                 ;
                 ;/* ================================================================================= */
                 ;void init_IO(void) {
                 ; 0005 0024 void init_IO(void) {
                 _init_IO:
                 ; 0005 0025 
                 ; 0005 0026     /*----- Digital Input -----*/
                 ; 0005 0027     // Initial Direction
                 ; 0005 0028     SW_BUTTON_DDR;           // Switch Button, Join Button
000a2c 98a0      	CBI  0x14,0
                 ; 0005 0029     // pull up
                 ; 0005 002A     SW_BUTTON_PORT = 1;
000a2d 9aa8      	SBI  0x15,0
                 ; 0005 002B 
                 ; 0005 002C     D_SW1_DDR;
000a2e 98d7      	CBI  0x1A,7
                 ; 0005 002D     D_SW2_DDR;
000a2f 98d6      	CBI  0x1A,6
                 ; 0005 002E     D_SW3_DDR;
000a30 98d5      	CBI  0x1A,5
                 ; 0005 002F     D_SW4_DDR;
000a31 98d4      	CBI  0x1A,4
                 ; 0005 0030 
                 ; 0005 0031     /*----- Digital Output -----*/
                 ; 0005 0032     // Initial Direction
                 ; 0005 0033     LED_STAT_DDR;                   // LED Status
000a32 9aa7      	SBI  0x14,7
                 ; 0005 0034     POWER_RELAY_DDR;                // Drive relay
000a33 91e0 0064 	LDS  R30,100
000a35 60e4      	ORI  R30,4
000a36 93e0 0064 	STS  100,R30
                 ; 0005 0035     XBEE_RESET_DDR;
000a38 9a12      	SBI  0x2,2
                 ; 0005 0036     XBEE_SLEEP_DDR;
000a39 91e0 0064 	LDS  R30,100
000a3b 60e8      	ORI  R30,8
000a3c 93e0 0064 	STS  100,R30
                 ; 0005 0037 
                 ; 0005 0038     LED_STAT_OFF;
000a3e 9aaf      	SBI  0x15,7
                 ; 0005 0039     POWER_RELAY_OFF;
000a3f 940e 1605 	CALL SUBOPT_0x1
                 ; 0005 003A     XBEE_RESET_HIGH;      // XBee Reset active low
000a41 9a1a      	SBI  0x3,2
                 ; 0005 003B     XBEE_SLEEP_LOW;
000a42 91e0 0065 	LDS  R30,101
000a44 7fe7      	ANDI R30,0XF7
000a45 93e0 0065 	STS  101,R30
                 ; 0005 003C 
                 ; 0005 003D }
000a47 9508      	RET
                 ;/* ================================================================================= */
                 ;int8_t read_dSwitch() {
                 ; 0005 003F int8_t read_dSwitch() {
                 _read_dSwitch:
                 ; 0005 0040     int8_t read1, read2;
                 ; 0005 0041     read1 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
000a48 931a      	ST   -Y,R17
000a49 930a      	ST   -Y,R16
                 ;	read1 -> R17
                 ;	read2 -> R16
000a4a 940e 1787 	CALL SUBOPT_0x39
000a4c 2f1e      	MOV  R17,R30
                 ; 0005 0042     delay_ms(100);
000a4d 940e 167b 	CALL SUBOPT_0xF
                 ; 0005 0043     read2 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
000a4f 940e 1787 	CALL SUBOPT_0x39
000a51 2f0e      	MOV  R16,R30
                 ; 0005 0044     if(read1 == read2) {
000a52 1701      	CP   R16,R17
000a53 f411      	BRNE _0xA0017
                 ; 0005 0045         return read1;
000a54 2fe1      	MOV  R30,R17
000a55 c001      	RJMP _0x20C000D
                 ; 0005 0046     }else {
                 _0xA0017:
                 ; 0005 0047         return -1;
000a56 efef      	LDI  R30,LOW(255)
                 ; 0005 0048     }
                 ; 0005 0049 }
                 _0x20C000D:
000a57 9109      	LD   R16,Y+
000a58 9119      	LD   R17,Y+
000a59 9508      	RET
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdint.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <math.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <meansure.h>
                 ;
                 ;uint8_t JOIN_A1[]           = {0x7E,0x00,0x23,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x01,0xA1,0x00};
                 
                 	.DSEG
                 ;uint8_t PING_A4[]           = {0x7E,0x00,0x23,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x01,0xA4,0x00};
                 ;uint8_t SEND_EVENT_[]       = {0x7E,0x00,0x25,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x01,0xA5,0x01,0x00,0x00};
                 ;uint8_t SEND_REPORT_[]      = {0x7E,0x00,0x48,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x26,0xA7,0x01,0x01,0x00,0x00,0x00,0x00,0x0                 0,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _voltage[8]         = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _amp[8]             = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _power[8]           = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _watt[8]            = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;
                 ;void reverse(char *str, int len){
                 ; 0006 0016 void reverse(char *str, int len){
                 
                 	.CSEG
                 _reverse:
                 ; 0006 0017     int i=0,j=len-1,temp;
                 ; 0006 0018 
000a5a 93ba      ; 0006 0019     while (i<j){
000a5b 93aa      	ST   -Y,R27
000a5c 940e 1cfb 	ST   -Y,R26
                 	CALL __SAVELOCR6
                 ;	*str -> Y+8
                 ;	len -> Y+6
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                +
000a5e e000     +LDI R16 , LOW ( 0 )
000a5f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000a60 81ee      	LDD  R30,Y+6
000a61 81ff      	LDD  R31,Y+6+1
000a62 9731      	SBIW R30,1
000a63 019f      	MOVW R18,R30
                 _0xC0007:
                +
000a64 1702     +CP R16 , R18
000a65 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
000a66 f4dc      	BRGE _0xC0009
                 ; 0006 001A         temp = str[i];
000a67 01f8      	MOVW R30,R16
000a68 85a8      	LDD  R26,Y+8
000a69 85b9      	LDD  R27,Y+8+1
000a6a 0fae      	ADD  R26,R30
000a6b 1fbf      	ADC  R27,R31
000a6c 914c      	LD   R20,X
000a6d 2755      	CLR  R21
                 ; 0006 001B         str[i] = str[j];
000a6e 940e 16b8 	CALL SUBOPT_0x1C
000a70 010f      	MOVW R0,R30
000a71 01f9      	MOVW R30,R18
000a72 85a8      	LDD  R26,Y+8
000a73 85b9      	LDD  R27,Y+8+1
000a74 0fae      	ADD  R26,R30
000a75 1fbf      	ADC  R27,R31
000a76 91ec      	LD   R30,X
000a77 01d0      	MOVW R26,R0
000a78 93ec      	ST   X,R30
                 ; 0006 001C         str[j] = temp;
000a79 01f9      	MOVW R30,R18
000a7a 940e 16b8 	CALL SUBOPT_0x1C
000a7c 8340      	ST   Z,R20
                 ; 0006 001D         i++; j--;
                +
000a7d 5f0f     +SUBI R16 , LOW ( - 1 )
000a7e 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                +
000a7f 5021     +SUBI R18 , LOW ( 1 )
000a80 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0006 001E     }
000a81 cfe2      	RJMP _0xC0007
                 _0xC0009:
                 ; 0006 001F }
000a82 940e 1d02 	CALL __LOADLOCR6
000a84 962a      	ADIW R28,10
000a85 9508      	RET
                 ;
                 ;// Converts a given integer x to string str[]. d is the number
                 ;// of digits required in output. If d is more than the number
                 ;// of digits in x, then 0s are added at the beginning.
                 ;
                 ;int intToStr(int x, char str[], int d){
                 ; 0006 0025 int intToStr(int x, char str[], int d){
                 _intToStr:
                 ; 0006 0026     int i = 0;
                 ; 0006 0027     while (x){
000a86 940e 1731 	CALL SUBOPT_0x2D
                 ;	x -> Y+6
                 ;	str -> Y+4
                 ;	d -> Y+2
                 ;	i -> R16,R17
                +
000a88 e000     +LDI R16 , LOW ( 0 )
000a89 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xC000A:
000a8a 81ee      	LDD  R30,Y+6
000a8b 81ff      	LDD  R31,Y+6+1
000a8c 9730      	SBIW R30,0
000a8d f0d1      	BREQ _0xC000C
                 ; 0006 0028         str[i++] = (x%10) + '0';
000a8e 01f8      	MOVW R30,R16
                +
000a8f 5f0f     +SUBI R16 , LOW ( - 1 )
000a90 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000a91 81ac      	LDD  R26,Y+4
000a92 81bd      	LDD  R27,Y+4+1
000a93 0fea      	ADD  R30,R26
000a94 1ffb      	ADC  R31,R27
000a95 01bf      	MOVW R22,R30
000a96 81ae      	LDD  R26,Y+6
000a97 81bf      	LDD  R27,Y+6+1
000a98 e0ea      	LDI  R30,LOW(10)
000a99 e0f0      	LDI  R31,HIGH(10)
000a9a 940e 1c69 	CALL __MODW21
000a9c 5de0      	SUBI R30,-LOW(48)
000a9d 01db      	MOVW R26,R22
000a9e 93ec      	ST   X,R30
                 ; 0006 0029         x = x/10;
000a9f 81ae      	LDD  R26,Y+6
000aa0 81bf      	LDD  R27,Y+6+1
000aa1 e0ea      	LDI  R30,LOW(10)
000aa2 e0f0      	LDI  R31,HIGH(10)
000aa3 940e 1c33 	CALL __DIVW21
000aa5 83ee      	STD  Y+6,R30
000aa6 83ff      	STD  Y+6+1,R31
                 ; 0006 002A     }
000aa7 cfe2      	RJMP _0xC000A
                 _0xC000C:
                 ; 0006 002B 
                 ; 0006 002C     // If number of digits required is more, then
                 ; 0006 002D     // add 0s at the beginning
                 ; 0006 002E     while (i < d)
                 _0xC000D:
000aa8 81ea      	LDD  R30,Y+2
000aa9 81fb      	LDD  R31,Y+2+1
000aaa 170e      	CP   R16,R30
000aab 071f      	CPC  R17,R31
000aac f454      	BRGE _0xC000F
                 ; 0006 002F         str[i++] = '0';
000aad 01f8      	MOVW R30,R16
                +
000aae 5f0f     +SUBI R16 , LOW ( - 1 )
000aaf 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000ab0 81ac      	LDD  R26,Y+4
000ab1 81bd      	LDD  R27,Y+4+1
000ab2 0fae      	ADD  R26,R30
000ab3 1fbf      	ADC  R27,R31
000ab4 e3e0      	LDI  R30,LOW(48)
000ab5 93ec      	ST   X,R30
000ab6 cff1      	RJMP _0xC000D
                 _0xC000F:
                 ; 0006 0031 reverse(str, i);
000ab7 81ec      	LDD  R30,Y+4
000ab8 81fd      	LDD  R31,Y+4+1
000ab9 93fa      	ST   -Y,R31
000aba 93ea      	ST   -Y,R30
000abb 01d8      	MOVW R26,R16
000abc df9d      	RCALL _reverse
                 ; 0006 0032     str[i] = '\0';
000abd 940e 1736 	CALL SUBOPT_0x2E
000abf e0e0      	LDI  R30,LOW(0)
000ac0 93ec      	ST   X,R30
                 ; 0006 0033     return i;
000ac1 01f8      	MOVW R30,R16
000ac2 8119      	LDD  R17,Y+1
000ac3 8108      	LDD  R16,Y+0
                 _0x20C000C:
000ac4 9628      	ADIW R28,8
000ac5 9508      	RET
                 ; 0006 0034 }
                 ;
                 ;void _ftoa(float n, char *res, int afterpoint){
                 ; 0006 0036 void _ftoa(float n, char *res, int afterpoint){
                 __ftoa:
                 ; 0006 0037     // Extract integer part
                 ; 0006 0038     int ipart = (int)n;
                 ; 0006 0039 
                 ; 0006 003A     // Extract floating part
                 ; 0006 003B     float fpart = n - (float)ipart;
                 ; 0006 003C 
                 ; 0006 003D     // convert integer part to string
                 ; 0006 003E     int i = intToStr(ipart, res, 0);
                 ; 0006 003F     if(ipart == 0){
000ac6 93ba      	ST   -Y,R27
000ac7 93aa      	ST   -Y,R26
000ac8 9724      	SBIW R28,4
000ac9 940e 1cfd 	CALL __SAVELOCR4
                 ;	n -> Y+12
                 ;	*res -> Y+10
                 ;	afterpoint -> Y+8
                 ;	ipart -> R16,R17
                 ;	fpart -> Y+4
                 ;	i -> R18,R19
000acb 940e 17a1 	CALL SUBOPT_0x3A
000acd 940e 1a47 	CALL __CFD1
000acf 018f      	MOVW R16,R30
000ad0 01f8      	MOVW R30,R16
000ad1 940e 17a6 	CALL SUBOPT_0x3B
000ad3 940e 17ab 	CALL SUBOPT_0x3C
000ad5 940e 17b0 	CALL SUBOPT_0x3D
000ad7 940e 17b5 	CALL SUBOPT_0x3E
000ad9 931a      	ST   -Y,R17
000ada 930a      	ST   -Y,R16
000adb 85ec      	LDD  R30,Y+12
000adc 85fd      	LDD  R31,Y+12+1
000add 93fa      	ST   -Y,R31
000ade 93ea      	ST   -Y,R30
000adf 940e 1672 	CALL SUBOPT_0xD
000ae1 dfa4      	RCALL _intToStr
000ae2 019f      	MOVW R18,R30
000ae3 2e00      	MOV  R0,R16
000ae4 2a01      	OR   R0,R17
000ae5 f449      	BRNE _0xC0010
                 ; 0006 0040        res[i] = '0';
000ae6 01f9      	MOVW R30,R18
000ae7 85aa      	LDD  R26,Y+10
000ae8 85bb      	LDD  R27,Y+10+1
000ae9 0fae      	ADD  R26,R30
000aea 1fbf      	ADC  R27,R31
000aeb e3e0      	LDI  R30,LOW(48)
000aec 93ec      	ST   X,R30
                 ; 0006 0041        i++;
                +
000aed 5f2f     +SUBI R18 , LOW ( - 1 )
000aee 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0006 0042     }
                 ; 0006 0043     // check for display option after point
                 ; 0006 0044     if (afterpoint != 0){
                 _0xC0010:
000aef 85e8      	LDD  R30,Y+8
000af0 85f9      	LDD  R31,Y+8+1
000af1 9730      	SBIW R30,0
000af2 f141      	BREQ _0xC0011
                 ; 0006 0045         res[i] = '.'; // add dot
000af3 01f9      	MOVW R30,R18
000af4 85aa      	LDD  R26,Y+10
000af5 85bb      	LDD  R27,Y+10+1
000af6 0fae      	ADD  R26,R30
000af7 1fbf      	ADC  R27,R31
000af8 e2ee      	LDI  R30,LOW(46)
000af9 93ec      	ST   X,R30
                 ; 0006 0046 
                 ; 0006 0047         // Get the value of fraction part upto given no.
                 ; 0006 0048         // of points after dot. The third parameter is needed
                 ; 0006 0049         // to handle cases like 233.007
                 ; 0006 004A         fpart = fpart * pow(10, afterpoint);
000afa 940e 17ba 	CALL SUBOPT_0x3F
000afc 940e 1cbd 	CALL __PUTPARD1
000afe 85ec      	LDD  R30,Y+12
000aff 85fd      	LDD  R31,Y+12+1
000b00 940e 17a6 	CALL SUBOPT_0x3B
000b02 01df      	MOVW R26,R30
000b03 01cb      	MOVW R24,R22
000b04 940e 15a6 	CALL _pow
000b06 940e 17bf 	CALL SUBOPT_0x40
000b08 940e 17c4 	CALL SUBOPT_0x41
                 ; 0006 004B 
                 ; 0006 004C         intToStr((int)fpart, res + i + 1, afterpoint);
000b0a 940e 17c7 	CALL SUBOPT_0x42
000b0c 940e 1a47 	CALL __CFD1
000b0e 93fa      	ST   -Y,R31
000b0f 93ea      	ST   -Y,R30
000b10 01f9      	MOVW R30,R18
000b11 85ac      	LDD  R26,Y+12
000b12 85bd      	LDD  R27,Y+12+1
000b13 0fea      	ADD  R30,R26
000b14 1ffb      	ADC  R31,R27
000b15 9631      	ADIW R30,1
000b16 93fa      	ST   -Y,R31
000b17 93ea      	ST   -Y,R30
000b18 85ac      	LDD  R26,Y+12
000b19 85bd      	LDD  R27,Y+12+1
000b1a df6b      	RCALL _intToStr
                 ; 0006 004D     }
                 ; 0006 004E }
                 _0xC0011:
000b1b 940e 1d04 	CALL __LOADLOCR4
000b1d 9660      	ADIW R28,16
000b1e 9508      	RET
                 ;
                 ;
                 ;void send_event(uint8_t led,uint8_t state){
                 ; 0006 0051 void send_event(uint8_t led,uint8_t state){
                 _send_event:
                 ; 0006 0052 
                 ; 0006 0053     memcpy(&SEND_EVENT_[5],Gateway_MacAddress,8);
000b1f 940e 17cc 	CALL SUBOPT_0x43
                 ;	led -> Y+1
                 ;	state -> Y+0
000b21 940e 17d6 	CALL SUBOPT_0x44
                 ; 0006 0054     memcpy(&SEND_EVENT_[18],EndDevice_MacAddress,8);
000b23 940e 172e 	CALL SUBOPT_0x2C
000b25 940e 17dd 	CALL SUBOPT_0x45
                 ; 0006 0055     memcpy(&SEND_EVENT_[26],Gateway_MacAddress,8);
000b27 940e 17e8 	CALL SUBOPT_0x46
                 ; 0006 0056     memcpy(&SEND_EVENT_[39],&state,1);
000b29 940e 167f 	CALL SUBOPT_0x10
000b2b 940e 1416 	CALL _memcpy
                 ; 0006 0057     SEND_EVENT_[37] = 0xA5;
000b2d eae5      	LDI  R30,LOW(165)
000b2e 940e 17ef 	CALL SUBOPT_0x47
                 ; 0006 0058     SEND_EVENT_[38] = led;
                 ; 0006 0059     SEND_EVENT_[40] = xbee_checksum(&SEND_EVENT_[3],SEND_EVENT_[2]);
                 ; 0006 005A     printDebug("\r\n ++++++++++ Send LED ++++++++\r\n");
                +
000b30 e8e2     +LDI R30 , LOW ( 2 * _0xC0000 + ( 0 ) )
000b31 e0f4     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 0 ) )
                 	__POINTW1FN _0xC0000,0
000b32 940e 164d 	CALL SUBOPT_0x8
                 ; 0006 005B     print_payload(SEND_EVENT_,41);
000b34 940e 1800 	CALL SUBOPT_0x48
000b36 940e 0618 	CALL _print_payload
                 ; 0006 005C     xbee_sendAPI(SEND_EVENT_,41);
000b38 940e 1800 	CALL SUBOPT_0x48
000b3a 940e 08d2 	CALL _xbee_sendAPI
                 ; 0006 005D 
                 ; 0006 005E }
000b3c 940c 0ffd 	JMP  _0x20C0008
                 ;
                 ;void send_join(){
                 ; 0006 0060 void send_join(){
                 _send_join:
                 ; 0006 0061 
                 ; 0006 0062     memcpy(&JOIN_A1[18],EndDevice_MacAddress,8);
                +
000b3e e1e6     +LDI R30 , LOW ( _JOIN_A1 + ( 18 ) )
000b3f e0f9     +LDI R31 , HIGH ( _JOIN_A1 + ( 18 ) )
                 	__POINTW1MN _JOIN_A1,18
000b40 940e 1807 	CALL SUBOPT_0x49
000b42 940e 172e 	CALL SUBOPT_0x2C
000b44 940e 1416 	CALL _memcpy
                 ; 0006 0063     JOIN_A1[38] = xbee_checksum(&JOIN_A1[3],JOIN_A1[2]);
                +
000b46 e0e7     +LDI R30 , LOW ( _JOIN_A1 + ( 3 ) )
000b47 e0f9     +LDI R31 , HIGH ( _JOIN_A1 + ( 3 ) )
                 	__POINTW1MN _JOIN_A1,3
000b48 93fa      	ST   -Y,R31
000b49 93ea      	ST   -Y,R30
                +
000b4a 91a0 0906+LDS R26 , _JOIN_A1 + ( 2 )
                 	__GETB2MN _JOIN_A1,2
000b4c 940e 180a 	CALL SUBOPT_0x4A
                +
000b4e 93e0 092a+STS _JOIN_A1 + ( 38 ) , R30
                 	__PUTB1MN _JOIN_A1,38
                 ; 0006 0064     printDebug("\r\n ++++++++++ Send Join ++++++++\r\n");
                +
000b50 eae4     +LDI R30 , LOW ( 2 * _0xC0000 + ( 34 ) )
000b51 e0f4     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 34 ) )
                 	__POINTW1FN _0xC0000,34
000b52 940e 164d 	CALL SUBOPT_0x8
                 ; 0006 0065     print_payload(JOIN_A1, 39);
000b54 e0e4      	LDI  R30,LOW(_JOIN_A1)
000b55 e0f9      	LDI  R31,HIGH(_JOIN_A1)
000b56 940e 180d 	CALL SUBOPT_0x4B
                 ; 0006 0066     xbee_sendAPI(JOIN_A1,39);
000b58 e0e4      	LDI  R30,LOW(_JOIN_A1)
000b59 e0f9      	LDI  R31,HIGH(_JOIN_A1)
000b5a c028      	RJMP _0x20C000B
                 ; 0006 0067 
                 ; 0006 0068 }
                 ;
                 ;void send_ping(){
                 ; 0006 006A void send_ping(){
                 _send_ping:
                 ; 0006 006B 
                 ; 0006 006C     memcpy(&PING_A4[5],Gateway_MacAddress,8);
                +
000b5b e3e0     +LDI R30 , LOW ( _PING_A4 + ( 5 ) )
000b5c e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 5 ) )
                 	__POINTW1MN _PING_A4,5
000b5d 940e 1813 	CALL SUBOPT_0x4C
000b5f 940e 1416 	CALL _memcpy
                 ; 0006 006D     memcpy(&PING_A4[18],EndDevice_MacAddress,8);
                +
000b61 e3ed     +LDI R30 , LOW ( _PING_A4 + ( 18 ) )
000b62 e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 18 ) )
                 	__POINTW1MN _PING_A4,18
000b63 940e 1807 	CALL SUBOPT_0x49
000b65 940e 172e 	CALL SUBOPT_0x2C
000b67 940e 1416 	CALL _memcpy
                 ; 0006 006E     memcpy(&PING_A4[26],Gateway_MacAddress,8);
                +
000b69 e4e5     +LDI R30 , LOW ( _PING_A4 + ( 26 ) )
000b6a e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 26 ) )
                 	__POINTW1MN _PING_A4,26
000b6b 940e 1813 	CALL SUBOPT_0x4C
000b6d 940e 1416 	CALL _memcpy
                 ; 0006 006F     PING_A4[38] = xbee_checksum(&PING_A4[3],PING_A4[2]);
                +
000b6f e2ee     +LDI R30 , LOW ( _PING_A4 + ( 3 ) )
000b70 e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 3 ) )
                 	__POINTW1MN _PING_A4,3
000b71 93fa      	ST   -Y,R31
000b72 93ea      	ST   -Y,R30
                +
000b73 91a0 092d+LDS R26 , _PING_A4 + ( 2 )
                 	__GETB2MN _PING_A4,2
000b75 940e 180a 	CALL SUBOPT_0x4A
                +
000b77 93e0 0951+STS _PING_A4 + ( 38 ) , R30
                 	__PUTB1MN _PING_A4,38
                 ; 0006 0070     printDebug("\r\n ++++++++++ Send Ping ++++++++\r\n");
                +
000b79 ece7     +LDI R30 , LOW ( 2 * _0xC0000 + ( 69 ) )
000b7a e0f4     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 69 ) )
                 	__POINTW1FN _0xC0000,69
000b7b 940e 164d 	CALL SUBOPT_0x8
                 ; 0006 0071     print_payload(PING_A4, 39);
000b7d e2eb      	LDI  R30,LOW(_PING_A4)
000b7e e0f9      	LDI  R31,HIGH(_PING_A4)
000b7f 940e 180d 	CALL SUBOPT_0x4B
                 ; 0006 0072     xbee_sendAPI(PING_A4,39);
000b81 e2eb      	LDI  R30,LOW(_PING_A4)
000b82 e0f9      	LDI  R31,HIGH(_PING_A4)
                 _0x20C000B:
000b83 93fa      	ST   -Y,R31
000b84 93ea      	ST   -Y,R30
000b85 e2a7      	LDI  R26,LOW(39)
000b86 e0b0      	LDI  R27,0
000b87 940e 08d2 	CALL _xbee_sendAPI
                 ; 0006 0073 
                 ; 0006 0074 }
000b89 9508      	RET
                 ;
                 ;void recive_event(uint8_t led,uint8_t state){
                 ; 0006 0076 void recive_event(uint8_t led,uint8_t state){
                 _recive_event:
                 ; 0006 0077 
                 ; 0006 0078     memcpy(&SEND_EVENT_[5],Gateway_MacAddress,8);
000b8a 940e 17cc 	CALL SUBOPT_0x43
                 ;	led -> Y+1
                 ;	state -> Y+0
000b8c 940e 17d6 	CALL SUBOPT_0x44
                 ; 0006 0079     memcpy(&SEND_EVENT_[18],EndDevice_MacAddress,8);
000b8e 940e 172e 	CALL SUBOPT_0x2C
000b90 940e 17dd 	CALL SUBOPT_0x45
                 ; 0006 007A     memcpy(&SEND_EVENT_[26],Gateway_MacAddress,8);
000b92 940e 17e8 	CALL SUBOPT_0x46
                 ; 0006 007B     memcpy(&SEND_EVENT_[39],&state,1);
000b94 940e 167f 	CALL SUBOPT_0x10
000b96 940e 1416 	CALL _memcpy
                 ; 0006 007C     SEND_EVENT_[37] = 0xA6;
000b98 eae6      	LDI  R30,LOW(166)
000b99 940e 17ef 	CALL SUBOPT_0x47
                 ; 0006 007D     SEND_EVENT_[38] = led;
                 ; 0006 007E     SEND_EVENT_[40] = xbee_checksum(&SEND_EVENT_[3],SEND_EVENT_[2]);
                 ; 0006 007F     printDebug("\r\n ++++++++++ Send EVENT RECIVE ++++++++\r\n");
                +
000b9b eeea     +LDI R30 , LOW ( 2 * _0xC0000 + ( 104 ) )
000b9c e0f4     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 104 ) )
                 	__POINTW1FN _0xC0000,104
000b9d 940e 164d 	CALL SUBOPT_0x8
                 ; 0006 0080     print_payload(SEND_EVENT_,41);
000b9f 940e 1800 	CALL SUBOPT_0x48
000ba1 940e 0618 	CALL _print_payload
                 ; 0006 0081     xbee_sendAPI(SEND_EVENT_,41);
000ba3 940e 1800 	CALL SUBOPT_0x48
000ba5 940e 08d2 	CALL _xbee_sendAPI
                 ; 0006 0082 
                 ; 0006 0083 }
000ba7 940c 0ffd 	JMP  _0x20C0008
                 ;
                 ;void send_report(uint8_t data_id,float Vavg,float Iavg,float Pavg,float WHsum){
                 ; 0006 0085 void send_report(uint8_t data_id,float Vavg,float Iavg,float Pavg,float WHsum){
                 _send_report:
                 ; 0006 0086 
                 ; 0006 0087     memcpy(&SEND_REPORT_[5],Gateway_MacAddress,8);
000ba9 940e 1cc2 	CALL __PUTPARD2
                 ;	data_id -> Y+16
                 ;	Vavg -> Y+12
                 ;	Iavg -> Y+8
                 ;	Pavg -> Y+4
                 ;	WHsum -> Y+0
                +
000bab e8e0     +LDI R30 , LOW ( _SEND_REPORT_ + ( 5 ) )
000bac e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 5 ) )
                 	__POINTW1MN _SEND_REPORT_,5
000bad 940e 1813 	CALL SUBOPT_0x4C
000baf 940e 1416 	CALL _memcpy
                 ; 0006 0088     memcpy(&SEND_REPORT_[18],EndDevice_MacAddress,8);
                +
000bb1 e8ed     +LDI R30 , LOW ( _SEND_REPORT_ + ( 18 ) )
000bb2 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 18 ) )
                 	__POINTW1MN _SEND_REPORT_,18
000bb3 940e 1807 	CALL SUBOPT_0x49
000bb5 940e 172e 	CALL SUBOPT_0x2C
000bb7 940e 1416 	CALL _memcpy
                 ; 0006 0089     memcpy(&SEND_REPORT_[26],Gateway_MacAddress,8);
                +
000bb9 e9e5     +LDI R30 , LOW ( _SEND_REPORT_ + ( 26 ) )
000bba e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 26 ) )
                 	__POINTW1MN _SEND_REPORT_,26
000bbb 940e 1813 	CALL SUBOPT_0x4C
000bbd 940e 1416 	CALL _memcpy
                 ; 0006 008A 
                 ; 0006 008B     /*=============== Convert Data from float to ASCII ===============*/
                 ; 0006 008C     _ftoa(Vavg, _voltage,2);
000bbf 940e 17a1 	CALL SUBOPT_0x3A
000bc1 940e 1cbd 	CALL __PUTPARD1
000bc3 ece7      	LDI  R30,LOW(__voltage)
000bc4 e0f9      	LDI  R31,HIGH(__voltage)
000bc5 940e 181a 	CALL SUBOPT_0x4D
000bc7 defe      	RCALL __ftoa
                 ; 0006 008D     _ftoa(Iavg, _amp,2);
000bc8 940e 181d 	CALL SUBOPT_0x4E
000bca 940e 1cbd 	CALL __PUTPARD1
000bcc ecef      	LDI  R30,LOW(__amp)
000bcd e0f9      	LDI  R31,HIGH(__amp)
000bce 940e 181a 	CALL SUBOPT_0x4D
000bd0 def5      	RCALL __ftoa
                 ; 0006 008E     _ftoa(Pavg, _power,2);
000bd1 940e 17c7 	CALL SUBOPT_0x42
000bd3 940e 1cbd 	CALL __PUTPARD1
000bd5 ede7      	LDI  R30,LOW(__power)
000bd6 e0f9      	LDI  R31,HIGH(__power)
000bd7 940e 181a 	CALL SUBOPT_0x4D
000bd9 deec      	RCALL __ftoa
                 ; 0006 008F     _ftoa(WHsum, _watt,2);
000bda 940e 1822 	CALL SUBOPT_0x4F
000bdc 940e 1cbd 	CALL __PUTPARD1
000bde edef      	LDI  R30,LOW(__watt)
000bdf e0f9      	LDI  R31,HIGH(__watt)
000be0 940e 181a 	CALL SUBOPT_0x4D
000be2 dee3      	RCALL __ftoa
                 ; 0006 0090 
                 ; 0006 0091     SEND_REPORT_[37] = 0xA7;
000be3 eae7      	LDI  R30,LOW(167)
                +
000be4 93e0 09a0+STS _SEND_REPORT_ + ( 37 ) , R30
                 	__PUTB1MN _SEND_REPORT_,37
                 ; 0006 0092     SEND_REPORT_[38] = data_id;
000be6 89e8      	LDD  R30,Y+16
                +
000be7 93e0 09a1+STS _SEND_REPORT_ + ( 38 ) , R30
                 	__PUTB1MN _SEND_REPORT_,38
                 ; 0006 0093     memcpy(&SEND_REPORT_[40],_voltage,8);
                +
000be9 eae3     +LDI R30 , LOW ( _SEND_REPORT_ + ( 40 ) )
000bea e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 40 ) )
                 	__POINTW1MN _SEND_REPORT_,40
000beb 93fa      	ST   -Y,R31
000bec 93ea      	ST   -Y,R30
000bed ece7      	LDI  R30,LOW(__voltage)
000bee e0f9      	LDI  R31,HIGH(__voltage)
000bef 940e 1825 	CALL SUBOPT_0x50
000bf1 940e 1416 	CALL _memcpy
                 ; 0006 0094     memcpy(&SEND_REPORT_[49],_amp,8);
                +
000bf3 eaec     +LDI R30 , LOW ( _SEND_REPORT_ + ( 49 ) )
000bf4 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 49 ) )
                 	__POINTW1MN _SEND_REPORT_,49
000bf5 93fa      	ST   -Y,R31
000bf6 93ea      	ST   -Y,R30
000bf7 ecef      	LDI  R30,LOW(__amp)
000bf8 e0f9      	LDI  R31,HIGH(__amp)
000bf9 940e 1825 	CALL SUBOPT_0x50
000bfb 940e 1416 	CALL _memcpy
                 ; 0006 0095     memcpy(&SEND_REPORT_[58],_power,8);
                +
000bfd ebe5     +LDI R30 , LOW ( _SEND_REPORT_ + ( 58 ) )
000bfe e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 58 ) )
                 	__POINTW1MN _SEND_REPORT_,58
000bff 93fa      	ST   -Y,R31
000c00 93ea      	ST   -Y,R30
000c01 ede7      	LDI  R30,LOW(__power)
000c02 e0f9      	LDI  R31,HIGH(__power)
000c03 940e 1825 	CALL SUBOPT_0x50
000c05 940e 1416 	CALL _memcpy
                 ; 0006 0096     memcpy(&SEND_REPORT_[67],_watt,8);
                +
000c07 ebee     +LDI R30 , LOW ( _SEND_REPORT_ + ( 67 ) )
000c08 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 67 ) )
                 	__POINTW1MN _SEND_REPORT_,67
000c09 93fa      	ST   -Y,R31
000c0a 93ea      	ST   -Y,R30
000c0b edef      	LDI  R30,LOW(__watt)
000c0c e0f9      	LDI  R31,HIGH(__watt)
000c0d 940e 1825 	CALL SUBOPT_0x50
000c0f 940e 1416 	CALL _memcpy
                 ; 0006 0097 
                 ; 0006 0098     SEND_REPORT_[75] = xbee_checksum(&SEND_REPORT_[3],SEND_REPORT_[2]);
                +
000c11 e7ee     +LDI R30 , LOW ( _SEND_REPORT_ + ( 3 ) )
000c12 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 3 ) )
                 	__POINTW1MN _SEND_REPORT_,3
000c13 93fa      	ST   -Y,R31
000c14 93ea      	ST   -Y,R30
                +
000c15 91a0 097d+LDS R26 , _SEND_REPORT_ + ( 2 )
                 	__GETB2MN _SEND_REPORT_,2
000c17 940e 180a 	CALL SUBOPT_0x4A
                +
000c19 93e0 09c6+STS _SEND_REPORT_ + ( 75 ) , R30
                 	__PUTB1MN _SEND_REPORT_,75
                 ; 0006 0099     printDebug("\r\n ++++++++++ Send REPORT ++++++++\r\n");
                +
000c1b e1e5     +LDI R30 , LOW ( 2 * _0xC0000 + ( 147 ) )
000c1c e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 147 ) )
                 	__POINTW1FN _0xC0000,147
000c1d 940e 164d 	CALL SUBOPT_0x8
                 ; 0006 009A     print_payload(SEND_REPORT_,76);
000c1f 940e 1828 	CALL SUBOPT_0x51
000c21 940e 0618 	CALL _print_payload
                 ; 0006 009B     xbee_sendAPI(SEND_REPORT_,76);
000c23 940e 1828 	CALL SUBOPT_0x51
000c25 940e 08d2 	CALL _xbee_sendAPI
                 ; 0006 009C 
                 ; 0006 009D }
000c27 9661      	ADIW R28,17
000c28 9508      	RET
                 ;
                 ;void SendStatusReport(void){
                 ; 0006 009F void SendStatusReport(void){
                 _SendStatusReport:
                 ; 0006 00A0 
                 ; 0006 00A1     Vavg = Vsum/number;      // Voltage
000c29 940e 182f 	CALL SUBOPT_0x52
000c2b 940e 1834 	CALL SUBOPT_0x53
000c2d 940e 183d 	CALL SUBOPT_0x54
000c2f 93e0 0874 	STS  _Vavg,R30
000c31 93f0 0875 	STS  _Vavg+1,R31
000c33 9360 0876 	STS  _Vavg+2,R22
000c35 9370 0877 	STS  _Vavg+3,R23
                 ; 0006 00A2     Iavg = Isum/number;      // Current
000c37 940e 182f 	CALL SUBOPT_0x52
000c39 940e 1844 	CALL SUBOPT_0x55
000c3b 940e 183d 	CALL SUBOPT_0x54
000c3d 940e 184d 	CALL SUBOPT_0x56
                 ; 0006 00A3     Pavg = Psum/number;      // Power
000c3f 940e 182f 	CALL SUBOPT_0x52
000c41 940e 1856 	CALL SUBOPT_0x57
000c43 940e 183d 	CALL SUBOPT_0x54
000c45 93e0 087c 	STS  _Pavg,R30
000c47 93f0 087d 	STS  _Pavg+1,R31
000c49 9360 087e 	STS  _Pavg+2,R22
000c4b 9370 087f 	STS  _Pavg+3,R23
                 ; 0006 00A4 
                 ; 0006 00A5     CURRENT_VOLT = Vavg;
000c4d 940e 185f 	CALL SUBOPT_0x58
000c4f 93e0 0601 	STS  _CURRENT_VOLT,R30
000c51 93f0 0602 	STS  _CURRENT_VOLT+1,R31
000c53 9360 0603 	STS  _CURRENT_VOLT+2,R22
000c55 9370 0604 	STS  _CURRENT_VOLT+3,R23
                 ; 0006 00A6     CURRENT_AMP = Iavg;
000c57 940e 1868 	CALL SUBOPT_0x59
000c59 93e0 0605 	STS  _CURRENT_AMP,R30
000c5b 93f0 0606 	STS  _CURRENT_AMP+1,R31
000c5d 9360 0607 	STS  _CURRENT_AMP+2,R22
000c5f 9370 0608 	STS  _CURRENT_AMP+3,R23
                 ; 0006 00A7 
                 ; 0006 00A8     printDebug("\r\n======================================================\r\n");
                +
000c61 e3ea     +LDI R30 , LOW ( 2 * _0xC0000 + ( 184 ) )
000c62 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 184 ) )
                 	__POINTW1FN _0xC0000,184
000c63 940e 164d 	CALL SUBOPT_0x8
                 ; 0006 00A9     printDebug("Vsum = %0.4f  ", Vsum); printDebug("Isum = %0.4f  ", Isum); printDebug("Psum = %0.4f\r\n", Psum);
                +
000c65 e7e5     +LDI R30 , LOW ( 2 * _0xC0000 + ( 243 ) )
000c66 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 243 ) )
                 	__POINTW1FN _0xC0000,243
000c67 93fa      	ST   -Y,R31
000c68 93ea      	ST   -Y,R30
000c69 91e0 0864 	LDS  R30,_Vsum
000c6b 91f0 0865 	LDS  R31,_Vsum+1
000c6d 9160 0866 	LDS  R22,_Vsum+2
000c6f 9170 0867 	LDS  R23,_Vsum+3
000c71 940e 1659 	CALL SUBOPT_0xA
                +
000c73 e8e4     +LDI R30 , LOW ( 2 * _0xC0000 + ( 258 ) )
000c74 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 258 ) )
                 	__POINTW1FN _0xC0000,258
000c75 93fa      	ST   -Y,R31
000c76 93ea      	ST   -Y,R30
000c77 91e0 0868 	LDS  R30,_Isum
000c79 91f0 0869 	LDS  R31,_Isum+1
000c7b 9160 086a 	LDS  R22,_Isum+2
000c7d 9170 086b 	LDS  R23,_Isum+3
000c7f 940e 1659 	CALL SUBOPT_0xA
                +
000c81 e9e3     +LDI R30 , LOW ( 2 * _0xC0000 + ( 273 ) )
000c82 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 273 ) )
                 	__POINTW1FN _0xC0000,273
000c83 93fa      	ST   -Y,R31
000c84 93ea      	ST   -Y,R30
000c85 91e0 086c 	LDS  R30,_Psum
000c87 91f0 086d 	LDS  R31,_Psum+1
000c89 9160 086e 	LDS  R22,_Psum+2
000c8b 9170 086f 	LDS  R23,_Psum+3
000c8d 940e 1659 	CALL SUBOPT_0xA
                 ; 0006 00AA     printDebug("Vavg = %0.4f   ", Vavg); printDebug("Iavg = %0.4f   ", Iavg); printDebug("Pavg = %0.4f\r\n", Pavg);
                +
000c8f eae2     +LDI R30 , LOW ( 2 * _0xC0000 + ( 288 ) )
000c90 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 288 ) )
                 	__POINTW1FN _0xC0000,288
000c91 93fa      	ST   -Y,R31
000c92 93ea      	ST   -Y,R30
000c93 940e 185f 	CALL SUBOPT_0x58
000c95 940e 1659 	CALL SUBOPT_0xA
                +
000c97 ebe2     +LDI R30 , LOW ( 2 * _0xC0000 + ( 304 ) )
000c98 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 304 ) )
                 	__POINTW1FN _0xC0000,304
000c99 93fa      	ST   -Y,R31
000c9a 93ea      	ST   -Y,R30
000c9b 940e 1868 	CALL SUBOPT_0x59
000c9d 940e 1659 	CALL SUBOPT_0xA
                +
000c9f ece2     +LDI R30 , LOW ( 2 * _0xC0000 + ( 320 ) )
000ca0 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 320 ) )
                 	__POINTW1FN _0xC0000,320
000ca1 93fa      	ST   -Y,R31
000ca2 93ea      	ST   -Y,R30
000ca3 940e 1871 	CALL SUBOPT_0x5A
000ca5 940e 1659 	CALL SUBOPT_0xA
                 ; 0006 00AB     printDebug("Watt-Hour Sum = %0.4f\r\n", WHsum);
                +
000ca7 ede1     +LDI R30 , LOW ( 2 * _0xC0000 + ( 335 ) )
000ca8 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 335 ) )
                 	__POINTW1FN _0xC0000,335
000ca9 93fa      	ST   -Y,R31
000caa 93ea      	ST   -Y,R30
000cab 91e0 0870 	LDS  R30,_WHsum
000cad 91f0 0871 	LDS  R31,_WHsum+1
000caf 9160 0872 	LDS  R22,_WHsum+2
000cb1 9170 0873 	LDS  R23,_WHsum+3
000cb3 940e 1659 	CALL SUBOPT_0xA
                 ; 0006 00AC     printDebug("Number Sampling = %d\r\n", number);
                +
000cb5 eee9     +LDI R30 , LOW ( 2 * _0xC0000 + ( 359 ) )
000cb6 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 359 ) )
                 	__POINTW1FN _0xC0000,359
000cb7 93fa      	ST   -Y,R31
000cb8 93ea      	ST   -Y,R30
000cb9 940e 182f 	CALL SUBOPT_0x52
000cbb 940e 16e5 	CALL SUBOPT_0x22
                 ; 0006 00AD     printDebug("======================================================\r\n\r\n");
                +
000cbd e0e0     +LDI R30 , LOW ( 2 * _0xC0000 + ( 382 ) )
000cbe e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 382 ) )
                 	__POINTW1FN _0xC0000,382
000cbf 940e 164d 	CALL SUBOPT_0x8
                 ; 0006 00AE 
                 ; 0006 00AF     Iavg *= 1000.0;
000cc1 940e 187a 	CALL SUBOPT_0x5B
000cc3 940e 1b08 	CALL __MULF12
000cc5 940e 184d 	CALL SUBOPT_0x56
                 ; 0006 00B0     send_report(01,Vavg,Iavg,Pavg,WHsum);
000cc7 e0e1      	LDI  R30,LOW(1)
000cc8 93ea      	ST   -Y,R30
000cc9 940e 185f 	CALL SUBOPT_0x58
000ccb 940e 1cbd 	CALL __PUTPARD1
000ccd 940e 1868 	CALL SUBOPT_0x59
000ccf 940e 1cbd 	CALL __PUTPARD1
000cd1 940e 1871 	CALL SUBOPT_0x5A
000cd3 940e 1cbd 	CALL __PUTPARD1
000cd5 940e 1887 	CALL SUBOPT_0x5C
000cd7 ded1      	RCALL _send_report
                 ; 0006 00B1     Iavg /= 1000.0;
000cd8 940e 187a 	CALL SUBOPT_0x5B
000cda 940e 1b56 	CALL __DIVF21
000cdc 940e 184d 	CALL SUBOPT_0x56
                 ; 0006 00B2     /* Safety Current Sensor */
                 ; 0006 00B3     if((SENSOR_SENSITIVE == SENSOR5A) && (Iavg > 4.9)) {
000cde 940e 1890 	CALL SUBOPT_0x5D
                +
000ce0 30a0     +CPI R26 , LOW ( 0x43390000 )
000ce1 e0e0     +LDI R30 , HIGH ( 0x43390000 )
000ce2 07be     +CPC R27 , R30
000ce3 e3e9     +LDI R30 , BYTE3 ( 0x43390000 )
000ce4 078e     +CPC R24 , R30
000ce5 e4e3     +LDI R30 , BYTE4 ( 0x43390000 )
000ce6 079e     +CPC R25 , R30
                 	__CPD2N 0x43390000
000ce7 f469      	BRNE _0xC0013
000ce8 940e 1899 	CALL SUBOPT_0x5E
                +
000cea eced     +LDI R30 , LOW ( 0x409CCCCD )
000ceb ecfc     +LDI R31 , HIGH ( 0x409CCCCD )
000cec e96c     +LDI R22 , BYTE3 ( 0x409CCCCD )
000ced e470     +LDI R23 , BYTE4 ( 0x409CCCCD )
                 	__GETD1N 0x409CCCCD
000cee 940e 1b9b 	CALL __CMPF12
000cf0 f009      	BREQ PC+2
000cf1 f410      	BRCC PC+3
000cf2 940c 0cf5 	JMP  _0xC0013
000cf4 c001      	RJMP _0xC0014
                 _0xC0013:
000cf5 c001      	RJMP _0xC0012
                 _0xC0014:
                 ; 0006 00B4         SWITCH = TURN_OFF;
000cf6 c031      	RJMP _0xC0023
                 ; 0006 00B5         POWER_RELAY_OFF;
                 ; 0006 00B6         LED_STAT_OFF;
                 ; 0006 00B7         CURRENT_VOLT = 0.0;
                 ; 0006 00B8         CURRENT_AMP = 0.0;
                 ; 0006 00B9         printDebug("Current Exceed --SWITCH OFF!\r\n");
                 ; 0006 00BA     }else if((SENSOR_SENSITIVE == SENSOR20A) && (Iavg > 19.9)) {
                 _0xC0012:
000cf7 940e 1890 	CALL SUBOPT_0x5D
                +
000cf9 30a0     +CPI R26 , LOW ( 0x42C80000 )
000cfa e0e0     +LDI R30 , HIGH ( 0x42C80000 )
000cfb 07be     +CPC R27 , R30
000cfc ece8     +LDI R30 , BYTE3 ( 0x42C80000 )
000cfd 078e     +CPC R24 , R30
000cfe e4e2     +LDI R30 , BYTE4 ( 0x42C80000 )
000cff 079e     +CPC R25 , R30
                 	__CPD2N 0x42C80000
000d00 f469      	BRNE _0xC0019
000d01 940e 1899 	CALL SUBOPT_0x5E
                +
000d03 e3e3     +LDI R30 , LOW ( 0x419F3333 )
000d04 e3f3     +LDI R31 , HIGH ( 0x419F3333 )
000d05 e96f     +LDI R22 , BYTE3 ( 0x419F3333 )
000d06 e471     +LDI R23 , BYTE4 ( 0x419F3333 )
                 	__GETD1N 0x419F3333
000d07 940e 1b9b 	CALL __CMPF12
000d09 f009      	BREQ PC+2
000d0a f410      	BRCC PC+3
000d0b 940c 0d0e 	JMP  _0xC0019
000d0d c001      	RJMP _0xC001A
                 _0xC0019:
000d0e c001      	RJMP _0xC0018
                 _0xC001A:
                 ; 0006 00BB         SWITCH = TURN_OFF;
000d0f c018      	RJMP _0xC0023
                 ; 0006 00BC         POWER_RELAY_OFF;
                 ; 0006 00BD         LED_STAT_OFF;
                 ; 0006 00BE         CURRENT_VOLT = 0.0;
                 ; 0006 00BF         CURRENT_AMP = 0.0;
                 ; 0006 00C0         printDebug("Current Exceed --SWITCH OFF!\r\n");
                 ; 0006 00C1     }else if((SENSOR_SENSITIVE == SENSOR30A) && (Iavg > 29.9)) {
                 _0xC0018:
000d10 940e 1890 	CALL SUBOPT_0x5D
                +
000d12 30a0     +CPI R26 , LOW ( 0x42840000 )
000d13 e0e0     +LDI R30 , HIGH ( 0x42840000 )
000d14 07be     +CPC R27 , R30
000d15 e8e4     +LDI R30 , BYTE3 ( 0x42840000 )
000d16 078e     +CPC R24 , R30
000d17 e4e2     +LDI R30 , BYTE4 ( 0x42840000 )
000d18 079e     +CPC R25 , R30
                 	__CPD2N 0x42840000
000d19 f469      	BRNE _0xC001F
000d1a 940e 1899 	CALL SUBOPT_0x5E
                +
000d1c e3e3     +LDI R30 , LOW ( 0x41EF3333 )
000d1d e3f3     +LDI R31 , HIGH ( 0x41EF3333 )
000d1e ee6f     +LDI R22 , BYTE3 ( 0x41EF3333 )
000d1f e471     +LDI R23 , BYTE4 ( 0x41EF3333 )
                 	__GETD1N 0x41EF3333
000d20 940e 1b9b 	CALL __CMPF12
000d22 f009      	BREQ PC+2
000d23 f410      	BRCC PC+3
000d24 940c 0d27 	JMP  _0xC001F
000d26 c001      	RJMP _0xC0020
                 _0xC001F:
000d27 c01b      	RJMP _0xC001E
                 _0xC0020:
                 ; 0006 00C2         SWITCH = TURN_OFF;
                 _0xC0023:
000d28 e0e0      	LDI  R30,LOW(0)
000d29 93e0 0600 	STS  _SWITCH,R30
                 ; 0006 00C3         POWER_RELAY_OFF;
000d2b 940e 1605 	CALL SUBOPT_0x1
                 ; 0006 00C4         LED_STAT_OFF;
000d2d 9aaf      	SBI  0x15,7
                 ; 0006 00C5         CURRENT_VOLT = 0.0;
000d2e e0e0      	LDI  R30,LOW(0)
000d2f 93e0 0601 	STS  _CURRENT_VOLT,R30
000d31 93e0 0602 	STS  _CURRENT_VOLT+1,R30
000d33 93e0 0603 	STS  _CURRENT_VOLT+2,R30
000d35 93e0 0604 	STS  _CURRENT_VOLT+3,R30
                 ; 0006 00C6         CURRENT_AMP = 0.0;
000d37 93e0 0605 	STS  _CURRENT_AMP,R30
000d39 93e0 0606 	STS  _CURRENT_AMP+1,R30
000d3b 93e0 0607 	STS  _CURRENT_AMP+2,R30
000d3d 93e0 0608 	STS  _CURRENT_AMP+3,R30
                 ; 0006 00C7         printDebug("Current Exceed --SWITCH OFF!\r\n");
                +
000d3f e3eb     +LDI R30 , LOW ( 2 * _0xC0000 + ( 441 ) )
000d40 e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 441 ) )
                 	__POINTW1FN _0xC0000,441
000d41 940e 164d 	CALL SUBOPT_0x8
                 ; 0006 00C8     }
                 ; 0006 00C9 
                 ; 0006 00CA     /* Reset value */
                 ; 0006 00CB     number = 0;
                 _0xC001E:
000d43 e0e0      	LDI  R30,LOW(0)
000d44 93e0 0830 	STS  _number,R30
000d46 93e0 0831 	STS  _number+1,R30
                 ; 0006 00CC     Vsum = 0.0;
000d48 93e0 0864 	STS  _Vsum,R30
000d4a 93e0 0865 	STS  _Vsum+1,R30
000d4c 93e0 0866 	STS  _Vsum+2,R30
000d4e 93e0 0867 	STS  _Vsum+3,R30
                 ; 0006 00CD     Isum = 0.0;
000d50 93e0 0868 	STS  _Isum,R30
000d52 93e0 0869 	STS  _Isum+1,R30
000d54 93e0 086a 	STS  _Isum+2,R30
000d56 93e0 086b 	STS  _Isum+3,R30
                 ; 0006 00CE     Psum = 0.0;
000d58 93e0 086c 	STS  _Psum,R30
000d5a 93e0 086d 	STS  _Psum+1,R30
000d5c 93e0 086e 	STS  _Psum+2,R30
000d5e 93e0 086f 	STS  _Psum+3,R30
                 ; 0006 00CF     WHsum = 0.0;
000d60 93e0 0870 	STS  _WHsum,R30
000d62 93e0 0871 	STS  _WHsum+1,R30
000d64 93e0 0872 	STS  _WHsum+2,R30
000d66 93e0 0873 	STS  _WHsum+3,R30
                 ; 0006 00D0 
                 ; 0006 00D1 }
000d68 9508      	RET
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <adc.h>
                 ;#include <debug.h>
                 ;
                 ;char Vreferent = VREF_AVCC;
                 
                 	.DSEG
                 ;
                 ;
                 ;void init_adc(unsigned char vrff) {
                 ; 0007 000C void init_adc(unsigned char vrff) {
                 
                 	.CSEG
                 _init_adc:
                 ; 0007 000D 
                 ; 0007 000E     // ADC initialization
                 ; 0007 000F     // ADC Clock frequency: 691.200 kHz
                 ; 0007 0010     // ADC Voltage Reference: vrff
                 ; 0007 0011     Vreferent = vrff;
000d69 93aa      	ST   -Y,R26
                 ;	vrff -> Y+0
000d6a 81e8      	LD   R30,Y
000d6b 93e0 09e7 	STS  _Vreferent,R30
                 ; 0007 0012     ADMUX = Vreferent & 0xff;
000d6d b9e7      	OUT  0x7,R30
                 ; 0007 0013     ADCSRA = 0xA4;
000d6e eae4      	LDI  R30,LOW(164)
000d6f b9e6      	OUT  0x6,R30
                 ; 0007 0014     //printDebug("ADMUX = %02X\r\n", ADMUX);
                 ; 0007 0015 
                 ; 0007 0016 }
000d70 9621      	ADIW R28,1
000d71 9508      	RET
                 ;
                 ;// Read the AD conversion result
                 ;uint16_t read_adc(unsigned char adc_input) {
                 ; 0007 0019 uint16_t read_adc(unsigned char adc_input) {
                 _read_adc:
                 ; 0007 001A 
                 ; 0007 001B     unsigned int adc_data = 0x0000;
                 ; 0007 001C 
                 ; 0007 001D     ADMUX = (Vreferent | adc_input);
000d72 93aa      	ST   -Y,R26
000d73 931a      	ST   -Y,R17
000d74 930a      	ST   -Y,R16
                 ;	adc_input -> Y+2
                 ;	adc_data -> R16,R17
                +
000d75 e000     +LDI R16 , LOW ( 0 )
000d76 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000d77 81ea      	LDD  R30,Y+2
000d78 91a0 09e7 	LDS  R26,_Vreferent
000d7a 2bea      	OR   R30,R26
000d7b b9e7      	OUT  0x7,R30
                 ; 0007 001E     //printDebug("ADMUX = %02X\r\n", ADMUX);
                 ; 0007 001F 
                 ; 0007 0020     // Delay needed for the stabilization of the ADC input voltage
                 ; 0007 0021     delay_us(50);
                +
000d7c eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
000d7d 958a     +DEC R24
000d7e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
                 ; 0007 0022 
                 ; 0007 0023     // Start the AD conversion
                 ; 0007 0024     ADCSRA |= 0x80; // ENABLE ADC
000d7f 9a37      	SBI  0x6,7
                 ; 0007 0025     ADCSRA |= 0x40;  // Start convert
000d80 9a36      	SBI  0x6,6
                 ; 0007 0026 
                 ; 0007 0027     // Wait for the AD conversion to complete
                 ; 0007 0028     while((ADCSRA & 0x10) == 0);
                 _0xE0004:
000d81 9b34      	SBIS 0x6,4
000d82 cffe      	RJMP _0xE0004
                 ; 0007 0029     adc_data = ADCL;
000d83 b104      	IN   R16,4
000d84 2711      	CLR  R17
                 ; 0007 002A     adc_data |= (ADCH & 0x00ff) << 8;
000d85 b1e5      	IN   R30,0x5
000d86 2ffe      	MOV  R31,R30
000d87 e0e0      	LDI  R30,0
                +
000d88 2b0e     +OR R16 , R30
000d89 2b1f     +OR R17 , R31
                 	__ORWRR 16,17,30,31
                 ; 0007 002B 
                 ; 0007 002C     ADCSRA |= 0x10;
000d8a 9a34      	SBI  0x6,4
                 ; 0007 002D 
                 ; 0007 002E     return adc_data;
000d8b 01f8      	MOVW R30,R16
000d8c 8119      	LDD  R17,Y+1
000d8d 8108      	LDD  R16,Y+0
000d8e c00b      	RJMP _0x20C000A
                 ; 0007 002F }
                 ;
                 ;
                 ;
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <uart.h>
                 ;#include <int_protocol.h>
                 ;#include <debug.h>
                 ;
                 ;uint8_t Eaddress        = 5;
                 
                 	.DSEG
                 ;
                 ;void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
                 ; 0008 000C void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
                 
                 	.CSEG
                 _EEPROM_write:
                 ; 0008 000D     while(EECR & (1<<EEWE))
000d8f 93aa      	ST   -Y,R26
                 ;	uiAddress -> Y+1
                 ;	ucData -> Y+0
                 _0x100004:
000d90 99e1      	SBIC 0x1C,1
                 ; 0008 000E     ;
000d91 cffe      	RJMP _0x100004
                 ; 0008 000F     EEAR = uiAddress;
000d92 81e9      	LDD  R30,Y+1
000d93 81fa      	LDD  R31,Y+1+1
000d94 bbff      	OUT  0x1E+1,R31
000d95 bbee      	OUT  0x1E,R30
                 ; 0008 0010     EEDR = ucData;
000d96 81e8      	LD   R30,Y
000d97 bbed      	OUT  0x1D,R30
                 ; 0008 0011     EECR |= (1<<EEMWE);
000d98 9ae2      	SBI  0x1C,2
                 ; 0008 0012     EECR |= (1<<EEWE);
000d99 9ae1      	SBI  0x1C,1
                 ; 0008 0013 }
                 _0x20C000A:
000d9a 9623      	ADIW R28,3
000d9b 9508      	RET
                 ;
                 ;
                 ;unsigned char EEPROM_read(unsigned int uiAddress){
                 ; 0008 0016 unsigned char EEPROM_read(unsigned int uiAddress){
                 _EEPROM_read:
                 ; 0008 0017     while(EECR & (1<<EEWE))
000d9c 93ba      	ST   -Y,R27
000d9d 93aa      	ST   -Y,R26
                 ;	uiAddress -> Y+0
                 _0x100007:
000d9e 99e1      	SBIC 0x1C,1
                 ; 0008 0018     ;
000d9f cffe      	RJMP _0x100007
                 ; 0008 0019     EEAR = uiAddress;
000da0 81e8      	LD   R30,Y
000da1 81f9      	LDD  R31,Y+1
000da2 bbff      	OUT  0x1E+1,R31
000da3 bbee      	OUT  0x1E,R30
                 ; 0008 001A     EECR |= (1<<EERE);
000da4 9ae0      	SBI  0x1C,0
                 ; 0008 001B     return EEDR;
000da5 b3ed      	IN   R30,0x1D
000da6 940c 0ffd 	JMP  _0x20C0008
                 ; 0008 001C }
                 ;
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <uart.h>
                 ;#include <int_protocol.h>
                 ;#include <debug.h>
                 ;#include <adc.h>
                 ;#include <math.h>
                 ;#include <meansure.h>
                 ;
                 ;float SENSOR_SENSITIVE;
                 ;float AMP_ADJ_ZERO;
                 ;float total                 = 0.0;
                 ;float avg                   = 2500.0;
                 
                 	.DSEG
                 ;float value                 = 0.0;
                 ;float Viout                 = 0.0;
                 ;float Vdif                  = 0.0;
                 ;float Vsq_avg               = 0.0;
                 ;float volt                  = 0.0;
                 ;float amp                   = 0.0;
                 ;float power                 = 0.0;
                 ;float whour                 = 0.0;
                 ;float Vsum                  = 0.0;
                 ;float Isum                  = 0.0;
                 ;float Psum                  = 0.0;
                 ;float WHsum                 = 0.0;
                 ;float Vavg                  = 0.0;
                 ;float Iavg                  = 0.0;
                 ;float Pavg                  = 0.0;
                 ;float CURRENT_VOLT          = 0.0;
                 ;float CURRENT_AMP           = 0.0;
                 ;uint16_t number             = 0;
                 ;uint16_t adcValue           = 0;
                 ;uint16_t countSampling      = 0;
                 ;eeprom float ADJ0_SENSOR5A  = 0.090;
                 ;eeprom float ADJ0_SENSOR20A = 0.11;
                 ;eeprom float ADJ0_SENSOR30A = 0.11;
                 ;
                 ;void ReadCurrent(void){
                 ; 0009 0029 void ReadCurrent(void){
                 
                 	.CSEG
                 _ReadCurrent:
                 ; 0009 002A     adcValue = read_adc(ADC1);
000da8 e0a1      	LDI  R26,LOW(1)
000da9 940e 18a2 	CALL SUBOPT_0x5F
                 ; 0009 002B     printDebug("ADC = %d\r\n", adcValue);
                +
000dab e6e2     +LDI R30 , LOW ( 2 * _0x120000 + ( 0 ) )
000dac e0f6     +LDI R31 , HIGH ( 2 * _0x120000 + ( 0 ) )
                 	__POINTW1FN _0x120000,0
000dad 93fa      	ST   -Y,R31
000dae 93ea      	ST   -Y,R30
000daf 940e 18a9 	CALL SUBOPT_0x60
000db1 940e 16e5 	CALL SUBOPT_0x22
                 ; 0009 002C     value = adcValue * (5000.0 / 1023.0);
000db3 940e 18ae 	CALL SUBOPT_0x61
                +
000db5 e1aa     +LDI R26 , LOW ( 0x409C671A )
000db6 e6b7     +LDI R27 , HIGH ( 0x409C671A )
000db7 e98c     +LDI R24 , BYTE3 ( 0x409C671A )
000db8 e490     +LDI R25 , BYTE4 ( 0x409C671A )
                 	__GETD2N 0x409C671A
000db9 940e 1b08 	CALL __MULF12
000dbb 93e0 0844 	STS  _value,R30
000dbd 93f0 0845 	STS  _value+1,R31
000dbf 9360 0846 	STS  _value+2,R22
000dc1 9370 0847 	STS  _value+3,R23
                 ; 0009 002D 
                 ; 0009 002E     // Keep track of the moving average
                 ; 0009 002F     // See more : http://jeelabs.org/2011/09/15/power-measurement-acs-code/
                 ; 0009 0030     avg = (499.0*avg + value) / 500.0;
000dc3 940e 18b4 	CALL SUBOPT_0x62
                +
000dc5 e0a0     +LDI R26 , LOW ( 0x43F98000 )
000dc6 e8b0     +LDI R27 , HIGH ( 0x43F98000 )
000dc7 ef89     +LDI R24 , BYTE3 ( 0x43F98000 )
000dc8 e493     +LDI R25 , BYTE4 ( 0x43F98000 )
                 	__GETD2N 0x43F98000
000dc9 940e 1b08 	CALL __MULF12
000dcb 940e 18bd 	CALL SUBOPT_0x63
000dcd 940e 18c6 	CALL SUBOPT_0x64
                +
000dcf e0e0     +LDI R30 , LOW ( 0x43FA0000 )
000dd0 e0f0     +LDI R31 , HIGH ( 0x43FA0000 )
000dd1 ef6a     +LDI R22 , BYTE3 ( 0x43FA0000 )
000dd2 e473     +LDI R23 , BYTE4 ( 0x43FA0000 )
                 	__GETD1N 0x43FA0000
000dd3 940e 1b56 	CALL __DIVF21
000dd5 93e0 0840 	STS  _avg,R30
000dd7 93f0 0841 	STS  _avg+1,R31
000dd9 9360 0842 	STS  _avg+2,R22
000ddb 9370 0843 	STS  _avg+3,R23
                 ; 0009 0031 
                 ; 0009 0032     if(value > avg){
000ddd 940e 18cb 	CALL SUBOPT_0x65
000ddf f009      	BREQ PC+2
000de0 f410      	BRCC PC+3
000de1 940c 0df4 	JMP  _0x120004
                 ; 0009 0033         Vdif = value - avg;
000de3 91a0 0840 	LDS  R26,_avg
000de5 91b0 0841 	LDS  R27,_avg+1
000de7 9180 0842 	LDS  R24,_avg+2
000de9 9190 0843 	LDS  R25,_avg+3
000deb 91e0 0844 	LDS  R30,_value
000ded 91f0 0845 	LDS  R31,_value+1
000def 9160 0846 	LDS  R22,_value+2
000df1 9170 0847 	LDS  R23,_value+3
000df3 c007      	RJMP _0x12000B
                 ; 0009 0034         total += (Vdif*Vdif);
                 ; 0009 0035     }else if(value < avg) {
                 _0x120004:
000df4 940e 18cb 	CALL SUBOPT_0x65
000df6 f520      	BRSH _0x120006
                 ; 0009 0036         Vdif = avg - value;
000df7 940e 18bd 	CALL SUBOPT_0x63
000df9 940e 18b4 	CALL SUBOPT_0x62
                 _0x12000B:
000dfb 940e 1ab1 	CALL __SUBF12
000dfd 93e0 084c 	STS  _Vdif,R30
000dff 93f0 084d 	STS  _Vdif+1,R31
000e01 9360 084e 	STS  _Vdif+2,R22
000e03 9370 084f 	STS  _Vdif+3,R23
                 ; 0009 0037         total += (Vdif*Vdif);
000e05 91a0 084c 	LDS  R26,_Vdif
000e07 91b0 084d 	LDS  R27,_Vdif+1
000e09 9180 084e 	LDS  R24,_Vdif+2
000e0b 9190 084f 	LDS  R25,_Vdif+3
000e0d 940e 1b08 	CALL __MULF12
000e0f 940e 18d0 	CALL SUBOPT_0x66
000e11 940e 1ab8 	CALL __ADDF12
000e13 93e0 083c 	STS  _total,R30
000e15 93f0 083d 	STS  _total+1,R31
000e17 9360 083e 	STS  _total+2,R22
000e19 9370 083f 	STS  _total+3,R23
                 ; 0009 0038     }
                 ; 0009 0039     countSampling++;
                 _0x120006:
000e1b e8a0      	LDI  R26,LOW(_countSampling)
000e1c e0b8      	LDI  R27,HIGH(_countSampling)
000e1d c10a      	RJMP _0x20C0009
                 ; 0009 003A }
                 ;
                 ;void ReadVoltage(void){
                 ; 0009 003C void ReadVoltage(void){
                 _ReadVoltage:
                 ; 0009 003D    /*---------- Voltage ----------*/
                 ; 0009 003E     adcValue = read_adc(ADC0);
000e1e e0a0      	LDI  R26,LOW(0)
000e1f 940e 18a2 	CALL SUBOPT_0x5F
                 ; 0009 003F     volt = (((adcValue*5.0)/1023.0)/0.01);
000e21 940e 18ae 	CALL SUBOPT_0x61
                +
000e23 e0a0     +LDI R26 , LOW ( 0x40A00000 )
000e24 e0b0     +LDI R27 , HIGH ( 0x40A00000 )
000e25 ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
000e26 e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
000e27 940e 18d9 	CALL SUBOPT_0x67
                +
000e29 e0e0     +LDI R30 , LOW ( 0x447FC000 )
000e2a ecf0     +LDI R31 , HIGH ( 0x447FC000 )
000e2b e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
000e2c e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
000e2d 940e 1b56 	CALL __DIVF21
000e2f 01df      	MOVW R26,R30
000e30 01cb      	MOVW R24,R22
                +
000e31 e0ea     +LDI R30 , LOW ( 0x3C23D70A )
000e32 edf7     +LDI R31 , HIGH ( 0x3C23D70A )
000e33 e263     +LDI R22 , BYTE3 ( 0x3C23D70A )
000e34 e37c     +LDI R23 , BYTE4 ( 0x3C23D70A )
                 	__GETD1N 0x3C23D70A
000e35 940e 1b56 	CALL __DIVF21
000e37 93e0 0854 	STS  _volt,R30
000e39 93f0 0855 	STS  _volt+1,R31
000e3b 9360 0856 	STS  _volt+2,R22
000e3d 9370 0857 	STS  _volt+3,R23
                 ; 0009 0040     if(volt < 223.0) {
000e3f 940e 18de 	CALL SUBOPT_0x68
                +
000e41 e0e0     +LDI R30 , LOW ( 0x435F0000 )
000e42 e0f0     +LDI R31 , HIGH ( 0x435F0000 )
000e43 e56f     +LDI R22 , BYTE3 ( 0x435F0000 )
000e44 e473     +LDI R23 , BYTE4 ( 0x435F0000 )
                 	__GETD1N 0x435F0000
000e45 940e 1b9b 	CALL __CMPF12
000e47 f448      	BRSH _0x120007
                 ; 0009 0041         volt += 9.0;
000e48 940e 18e7 	CALL SUBOPT_0x69
                +
000e4a e0a0     +LDI R26 , LOW ( 0x41100000 )
000e4b e0b0     +LDI R27 , HIGH ( 0x41100000 )
000e4c e180     +LDI R24 , BYTE3 ( 0x41100000 )
000e4d e491     +LDI R25 , BYTE4 ( 0x41100000 )
                 	__GETD2N 0x41100000
000e4e 940e 1ab8 	CALL __ADDF12
000e50 c014      	RJMP _0x12000C
                 ; 0009 0042     }else if(volt > 233.0) {
                 _0x120007:
000e51 940e 18de 	CALL SUBOPT_0x68
                +
000e53 e0e0     +LDI R30 , LOW ( 0x43690000 )
000e54 e0f0     +LDI R31 , HIGH ( 0x43690000 )
000e55 e669     +LDI R22 , BYTE3 ( 0x43690000 )
000e56 e473     +LDI R23 , BYTE4 ( 0x43690000 )
                 	__GETD1N 0x43690000
000e57 940e 1b9b 	CALL __CMPF12
000e59 f009      	BREQ PC+2
000e5a f410      	BRCC PC+3
000e5b 940c 0e6d 	JMP  _0x120009
                 ; 0009 0043         volt -= 4.0;
000e5d 940e 18e7 	CALL SUBOPT_0x69
                +
000e5f e0a0     +LDI R26 , LOW ( 0x40800000 )
000e60 e0b0     +LDI R27 , HIGH ( 0x40800000 )
000e61 e880     +LDI R24 , BYTE3 ( 0x40800000 )
000e62 e490     +LDI R25 , BYTE4 ( 0x40800000 )
                 	__GETD2N 0x40800000
000e63 940e 1ab1 	CALL __SUBF12
                 _0x12000C:
000e65 93e0 0854 	STS  _volt,R30
000e67 93f0 0855 	STS  _volt+1,R31
000e69 9360 0856 	STS  _volt+2,R22
000e6b 9370 0857 	STS  _volt+3,R23
                 ; 0009 0044     }
                 ; 0009 0045     printDebug("Volt = %f\r\n", volt);
                 _0x120009:
                +
000e6d e6ed     +LDI R30 , LOW ( 2 * _0x120000 + ( 11 ) )
000e6e e0f6     +LDI R31 , HIGH ( 2 * _0x120000 + ( 11 ) )
                 	__POINTW1FN _0x120000,11
000e6f 93fa      	ST   -Y,R31
000e70 93ea      	ST   -Y,R30
000e71 940e 18e7 	CALL SUBOPT_0x69
000e73 940e 1659 	CALL SUBOPT_0xA
                 ; 0009 0046     Vsum += volt;
000e75 940e 18e7 	CALL SUBOPT_0x69
000e77 940e 1834 	CALL SUBOPT_0x53
000e79 940e 1ab8 	CALL __ADDF12
000e7b 93e0 0864 	STS  _Vsum,R30
000e7d 93f0 0865 	STS  _Vsum+1,R31
000e7f 9360 0866 	STS  _Vsum+2,R22
000e81 9370 0867 	STS  _Vsum+3,R23
                 ; 0009 0047 
                 ; 0009 0048     /*---------- Current ----------*/
                 ; 0009 0049     // V-rms
                 ; 0009 004A     // See more : http://www.electronics-tutorials.ws/blog/rms-voltage.html
                 ; 0009 004B     Vsq_avg = total / countSampling;
000e83 91e0 0880 	LDS  R30,_countSampling
000e85 91f0 0881 	LDS  R31,_countSampling+1
000e87 940e 18d0 	CALL SUBOPT_0x66
000e89 940e 183d 	CALL SUBOPT_0x54
000e8b 93e0 0850 	STS  _Vsq_avg,R30
000e8d 93f0 0851 	STS  _Vsq_avg+1,R31
000e8f 9360 0852 	STS  _Vsq_avg+2,R22
000e91 9370 0853 	STS  _Vsq_avg+3,R23
                 ; 0009 004C     Viout = sqrt(Vsq_avg);
000e93 91a0 0850 	LDS  R26,_Vsq_avg
000e95 91b0 0851 	LDS  R27,_Vsq_avg+1
000e97 9180 0852 	LDS  R24,_Vsq_avg+2
000e99 9190 0853 	LDS  R25,_Vsq_avg+3
000e9b 940e 1bbb 	CALL _sqrt
000e9d 93e0 0848 	STS  _Viout,R30
000e9f 93f0 0849 	STS  _Viout+1,R31
000ea1 9360 084a 	STS  _Viout+2,R22
000ea3 9370 084b 	STS  _Viout+3,R23
                 ; 0009 004D     amp = Viout / SENSOR_SENSITIVE;                  // ACS712 +-5 or +-20 or +-30 Amp.
000ea5 940e 1660 	CALL SUBOPT_0xB
000ea7 91a0 0848 	LDS  R26,_Viout
000ea9 91b0 0849 	LDS  R27,_Viout+1
000eab 9180 084a 	LDS  R24,_Viout+2
000ead 9190 084b 	LDS  R25,_Viout+3
000eaf 940e 1b56 	CALL __DIVF21
000eb1 93e0 0858 	STS  _amp,R30
000eb3 93f0 0859 	STS  _amp+1,R31
000eb5 9360 085a 	STS  _amp+2,R22
000eb7 9370 085b 	STS  _amp+3,R23
                 ; 0009 004E 
                 ; 0009 004F     /* Adjust Current to 0 */
                 ; 0009 0050     if(amp < AMP_ADJ_ZERO) {
000eb9 940e 1669 	CALL SUBOPT_0xC
000ebb 91a0 0858 	LDS  R26,_amp
000ebd 91b0 0859 	LDS  R27,_amp+1
000ebf 9180 085a 	LDS  R24,_amp+2
000ec1 9190 085b 	LDS  R25,_amp+3
000ec3 940e 1b9b 	CALL __CMPF12
000ec5 f448      	BRSH _0x12000A
                 ; 0009 0051         amp = 0.0;
000ec6 e0e0      	LDI  R30,LOW(0)
000ec7 93e0 0858 	STS  _amp,R30
000ec9 93e0 0859 	STS  _amp+1,R30
000ecb 93e0 085a 	STS  _amp+2,R30
000ecd 93e0 085b 	STS  _amp+3,R30
                 ; 0009 0052     }
                 ; 0009 0053 
                 ; 0009 0054     total = 0.0;
                 _0x12000A:
000ecf e0e0      	LDI  R30,LOW(0)
000ed0 93e0 083c 	STS  _total,R30
000ed2 93e0 083d 	STS  _total+1,R30
000ed4 93e0 083e 	STS  _total+2,R30
000ed6 93e0 083f 	STS  _total+3,R30
                 ; 0009 0055     countSampling = 0;
000ed8 93e0 0880 	STS  _countSampling,R30
000eda 93e0 0881 	STS  _countSampling+1,R30
                 ; 0009 0056     Isum += amp;
000edc 940e 18f0 	CALL SUBOPT_0x6A
000ede 940e 1844 	CALL SUBOPT_0x55
000ee0 940e 1ab8 	CALL __ADDF12
000ee2 93e0 0868 	STS  _Isum,R30
000ee4 93f0 0869 	STS  _Isum+1,R31
000ee6 9360 086a 	STS  _Isum+2,R22
000ee8 9370 086b 	STS  _Isum+3,R23
                 ; 0009 0057 
                 ; 0009 0058     /*---------- Power ----------*/
                 ; 0009 0059     power = volt*amp;
000eea 940e 18f0 	CALL SUBOPT_0x6A
000eec 940e 18de 	CALL SUBOPT_0x68
000eee 940e 1b08 	CALL __MULF12
000ef0 93e0 085c 	STS  _power,R30
000ef2 93f0 085d 	STS  _power+1,R31
000ef4 9360 085e 	STS  _power+2,R22
000ef6 9370 085f 	STS  _power+3,R23
                 ; 0009 005A     Psum += power;
000ef8 940e 1856 	CALL SUBOPT_0x57
000efa 940e 1ab8 	CALL __ADDF12
000efc 93e0 086c 	STS  _Psum,R30
000efe 93f0 086d 	STS  _Psum+1,R31
000f00 9360 086e 	STS  _Psum+2,R22
000f02 9370 086f 	STS  _Psum+3,R23
                 ; 0009 005B 
                 ; 0009 005C     /*----------  Watt-hour ----------*/
                 ; 0009 005D     whour = power*(0.5/3600.0);
000f04 91a0 085c 	LDS  R26,_power
000f06 91b0 085d 	LDS  R27,_power+1
000f08 9180 085e 	LDS  R24,_power+2
000f0a 9190 085f 	LDS  R25,_power+3
                +
000f0c ebe4     +LDI R30 , LOW ( 0x3911A2B4 )
000f0d eaf2     +LDI R31 , HIGH ( 0x3911A2B4 )
000f0e e161     +LDI R22 , BYTE3 ( 0x3911A2B4 )
000f0f e379     +LDI R23 , BYTE4 ( 0x3911A2B4 )
                 	__GETD1N 0x3911A2B4
000f10 940e 1b08 	CALL __MULF12
000f12 93e0 0860 	STS  _whour,R30
000f14 93f0 0861 	STS  _whour+1,R31
000f16 9360 0862 	STS  _whour+2,R22
000f18 9370 0863 	STS  _whour+3,R23
                 ; 0009 005E     WHsum += whour;
000f1a 940e 1887 	CALL SUBOPT_0x5C
000f1c 940e 1ab8 	CALL __ADDF12
000f1e 93e0 0870 	STS  _WHsum,R30
000f20 93f0 0871 	STS  _WHsum+1,R31
000f22 9360 0872 	STS  _WHsum+2,R22
000f24 9370 0873 	STS  _WHsum+3,R23
                 ; 0009 005F     number++;
000f26 e3a0      	LDI  R26,LOW(_number)
000f27 e0b8      	LDI  R27,HIGH(_number)
                 _0x20C0009:
000f28 91ed      	LD   R30,X+
000f29 91fd      	LD   R31,X+
000f2a 9631      	ADIW R30,1
000f2b 93fe      	ST   -X,R31
000f2c 93ee      	ST   -X,R30
                 ; 0009 0060 }
000f2d 9508      	RET
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <main.h>
                 ;#include <queue.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <int_protocol.h>
                 ;#include <uart.h>
                 ;#include <eeprom.h>
                 ;
                 ;int input[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                 ;int count_input = 0;
                 ;int count_event = 0;
                 ;
                 ;void push_event(int event){
                 ; 000A 0011 void push_event(int event){
                 
                 	.CSEG
                 _push_event:
                 ; 000A 0012     input[count_input] = event;
000f2e 93ba      	ST   -Y,R27
000f2f 93aa      	ST   -Y,R26
                 ;	event -> Y+0
000f30 91e0 08db 	LDS  R30,_count_input
000f32 91f0 08dc 	LDS  R31,_count_input+1
000f34 940e 177b 	CALL SUBOPT_0x37
000f36 0fea      	ADD  R30,R26
000f37 1ffb      	ADC  R31,R27
000f38 81a8      	LD   R26,Y
000f39 81b9      	LDD  R27,Y+1
000f3a 83a0      	STD  Z+0,R26
000f3b 83b1      	STD  Z+1,R27
                 ; 000A 0013     count_input++;
000f3c edab      	LDI  R26,LOW(_count_input)
000f3d e0b8      	LDI  R27,HIGH(_count_input)
000f3e 940e 16df 	CALL SUBOPT_0x21
                 ; 000A 0014 }
000f40 c0bc      	RJMP _0x20C0008
                 ;
                 ;void pop_event(){
                 ; 000A 0016 void pop_event(){
                 _pop_event:
                 ; 000A 0017     int event = 0;
                 ; 000A 0018     event = input[count_event];
000f41 931a      	ST   -Y,R17
000f42 930a      	ST   -Y,R16
                 ;	event -> R16,R17
                +
000f43 e000     +LDI R16 , LOW ( 0 )
000f44 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000f45 91e0 08dd 	LDS  R30,_count_event
000f47 91f0 08de 	LDS  R31,_count_event+1
000f49 940e 177b 	CALL SUBOPT_0x37
000f4b 0fae      	ADD  R26,R30
000f4c 1fbf      	ADC  R27,R31
000f4d 910d      	LD   R16,X+
000f4e 911c      	LD   R17,X
                 ; 000A 0019     printDebug("EVENT = %d\r\n", event);
                +
000f4f e7ea     +LDI R30 , LOW ( 2 * _0x140000 + ( 0 ) )
000f50 e0f6     +LDI R31 , HIGH ( 2 * _0x140000 + ( 0 ) )
                 	__POINTW1FN _0x140000,0
000f51 93fa      	ST   -Y,R31
000f52 93ea      	ST   -Y,R30
000f53 01f8      	MOVW R30,R16
000f54 940e 16bd 	CALL SUBOPT_0x1D
                 ; 000A 001A     if (event != 0) count_event++;
000f56 2e00      	MOV  R0,R16
000f57 2a01      	OR   R0,R17
000f58 f021      	BREQ _0x140003
000f59 edad      	LDI  R26,LOW(_count_event)
000f5a e0b8      	LDI  R27,HIGH(_count_event)
000f5b 940e 16df 	CALL SUBOPT_0x21
                 ; 000A 001B     printDebug("count_event = %d\r\n", count_event);
                 _0x140003:
                +
000f5d e8e7     +LDI R30 , LOW ( 2 * _0x140000 + ( 13 ) )
000f5e e0f6     +LDI R31 , HIGH ( 2 * _0x140000 + ( 13 ) )
                 	__POINTW1FN _0x140000,13
000f5f 93fa      	ST   -Y,R31
000f60 93ea      	ST   -Y,R30
000f61 91e0 08dd 	LDS  R30,_count_event
000f63 91f0 08de 	LDS  R31,_count_event+1
000f65 940e 16bd 	CALL SUBOPT_0x1D
                 ; 000A 001C     if(count_event == 30 ) count_event = 0;
000f67 91a0 08dd 	LDS  R26,_count_event
000f69 91b0 08de 	LDS  R27,_count_event+1
000f6b 975e      	SBIW R26,30
000f6c f429      	BRNE _0x140004
000f6d e0e0      	LDI  R30,LOW(0)
000f6e 93e0 08dd 	STS  _count_event,R30
000f70 93e0 08de 	STS  _count_event+1,R30
                 ; 000A 001D     do_event(event);
                 _0x140004:
000f72 01d8      	MOVW R26,R16
000f73 d003      	RCALL _do_event
                 ; 000A 001E }
000f74 9109      	LD   R16,Y+
000f75 9119      	LD   R17,Y+
000f76 9508      	RET
                 ;
                 ;void do_event(int event){
                 ; 000A 0020 void do_event(int event){
                 _do_event:
                 ; 000A 0021 
                 ; 000A 0022             if(event == 2){
000f77 93ba      	ST   -Y,R27
000f78 93aa      	ST   -Y,R26
                 ;	event -> Y+0
000f79 81a8      	LD   R26,Y
000f7a 81b9      	LDD  R27,Y+1
000f7b 9712      	SBIW R26,2
000f7c f439      	BRNE _0x140005
                 ; 000A 0023                 flag_state = 4;
000f7d e0e4      	LDI  R30,LOW(4)
000f7e e0f0      	LDI  R31,HIGH(4)
000f7f 940e 169a 	CALL SUBOPT_0x16
                 ; 000A 0024                 printDebug("\r\n-------- JOINT SUCCESS --------\r\n");
                +
000f81 e9ea     +LDI R30 , LOW ( 2 * _0x140000 + ( 32 ) )
000f82 e0f6     +LDI R31 , HIGH ( 2 * _0x140000 + ( 32 ) )
                 	__POINTW1FN _0x140000,32
000f83 c073      	RJMP _0x140018
                 ; 000A 0025             }
                 ; 000A 0026 
                 ; 000A 0027         /*=============== Recive ACK ===============*/
                 ; 000A 0028             else if(event == 3){
                 _0x140005:
000f84 81a8      	LD   R26,Y
000f85 81b9      	LDD  R27,Y+1
000f86 9713      	SBIW R26,3
000f87 f439      	BRNE _0x140007
                 ; 000A 0029                 printDebug("\r\n-------- RECIVE PING --------\r\n");
                +
000f88 ebee     +LDI R30 , LOW ( 2 * _0x140000 + ( 68 ) )
000f89 e0f6     +LDI R31 , HIGH ( 2 * _0x140000 + ( 68 ) )
                 	__POINTW1FN _0x140000,68
000f8a 940e 164d 	CALL SUBOPT_0x8
                 ; 000A 002A                 send_ping();
000f8c 940e 0b5b 	CALL _send_ping
                 ; 000A 002B             }
                 ; 000A 002C 
                 ; 000A 002D         /*=============== Recive EVENT from Gate Way ===============*/
                 ; 000A 002E             else if(event == 510 || event == 511){
000f8e c06e      	RJMP _0x140008
                 _0x140007:
000f8f 81a8      	LD   R26,Y
000f90 81b9      	LDD  R27,Y+1
000f91 3fae      	CPI  R26,LOW(0x1FE)
000f92 e0e1      	LDI  R30,HIGH(0x1FE)
000f93 07be      	CPC  R27,R30
000f94 f021      	BREQ _0x14000A
000f95 3faf      	CPI  R26,LOW(0x1FF)
000f96 e0e1      	LDI  R30,HIGH(0x1FF)
000f97 07be      	CPC  R27,R30
000f98 f531      	BRNE _0x140009
                 _0x14000A:
                 ; 000A 002F                 if(event == 511){
000f99 81a8      	LD   R26,Y
000f9a 81b9      	LDD  R27,Y+1
000f9b 3faf      	CPI  R26,LOW(0x1FF)
000f9c e0e1      	LDI  R30,HIGH(0x1FF)
000f9d 07be      	CPC  R27,R30
000f9e f429      	BRNE _0x14000C
                 ; 000A 0030                     device_state(1); // on
000f9f 940e 167f 	CALL SUBOPT_0x10
000fa1 940e 18f9 	CALL SUBOPT_0x6B
                 ; 000A 0031                     EVENT[1] = 1;
                 ; 000A 0032                     flag_state = 5;
000fa3 c00a      	RJMP _0x140019
                 ; 000A 0033                     EEPROM_write(Eaddress,STATUS_DEVICE);
                 ; 000A 0034                 }else if(event == 510){
                 _0x14000C:
000fa4 81a8      	LD   R26,Y
000fa5 81b9      	LDD  R27,Y+1
000fa6 3fae      	CPI  R26,LOW(0x1FE)
000fa7 e0e1      	LDI  R30,HIGH(0x1FE)
000fa8 07be      	CPC  R27,R30
000fa9 f461      	BRNE _0x14000E
                 ; 000A 0035                     device_state(0); // off
000faa 940e 1672 	CALL SUBOPT_0xD
000fac 940e 1901 	CALL SUBOPT_0x6C
                 ; 000A 0036                     EVENT[1] = 0;
                 ; 000A 0037                     flag_state = 4;
                 _0x140019:
000fae 93e0 062a 	STS  _flag_state,R30
000fb0 93f0 062b 	STS  _flag_state+1,R31
                 ; 000A 0038                     EEPROM_write(Eaddress,STATUS_DEVICE);
000fb2 940e 1613 	CALL SUBOPT_0x3
000fb4 940e 1685 	CALL SUBOPT_0x12
                 ; 000A 0039                 }
                 ; 000A 003A                 recive_event(1,EVENT[1]);
                 _0x14000E:
000fb6 e0e1      	LDI  R30,LOW(1)
000fb7 93ea      	ST   -Y,R30
                +
000fb8 91a0 0894+LDS R26 , _EVENT + ( 1 )
                 	__GETB2MN _EVENT,1
000fba 940e 0b8a 	CALL _recive_event
                 ; 000A 003B                 printDebug("\r\n-------- RECIVE EVENT --------\r\n");
                +
000fbc eee0     +LDI R30 , LOW ( 2 * _0x140000 + ( 102 ) )
000fbd e0f6     +LDI R31 , HIGH ( 2 * _0x140000 + ( 102 ) )
                 	__POINTW1FN _0x140000,102
000fbe c038      	RJMP _0x140018
                 ; 000A 003C             }
                 ; 000A 003D 
                 ; 000A 003E             /*=============== Send EVENT from Smart Plug ===============*/
                 ; 000A 003F 
                 ; 000A 0040             else if(event == 5100 || event == 5110){
                 _0x140009:
000fbf 81a8      	LD   R26,Y
000fc0 81b9      	LDD  R27,Y+1
000fc1 3eac      	CPI  R26,LOW(0x13EC)
000fc2 e1e3      	LDI  R30,HIGH(0x13EC)
000fc3 07be      	CPC  R27,R30
000fc4 f021      	BREQ _0x140011
000fc5 3fa6      	CPI  R26,LOW(0x13F6)
000fc6 e1e3      	LDI  R30,HIGH(0x13F6)
000fc7 07be      	CPC  R27,R30
000fc8 f541      	BRNE _0x140010
                 _0x140011:
                 ; 000A 0041             printDebug("\r\n-------- SEND EVENT --------\r\n");
                +
000fc9 e0e3     +LDI R30 , LOW ( 2 * _0x140000 + ( 137 ) )
000fca e0f7     +LDI R31 , HIGH ( 2 * _0x140000 + ( 137 ) )
                 	__POINTW1FN _0x140000,137
000fcb 940e 164d 	CALL SUBOPT_0x8
                 ; 000A 0042                 if(event == 5110){
000fcd 81a8      	LD   R26,Y
000fce 81b9      	LDD  R27,Y+1
000fcf 3fa6      	CPI  R26,LOW(0x13F6)
000fd0 e1e3      	LDI  R30,HIGH(0x13F6)
000fd1 07be      	CPC  R27,R30
000fd2 f429      	BRNE _0x140013
                 ; 000A 0043                     device_state(1); // on
000fd3 940e 167f 	CALL SUBOPT_0x10
000fd5 940e 18f9 	CALL SUBOPT_0x6B
                 ; 000A 0044                     EVENT[1] = 1;
                 ; 000A 0045                     flag_state = 5;
000fd7 c00a      	RJMP _0x14001A
                 ; 000A 0046                     EEPROM_write(Eaddress,STATUS_DEVICE);
                 ; 000A 0047                     send_event(1,EVENT[1]);
                 ; 000A 0048                 }else if(event == 5100){
                 _0x140013:
000fd8 81a8      	LD   R26,Y
000fd9 81b9      	LDD  R27,Y+1
000fda 3eac      	CPI  R26,LOW(0x13EC)
000fdb e1e3      	LDI  R30,HIGH(0x13EC)
000fdc 07be      	CPC  R27,R30
000fdd f491      	BRNE _0x140015
                 ; 000A 0049                     device_state(0); // off
000fde 940e 1672 	CALL SUBOPT_0xD
000fe0 940e 1901 	CALL SUBOPT_0x6C
                 ; 000A 004A                     EVENT[1] = 0;
                 ; 000A 004B                     flag_state = 4;
                 _0x14001A:
000fe2 93e0 062a 	STS  _flag_state,R30
000fe4 93f0 062b 	STS  _flag_state+1,R31
                 ; 000A 004C                     EEPROM_write(Eaddress,STATUS_DEVICE);
000fe6 940e 1613 	CALL SUBOPT_0x3
000fe8 940e 1685 	CALL SUBOPT_0x12
                 ; 000A 004D                     send_event(1,EVENT[1]);
000fea e0e1      	LDI  R30,LOW(1)
000feb 93ea      	ST   -Y,R30
                +
000fec 91a0 0894+LDS R26 , _EVENT + ( 1 )
                 	__GETB2MN _EVENT,1
000fee 940e 0b1f 	CALL _send_event
                 ; 000A 004E                 }
                 ; 000A 004F             }
                 _0x140015:
                 ; 000A 0050 
                 ; 000A 0051             /*=============== Send REPPORT Success ===============*/
                 ; 000A 0052             else if(event == 8){
000ff0 c00c      	RJMP _0x140016
                 _0x140010:
000ff1 81a8      	LD   R26,Y
000ff2 81b9      	LDD  R27,Y+1
000ff3 9718      	SBIW R26,8
000ff4 f441      	BRNE _0x140017
                 ; 000A 0053                 printDebug("\r\n-------- SEND REPORT SUCCESS --------\r\n");
                +
000ff5 e2e4     +LDI R30 , LOW ( 2 * _0x140000 + ( 170 ) )
000ff6 e0f7     +LDI R31 , HIGH ( 2 * _0x140000 + ( 170 ) )
                 	__POINTW1FN _0x140000,170
                 _0x140018:
000ff7 93fa      	ST   -Y,R31
000ff8 93ea      	ST   -Y,R30
000ff9 e080      	LDI  R24,0
000ffa 940e 05f3 	CALL _printDebug
000ffc 9622      	ADIW R28,2
                 ; 000A 0054             }
                 ; 000A 0055 }
                 _0x140017:
                 _0x140016:
                 _0x140008:
                 _0x20C0008:
000ffd 9622      	ADIW R28,2
000ffe 9508      	RET
                 ;
                 ;
                 ;
                 
                 	.CSEG
                 _ftoa:
000fff 940e 16aa 	CALL SUBOPT_0x19
001001 83e8      	ST   Y,R30
001002 e0e0      	LDI  R30,LOW(0)
001003 83e9      	STD  Y+1,R30
001004 83ea      	STD  Y+2,R30
001005 e3ef      	LDI  R30,LOW(63)
001006 83eb      	STD  Y+3,R30
001007 931a      	ST   -Y,R17
001008 930a      	ST   -Y,R16
001009 85eb      	LDD  R30,Y+11
00100a 85fc      	LDD  R31,Y+11+1
00100b 3fef      	CPI  R30,LOW(0xFFFF)
00100c efaf      	LDI  R26,HIGH(0xFFFF)
00100d 07fa      	CPC  R31,R26
00100e f439      	BRNE _0x200000D
00100f 940e 16af 	CALL SUBOPT_0x1A
                +
001011 e5a0     +LDI R26 , LOW ( 2 * _0x2000000 + ( 0 ) )
001012 e0b7     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 0 ) )
                 	__POINTW2FN _0x2000000,0
001013 940e 1428 	CALL _strcpyf
001015 c0a5      	RJMP _0x20C0007
                 _0x200000D:
001016 3fef      	CPI  R30,LOW(0x7FFF)
001017 e7af      	LDI  R26,HIGH(0x7FFF)
001018 07fa      	CPC  R31,R26
001019 f439      	BRNE _0x200000C
00101a 940e 16af 	CALL SUBOPT_0x1A
                +
00101c e5a1     +LDI R26 , LOW ( 2 * _0x2000000 + ( 1 ) )
00101d e0b7     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 1 ) )
                 	__POINTW2FN _0x2000000,1
00101e 940e 1428 	CALL _strcpyf
001020 c09a      	RJMP _0x20C0007
                 _0x200000C:
001021 85ac      	LDD  R26,Y+12
001022 23aa      	TST  R26
001023 f462      	BRPL _0x200000F
                +
001024 85e9     +LDD R30 , Y + 9
001025 85fa     +LDD R31 , Y + 9 + 1
001026 856b     +LDD R22 , Y + 9 + 2
001027 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
001028 940e 1a12 	CALL __ANEGF1
00102a 940e 1909 	CALL SUBOPT_0x6D
00102c 940e 190e 	CALL SUBOPT_0x6E
00102e e2ed      	LDI  R30,LOW(45)
00102f 93ec      	ST   X,R30
                 _0x200000F:
001030 85a8      	LDD  R26,Y+8
001031 30a7      	CPI  R26,LOW(0x7)
001032 f010      	BRLO _0x2000010
001033 e0e6      	LDI  R30,LOW(6)
001034 87e8      	STD  Y+8,R30
                 _0x2000010:
001035 8518      	LDD  R17,Y+8
                 _0x2000011:
001036 2fe1      	MOV  R30,R17
001037 5011      	SUBI R17,1
001038 30e0      	CPI  R30,0
001039 f039      	BREQ _0x2000013
00103a 940e 1915 	CALL SUBOPT_0x6F
00103c 940e 191a 	CALL SUBOPT_0x70
00103e 940e 1921 	CALL SUBOPT_0x71
001040 cff5      	RJMP _0x2000011
                 _0x2000013:
001041 940e 1926 	CALL SUBOPT_0x72
001043 940e 1ab8 	CALL __ADDF12
001045 940e 1909 	CALL SUBOPT_0x6D
001047 e010      	LDI  R17,LOW(0)
001048 940e 1654 	CALL SUBOPT_0x9
00104a 940e 1921 	CALL SUBOPT_0x71
                 _0x2000014:
00104c 940e 1926 	CALL SUBOPT_0x72
00104e 940e 1b9b 	CALL __CMPF12
001050 f088      	BRLO _0x2000016
001051 940e 1915 	CALL SUBOPT_0x6F
001053 940e 192f 	CALL SUBOPT_0x73
001055 940e 1921 	CALL SUBOPT_0x71
001057 5f1f      	SUBI R17,-LOW(1)
001058 3217      	CPI  R17,39
001059 f038      	BRLO _0x2000017
00105a 940e 16af 	CALL SUBOPT_0x1A
                +
00105c e5a5     +LDI R26 , LOW ( 2 * _0x2000000 + ( 5 ) )
00105d e0b7     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 5 ) )
                 	__POINTW2FN _0x2000000,5
00105e 940e 1428 	CALL _strcpyf
001060 c05a      	RJMP _0x20C0007
                 _0x2000017:
001061 cfea      	RJMP _0x2000014
                 _0x2000016:
001062 3010      	CPI  R17,0
001063 f429      	BRNE _0x2000018
001064 940e 190e 	CALL SUBOPT_0x6E
001066 e3e0      	LDI  R30,LOW(48)
001067 93ec      	ST   X,R30
001068 c028      	RJMP _0x2000019
                 _0x2000018:
                 _0x200001A:
001069 2fe1      	MOV  R30,R17
00106a 5011      	SUBI R17,1
00106b 30e0      	CPI  R30,0
00106c f121      	BREQ _0x200001C
00106d 940e 1915 	CALL SUBOPT_0x6F
00106f 940e 191a 	CALL SUBOPT_0x70
001071 940e 1933 	CALL SUBOPT_0x74
001073 940e 18c6 	CALL SUBOPT_0x64
001075 940e 147f 	CALL _floor
001077 940e 1921 	CALL SUBOPT_0x71
001079 940e 1926 	CALL SUBOPT_0x72
00107b 940e 1b56 	CALL __DIVF21
00107d 940e 1a45 	CALL __CFD1U
00107f 2f0e      	MOV  R16,R30
001080 940e 190e 	CALL SUBOPT_0x6E
001082 940e 1938 	CALL SUBOPT_0x75
001084 940e 1915 	CALL SUBOPT_0x6F
001086 940e 17a6 	CALL SUBOPT_0x3B
001088 940e 1b08 	CALL __MULF12
00108a 940e 193e 	CALL SUBOPT_0x76
00108c 940e 17b0 	CALL SUBOPT_0x3D
00108e 940e 1909 	CALL SUBOPT_0x6D
001090 cfd8      	RJMP _0x200001A
                 _0x200001C:
                 _0x2000019:
001091 85e8      	LDD  R30,Y+8
001092 30e0      	CPI  R30,0
001093 f119      	BREQ _0x20C0006
001094 940e 190e 	CALL SUBOPT_0x6E
001096 e2ee      	LDI  R30,LOW(46)
001097 93ec      	ST   X,R30
                 _0x200001E:
001098 85e8      	LDD  R30,Y+8
001099 50e1      	SUBI R30,LOW(1)
00109a 87e8      	STD  Y+8,R30
00109b 5fef      	SUBI R30,-LOW(1)
00109c f0d1      	BREQ _0x2000020
00109d 940e 193e 	CALL SUBOPT_0x76
00109f 940e 192f 	CALL SUBOPT_0x73
0010a1 940e 1909 	CALL SUBOPT_0x6D
                +
0010a3 85e9     +LDD R30 , Y + 9
0010a4 85fa     +LDD R31 , Y + 9 + 1
0010a5 856b     +LDD R22 , Y + 9 + 2
0010a6 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0010a7 940e 1a45 	CALL __CFD1U
0010a9 2f0e      	MOV  R16,R30
0010aa 940e 190e 	CALL SUBOPT_0x6E
0010ac 940e 1938 	CALL SUBOPT_0x75
0010ae 940e 193e 	CALL SUBOPT_0x76
0010b0 940e 17a6 	CALL SUBOPT_0x3B
0010b2 940e 17b0 	CALL SUBOPT_0x3D
0010b4 940e 1909 	CALL SUBOPT_0x6D
0010b6 cfe1      	RJMP _0x200001E
                 _0x2000020:
                 _0x20C0006:
0010b7 81ae      	LDD  R26,Y+6
0010b8 81bf      	LDD  R27,Y+6+1
0010b9 e0e0      	LDI  R30,LOW(0)
0010ba 93ec      	ST   X,R30
                 _0x20C0007:
0010bb 8119      	LDD  R17,Y+1
0010bc 8108      	LDD  R16,Y+0
0010bd 962d      	ADIW R28,13
0010be 9508      	RET
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
0010bf 940e 1731 	CALL SUBOPT_0x2D
0010c1 81aa      	LDD  R26,Y+2
0010c2 81bb      	LDD  R27,Y+2+1
0010c3 9612      	ADIW R26,2
0010c4 940e 1c95 	CALL __GETW1P
0010c6 9730      	SBIW R30,0
0010c7 f129      	BREQ _0x2020010
0010c8 81aa      	LDD  R26,Y+2
0010c9 81bb      	LDD  R27,Y+2+1
0010ca 9614      	ADIW R26,4
0010cb 940e 1c95 	CALL __GETW1P
0010cd 018f      	MOVW R16,R30
0010ce 9730      	SBIW R30,0
0010cf f061      	BREQ _0x2020012
                +
0010d0 3002     +CPI R16 , LOW ( 2 )
0010d1 e0e0     +LDI R30 , HIGH ( 2 )
0010d2 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0010d3 f0c0      	BRLO _0x2020013
0010d4 01f8      	MOVW R30,R16
0010d5 9731      	SBIW R30,1
0010d6 018f      	MOVW R16,R30
                +
0010d7 81aa     +LDD R26 , Y + 2
0010d8 81bb     +LDD R27 , Y + 2 + 1
0010d9 9614     +ADIW R26 , 4
0010da 93ed     +ST X + , R30
0010db 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0010dc 81aa      	LDD  R26,Y+2
0010dd 81bb      	LDD  R27,Y+2+1
0010de 9612      	ADIW R26,2
0010df 940e 16df 	CALL SUBOPT_0x21
0010e1 9731      	SBIW R30,1
0010e2 81ac      	LDD  R26,Y+4
0010e3 83a0      	STD  Z+0,R26
0010e4 81aa      	LDD  R26,Y+2
0010e5 81bb      	LDD  R27,Y+2+1
0010e6 940e 1c95 	CALL __GETW1P
0010e8 23ff      	TST  R31
0010e9 f012      	BRMI _0x2020014
0010ea 940e 16df 	CALL SUBOPT_0x21
                 _0x2020014:
                 _0x2020013:
0010ec c006      	RJMP _0x2020015
                 _0x2020010:
0010ed 81aa      	LDD  R26,Y+2
0010ee 81bb      	LDD  R27,Y+2+1
0010ef efef      	LDI  R30,LOW(65535)
0010f0 efff      	LDI  R31,HIGH(65535)
0010f1 93ed      	ST   X+,R30
0010f2 93fc      	ST   X,R31
                 _0x2020015:
0010f3 8119      	LDD  R17,Y+1
0010f4 8108      	LDD  R16,Y+0
0010f5 9625      	ADIW R28,5
0010f6 9508      	RET
                 __ftoe_G101:
0010f7 940e 16aa 	CALL SUBOPT_0x19
0010f9 83e8      	ST   Y,R30
0010fa e0e0      	LDI  R30,LOW(0)
0010fb 83e9      	STD  Y+1,R30
0010fc e8e0      	LDI  R30,LOW(128)
0010fd 83ea      	STD  Y+2,R30
0010fe e3ef      	LDI  R30,LOW(63)
0010ff 83eb      	STD  Y+3,R30
001100 940e 1cfd 	CALL __SAVELOCR4
001102 85ee      	LDD  R30,Y+14
001103 85ff      	LDD  R31,Y+14+1
001104 3fef      	CPI  R30,LOW(0xFFFF)
001105 efaf      	LDI  R26,HIGH(0xFFFF)
001106 07fa      	CPC  R31,R26
001107 f449      	BRNE _0x2020019
001108 85e8      	LDD  R30,Y+8
001109 85f9      	LDD  R31,Y+8+1
00110a 93fa      	ST   -Y,R31
00110b 93ea      	ST   -Y,R30
                +
00110c e5aa     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
00110d e0b7     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
00110e 940e 1428 	CALL _strcpyf
001110 c0ba      	RJMP _0x20C0005
                 _0x2020019:
001111 3fef      	CPI  R30,LOW(0x7FFF)
001112 e7af      	LDI  R26,HIGH(0x7FFF)
001113 07fa      	CPC  R31,R26
001114 f449      	BRNE _0x2020018
001115 85e8      	LDD  R30,Y+8
001116 85f9      	LDD  R31,Y+8+1
001117 93fa      	ST   -Y,R31
001118 93ea      	ST   -Y,R30
                +
001119 e5ab     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
00111a e0b7     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
00111b 940e 1428 	CALL _strcpyf
00111d c0ad      	RJMP _0x20C0005
                 _0x2020018:
00111e 85ab      	LDD  R26,Y+11
00111f 30a7      	CPI  R26,LOW(0x7)
001120 f010      	BRLO _0x202001B
001121 e0e6      	LDI  R30,LOW(6)
001122 87eb      	STD  Y+11,R30
                 _0x202001B:
001123 851b      	LDD  R17,Y+11
                 _0x202001C:
001124 2fe1      	MOV  R30,R17
001125 5011      	SUBI R17,1
001126 30e0      	CPI  R30,0
001127 f019      	BREQ _0x202001E
001128 940e 1943 	CALL SUBOPT_0x77
00112a cff9      	RJMP _0x202001C
                 _0x202001E:
00112b 940e 17a1 	CALL SUBOPT_0x3A
00112d 940e 1ce8 	CALL __CPD10
00112f f421      	BRNE _0x202001F
001130 e030      	LDI  R19,LOW(0)
001131 940e 1943 	CALL SUBOPT_0x77
001133 c034      	RJMP _0x2020020
                 _0x202001F:
001134 853b      	LDD  R19,Y+11
001135 940e 1946 	CALL SUBOPT_0x78
001137 f009      	BREQ PC+2
001138 f410      	BRCC PC+3
001139 940c 1149 	JMP  _0x2020021
00113b 940e 1943 	CALL SUBOPT_0x77
                 _0x2020022:
00113d 940e 1946 	CALL SUBOPT_0x78
00113f f040      	BRLO _0x2020024
001140 940e 17ab 	CALL SUBOPT_0x3C
001142 940e 191a 	CALL SUBOPT_0x70
001144 940e 194b 	CALL SUBOPT_0x79
001146 5f3f      	SUBI R19,-LOW(1)
001147 cff5      	RJMP _0x2020022
                 _0x2020024:
001148 c00d      	RJMP _0x2020025
                 _0x2020021:
                 _0x2020026:
001149 940e 1946 	CALL SUBOPT_0x78
00114b f440      	BRSH _0x2020028
00114c 940e 17ab 	CALL SUBOPT_0x3C
00114e 940e 192f 	CALL SUBOPT_0x73
001150 940e 194b 	CALL SUBOPT_0x79
001152 5031      	SUBI R19,LOW(1)
001153 cff5      	RJMP _0x2020026
                 _0x2020028:
001154 940e 1943 	CALL SUBOPT_0x77
                 _0x2020025:
001156 940e 17a1 	CALL SUBOPT_0x3A
001158 940e 1933 	CALL SUBOPT_0x74
00115a 940e 1ab8 	CALL __ADDF12
00115c 940e 194b 	CALL SUBOPT_0x79
00115e 940e 1946 	CALL SUBOPT_0x78
001160 f038      	BRLO _0x2020029
001161 940e 17ab 	CALL SUBOPT_0x3C
001163 940e 191a 	CALL SUBOPT_0x70
001165 940e 194b 	CALL SUBOPT_0x79
001167 5f3f      	SUBI R19,-LOW(1)
                 _0x2020029:
                 _0x2020020:
001168 e010      	LDI  R17,LOW(0)
                 _0x202002A:
001169 85eb      	LDD  R30,Y+11
00116a 17e1      	CP   R30,R17
00116b f198      	BRLO _0x202002C
00116c 940e 17bf 	CALL SUBOPT_0x40
00116e 940e 191a 	CALL SUBOPT_0x70
001170 940e 1933 	CALL SUBOPT_0x74
001172 940e 18c6 	CALL SUBOPT_0x64
001174 940e 147f 	CALL _floor
001176 940e 17b5 	CALL SUBOPT_0x3E
001178 940e 17c7 	CALL SUBOPT_0x42
00117a 940e 17ab 	CALL SUBOPT_0x3C
00117c 940e 1b56 	CALL __DIVF21
00117e 940e 1a45 	CALL __CFD1U
001180 2f0e      	MOV  R16,R30
001181 940e 1950 	CALL SUBOPT_0x7A
001183 2fe0      	MOV  R30,R16
001184 5de0      	SUBI R30,-LOW(48)
001185 93ec      	ST   X,R30
001186 2fe0      	MOV  R30,R16
001187 27ff      	CLR  R31
001188 2766      	CLR  R22
001189 2777      	CLR  R23
00118a 940e 1a7e 	CALL __CDF1
00118c 940e 17bf 	CALL SUBOPT_0x40
00118e 940e 1b08 	CALL __MULF12
001190 940e 17ab 	CALL SUBOPT_0x3C
001192 940e 17b0 	CALL SUBOPT_0x3D
001194 940e 194b 	CALL SUBOPT_0x79
001196 2fe1      	MOV  R30,R17
001197 5f1f      	SUBI R17,-1
001198 30e0      	CPI  R30,0
001199 f679      	BRNE _0x202002A
00119a 940e 1950 	CALL SUBOPT_0x7A
00119c e2ee      	LDI  R30,LOW(46)
00119d 93ec      	ST   X,R30
00119e cfca      	RJMP _0x202002A
                 _0x202002C:
00119f 940e 1957 	CALL SUBOPT_0x7B
0011a1 9731      	SBIW R30,1
0011a2 85aa      	LDD  R26,Y+10
0011a3 83a0      	STD  Z+0,R26
0011a4 3030      	CPI  R19,0
0011a5 f42c      	BRGE _0x202002E
0011a6 9531      	NEG  R19
0011a7 85a8      	LDD  R26,Y+8
0011a8 85b9      	LDD  R27,Y+8+1
0011a9 e2ed      	LDI  R30,LOW(45)
0011aa c003      	RJMP _0x202010E
                 _0x202002E:
0011ab 85a8      	LDD  R26,Y+8
0011ac 85b9      	LDD  R27,Y+8+1
0011ad e2eb      	LDI  R30,LOW(43)
                 _0x202010E:
0011ae 93ec      	ST   X,R30
0011af 940e 1957 	CALL SUBOPT_0x7B
0011b1 940e 1957 	CALL SUBOPT_0x7B
0011b3 9731      	SBIW R30,1
0011b4 01bf      	MOVW R22,R30
0011b5 2fa3      	MOV  R26,R19
0011b6 e0ea      	LDI  R30,LOW(10)
0011b7 940e 1c1b 	CALL __DIVB21
0011b9 5de0      	SUBI R30,-LOW(48)
0011ba 01db      	MOVW R26,R22
0011bb 93ec      	ST   X,R30
0011bc 940e 1957 	CALL SUBOPT_0x7B
0011be 9731      	SBIW R30,1
0011bf 01bf      	MOVW R22,R30
0011c0 2fa3      	MOV  R26,R19
0011c1 e0ea      	LDI  R30,LOW(10)
0011c2 940e 1c5d 	CALL __MODB21
0011c4 5de0      	SUBI R30,-LOW(48)
0011c5 01db      	MOVW R26,R22
0011c6 93ec      	ST   X,R30
0011c7 85a8      	LDD  R26,Y+8
0011c8 85b9      	LDD  R27,Y+8+1
0011c9 e0e0      	LDI  R30,LOW(0)
0011ca 93ec      	ST   X,R30
                 _0x20C0005:
0011cb 940e 1d04 	CALL __LOADLOCR4
0011cd 9660      	ADIW R28,16
0011ce 9508      	RET
                 __print_G101:
0011cf 93ba      	ST   -Y,R27
0011d0 93aa      	ST   -Y,R26
0011d1 97ef      	SBIW R28,63
0011d2 9761      	SBIW R28,17
0011d3 940e 1cfb 	CALL __SAVELOCR6
0011d5 e010      	LDI  R17,0
                +
0011d6 01fe     +MOVW R30 , R28
0011d7 5ae8     +SUBI R30 , LOW ( - 88 )
0011d8 4fff     +SBCI R31 , HIGH ( - 88 )
0011d9 9001     +LD R0 , Z +
0011da 81f0     +LD R31 , Z
0011db 2de0     +MOV R30 , R0
                 	__GETW1SX 88
0011dc 87e8      	STD  Y+8,R30
0011dd 87f9      	STD  Y+8+1,R31
                +
0011de 01fe     +MOVW R30 , R28
0011df 5aea     +SUBI R30 , LOW ( - 86 )
0011e0 4fff     +SBCI R31 , HIGH ( - 86 )
0011e1 9001     +LD R0 , Z +
0011e2 81f0     +LD R31 , Z
0011e3 2de0     +MOV R30 , R0
                 	__GETW1SX 86
0011e4 83ee      	STD  Y+6,R30
0011e5 83ff      	STD  Y+6+1,R31
0011e6 81ae      	LDD  R26,Y+6
0011e7 81bf      	LDD  R27,Y+6+1
0011e8 e0e0      	LDI  R30,LOW(0)
0011e9 e0f0      	LDI  R31,HIGH(0)
0011ea 93ed      	ST   X+,R30
0011eb 93fc      	ST   X,R31
                 _0x2020030:
0011ec 01de      	MOVW R26,R28
0011ed 5aa4      	SUBI R26,LOW(-(92))
0011ee 4fbf      	SBCI R27,HIGH(-(92))
0011ef 940e 16df 	CALL SUBOPT_0x21
0011f1 9731      	SBIW R30,1
0011f2 91e4      	LPM  R30,Z
0011f3 2f2e      	MOV  R18,R30
0011f4 30e0      	CPI  R30,0
0011f5 f411      	BRNE PC+3
0011f6 940c 13e2 	JMP _0x2020032
0011f8 2fe1      	MOV  R30,R17
0011f9 30e0      	CPI  R30,0
0011fa f439      	BRNE _0x2020036
0011fb 3225      	CPI  R18,37
0011fc f411      	BRNE _0x2020037
0011fd e011      	LDI  R17,LOW(1)
0011fe c002      	RJMP _0x2020038
                 _0x2020037:
0011ff 940e 195d 	CALL SUBOPT_0x7C
                 _0x2020038:
001201 c1df      	RJMP _0x2020035
                 _0x2020036:
001202 30e1      	CPI  R30,LOW(0x1)
001203 f4c1      	BRNE _0x2020039
001204 3225      	CPI  R18,37
001205 f419      	BRNE _0x202003A
001206 940e 195d 	CALL SUBOPT_0x7C
001208 c1d7      	RJMP _0x202010F
                 _0x202003A:
001209 e012      	LDI  R17,LOW(2)
00120a e0e0      	LDI  R30,LOW(0)
00120b 8bed      	STD  Y+21,R30
00120c e000      	LDI  R16,LOW(0)
00120d 322d      	CPI  R18,45
00120e f411      	BRNE _0x202003B
00120f e001      	LDI  R16,LOW(1)
001210 c1d0      	RJMP _0x2020035
                 _0x202003B:
001211 322b      	CPI  R18,43
001212 f419      	BRNE _0x202003C
001213 e2eb      	LDI  R30,LOW(43)
001214 8bed      	STD  Y+21,R30
001215 c1cb      	RJMP _0x2020035
                 _0x202003C:
001216 3220      	CPI  R18,32
001217 f419      	BRNE _0x202003D
001218 e2e0      	LDI  R30,LOW(32)
001219 8bed      	STD  Y+21,R30
00121a c1c6      	RJMP _0x2020035
                 _0x202003D:
00121b c002      	RJMP _0x202003E
                 _0x2020039:
00121c 30e2      	CPI  R30,LOW(0x2)
00121d f439      	BRNE _0x202003F
                 _0x202003E:
00121e e050      	LDI  R21,LOW(0)
00121f e013      	LDI  R17,LOW(3)
001220 3320      	CPI  R18,48
001221 f411      	BRNE _0x2020040
001222 6800      	ORI  R16,LOW(128)
001223 c1bd      	RJMP _0x2020035
                 _0x2020040:
001224 c002      	RJMP _0x2020041
                 _0x202003F:
001225 30e3      	CPI  R30,LOW(0x3)
001226 f491      	BRNE _0x2020042
                 _0x2020041:
001227 3320      	CPI  R18,48
001228 f010      	BRLO _0x2020044
001229 332a      	CPI  R18,58
00122a f008      	BRLO _0x2020045
                 _0x2020044:
00122b c007      	RJMP _0x2020043
                 _0x2020045:
00122c e0aa      	LDI  R26,LOW(10)
00122d 9f5a      	MUL  R21,R26
00122e 2d50      	MOV  R21,R0
00122f 2fe2      	MOV  R30,R18
001230 53e0      	SUBI R30,LOW(48)
001231 0f5e      	ADD  R21,R30
001232 c1ae      	RJMP _0x2020035
                 _0x2020043:
001233 e040      	LDI  R20,LOW(0)
001234 322e      	CPI  R18,46
001235 f411      	BRNE _0x2020046
001236 e014      	LDI  R17,LOW(4)
001237 c1a9      	RJMP _0x2020035
                 _0x2020046:
001238 c00f      	RJMP _0x2020047
                 _0x2020042:
001239 30e4      	CPI  R30,LOW(0x4)
00123a f499      	BRNE _0x2020049
00123b 3320      	CPI  R18,48
00123c f010      	BRLO _0x202004B
00123d 332a      	CPI  R18,58
00123e f008      	BRLO _0x202004C
                 _0x202004B:
00123f c008      	RJMP _0x202004A
                 _0x202004C:
001240 6200      	ORI  R16,LOW(32)
001241 e0aa      	LDI  R26,LOW(10)
001242 9f4a      	MUL  R20,R26
001243 2d40      	MOV  R20,R0
001244 2fe2      	MOV  R30,R18
001245 53e0      	SUBI R30,LOW(48)
001246 0f4e      	ADD  R20,R30
001247 c199      	RJMP _0x2020035
                 _0x202004A:
                 _0x2020047:
001248 362c      	CPI  R18,108
001249 f419      	BRNE _0x202004D
00124a 6002      	ORI  R16,LOW(2)
00124b e015      	LDI  R17,LOW(5)
00124c c194      	RJMP _0x2020035
                 _0x202004D:
00124d c004      	RJMP _0x202004E
                 _0x2020049:
00124e 30e5      	CPI  R30,LOW(0x5)
00124f f011      	BREQ PC+3
001250 940c 13e1 	JMP _0x2020035
                 _0x202004E:
001252 2fe2      	MOV  R30,R18
001253 36e3      	CPI  R30,LOW(0x63)
001254 f459      	BRNE _0x2020053
001255 940e 1964 	CALL SUBOPT_0x7D
001257 940e 196b 	CALL SUBOPT_0x7E
001259 940e 1964 	CALL SUBOPT_0x7D
00125b 81a4      	LDD  R26,Z+4
00125c 93aa      	ST   -Y,R26
00125d 940e 1972 	CALL SUBOPT_0x7F
00125f c180      	RJMP _0x2020054
                 _0x2020053:
001260 34e5      	CPI  R30,LOW(0x45)
001261 f011      	BREQ _0x2020057
001262 36e5      	CPI  R30,LOW(0x65)
001263 f409      	BRNE _0x2020058
                 _0x2020057:
001264 c004      	RJMP _0x2020059
                 _0x2020058:
001265 36e6      	CPI  R30,LOW(0x66)
001266 f011      	BREQ PC+3
001267 940c 12af 	JMP _0x202005A
                 _0x2020059:
001269 01fe      	MOVW R30,R28
00126a 9676      	ADIW R30,22
00126b 87ee      	STD  Y+14,R30
00126c 87ff      	STD  Y+14+1,R31
00126d 940e 1978 	CALL SUBOPT_0x80
00126f 940e 1c99 	CALL __GETD1P
001271 940e 197f 	CALL SUBOPT_0x81
001273 940e 1984 	CALL SUBOPT_0x82
001275 85ad      	LDD  R26,Y+13
001276 23aa      	TST  R26
001277 f022      	BRMI _0x202005B
001278 89ad      	LDD  R26,Y+21
001279 32ab      	CPI  R26,LOW(0x2B)
00127a f049      	BREQ _0x202005D
00127b c017      	RJMP _0x202005E
                 _0x202005B:
00127c 940e 1986 	CALL SUBOPT_0x83
00127e 940e 1a12 	CALL __ANEGF1
001280 940e 197f 	CALL SUBOPT_0x81
001282 e2ed      	LDI  R30,LOW(45)
001283 8bed      	STD  Y+21,R30
                 _0x202005D:
001284 ff07      	SBRS R16,7
001285 c005      	RJMP _0x202005F
001286 89ed      	LDD  R30,Y+21
001287 93ea      	ST   -Y,R30
001288 940e 1972 	CALL SUBOPT_0x7F
00128a c008      	RJMP _0x2020060
                 _0x202005F:
00128b 85ee      	LDD  R30,Y+14
00128c 85ff      	LDD  R31,Y+14+1
00128d 9631      	ADIW R30,1
00128e 87ee      	STD  Y+14,R30
00128f 87ff      	STD  Y+14+1,R31
001290 9731      	SBIW R30,1
001291 89ad      	LDD  R26,Y+21
001292 83a0      	STD  Z+0,R26
                 _0x2020060:
                 _0x202005E:
001293 ff05      	SBRS R16,5
001294 e046      	LDI  R20,LOW(6)
001295 3626      	CPI  R18,102
001296 f451      	BRNE _0x2020062
001297 940e 1986 	CALL SUBOPT_0x83
001299 940e 1cbd 	CALL __PUTPARD1
00129b 934a      	ST   -Y,R20
00129c 89ab      	LDD  R26,Y+19
00129d 89bc      	LDD  R27,Y+19+1
00129e 940e 0fff 	CALL _ftoa
0012a0 c009      	RJMP _0x2020063
                 _0x2020062:
0012a1 940e 1986 	CALL SUBOPT_0x83
0012a3 940e 1cbd 	CALL __PUTPARD1
0012a5 934a      	ST   -Y,R20
0012a6 932a      	ST   -Y,R18
0012a7 89ac      	LDD  R26,Y+20
0012a8 89bd      	LDD  R27,Y+20+1
0012a9 de4d      	RCALL __ftoe_G101
                 _0x2020063:
0012aa 01fe      	MOVW R30,R28
0012ab 9676      	ADIW R30,22
0012ac 940e 198b 	CALL SUBOPT_0x84
0012ae c01e      	RJMP _0x2020064
                 _0x202005A:
0012af 37e3      	CPI  R30,LOW(0x73)
0012b0 f439      	BRNE _0x2020066
0012b1 940e 1984 	CALL SUBOPT_0x82
0012b3 940e 1993 	CALL SUBOPT_0x85
0012b5 940e 198b 	CALL SUBOPT_0x84
0012b7 c00e      	RJMP _0x2020067
                 _0x2020066:
0012b8 37e0      	CPI  R30,LOW(0x70)
0012b9 f4c1      	BRNE _0x2020069
0012ba 940e 1984 	CALL SUBOPT_0x82
0012bc 940e 1993 	CALL SUBOPT_0x85
0012be 87ee      	STD  Y+14,R30
0012bf 87ff      	STD  Y+14+1,R31
0012c0 85ae      	LDD  R26,Y+14
0012c1 85bf      	LDD  R27,Y+14+1
0012c2 940e 1441 	CALL _strlenf
0012c4 2f1e      	MOV  R17,R30
0012c5 6008      	ORI  R16,LOW(8)
                 _0x2020067:
0012c6 770f      	ANDI R16,LOW(127)
0012c7 3040      	CPI  R20,0
0012c8 f011      	BREQ _0x202006B
0012c9 1741      	CP   R20,R17
0012ca f008      	BRLO _0x202006C
                 _0x202006B:
0012cb c001      	RJMP _0x202006A
                 _0x202006C:
0012cc 2f14      	MOV  R17,R20
                 _0x202006A:
                 _0x2020064:
0012cd e040      	LDI  R20,LOW(0)
0012ce e0e0      	LDI  R30,LOW(0)
0012cf 8bec      	STD  Y+20,R30
0012d0 e030      	LDI  R19,LOW(0)
0012d1 c06e      	RJMP _0x202006D
                 _0x2020069:
0012d2 36e4      	CPI  R30,LOW(0x64)
0012d3 f011      	BREQ _0x2020070
0012d4 36e9      	CPI  R30,LOW(0x69)
0012d5 f411      	BRNE _0x2020071
                 _0x2020070:
0012d6 6004      	ORI  R16,LOW(4)
0012d7 c002      	RJMP _0x2020072
                 _0x2020071:
0012d8 37e5      	CPI  R30,LOW(0x75)
0012d9 f4a1      	BRNE _0x2020073
                 _0x2020072:
0012da e0ea      	LDI  R30,LOW(10)
0012db 8bec      	STD  Y+20,R30
0012dc ff01      	SBRS R16,1
0012dd c008      	RJMP _0x2020074
                +
0012de e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
0012df ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
0012e0 e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
0012e1 e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
0012e2 940e 1998 	CALL SUBOPT_0x86
0012e4 e01a      	LDI  R17,LOW(10)
0012e5 c023      	RJMP _0x2020075
                 _0x2020074:
                +
0012e6 e1e0     +LDI R30 , LOW ( 0x2710 )
0012e7 e2f7     +LDI R31 , HIGH ( 0x2710 )
0012e8 e060     +LDI R22 , BYTE3 ( 0x2710 )
0012e9 e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
0012ea 940e 1998 	CALL SUBOPT_0x86
0012ec e015      	LDI  R17,LOW(5)
0012ed c01b      	RJMP _0x2020075
                 _0x2020073:
0012ee 35e8      	CPI  R30,LOW(0x58)
0012ef f411      	BRNE _0x2020077
0012f0 6008      	ORI  R16,LOW(8)
0012f1 c004      	RJMP _0x2020078
                 _0x2020077:
0012f2 37e8      	CPI  R30,LOW(0x78)
0012f3 f011      	BREQ PC+3
0012f4 940c 13e0 	JMP _0x20200B6
                 _0x2020078:
0012f6 e1e0      	LDI  R30,LOW(16)
0012f7 8bec      	STD  Y+20,R30
0012f8 ff01      	SBRS R16,1
0012f9 c008      	RJMP _0x202007A
                +
0012fa e0e0     +LDI R30 , LOW ( 0x10000000 )
0012fb e0f0     +LDI R31 , HIGH ( 0x10000000 )
0012fc e060     +LDI R22 , BYTE3 ( 0x10000000 )
0012fd e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
0012fe 940e 1998 	CALL SUBOPT_0x86
001300 e018      	LDI  R17,LOW(8)
001301 c007      	RJMP _0x2020075
                 _0x202007A:
                +
001302 e0e0     +LDI R30 , LOW ( 0x1000 )
001303 e1f0     +LDI R31 , HIGH ( 0x1000 )
001304 e060     +LDI R22 , BYTE3 ( 0x1000 )
001305 e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
001306 940e 1998 	CALL SUBOPT_0x86
001308 e014      	LDI  R17,LOW(4)
                 _0x2020075:
001309 3040      	CPI  R20,0
00130a f011      	BREQ _0x202007B
00130b 770f      	ANDI R16,LOW(127)
00130c c001      	RJMP _0x202007C
                 _0x202007B:
00130d e041      	LDI  R20,LOW(1)
                 _0x202007C:
00130e ff01      	SBRS R16,1
00130f c008      	RJMP _0x202007D
001310 940e 1984 	CALL SUBOPT_0x82
001312 940e 1978 	CALL SUBOPT_0x80
001314 9614      	ADIW R26,4
001315 940e 1c99 	CALL __GETD1P
001317 c00f      	RJMP _0x2020110
                 _0x202007D:
001318 ff02      	SBRS R16,2
001319 c007      	RJMP _0x202007F
00131a 940e 1984 	CALL SUBOPT_0x82
00131c 940e 1993 	CALL SUBOPT_0x85
00131e 940e 1c08 	CALL __CWD1
001320 c006      	RJMP _0x2020110
                 _0x202007F:
001321 940e 1984 	CALL SUBOPT_0x82
001323 940e 1993 	CALL SUBOPT_0x85
001325 2766      	CLR  R22
001326 2777      	CLR  R23
                 _0x2020110:
                +
001327 87ea     +STD Y + 10 , R30
001328 87fb     +STD Y + 10 + 1 , R31
001329 876c     +STD Y + 10 + 2 , R22
00132a 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
00132b ff02      	SBRS R16,2
00132c c012      	RJMP _0x2020081
00132d 85ad      	LDD  R26,Y+13
00132e 23aa      	TST  R26
00132f f442      	BRPL _0x2020082
001330 940e 1986 	CALL SUBOPT_0x83
001332 940e 1bfa 	CALL __ANEGD1
001334 940e 197f 	CALL SUBOPT_0x81
001336 e2ed      	LDI  R30,LOW(45)
001337 8bed      	STD  Y+21,R30
                 _0x2020082:
001338 89ed      	LDD  R30,Y+21
001339 30e0      	CPI  R30,0
00133a f019      	BREQ _0x2020083
00133b 5f1f      	SUBI R17,-LOW(1)
00133c 5f4f      	SUBI R20,-LOW(1)
00133d c001      	RJMP _0x2020084
                 _0x2020083:
00133e 7f0b      	ANDI R16,LOW(251)
                 _0x2020084:
                 _0x2020081:
00133f 2f34      	MOV  R19,R20
                 _0x202006D:
001340 fd00      	SBRC R16,0
001341 c014      	RJMP _0x2020085
                 _0x2020086:
001342 1715      	CP   R17,R21
001343 f410      	BRSH _0x2020089
001344 1735      	CP   R19,R21
001345 f008      	BRLO _0x202008A
                 _0x2020089:
001346 c00f      	RJMP _0x2020088
                 _0x202008A:
001347 ff07      	SBRS R16,7
001348 c008      	RJMP _0x202008B
001349 ff02      	SBRS R16,2
00134a c004      	RJMP _0x202008C
00134b 7f0b      	ANDI R16,LOW(251)
00134c 892d      	LDD  R18,Y+21
00134d 5011      	SUBI R17,LOW(1)
00134e c001      	RJMP _0x202008D
                 _0x202008C:
00134f e320      	LDI  R18,LOW(48)
                 _0x202008D:
001350 c001      	RJMP _0x202008E
                 _0x202008B:
001351 e220      	LDI  R18,LOW(32)
                 _0x202008E:
001352 940e 195d 	CALL SUBOPT_0x7C
001354 5051      	SUBI R21,LOW(1)
001355 cfec      	RJMP _0x2020086
                 _0x2020088:
                 _0x2020085:
                 _0x202008F:
001356 1714      	CP   R17,R20
001357 f490      	BRSH _0x2020091
001358 6100      	ORI  R16,LOW(16)
001359 ff02      	SBRS R16,2
00135a c006      	RJMP _0x2020092
00135b 940e 199d 	CALL SUBOPT_0x87
00135d f009      	BREQ _0x2020093
00135e 5051      	SUBI R21,LOW(1)
                 _0x2020093:
00135f 5011      	SUBI R17,LOW(1)
001360 5041      	SUBI R20,LOW(1)
                 _0x2020092:
001361 e3e0      	LDI  R30,LOW(48)
001362 93ea      	ST   -Y,R30
001363 940e 1972 	CALL SUBOPT_0x7F
001365 3050      	CPI  R21,0
001366 f009      	BREQ _0x2020094
001367 5051      	SUBI R21,LOW(1)
                 _0x2020094:
001368 5041      	SUBI R20,LOW(1)
001369 cfec      	RJMP _0x202008F
                 _0x2020091:
00136a 2f31      	MOV  R19,R17
00136b 89ec      	LDD  R30,Y+20
00136c 30e0      	CPI  R30,0
00136d f4b9      	BRNE _0x2020095
                 _0x2020096:
00136e 3030      	CPI  R19,0
00136f f0a1      	BREQ _0x2020098
001370 ff03      	SBRS R16,3
001371 c006      	RJMP _0x2020099
001372 85ee      	LDD  R30,Y+14
001373 85ff      	LDD  R31,Y+14+1
001374 9125      	LPM  R18,Z+
001375 87ee      	STD  Y+14,R30
001376 87ff      	STD  Y+14+1,R31
001377 c005      	RJMP _0x202009A
                 _0x2020099:
001378 85ae      	LDD  R26,Y+14
001379 85bf      	LDD  R27,Y+14+1
00137a 912d      	LD   R18,X+
00137b 87ae      	STD  Y+14,R26
00137c 87bf      	STD  Y+14+1,R27
                 _0x202009A:
00137d 940e 195d 	CALL SUBOPT_0x7C
00137f 3050      	CPI  R21,0
001380 f009      	BREQ _0x202009B
001381 5051      	SUBI R21,LOW(1)
                 _0x202009B:
001382 5031      	SUBI R19,LOW(1)
001383 cfea      	RJMP _0x2020096
                 _0x2020098:
001384 c051      	RJMP _0x202009C
                 _0x2020095:
                 _0x202009E:
001385 940e 19af 	CALL SUBOPT_0x88
001387 940e 1c38 	CALL __DIVD21U
001389 2f2e      	MOV  R18,R30
00138a 302a      	CPI  R18,10
00138b f030      	BRLO _0x20200A0
00138c ff03      	SBRS R16,3
00138d c002      	RJMP _0x20200A1
00138e 5c29      	SUBI R18,-LOW(55)
00138f c001      	RJMP _0x20200A2
                 _0x20200A1:
001390 5a29      	SUBI R18,-LOW(87)
                 _0x20200A2:
001391 c001      	RJMP _0x20200A3
                 _0x20200A0:
001392 5d20      	SUBI R18,-LOW(48)
                 _0x20200A3:
001393 fd04      	SBRC R16,4
001394 c021      	RJMP _0x20200A5
001395 3321      	CPI  R18,49
001396 f460      	BRSH _0x20200A7
                +
001397 89a8     +LDD R26 , Y + 16
001398 89b9     +LDD R27 , Y + 16 + 1
001399 898a     +LDD R24 , Y + 16 + 2
00139a 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
00139b 30a1     +CPI R26 , LOW ( 0x1 )
00139c e0e0     +LDI R30 , HIGH ( 0x1 )
00139d 07be     +CPC R27 , R30
00139e e0e0     +LDI R30 , BYTE3 ( 0x1 )
00139f 078e     +CPC R24 , R30
0013a0 e0e0     +LDI R30 , BYTE4 ( 0x1 )
0013a1 079e     +CPC R25 , R30
                 	__CPD2N 0x1
0013a2 f409      	BRNE _0x20200A6
                 _0x20200A7:
0013a3 c00b      	RJMP _0x20200A9
                 _0x20200A6:
0013a4 1743      	CP   R20,R19
0013a5 f440      	BRSH _0x2020111
0013a6 1753      	CP   R21,R19
0013a7 f010      	BRLO _0x20200AC
0013a8 ff00      	SBRS R16,0
0013a9 c001      	RJMP _0x20200AD
                 _0x20200AC:
0013aa c010      	RJMP _0x20200AB
                 _0x20200AD:
0013ab e220      	LDI  R18,LOW(32)
0013ac ff07      	SBRS R16,7
0013ad c008      	RJMP _0x20200AE
                 _0x2020111:
0013ae e320      	LDI  R18,LOW(48)
                 _0x20200A9:
0013af 6100      	ORI  R16,LOW(16)
0013b0 ff02      	SBRS R16,2
0013b1 c004      	RJMP _0x20200AF
0013b2 940e 199d 	CALL SUBOPT_0x87
0013b4 f009      	BREQ _0x20200B0
0013b5 5051      	SUBI R21,LOW(1)
                 _0x20200B0:
                 _0x20200AF:
                 _0x20200AE:
                 _0x20200A5:
0013b6 940e 195d 	CALL SUBOPT_0x7C
0013b8 3050      	CPI  R21,0
0013b9 f009      	BREQ _0x20200B1
0013ba 5051      	SUBI R21,LOW(1)
                 _0x20200B1:
                 _0x20200AB:
0013bb 5031      	SUBI R19,LOW(1)
0013bc 940e 19af 	CALL SUBOPT_0x88
0013be 940e 1c77 	CALL __MODD21U
0013c0 940e 197f 	CALL SUBOPT_0x81
0013c2 89ec      	LDD  R30,Y+20
                +
0013c3 89a8     +LDD R26 , Y + 16
0013c4 89b9     +LDD R27 , Y + 16 + 1
0013c5 898a     +LDD R24 , Y + 16 + 2
0013c6 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
0013c7 27ff      	CLR  R31
0013c8 2766      	CLR  R22
0013c9 2777      	CLR  R23
0013ca 940e 1c38 	CALL __DIVD21U
0013cc 940e 1998 	CALL SUBOPT_0x86
                +
0013ce 89e8     +LDD R30 , Y + 16
0013cf 89f9     +LDD R31 , Y + 16 + 1
0013d0 896a     +LDD R22 , Y + 16 + 2
0013d1 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
0013d2 940e 1ce8 	CALL __CPD10
0013d4 f009      	BREQ _0x202009F
0013d5 cfaf      	RJMP _0x202009E
                 _0x202009F:
                 _0x202009C:
0013d6 ff00      	SBRS R16,0
0013d7 c008      	RJMP _0x20200B2
                 _0x20200B3:
0013d8 3050      	CPI  R21,0
0013d9 f031      	BREQ _0x20200B5
0013da 5051      	SUBI R21,LOW(1)
0013db e2e0      	LDI  R30,LOW(32)
0013dc 93ea      	ST   -Y,R30
0013dd 940e 1972 	CALL SUBOPT_0x7F
0013df cff8      	RJMP _0x20200B3
                 _0x20200B5:
                 _0x20200B2:
                 _0x20200B6:
                 _0x2020054:
                 _0x202010F:
0013e0 e010      	LDI  R17,LOW(0)
                 _0x2020035:
0013e1 ce0a      	RJMP _0x2020030
                 _0x2020032:
0013e2 81ae      	LDD  R26,Y+6
0013e3 81bf      	LDD  R27,Y+6+1
0013e4 940e 1c95 	CALL __GETW1P
0013e6 940e 1d02 	CALL __LOADLOCR6
0013e8 96ef      	ADIW R28,63
0013e9 966f      	ADIW R28,31
0013ea 9508      	RET
                 _vsprintf:
0013eb 93ba      	ST   -Y,R27
0013ec 93aa      	ST   -Y,R26
0013ed 9726      	SBIW R28,6
0013ee 931a      	ST   -Y,R17
0013ef 930a      	ST   -Y,R16
0013f0 85ec      	LDD  R30,Y+12
0013f1 85fd      	LDD  R31,Y+12+1
0013f2 9730      	SBIW R30,0
0013f3 f421      	BRNE _0x20200BA
0013f4 efef      	LDI  R30,LOW(65535)
0013f5 efff      	LDI  R31,HIGH(65535)
0013f6 940c 15a2 	JMP  _0x20C0002
                 _0x20200BA:
0013f8 85ec      	LDD  R30,Y+12
0013f9 85fd      	LDD  R31,Y+12+1
0013fa 83ec      	STD  Y+4,R30
0013fb 83fd      	STD  Y+4+1,R31
0013fc e0e0      	LDI  R30,LOW(0)
0013fd 83ee      	STD  Y+6,R30
0013fe 83ef      	STD  Y+6+1,R30
0013ff 85ea      	LDD  R30,Y+10
001400 85fb      	LDD  R31,Y+10+1
001401 93fa      	ST   -Y,R31
001402 93ea      	ST   -Y,R30
001403 85ea      	LDD  R30,Y+10
001404 85fb      	LDD  R31,Y+10+1
001405 93fa      	ST   -Y,R31
001406 93ea      	ST   -Y,R30
001407 ebef      	LDI  R30,LOW(_put_buff_G101)
001408 e1f0      	LDI  R31,HIGH(_put_buff_G101)
001409 93fa      	ST   -Y,R31
00140a 93ea      	ST   -Y,R30
00140b 01de      	MOVW R26,R28
00140c 9618      	ADIW R26,8
00140d ddc1      	RCALL __print_G101
00140e 018f      	MOVW R16,R30
00140f 81ac      	LDD  R26,Y+4
001410 81bd      	LDD  R27,Y+4+1
001411 e0e0      	LDI  R30,LOW(0)
001412 93ec      	ST   X,R30
001413 01f8      	MOVW R30,R16
001414 940c 15a2 	JMP  _0x20C0002
                 
                 	.CSEG
                 _memcpy:
001416 93ba      	ST   -Y,R27
001417 93aa      	ST   -Y,R26
001418 8199          ldd  r25,y+1
001419 8188          ld   r24,y
00141a 9600          adiw r24,0
00141b f041          breq memcpy1
00141c 81bd          ldd  r27,y+5
00141d 81ac          ldd  r26,y+4
00141e 81fb          ldd  r31,y+3
00141f 81ea          ldd  r30,y+2
                 memcpy0:
001420 9161          ld   r22,z+
001421 936d          st   x+,r22
001422 9701          sbiw r24,1
001423 f7e1          brne memcpy0
                 memcpy1:
001424 81fd          ldd  r31,y+5
001425 81ec          ldd  r30,y+4
001426 9626      	ADIW R28,6
001427 9508      	RET
                 _strcpyf:
001428 93ba      	ST   -Y,R27
001429 93aa      	ST   -Y,R26
00142a 91e9          ld   r30,y+
00142b 91f9          ld   r31,y+
00142c 91a9          ld   r26,y+
00142d 91b9          ld   r27,y+
00142e 01cd          movw r24,r26
                 strcpyf0:
00142f 9005      	lpm  r0,z+
001430 920d          st   x+,r0
001431 2000          tst  r0
001432 f7e1          brne strcpyf0
001433 01fc          movw r30,r24
001434 9508          ret
                 _strlen:
001435 93ba      	ST   -Y,R27
001436 93aa      	ST   -Y,R26
001437 91a9          ld   r26,y+
001438 91b9          ld   r27,y+
001439 27ee          clr  r30
00143a 27ff          clr  r31
                 strlen0:
00143b 916d          ld   r22,x+
00143c 2366          tst  r22
00143d f011          breq strlen1
00143e 9631          adiw r30,1
00143f cffb          rjmp strlen0
                 strlen1:
001440 9508          ret
                 _strlenf:
001441 93ba      	ST   -Y,R27
001442 93aa      	ST   -Y,R26
001443 27aa          clr  r26
001444 27bb          clr  r27
001445 91e9          ld   r30,y+
001446 91f9          ld   r31,y+
                 strlenf0:
001447 9005      	lpm  r0,z+
001448 2000          tst  r0
001449 f011          breq strlenf1
00144a 9611          adiw r26,1
00144b cffb          rjmp strlenf0
                 strlenf1:
00144c 01fd          movw r30,r26
00144d 9508          ret
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
00144e 940e 1cc2 	CALL __PUTPARD2
001450 817b         ldd  r23,y+3
001451 816a         ldd  r22,y+2
001452 81f9         ldd  r31,y+1
001453 81e8         ld   r30,y
001454 fb77         bst  r23,7
001455 0f77         lsl  r23
001456 fd67         sbrc r22,7
001457 6071         sbr  r23,1
001458 2f97         mov  r25,r23
001459 579e         subi r25,0x7e
00145a f081         breq __ftrunc0
00145b f078         brcs __ftrunc0
00145c 3198         cpi  r25,24
00145d f490         brsh __ftrunc1
00145e 27aa         clr  r26
00145f 27bb         clr  r27
001460 2788         clr  r24
                 __ftrunc2:
001461 9408         sec
001462 9587         ror  r24
001463 95b7         ror  r27
001464 95a7         ror  r26
001465 959a         dec  r25
001466 f7d1         brne __ftrunc2
001467 23ea         and  r30,r26
001468 23fb         and  r31,r27
001469 2368         and  r22,r24
00146a c005         rjmp __ftrunc1
                 __ftrunc0:
00146b 94e8         clt
00146c 2777         clr  r23
00146d 27ee         clr  r30
00146e 27ff         clr  r31
00146f 2766         clr  r22
                 __ftrunc1:
001470 776f         cbr  r22,0x80
001471 9576         lsr  r23
001472 f408         brcc __ftrunc3
001473 6860         sbr  r22,0x80
                 __ftrunc3:
001474 f977         bld  r23,7
001475 91a9         ld   r26,y+
001476 91b9         ld   r27,y+
001477 9189         ld   r24,y+
001478 9199         ld   r25,y+
001479 17ea         cp   r30,r26
00147a 07fb         cpc  r31,r27
00147b 0768         cpc  r22,r24
00147c 0779         cpc  r23,r25
00147d fb97         bst  r25,7
00147e 9508         ret
                 _floor:
00147f 940e 1cc2 	CALL __PUTPARD2
001481 940e 1cb3 	CALL __GETD2S0
001483 940e 144e 	CALL _ftrunc
001485 940e 1cb8 	CALL __PUTD1S0
001487 f419          brne __floor1
                 __floor0:
001488 940e 1822 	CALL SUBOPT_0x4F
00148a c005      	RJMP _0x20C0004
                 __floor1:
00148b f7e6          brtc __floor0
00148c 940e 1822 	CALL SUBOPT_0x4F
00148e 940e 19b8 	CALL SUBOPT_0x89
                 _0x20C0004:
001490 9624      	ADIW R28,4
001491 9508      	RET
                 _log:
001492 940e 1cc2 	CALL __PUTPARD2
001494 9724      	SBIW R28,4
001495 931a      	ST   -Y,R17
001496 930a      	ST   -Y,R16
001497 940e 19bf 	CALL SUBOPT_0x8A
001499 940e 1cf0 	CALL __CPD02
00149b f02c      	BRLT _0x208000C
                +
00149c efef     +LDI R30 , LOW ( 0xFF7FFFFF )
00149d efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
00149e e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
00149f ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
0014a0 c071      	RJMP _0x20C0003
                 _0x208000C:
0014a1 940e 19c4 	CALL SUBOPT_0x8B
0014a3 940e 1cbd 	CALL __PUTPARD1
0014a5 b7ad      	IN   R26,SPL
0014a6 b7be      	IN   R27,SPH
0014a7 9711      	SBIW R26,1
0014a8 931f      	PUSH R17
0014a9 930f      	PUSH R16
0014aa 940e 19f5 	CALL _frexp
0014ac 910f      	POP  R16
0014ad 911f      	POP  R17
0014ae 940e 19c9 	CALL SUBOPT_0x8C
0014b0 940e 19bf 	CALL SUBOPT_0x8A
                +
0014b2 efe3     +LDI R30 , LOW ( 0x3F3504F3 )
0014b3 e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
0014b4 e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
0014b5 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
0014b6 940e 1b9b 	CALL __CMPF12
0014b8 f440      	BRSH _0x208000D
0014b9 940e 19ce 	CALL SUBOPT_0x8D
0014bb 940e 1ab8 	CALL __ADDF12
0014bd 940e 19c9 	CALL SUBOPT_0x8C
                +
0014bf 5001     +SUBI R16 , LOW ( 1 )
0014c0 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x208000D:
0014c1 940e 19c4 	CALL SUBOPT_0x8B
0014c3 940e 19b8 	CALL SUBOPT_0x89
0014c5 937f      	PUSH R23
0014c6 936f      	PUSH R22
0014c7 93ff      	PUSH R31
0014c8 93ef      	PUSH R30
0014c9 940e 19c4 	CALL SUBOPT_0x8B
                +
0014cb e0a0     +LDI R26 , LOW ( 0x3F800000 )
0014cc e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0014cd e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0014ce e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0014cf 940e 1ab8 	CALL __ADDF12
0014d1 91af      	POP  R26
0014d2 91bf      	POP  R27
0014d3 918f      	POP  R24
0014d4 919f      	POP  R25
0014d5 940e 1b56 	CALL __DIVF21
0014d7 940e 19c9 	CALL SUBOPT_0x8C
0014d9 940e 19ce 	CALL SUBOPT_0x8D
0014db 940e 19d0 	CALL SUBOPT_0x8E
                +
0014dd e2a6     +LDI R26 , LOW ( 0x3F654226 )
0014de e4b2     +LDI R27 , HIGH ( 0x3F654226 )
0014df e685     +LDI R24 , BYTE3 ( 0x3F654226 )
0014e0 e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
0014e1 940e 18d9 	CALL SUBOPT_0x67
                +
0014e3 e4ee     +LDI R30 , LOW ( 0x4054114E )
0014e4 e1f1     +LDI R31 , HIGH ( 0x4054114E )
0014e5 e564     +LDI R22 , BYTE3 ( 0x4054114E )
0014e6 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
0014e7 940e 17b0 	CALL SUBOPT_0x3D
0014e9 940e 19bf 	CALL SUBOPT_0x8A
0014eb 940e 1b08 	CALL __MULF12
0014ed 937f      	PUSH R23
0014ee 936f      	PUSH R22
0014ef 93ff      	PUSH R31
0014f0 93ef      	PUSH R30
0014f1 940e 19d8 	CALL SUBOPT_0x8F
                +
0014f3 e4ad     +LDI R26 , LOW ( 0x3FD4114D )
0014f4 e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
0014f5 ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
0014f6 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
0014f7 940e 1ab1 	CALL __SUBF12
0014f9 91af      	POP  R26
0014fa 91bf      	POP  R27
0014fb 918f      	POP  R24
0014fc 919f      	POP  R25
0014fd 940e 1b56 	CALL __DIVF21
0014ff 937f      	PUSH R23
001500 936f      	PUSH R22
001501 93ff      	PUSH R31
001502 93ef      	PUSH R30
001503 01f8      	MOVW R30,R16
001504 940e 17a6 	CALL SUBOPT_0x3B
                +
001506 e1a8     +LDI R26 , LOW ( 0x3F317218 )
001507 e7b2     +LDI R27 , HIGH ( 0x3F317218 )
001508 e381     +LDI R24 , BYTE3 ( 0x3F317218 )
001509 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
00150a 940e 1b08 	CALL __MULF12
00150c 91af      	POP  R26
00150d 91bf      	POP  R27
00150e 918f      	POP  R24
00150f 919f      	POP  R25
001510 940e 1ab8 	CALL __ADDF12
                 _0x20C0003:
001512 8119      	LDD  R17,Y+1
001513 8108      	LDD  R16,Y+0
001514 962a      	ADIW R28,10
001515 9508      	RET
                 _exp:
001516 940e 1cc2 	CALL __PUTPARD2
001518 9728      	SBIW R28,8
001519 931a      	ST   -Y,R17
00151a 930a      	ST   -Y,R16
00151b 940e 19dd 	CALL SUBOPT_0x90
                +
00151d e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
00151e eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
00151f ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
001520 ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
001521 940e 1b9b 	CALL __CMPF12
001523 f418      	BRSH _0x208000F
001524 940e 19e2 	CALL SUBOPT_0x91
001526 c07b      	RJMP _0x20C0002
                 _0x208000F:
001527 940e 1986 	CALL SUBOPT_0x83
001529 940e 1ce8 	CALL __CPD10
00152b f419      	BRNE _0x2080010
00152c 940e 1654 	CALL SUBOPT_0x9
00152e c073      	RJMP _0x20C0002
                 _0x2080010:
00152f 940e 19dd 	CALL SUBOPT_0x90
                +
001531 e1e8     +LDI R30 , LOW ( 0x42B17218 )
001532 e7f2     +LDI R31 , HIGH ( 0x42B17218 )
001533 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
001534 e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
001535 940e 1b9b 	CALL __CMPF12
001537 f009      	BREQ PC+2
001538 f410      	BRCC PC+3
001539 940c 1540 	JMP  _0x2080011
                +
00153b efef     +LDI R30 , LOW ( 0x7F7FFFFF )
00153c efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
00153d e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
00153e e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
00153f c062      	RJMP _0x20C0002
                 _0x2080011:
001540 940e 19dd 	CALL SUBOPT_0x90
                +
001542 e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
001543 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
001544 eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
001545 e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
001546 940e 1b08 	CALL __MULF12
001548 940e 197f 	CALL SUBOPT_0x81
00154a 940e 19dd 	CALL SUBOPT_0x90
00154c df32      	RCALL _floor
00154d 940e 1a47 	CALL __CFD1
00154f 018f      	MOVW R16,R30
001550 01f8      	MOVW R30,R16
001551 940e 19dd 	CALL SUBOPT_0x90
001553 940e 17a6 	CALL SUBOPT_0x3B
001555 940e 17b0 	CALL SUBOPT_0x3D
001557 01df      	MOVW R26,R30
001558 01cb      	MOVW R24,R22
                +
001559 e0e0     +LDI R30 , LOW ( 0x3F000000 )
00155a e0f0     +LDI R31 , HIGH ( 0x3F000000 )
00155b e060     +LDI R22 , BYTE3 ( 0x3F000000 )
00155c e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
00155d 940e 17b0 	CALL SUBOPT_0x3D
00155f 940e 19c9 	CALL SUBOPT_0x8C
001561 940e 19ce 	CALL SUBOPT_0x8D
001563 940e 19d0 	CALL SUBOPT_0x8E
                +
001565 e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
001566 e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
001567 e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
001568 e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
001569 940e 1b08 	CALL __MULF12
                +
00156b eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
00156c eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
00156d ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
00156e e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
00156f 940e 1ab8 	CALL __ADDF12
001571 940e 19bf 	CALL SUBOPT_0x8A
001573 940e 1b08 	CALL __MULF12
001575 940e 19c9 	CALL SUBOPT_0x8C
001577 940e 19d8 	CALL SUBOPT_0x8F
                +
001579 e2a8     +LDI R26 , LOW ( 0x41A68D28 )
00157a e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
00157b ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
00157c e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
00157d 940e 1ab8 	CALL __ADDF12
00157f 940e 1921 	CALL SUBOPT_0x71
001581 940e 19c4 	CALL SUBOPT_0x8B
001583 940e 1915 	CALL SUBOPT_0x6F
001585 940e 1ab8 	CALL __ADDF12
                +
001587 efa3     +LDI R26 , LOW ( 0x3FB504F3 )
001588 e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
001589 eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
00158a e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
00158b 940e 1b08 	CALL __MULF12
00158d 937f      	PUSH R23
00158e 936f      	PUSH R22
00158f 93ff      	PUSH R31
001590 93ef      	PUSH R30
001591 940e 19bf 	CALL SUBOPT_0x8A
001593 940e 19d8 	CALL SUBOPT_0x8F
001595 940e 1ab1 	CALL __SUBF12
001597 91af      	POP  R26
001598 91bf      	POP  R27
001599 918f      	POP  R24
00159a 919f      	POP  R25
00159b 940e 1b56 	CALL __DIVF21
00159d 940e 1cbd 	CALL __PUTPARD1
00159f 01d8      	MOVW R26,R16
0015a0 940e 1a06 	CALL _ldexp
                 _0x20C0002:
0015a2 8119      	LDD  R17,Y+1
0015a3 8108      	LDD  R16,Y+0
0015a4 962e      	ADIW R28,14
0015a5 9508      	RET
                 _pow:
0015a6 940e 1cc2 	CALL __PUTPARD2
0015a8 9724      	SBIW R28,4
0015a9 940e 181d 	CALL SUBOPT_0x4E
0015ab 940e 1ce8 	CALL __CPD10
0015ad f419      	BRNE _0x2080012
0015ae 940e 19e2 	CALL SUBOPT_0x91
0015b0 c043      	RJMP _0x20C0001
                 _0x2080012:
                +
0015b1 85a8     +LDD R26 , Y + 8
0015b2 85b9     +LDD R27 , Y + 8 + 1
0015b3 858a     +LDD R24 , Y + 8 + 2
0015b4 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0015b5 940e 1cf0 	CALL __CPD02
0015b7 f484      	BRGE _0x2080013
0015b8 940e 17c7 	CALL SUBOPT_0x42
0015ba 940e 1ce8 	CALL __CPD10
0015bc f419      	BRNE _0x2080014
0015bd 940e 1654 	CALL SUBOPT_0x9
0015bf c034      	RJMP _0x20C0001
                 _0x2080014:
                +
0015c0 85a8     +LDD R26 , Y + 8
0015c1 85b9     +LDD R27 , Y + 8 + 1
0015c2 858a     +LDD R24 , Y + 8 + 2
0015c3 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0015c4 940e 19e7 	CALL SUBOPT_0x92
0015c6 df4f      	RCALL _exp
0015c7 c02c      	RJMP _0x20C0001
                 _0x2080013:
0015c8 940e 17c7 	CALL SUBOPT_0x42
0015ca 01de      	MOVW R26,R28
0015cb 940e 1a47 	CALL __CFD1
0015cd 940e 1ca4 	CALL __PUTDP1
0015cf 940e 1822 	CALL SUBOPT_0x4F
0015d1 940e 1a7e 	CALL __CDF1
0015d3 01df      	MOVW R26,R30
0015d4 01cb      	MOVW R24,R22
0015d5 940e 17c7 	CALL SUBOPT_0x42
0015d7 940e 1cf6 	CALL __CPD12
0015d9 f019      	BREQ _0x2080015
0015da 940e 19e2 	CALL SUBOPT_0x91
0015dc c017      	RJMP _0x20C0001
                 _0x2080015:
0015dd 940e 181d 	CALL SUBOPT_0x4E
0015df 940e 1a12 	CALL __ANEGF1
0015e1 01df      	MOVW R26,R30
0015e2 01cb      	MOVW R24,R22
0015e3 940e 19e7 	CALL SUBOPT_0x92
0015e5 df30      	RCALL _exp
                +
0015e6 87e8     +STD Y + 8 , R30
0015e7 87f9     +STD Y + 8 + 1 , R31
0015e8 876a     +STD Y + 8 + 2 , R22
0015e9 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
0015ea 81e8      	LD   R30,Y
0015eb 70e1      	ANDI R30,LOW(0x1)
0015ec f419      	BRNE _0x2080016
0015ed 940e 181d 	CALL SUBOPT_0x4E
0015ef c004      	RJMP _0x20C0001
                 _0x2080016:
0015f0 940e 181d 	CALL SUBOPT_0x4E
0015f2 940e 1a12 	CALL __ANEGF1
                 _0x20C0001:
0015f4 962c      	ADIW R28,12
0015f5 9508      	RET
                 
                 	.CSEG
                 _isprint:
0015f6 93aa      	ST   -Y,R26
0015f7 e0e1          ldi  r30,1
0015f8 91f9          ld   r31,y+
0015f9 32f0          cpi  r31,32
0015fa f010          brlo isprint0
0015fb 38f0          cpi  r31,128
0015fc f008          brlo isprint1
                 isprint0:
0015fd 27ee          clr  r30
                 isprint1:
0015fe 9508          ret
                 
                 	.DSEG
                 _SWITCH:
000600           	.BYTE 0x1
                 _CURRENT_VOLT:
000601           	.BYTE 0x4
                 _CURRENT_AMP:
000605           	.BYTE 0x4
                 
                 	.ESEG
                 _ADJ0_SENSOR5A:
000000 ec
000001 51
000002 b8
000003 3d        	.DB  0xEC,0x51,0xB8,0x3D
                 _ADJ0_SENSOR20A:
000004 ae
000005 47
000006 e1
000007 3d        	.DB  0xAE,0x47,0xE1,0x3D
                 _ADJ0_SENSOR30A:
000008 ae
000009 47
00000a e1
00000b 3d        	.DB  0xAE,0x47,0xE1,0x3D
                 
                 	.DSEG
                 __FlagPackageTerminate0:
000609           	.BYTE 0x1
                 _rxPackage0:
00060a           	.BYTE 0x20
                 _flag_state:
00062a           	.BYTE 0x2
                 _rx_rd_index1:
00062c           	.BYTE 0x2
                 _rx_counter1:
00062e           	.BYTE 0x2
                 _rx_buffer1:
000630           	.BYTE 0x200
                 _number:
000830           	.BYTE 0x2
                 _AMP_ADJ_ZERO:
000832           	.BYTE 0x4
                 _SENSOR_SENSITIVE:
000836           	.BYTE 0x4
                 _adcValue:
00083a           	.BYTE 0x2
                 _total:
00083c           	.BYTE 0x4
                 _avg:
000840           	.BYTE 0x4
                 _value:
000844           	.BYTE 0x4
                 _Viout:
000848           	.BYTE 0x4
                 _Vdif:
00084c           	.BYTE 0x4
                 _Vsq_avg:
000850           	.BYTE 0x4
                 _volt:
000854           	.BYTE 0x4
                 _amp:
000858           	.BYTE 0x4
                 _power:
00085c           	.BYTE 0x4
                 _whour:
000860           	.BYTE 0x4
                 _Vsum:
000864           	.BYTE 0x4
                 _Isum:
000868           	.BYTE 0x4
                 _Psum:
00086c           	.BYTE 0x4
                 _WHsum:
000870           	.BYTE 0x4
                 _Vavg:
000874           	.BYTE 0x4
                 _Iavg:
000878           	.BYTE 0x4
                 _Pavg:
00087c           	.BYTE 0x4
                 _countSampling:
000880           	.BYTE 0x2
                 _EndDevice_MacAddress:
000882           	.BYTE 0x8
                 _Gateway_MacAddress:
00088a           	.BYTE 0x8
                 _STATUS_DEVICE:
000892           	.BYTE 0x1
                 _EVENT:
000893           	.BYTE 0x2
                 _baseCounter:
000895           	.BYTE 0x4
                 _pressedBTCounter:
000899           	.BYTE 0x1
                 __FlagBT:
00089a           	.BYTE 0x1
                 __Flag05INT:
00089b           	.BYTE 0x1
                 __Flag0001INT:
00089c           	.BYTE 0x1
                 __BlinkLED_1Hz:
00089d           	.BYTE 0x1
                 _Eaddress:
00089e           	.BYTE 0x1
                 _input:
00089f           	.BYTE 0x3C
                 _count_input:
0008db           	.BYTE 0x2
                 _count_event:
0008dd           	.BYTE 0x2
                 _specData:
0008df           	.BYTE 0xD
                 _AI_COMMAND:
0008ec           	.BYTE 0x8
                 _SL_COMMAND:
0008f4           	.BYTE 0x8
                 _SH_COMMAND:
0008fc           	.BYTE 0x8
                 _JOIN_A1:
000904           	.BYTE 0x27
                 _PING_A4:
00092b           	.BYTE 0x27
                 _SEND_EVENT_:
000952           	.BYTE 0x29
                 _SEND_REPORT_:
00097b           	.BYTE 0x4C
                 __voltage:
0009c7           	.BYTE 0x8
                 __amp:
0009cf           	.BYTE 0x8
                 __power:
0009d7           	.BYTE 0x8
                 __watt:
0009df           	.BYTE 0x8
                 _Vreferent:
0009e7           	.BYTE 0x1
                 __seed_G100:
0009e8           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0015ff 93ba      	ST   -Y,R27
001600 93aa      	ST   -Y,R26
001601 81e8      	LD   R30,Y
001602 81f9      	LDD  R31,Y+1
001603 9730      	SBIW R30,0
001604 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
001605 91e0 0065 	LDS  R30,101
001607 7feb      	ANDI R30,0xFB
001608 93e0 0065 	STS  101,R30
00160a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
00160b 91a0 089e 	LDS  R26,_Eaddress
00160d 27bb      	CLR  R27
00160e 940e 0d9c 	CALL _EEPROM_read
001610 93e0 0892 	STS  _STATUS_DEVICE,R30
001612 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x3:
001613 91e0 089e 	LDS  R30,_Eaddress
001615 e0f0      	LDI  R31,0
001616 93fa      	ST   -Y,R31
001617 93ea      	ST   -Y,R30
001618 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x4:
                +
001619 e0e0     +LDI R30 , LOW ( 0x43390000 )
00161a e0f0     +LDI R31 , HIGH ( 0x43390000 )
00161b e369     +LDI R22 , BYTE3 ( 0x43390000 )
00161c e473     +LDI R23 , BYTE4 ( 0x43390000 )
                 	__GETD1N 0x43390000
00161d 93e0 0836 	STS  _SENSOR_SENSITIVE,R30
00161f 93f0 0837 	STS  _SENSOR_SENSITIVE+1,R31
001621 9360 0838 	STS  _SENSOR_SENSITIVE+2,R22
001623 9370 0839 	STS  _SENSOR_SENSITIVE+3,R23
001625 e0a0      	LDI  R26,LOW(_ADJ0_SENSOR5A)
001626 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR5A)
001627 940e 1cd4 	CALL __EEPROMRDD
001629 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00162a 01df      	MOVW R26,R30
00162b 01cb      	MOVW R24,R22
00162c 940e 1cf0 	CALL __CPD02
00162e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
00162f 93e0 0836 	STS  _SENSOR_SENSITIVE,R30
001631 93f0 0837 	STS  _SENSOR_SENSITIVE+1,R31
001633 9360 0838 	STS  _SENSOR_SENSITIVE+2,R22
001635 9370 0839 	STS  _SENSOR_SENSITIVE+3,R23
001637 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x7:
001638 93fa      	ST   -Y,R31
001639 93ea      	ST   -Y,R30
00163a e080      	LDI  R24,0
00163b 940e 05f3 	CALL _printDebug
00163d 9622      	ADIW R28,2
                +
00163e ece9     +LDI R30 , LOW ( 2 * _0x0 + ( 39 ) )
00163f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 39 ) )
                 	__POINTW1FN _0x0,39
001640 93fa      	ST   -Y,R31
001641 93ea      	ST   -Y,R30
                +
001642 e0e0     +LDI R30 , LOW ( 0x3F800000 )
001643 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
001644 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
001645 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
001646 940e 1cbd 	CALL __PUTPARD1
001648 e084      	LDI  R24,4
001649 940e 05f3 	CALL _printDebug
00164b 9626      	ADIW R28,6
00164c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 27 TIMES, CODE SIZE REDUCTION:101 WORDS
                 SUBOPT_0x8:
00164d 93fa      	ST   -Y,R31
00164e 93ea      	ST   -Y,R30
00164f e080      	LDI  R24,0
001650 940e 05f3 	CALL _printDebug
001652 9622      	ADIW R28,2
001653 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
                +
001654 e0e0     +LDI R30 , LOW ( 0x3F800000 )
001655 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
001656 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
001657 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
001658 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:69 WORDS
                 SUBOPT_0xA:
001659 940e 1cbd 	CALL __PUTPARD1
00165b e084      	LDI  R24,4
00165c 940e 05f3 	CALL _printDebug
00165e 9626      	ADIW R28,6
00165f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
001660 91e0 0836 	LDS  R30,_SENSOR_SENSITIVE
001662 91f0 0837 	LDS  R31,_SENSOR_SENSITIVE+1
001664 9160 0838 	LDS  R22,_SENSOR_SENSITIVE+2
001666 9170 0839 	LDS  R23,_SENSOR_SENSITIVE+3
001668 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
001669 91e0 0832 	LDS  R30,_AMP_ADJ_ZERO
00166b 91f0 0833 	LDS  R31,_AMP_ADJ_ZERO+1
00166d 9160 0834 	LDS  R22,_AMP_ADJ_ZERO+2
00166f 9170 0835 	LDS  R23,_AMP_ADJ_ZERO+3
001671 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xD:
001672 e0a0      	LDI  R26,LOW(0)
001673 e0b0      	LDI  R27,0
001674 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xE:
001675 940e 087d 	CALL _xbee_sendATCommand
001677 e6a4      	LDI  R26,LOW(100)
001678 e0b0      	LDI  R27,0
001679 940c 19eb 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xF:
00167b e6a4      	LDI  R26,LOW(100)
00167c e0b0      	LDI  R27,0
00167d 940c 19eb 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x10:
00167f e0a1      	LDI  R26,LOW(1)
001680 e0b0      	LDI  R27,0
001681 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x11:
001682 940e 0411 	CALL _device_state
001684 cf8e      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x12:
001685 91a0 0892 	LDS  R26,_STATUS_DEVICE
001687 940c 0d8f 	JMP  _EEPROM_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x13:
001689 e0a2      	LDI  R26,LOW(2)
00168a e0b0      	LDI  R27,0
00168b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x14:
00168c 01f4      	MOVW R30,R8
00168d 9631      	ADIW R30,1
00168e 014f      	MOVW R8,R30
00168f 01d4      	MOVW R26,R8
001690 e0ea      	LDI  R30,LOW(10)
001691 e0f0      	LDI  R31,HIGH(10)
001692 940e 1c69 	CALL __MODW21
001694 9730      	SBIW R30,0
001695 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
001696 eca8      	LDI  R26,LOW(200)
001697 e0b0      	LDI  R27,0
001698 940c 19eb 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x16:
00169a 93e0 062a 	STS  _flag_state,R30
00169c 93f0 062b 	STS  _flag_state+1,R31
00169e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
00169f e0e4      	LDI  R30,LOW(4)
0016a0 e0f0      	LDI  R31,HIGH(4)
0016a1 dff8      	RCALL SUBOPT_0x16
0016a2 eeac      	LDI  R26,LOW(5100)
0016a3 e1b3      	LDI  R27,HIGH(5100)
0016a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
0016a5 01fe      	MOVW R30,R28
0016a6 9632      	ADIW R30,2
0016a7 93fa      	ST   -Y,R31
0016a8 93ea      	ST   -Y,R30
0016a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
0016aa 93ba      	ST   -Y,R27
0016ab 93aa      	ST   -Y,R26
0016ac 9724      	SBIW R28,4
0016ad e0e0      	LDI  R30,LOW(0)
0016ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1A:
0016af 81ee      	LDD  R30,Y+6
0016b0 81ff      	LDD  R31,Y+6+1
0016b1 93fa      	ST   -Y,R31
0016b2 93ea      	ST   -Y,R30
0016b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
0016b4 85ac      	LDD  R26,Y+12
0016b5 85bd      	LDD  R27,Y+12+1
0016b6 940c 0660 	JMP  _print_hex_ascii_line
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
0016b8 85a8      	LDD  R26,Y+8
0016b9 85b9      	LDD  R27,Y+8+1
0016ba 0fea      	ADD  R30,R26
0016bb 1ffb      	ADC  R31,R27
0016bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
0016bd 940e 1c08 	CALL __CWD1
0016bf cf99      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1E:
0016c0 93fa      	ST   -Y,R31
0016c1 93ea      	ST   -Y,R30
0016c2 01da      	MOVW R26,R20
0016c3 91ec      	LD   R30,X
0016c4 27ff      	CLR  R31
0016c5 2766      	CLR  R22
0016c6 2777      	CLR  R23
0016c7 cf91      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
0016c8 eaeb      	LDI  R30,LOW(171)
0016c9 93e0 0089 	STS  137,R30
0016cb eae0      	LDI  R30,LOW(160)
0016cc 93e0 0088 	STS  136,R30
0016ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x20:
0016cf 920a      	ST   -Y,R0
0016d0 921a      	ST   -Y,R1
0016d1 92fa      	ST   -Y,R15
0016d2 936a      	ST   -Y,R22
0016d3 937a      	ST   -Y,R23
0016d4 938a      	ST   -Y,R24
0016d5 939a      	ST   -Y,R25
0016d6 93aa      	ST   -Y,R26
0016d7 93ba      	ST   -Y,R27
0016d8 93ea      	ST   -Y,R30
0016d9 93fa      	ST   -Y,R31
0016da b7ef      	IN   R30,SREG
0016db 93ea      	ST   -Y,R30
0016dc 931a      	ST   -Y,R17
0016dd 930a      	ST   -Y,R16
0016de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x21:
0016df 91ed      	LD   R30,X+
0016e0 91fd      	LD   R31,X+
0016e1 9631      	ADIW R30,1
0016e2 93fe      	ST   -X,R31
0016e3 93ee      	ST   -X,R30
0016e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
0016e5 2766      	CLR  R22
0016e6 2777      	CLR  R23
0016e7 cf71      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x23:
0016e8 81a9      	LDD  R26,Y+1
0016e9 81ba      	LDD  R27,Y+1+1
0016ea 27ee      	CLR  R30
0016eb 0fa1      	ADD  R26,R17
0016ec 1fbe      	ADC  R27,R30
0016ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x24:
0016ee 940e 1cae 	CALL __GETD1S0
                +
0016f0 36e0     +CPI R30 , LOW ( 0x960 )
0016f1 e0a9     +LDI R26 , HIGH ( 0x960 )
0016f2 07fa     +CPC R31 , R26
0016f3 e0a0     +LDI R26 , BYTE3 ( 0x960 )
0016f4 076a     +CPC R22 , R26
0016f5 e0a0     +LDI R26 , BYTE4 ( 0x960 )
0016f6 077a     +CPC R23 , R26
                 	__CPD1N 0x960
0016f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x25:
                +
0016f8 38e0     +CPI R30 , LOW ( 0x2580 )
0016f9 e2a5     +LDI R26 , HIGH ( 0x2580 )
0016fa 07fa     +CPC R31 , R26
0016fb e0a0     +LDI R26 , BYTE3 ( 0x2580 )
0016fc 076a     +CPC R22 , R26
0016fd e0a0     +LDI R26 , BYTE4 ( 0x2580 )
0016fe 077a     +CPC R23 , R26
                 	__CPD1N 0x2580
0016ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x26:
                +
001700 34e0     +CPI R30 , LOW ( 0x3840 )
001701 e3a8     +LDI R26 , HIGH ( 0x3840 )
001702 07fa     +CPC R31 , R26
001703 e0a0     +LDI R26 , BYTE3 ( 0x3840 )
001704 076a     +CPC R22 , R26
001705 e0a0     +LDI R26 , BYTE4 ( 0x3840 )
001706 077a     +CPC R23 , R26
                 	__CPD1N 0x3840
001707 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x27:
                +
001708 30e0     +CPI R30 , LOW ( 0x4B00 )
001709 e4ab     +LDI R26 , HIGH ( 0x4B00 )
00170a 07fa     +CPC R31 , R26
00170b e0a0     +LDI R26 , BYTE3 ( 0x4B00 )
00170c 076a     +CPC R22 , R26
00170d e0a0     +LDI R26 , BYTE4 ( 0x4B00 )
00170e 077a     +CPC R23 , R26
                 	__CPD1N 0x4B00
00170f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x28:
                +
001710 30e0     +CPI R30 , LOW ( 0x9600 )
001711 e9a6     +LDI R26 , HIGH ( 0x9600 )
001712 07fa     +CPC R31 , R26
001713 e0a0     +LDI R26 , BYTE3 ( 0x9600 )
001714 076a     +CPC R22 , R26
001715 e0a0     +LDI R26 , BYTE4 ( 0x9600 )
001716 077a     +CPC R23 , R26
                 	__CPD1N 0x9600
001717 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x29:
                +
001718 30e0     +CPI R30 , LOW ( 0xE100 )
001719 eea1     +LDI R26 , HIGH ( 0xE100 )
00171a 07fa     +CPC R31 , R26
00171b e0a0     +LDI R26 , BYTE3 ( 0xE100 )
00171c 076a     +CPC R22 , R26
00171d e0a0     +LDI R26 , BYTE4 ( 0xE100 )
00171e 077a     +CPC R23 , R26
                 	__CPD1N 0xE100
00171f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2A:
                +
001720 30e0     +CPI R30 , LOW ( 0x1C200 )
001721 eca2     +LDI R26 , HIGH ( 0x1C200 )
001722 07fa     +CPC R31 , R26
001723 e0a1     +LDI R26 , BYTE3 ( 0x1C200 )
001724 076a     +CPC R22 , R26
001725 e0a0     +LDI R26 , BYTE4 ( 0x1C200 )
001726 077a     +CPC R23 , R26
                 	__CPD1N 0x1C200
001727 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2B:
001728 93fa      	ST   -Y,R31
001729 93ea      	ST   -Y,R30
00172a e0a8      	LDI  R26,LOW(8)
00172b e0b0      	LDI  R27,0
00172c 940c 0618 	JMP  _print_payload
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x2C:
00172e e0a8      	LDI  R26,LOW(8)
00172f e0b0      	LDI  R27,0
001730 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2D:
001731 93ba      	ST   -Y,R27
001732 93aa      	ST   -Y,R26
001733 931a      	ST   -Y,R17
001734 930a      	ST   -Y,R16
001735 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2E:
001736 01f8      	MOVW R30,R16
001737 81ac      	LDD  R26,Y+4
001738 81bd      	LDD  R27,Y+4+1
001739 0fae      	ADD  R26,R30
00173a 1fbf      	ADC  R27,R31
00173b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
00173c 81a9      	LDD  R26,Y+1
00173d 81ba      	LDD  R27,Y+1+1
00173e 9612      	ADIW R26,2
00173f 91ac      	LD   R26,X
001740 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x30:
001741 81a9      	LDD  R26,Y+1
001742 81ba      	LDD  R27,Y+1+1
001743 9613      	ADIW R26,3
001744 91ac      	LD   R26,X
001745 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x31:
001746 e8e2      	LDI  R30,LOW(_EndDevice_MacAddress)
001747 e0f8      	LDI  R31,HIGH(_EndDevice_MacAddress)
001748 93fa      	ST   -Y,R31
001749 93ea      	ST   -Y,R30
00174a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x32:
00174b 81eb      	LDD  R30,Y+3
00174c 81fc      	LDD  R31,Y+3+1
00174d 9635      	ADIW R30,5
00174e 93fa      	ST   -Y,R31
00174f 93ea      	ST   -Y,R30
001750 e0a4      	LDI  R26,LOW(4)
001751 e0b0      	LDI  R27,0
001752 940c 1416 	JMP  _memcpy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x33:
001754 81a9      	LDD  R26,Y+1
001755 81ba      	LDD  R27,Y+1+1
001756 9690      	ADIW R26,32
001757 91ac      	LD   R26,X
001758 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x34:
001759 e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
00175a e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
00175b 93fa      	ST   -Y,R31
00175c 93ea      	ST   -Y,R30
00175d 81eb      	LDD  R30,Y+3
00175e 81fc      	LDD  R31,Y+3+1
00175f 9631      	ADIW R30,1
001760 93fa      	ST   -Y,R31
001761 93ea      	ST   -Y,R30
001762 cfcb      	RJMP SUBOPT_0x2C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x35:
001763 940e 1416 	CALL _memcpy
001765 91e0 08db 	LDS  R30,_count_input
001767 91f0 08dc 	LDS  R31,_count_input+1
001769 e9af      	LDI  R26,LOW(_input)
00176a e0b8      	LDI  R27,HIGH(_input)
00176b 0fee      	LSL  R30
00176c 1fff      	ROL  R31
00176d 0fae      	ADD  R26,R30
00176e 1fbf      	ADC  R27,R31
00176f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x36:
001770 91e0 08db 	LDS  R30,_count_input
001772 91f0 08dc 	LDS  R31,_count_input+1
001774 e9af      	LDI  R26,LOW(_input)
001775 e0b8      	LDI  R27,HIGH(_input)
001776 0fee      	LSL  R30
001777 1fff      	ROL  R31
001778 0fae      	ADD  R26,R30
001779 1fbf      	ADC  R27,R31
00177a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x37:
00177b e9af      	LDI  R26,LOW(_input)
00177c e0b8      	LDI  R27,HIGH(_input)
00177d 0fee      	LSL  R30
00177e 1fff      	ROL  R31
00177f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x38:
001780 93ea      	ST   -Y,R30
                +
001781 e0a0     +LDI R26 , LOW ( 0x9600 )
001782 e9b6     +LDI R27 , HIGH ( 0x9600 )
001783 e080     +LDI R24 , BYTE3 ( 0x9600 )
001784 e090     +LDI R25 , BYTE4 ( 0x9600 )
                 	__GETD2N 0x9600
001785 940c 0813 	JMP  _init_uart
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:20 WORDS
                 SUBOPT_0x39:
001787 e0e0      	LDI  R30,0
001788 99cf      	SBIC 0x19,7
001789 e0e1      	LDI  R30,1
00178a 2e0e      	MOV  R0,R30
00178b e0a0      	LDI  R26,0
00178c 99ce      	SBIC 0x19,6
00178d e0a1      	LDI  R26,1
00178e 2fea      	MOV  R30,R26
00178f 0fee      	LSL  R30
001790 2a0e      	OR   R0,R30
001791 e0a0      	LDI  R26,0
001792 99cd      	SBIC 0x19,5
001793 e0a1      	LDI  R26,1
001794 2fea      	MOV  R30,R26
001795 0fee      	LSL  R30
001796 0fee      	LSL  R30
001797 2a0e      	OR   R0,R30
001798 e0a0      	LDI  R26,0
001799 99cc      	SBIC 0x19,4
00179a e0a1      	LDI  R26,1
00179b 2fea      	MOV  R30,R26
00179c 0fee      	LSL  R30
00179d 0fee      	LSL  R30
00179e 0fee      	LSL  R30
00179f 29e0      	OR   R30,R0
0017a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3A:
                +
0017a1 85ec     +LDD R30 , Y + 12
0017a2 85fd     +LDD R31 , Y + 12 + 1
0017a3 856e     +LDD R22 , Y + 12 + 2
0017a4 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
0017a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3B:
0017a6 940e 1c08 	CALL __CWD1
0017a8 940e 1a7e 	CALL __CDF1
0017aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x3C:
                +
0017ab 85ac     +LDD R26 , Y + 12
0017ac 85bd     +LDD R27 , Y + 12 + 1
0017ad 858e     +LDD R24 , Y + 12 + 2
0017ae 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
0017af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3D:
0017b0 940e 1cc7 	CALL __SWAPD12
0017b2 940e 1ab1 	CALL __SUBF12
0017b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3E:
                +
0017b5 83ec     +STD Y + 4 , R30
0017b6 83fd     +STD Y + 4 + 1 , R31
0017b7 836e     +STD Y + 4 + 2 , R22
0017b8 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
0017b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x3F:
                +
0017ba e0e0     +LDI R30 , LOW ( 0x41200000 )
0017bb e0f0     +LDI R31 , HIGH ( 0x41200000 )
0017bc e260     +LDI R22 , BYTE3 ( 0x41200000 )
0017bd e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0017be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x40:
                +
0017bf 81ac     +LDD R26 , Y + 4
0017c0 81bd     +LDD R27 , Y + 4 + 1
0017c1 818e     +LDD R24 , Y + 4 + 2
0017c2 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0017c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x41:
0017c4 940e 1b08 	CALL __MULF12
0017c6 cfee      	RJMP SUBOPT_0x3E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x42:
                +
0017c7 81ec     +LDD R30 , Y + 4
0017c8 81fd     +LDD R31 , Y + 4 + 1
0017c9 816e     +LDD R22 , Y + 4 + 2
0017ca 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0017cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x43:
0017cc 93aa      	ST   -Y,R26
                +
0017cd e5e7     +LDI R30 , LOW ( _SEND_EVENT_ + ( 5 ) )
0017ce e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 5 ) )
                 	__POINTW1MN _SEND_EVENT_,5
0017cf 93fa      	ST   -Y,R31
0017d0 93ea      	ST   -Y,R30
0017d1 e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
0017d2 e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
0017d3 93fa      	ST   -Y,R31
0017d4 93ea      	ST   -Y,R30
0017d5 cf58      	RJMP SUBOPT_0x2C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x44:
0017d6 940e 1416 	CALL _memcpy
                +
0017d8 e6e4     +LDI R30 , LOW ( _SEND_EVENT_ + ( 18 ) )
0017d9 e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 18 ) )
                 	__POINTW1MN _SEND_EVENT_,18
0017da 93fa      	ST   -Y,R31
0017db 93ea      	ST   -Y,R30
0017dc cf69      	RJMP SUBOPT_0x31
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x45:
0017dd 940e 1416 	CALL _memcpy
                +
0017df e6ec     +LDI R30 , LOW ( _SEND_EVENT_ + ( 26 ) )
0017e0 e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 26 ) )
                 	__POINTW1MN _SEND_EVENT_,26
0017e1 93fa      	ST   -Y,R31
0017e2 93ea      	ST   -Y,R30
0017e3 e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
0017e4 e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
0017e5 93fa      	ST   -Y,R31
0017e6 93ea      	ST   -Y,R30
0017e7 cf46      	RJMP SUBOPT_0x2C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x46:
0017e8 940e 1416 	CALL _memcpy
                +
0017ea e7e9     +LDI R30 , LOW ( _SEND_EVENT_ + ( 39 ) )
0017eb e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 39 ) )
                 	__POINTW1MN _SEND_EVENT_,39
0017ec 93fa      	ST   -Y,R31
0017ed 93ea      	ST   -Y,R30
0017ee ceb6      	RJMP SUBOPT_0x18
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x47:
                +
0017ef 93e0 0977+STS _SEND_EVENT_ + ( 37 ) , R30
                 	__PUTB1MN _SEND_EVENT_,37
0017f1 81e9      	LDD  R30,Y+1
                +
0017f2 93e0 0978+STS _SEND_EVENT_ + ( 38 ) , R30
                 	__PUTB1MN _SEND_EVENT_,38
                +
0017f4 e5e5     +LDI R30 , LOW ( _SEND_EVENT_ + ( 3 ) )
0017f5 e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 3 ) )
                 	__POINTW1MN _SEND_EVENT_,3
0017f6 93fa      	ST   -Y,R31
0017f7 93ea      	ST   -Y,R30
                +
0017f8 91a0 0954+LDS R26 , _SEND_EVENT_ + ( 2 )
                 	__GETB2MN _SEND_EVENT_,2
0017fa e0b0      	LDI  R27,0
0017fb 940e 08af 	CALL _xbee_checksum
                +
0017fd 93e0 097a+STS _SEND_EVENT_ + ( 40 ) , R30
                 	__PUTB1MN _SEND_EVENT_,40
0017ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x48:
001800 e5e2      	LDI  R30,LOW(_SEND_EVENT_)
001801 e0f9      	LDI  R31,HIGH(_SEND_EVENT_)
001802 93fa      	ST   -Y,R31
001803 93ea      	ST   -Y,R30
001804 e2a9      	LDI  R26,LOW(41)
001805 e0b0      	LDI  R27,0
001806 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x49:
001807 93fa      	ST   -Y,R31
001808 93ea      	ST   -Y,R30
001809 cf3c      	RJMP SUBOPT_0x31
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4A:
00180a e0b0      	LDI  R27,0
00180b 940c 08af 	JMP  _xbee_checksum
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4B:
00180d 93fa      	ST   -Y,R31
00180e 93ea      	ST   -Y,R30
00180f e2a7      	LDI  R26,LOW(39)
001810 e0b0      	LDI  R27,0
001811 940c 0618 	JMP  _print_payload
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x4C:
001813 93fa      	ST   -Y,R31
001814 93ea      	ST   -Y,R30
001815 e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
001816 e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
001817 93fa      	ST   -Y,R31
001818 93ea      	ST   -Y,R30
001819 cf14      	RJMP SUBOPT_0x2C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4D:
00181a 93fa      	ST   -Y,R31
00181b 93ea      	ST   -Y,R30
00181c ce6c      	RJMP SUBOPT_0x13
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4E:
                +
00181d 85e8     +LDD R30 , Y + 8
00181e 85f9     +LDD R31 , Y + 8 + 1
00181f 856a     +LDD R22 , Y + 8 + 2
001820 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
001821 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4F:
001822 940e 1cae 	CALL __GETD1S0
001824 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x50:
001825 93fa      	ST   -Y,R31
001826 93ea      	ST   -Y,R30
001827 cf06      	RJMP SUBOPT_0x2C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x51:
001828 e7eb      	LDI  R30,LOW(_SEND_REPORT_)
001829 e0f9      	LDI  R31,HIGH(_SEND_REPORT_)
00182a 93fa      	ST   -Y,R31
00182b 93ea      	ST   -Y,R30
00182c e4ac      	LDI  R26,LOW(76)
00182d e0b0      	LDI  R27,0
00182e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x52:
00182f 91e0 0830 	LDS  R30,_number
001831 91f0 0831 	LDS  R31,_number+1
001833 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x53:
001834 91a0 0864 	LDS  R26,_Vsum
001836 91b0 0865 	LDS  R27,_Vsum+1
001838 9180 0866 	LDS  R24,_Vsum+2
00183a 9190 0867 	LDS  R25,_Vsum+3
00183c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x54:
00183d 2766      	CLR  R22
00183e 2777      	CLR  R23
00183f 940e 1a7e 	CALL __CDF1
001841 940e 1b56 	CALL __DIVF21
001843 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x55:
001844 91a0 0868 	LDS  R26,_Isum
001846 91b0 0869 	LDS  R27,_Isum+1
001848 9180 086a 	LDS  R24,_Isum+2
00184a 9190 086b 	LDS  R25,_Isum+3
00184c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x56:
00184d 93e0 0878 	STS  _Iavg,R30
00184f 93f0 0879 	STS  _Iavg+1,R31
001851 9360 087a 	STS  _Iavg+2,R22
001853 9370 087b 	STS  _Iavg+3,R23
001855 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x57:
001856 91a0 086c 	LDS  R26,_Psum
001858 91b0 086d 	LDS  R27,_Psum+1
00185a 9180 086e 	LDS  R24,_Psum+2
00185c 9190 086f 	LDS  R25,_Psum+3
00185e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x58:
00185f 91e0 0874 	LDS  R30,_Vavg
001861 91f0 0875 	LDS  R31,_Vavg+1
001863 9160 0876 	LDS  R22,_Vavg+2
001865 9170 0877 	LDS  R23,_Vavg+3
001867 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x59:
001868 91e0 0878 	LDS  R30,_Iavg
00186a 91f0 0879 	LDS  R31,_Iavg+1
00186c 9160 087a 	LDS  R22,_Iavg+2
00186e 9170 087b 	LDS  R23,_Iavg+3
001870 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5A:
001871 91e0 087c 	LDS  R30,_Pavg
001873 91f0 087d 	LDS  R31,_Pavg+1
001875 9160 087e 	LDS  R22,_Pavg+2
001877 9170 087f 	LDS  R23,_Pavg+3
001879 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5B:
00187a 91a0 0878 	LDS  R26,_Iavg
00187c 91b0 0879 	LDS  R27,_Iavg+1
00187e 9180 087a 	LDS  R24,_Iavg+2
001880 9190 087b 	LDS  R25,_Iavg+3
                +
001882 e0e0     +LDI R30 , LOW ( 0x447A0000 )
001883 e0f0     +LDI R31 , HIGH ( 0x447A0000 )
001884 e76a     +LDI R22 , BYTE3 ( 0x447A0000 )
001885 e474     +LDI R23 , BYTE4 ( 0x447A0000 )
                 	__GETD1N 0x447A0000
001886 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5C:
001887 91a0 0870 	LDS  R26,_WHsum
001889 91b0 0871 	LDS  R27,_WHsum+1
00188b 9180 0872 	LDS  R24,_WHsum+2
00188d 9190 0873 	LDS  R25,_WHsum+3
00188f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5D:
001890 91a0 0836 	LDS  R26,_SENSOR_SENSITIVE
001892 91b0 0837 	LDS  R27,_SENSOR_SENSITIVE+1
001894 9180 0838 	LDS  R24,_SENSOR_SENSITIVE+2
001896 9190 0839 	LDS  R25,_SENSOR_SENSITIVE+3
001898 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5E:
001899 91a0 0878 	LDS  R26,_Iavg
00189b 91b0 0879 	LDS  R27,_Iavg+1
00189d 9180 087a 	LDS  R24,_Iavg+2
00189f 9190 087b 	LDS  R25,_Iavg+3
0018a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5F:
0018a2 940e 0d72 	CALL _read_adc
0018a4 93e0 083a 	STS  _adcValue,R30
0018a6 93f0 083b 	STS  _adcValue+1,R31
0018a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x60:
0018a9 91e0 083a 	LDS  R30,_adcValue
0018ab 91f0 083b 	LDS  R31,_adcValue+1
0018ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x61:
0018ae dffa      	RCALL SUBOPT_0x60
0018af 2766      	CLR  R22
0018b0 2777      	CLR  R23
0018b1 940e 1a7e 	CALL __CDF1
0018b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x62:
0018b4 91e0 0840 	LDS  R30,_avg
0018b6 91f0 0841 	LDS  R31,_avg+1
0018b8 9160 0842 	LDS  R22,_avg+2
0018ba 9170 0843 	LDS  R23,_avg+3
0018bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x63:
0018bd 91a0 0844 	LDS  R26,_value
0018bf 91b0 0845 	LDS  R27,_value+1
0018c1 9180 0846 	LDS  R24,_value+2
0018c3 9190 0847 	LDS  R25,_value+3
0018c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x64:
0018c6 940e 1ab8 	CALL __ADDF12
0018c8 01df      	MOVW R26,R30
0018c9 01cb      	MOVW R24,R22
0018ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x65:
0018cb dfe8      	RCALL SUBOPT_0x62
0018cc dff0      	RCALL SUBOPT_0x63
0018cd 940e 1b9b 	CALL __CMPF12
0018cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x66:
0018d0 91a0 083c 	LDS  R26,_total
0018d2 91b0 083d 	LDS  R27,_total+1
0018d4 9180 083e 	LDS  R24,_total+2
0018d6 9190 083f 	LDS  R25,_total+3
0018d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x67:
0018d9 940e 1b08 	CALL __MULF12
0018db 01df      	MOVW R26,R30
0018dc 01cb      	MOVW R24,R22
0018dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x68:
0018de 91a0 0854 	LDS  R26,_volt
0018e0 91b0 0855 	LDS  R27,_volt+1
0018e2 9180 0856 	LDS  R24,_volt+2
0018e4 9190 0857 	LDS  R25,_volt+3
0018e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x69:
0018e7 91e0 0854 	LDS  R30,_volt
0018e9 91f0 0855 	LDS  R31,_volt+1
0018eb 9160 0856 	LDS  R22,_volt+2
0018ed 9170 0857 	LDS  R23,_volt+3
0018ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6A:
0018f0 91e0 0858 	LDS  R30,_amp
0018f2 91f0 0859 	LDS  R31,_amp+1
0018f4 9160 085a 	LDS  R22,_amp+2
0018f6 9170 085b 	LDS  R23,_amp+3
0018f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6B:
0018f9 940e 0411 	CALL _device_state
0018fb e0e1      	LDI  R30,LOW(1)
                +
0018fc 93e0 0894+STS _EVENT + ( 1 ) , R30
                 	__PUTB1MN _EVENT,1
0018fe e0e5      	LDI  R30,LOW(5)
0018ff e0f0      	LDI  R31,HIGH(5)
001900 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6C:
001901 940e 0411 	CALL _device_state
001903 e0e0      	LDI  R30,LOW(0)
                +
001904 93e0 0894+STS _EVENT + ( 1 ) , R30
                 	__PUTB1MN _EVENT,1
001906 e0e4      	LDI  R30,LOW(4)
001907 e0f0      	LDI  R31,HIGH(4)
001908 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6D:
                +
001909 87e9     +STD Y + 9 , R30
00190a 87fa     +STD Y + 9 + 1 , R31
00190b 876b     +STD Y + 9 + 2 , R22
00190c 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
00190d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6E:
00190e 81ae      	LDD  R26,Y+6
00190f 81bf      	LDD  R27,Y+6+1
001910 9611      	ADIW R26,1
001911 83ae      	STD  Y+6,R26
001912 83bf      	STD  Y+6+1,R27
001913 9711      	SBIW R26,1
001914 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6F:
                +
001915 81aa     +LDD R26 , Y + 2
001916 81bb     +LDD R27 , Y + 2 + 1
001917 818c     +LDD R24 , Y + 2 + 2
001918 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
001919 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x70:
                +
00191a eced     +LDI R30 , LOW ( 0x3DCCCCCD )
00191b ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
00191c ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
00191d e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
00191e 940e 1b08 	CALL __MULF12
001920 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x71:
                +
001921 83ea     +STD Y + 2 , R30
001922 83fb     +STD Y + 2 + 1 , R31
001923 836c     +STD Y + 2 + 2 , R22
001924 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
001925 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x72:
                +
001926 81ea     +LDD R30 , Y + 2
001927 81fb     +LDD R31 , Y + 2 + 1
001928 816c     +LDD R22 , Y + 2 + 2
001929 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
00192a 85a9     +LDD R26 , Y + 9
00192b 85ba     +LDD R27 , Y + 9 + 1
00192c 858b     +LDD R24 , Y + 9 + 2
00192d 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
00192e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x73:
00192f de8a      	RCALL SUBOPT_0x3F
001930 940e 1b08 	CALL __MULF12
001932 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x74:
                +
001933 e0a0     +LDI R26 , LOW ( 0x3F000000 )
001934 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
001935 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
001936 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
001937 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x75:
001938 2fe0      	MOV  R30,R16
001939 5de0      	SUBI R30,-LOW(48)
00193a 93ec      	ST   X,R30
00193b 2fe0      	MOV  R30,R16
00193c e0f0      	LDI  R31,0
00193d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x76:
                +
00193e 85a9     +LDD R26 , Y + 9
00193f 85ba     +LDD R27 , Y + 9 + 1
001940 858b     +LDD R24 , Y + 9 + 2
001941 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
001942 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x77:
001943 de7b      	RCALL SUBOPT_0x40
001944 de75      	RCALL SUBOPT_0x3F
001945 ce7e      	RJMP SUBOPT_0x41
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x78:
001946 de80      	RCALL SUBOPT_0x42
001947 de63      	RCALL SUBOPT_0x3C
001948 940e 1b9b 	CALL __CMPF12
00194a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x79:
                +
00194b 87ec     +STD Y + 12 , R30
00194c 87fd     +STD Y + 12 + 1 , R31
00194d 876e     +STD Y + 12 + 2 , R22
00194e 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
00194f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7A:
001950 85a8      	LDD  R26,Y+8
001951 85b9      	LDD  R27,Y+8+1
001952 9611      	ADIW R26,1
001953 87a8      	STD  Y+8,R26
001954 87b9      	STD  Y+8+1,R27
001955 9711      	SBIW R26,1
001956 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7B:
001957 85e8      	LDD  R30,Y+8
001958 85f9      	LDD  R31,Y+8+1
001959 9631      	ADIW R30,1
00195a 87e8      	STD  Y+8,R30
00195b 87f9      	STD  Y+8+1,R31
00195c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x7C:
00195d 932a      	ST   -Y,R18
00195e 81af      	LDD  R26,Y+7
00195f 85b8      	LDD  R27,Y+7+1
001960 85e9      	LDD  R30,Y+9
001961 85fa      	LDD  R31,Y+9+1
001962 9509      	ICALL
001963 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x7D:
                +
001964 01fe     +MOVW R30 , R28
001965 5ae6     +SUBI R30 , LOW ( - 90 )
001966 4fff     +SBCI R31 , HIGH ( - 90 )
001967 9001     +LD R0 , Z +
001968 81f0     +LD R31 , Z
001969 2de0     +MOV R30 , R0
                 	__GETW1SX 90
00196a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x7E:
00196b 9734      	SBIW R30,4
                +
00196c 01de     +MOVW R26 , R28
00196d 5aa6     +SUBI R26 , LOW ( - 90 )
00196e 4fbf     +SBCI R27 , HIGH ( - 90 )
00196f 93ed     +ST X + , R30
001970 93fc     +ST X , R31
                 	__PUTW1SX 90
001971 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7F:
001972 81af      	LDD  R26,Y+7
001973 85b8      	LDD  R27,Y+7+1
001974 85e9      	LDD  R30,Y+9
001975 85fa      	LDD  R31,Y+9+1
001976 9509      	ICALL
001977 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x80:
                +
001978 01de     +MOVW R26 , R28
001979 5aa6     +SUBI R26 , LOW ( - 90 )
00197a 4fbf     +SBCI R27 , HIGH ( - 90 )
00197b 900d     +LD R0 , X +
00197c 91bc     +LD R27 , X
00197d 2da0     +MOV R26 , R0
                 	__GETW2SX 90
00197e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x81:
                +
00197f 87ea     +STD Y + 10 , R30
001980 87fb     +STD Y + 10 + 1 , R31
001981 876c     +STD Y + 10 + 2 , R22
001982 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
001983 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x82:
001984 dfdf      	RCALL SUBOPT_0x7D
001985 cfe5      	RJMP SUBOPT_0x7E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x83:
                +
001986 85ea     +LDD R30 , Y + 10
001987 85fb     +LDD R31 , Y + 10 + 1
001988 856c     +LDD R22 , Y + 10 + 2
001989 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
00198a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x84:
00198b 87ee      	STD  Y+14,R30
00198c 87ff      	STD  Y+14+1,R31
00198d 85ae      	LDD  R26,Y+14
00198e 85bf      	LDD  R27,Y+14+1
00198f 940e 1435 	CALL _strlen
001991 2f1e      	MOV  R17,R30
001992 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x85:
001993 dfe4      	RCALL SUBOPT_0x80
001994 9614      	ADIW R26,4
001995 940e 1c95 	CALL __GETW1P
001997 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x86:
                +
001998 8be8     +STD Y + 16 , R30
001999 8bf9     +STD Y + 16 + 1 , R31
00199a 8b6a     +STD Y + 16 + 2 , R22
00199b 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
00199c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x87:
00199d 7f0b      	ANDI R16,LOW(251)
00199e 89ed      	LDD  R30,Y+21
00199f 93ea      	ST   -Y,R30
                +
0019a0 01de     +MOVW R26 , R28
0019a1 5aa9     +SUBI R26 , LOW ( - 87 )
0019a2 4fbf     +SBCI R27 , HIGH ( - 87 )
0019a3 900d     +LD R0 , X +
0019a4 91bc     +LD R27 , X
0019a5 2da0     +MOV R26 , R0
                 	__GETW2SX 87
                +
0019a6 01fe     +MOVW R30 , R28
0019a7 5ae7     +SUBI R30 , LOW ( - 89 )
0019a8 4fff     +SBCI R31 , HIGH ( - 89 )
0019a9 9001     +LD R0 , Z +
0019aa 81f0     +LD R31 , Z
0019ab 2de0     +MOV R30 , R0
                 	__GETW1SX 89
0019ac 9509      	ICALL
0019ad 3050      	CPI  R21,0
0019ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x88:
                +
0019af 89e8     +LDD R30 , Y + 16
0019b0 89f9     +LDD R31 , Y + 16 + 1
0019b1 896a     +LDD R22 , Y + 16 + 2
0019b2 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
0019b3 85aa     +LDD R26 , Y + 10
0019b4 85bb     +LDD R27 , Y + 10 + 1
0019b5 858c     +LDD R24 , Y + 10 + 2
0019b6 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
0019b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x89:
                +
0019b8 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0019b9 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0019ba e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0019bb e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0019bc 940e 1ab1 	CALL __SUBF12
0019be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8A:
                +
0019bf 81ae     +LDD R26 , Y + 6
0019c0 81bf     +LDD R27 , Y + 6 + 1
0019c1 8588     +LDD R24 , Y + 6 + 2
0019c2 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
0019c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8B:
                +
0019c4 81ee     +LDD R30 , Y + 6
0019c5 81ff     +LDD R31 , Y + 6 + 1
0019c6 8568     +LDD R22 , Y + 6 + 2
0019c7 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
0019c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8C:
                +
0019c9 83ee     +STD Y + 6 , R30
0019ca 83ff     +STD Y + 6 + 1 , R31
0019cb 8768     +STD Y + 6 + 2 , R22
0019cc 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
0019cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8D:
0019ce dff5      	RCALL SUBOPT_0x8B
0019cf cfef      	RJMP SUBOPT_0x8A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8E:
0019d0 940e 1b08 	CALL __MULF12
0019d2 df4e      	RCALL SUBOPT_0x71
                +
0019d3 81ea     +LDD R30 , Y + 2
0019d4 81fb     +LDD R31 , Y + 2 + 1
0019d5 816c     +LDD R22 , Y + 2 + 2
0019d6 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0019d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8F:
                +
0019d8 81ea     +LDD R30 , Y + 2
0019d9 81fb     +LDD R31 , Y + 2 + 1
0019da 816c     +LDD R22 , Y + 2 + 2
0019db 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0019dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x90:
                +
0019dd 85aa     +LDD R26 , Y + 10
0019de 85bb     +LDD R27 , Y + 10 + 1
0019df 858c     +LDD R24 , Y + 10 + 2
0019e0 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
0019e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x91:
                +
0019e2 e0e0     +LDI R30 , LOW ( 0x0 )
0019e3 e0f0     +LDI R31 , HIGH ( 0x0 )
0019e4 e060     +LDI R22 , BYTE3 ( 0x0 )
0019e5 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0019e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x92:
0019e7 940e 1492 	CALL _log
0019e9 ddd5      	RCALL SUBOPT_0x40
0019ea ceee      	RJMP SUBOPT_0x67
                 
                 
                 	.CSEG
                 _delay_ms:
0019eb 9610      	adiw r26,0
0019ec f039      	breq __delay_ms1
                 __delay_ms0:
                +
0019ed ec8d     +LDI R24 , LOW ( 0xACD )
0019ee e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
0019ef 9701     +SBIW R24 , 1
0019f0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
0019f1 95a8      	wdr
0019f2 9711      	sbiw r26,1
0019f3 f7c9      	brne __delay_ms0
                 __delay_ms1:
0019f4 9508      	ret
                 
                 _frexp:
0019f5 91e9      	LD   R30,Y+
0019f6 91f9      	LD   R31,Y+
0019f7 9169      	LD   R22,Y+
0019f8 9179      	LD   R23,Y+
0019f9 fb77      	BST  R23,7
0019fa 0f66      	LSL  R22
0019fb 1f77      	ROL  R23
0019fc 2788      	CLR  R24
0019fd 577e      	SUBI R23,0x7E
0019fe 0b88      	SBC  R24,R24
0019ff 937d      	ST   X+,R23
001a00 938c      	ST   X,R24
001a01 e77e      	LDI  R23,0x7E
001a02 9576      	LSR  R23
001a03 9567      	ROR  R22
001a04 f06e      	BRTS __ANEGF1
001a05 9508      	RET
                 
                 _ldexp:
001a06 91e9      	LD   R30,Y+
001a07 91f9      	LD   R31,Y+
001a08 9169      	LD   R22,Y+
001a09 9179      	LD   R23,Y+
001a0a fb77      	BST  R23,7
001a0b 0f66      	LSL  R22
001a0c 1f77      	ROL  R23
001a0d 0f7a      	ADD  R23,R26
001a0e 9576      	LSR  R23
001a0f 9567      	ROR  R22
001a10 f00e      	BRTS __ANEGF1
001a11 9508      	RET
                 
                 __ANEGF1:
001a12 9730      	SBIW R30,0
001a13 4060      	SBCI R22,0
001a14 4070      	SBCI R23,0
001a15 f009      	BREQ __ANEGF10
001a16 5870      	SUBI R23,0x80
                 __ANEGF10:
001a17 9508      	RET
                 
                 __ROUND_REPACK:
001a18 2355      	TST  R21
001a19 f442      	BRPL __REPACK
001a1a 3850      	CPI  R21,0x80
001a1b f411      	BRNE __ROUND_REPACK0
001a1c ffe0      	SBRS R30,0
001a1d c004      	RJMP __REPACK
                 __ROUND_REPACK0:
001a1e 9631      	ADIW R30,1
001a1f 1f69      	ADC  R22,R25
001a20 1f79      	ADC  R23,R25
001a21 f06b      	BRVS __REPACK1
                 
                 __REPACK:
001a22 e850      	LDI  R21,0x80
001a23 2757      	EOR  R21,R23
001a24 f411      	BRNE __REPACK0
001a25 935f      	PUSH R21
001a26 c0cf      	RJMP __ZERORES
                 __REPACK0:
001a27 3f5f      	CPI  R21,0xFF
001a28 f031      	BREQ __REPACK1
001a29 0f66      	LSL  R22
001a2a 0c00      	LSL  R0
001a2b 9557      	ROR  R21
001a2c 9567      	ROR  R22
001a2d 2f75      	MOV  R23,R21
001a2e 9508      	RET
                 __REPACK1:
001a2f 935f      	PUSH R21
001a30 2000      	TST  R0
001a31 f00a      	BRMI __REPACK2
001a32 c0cf      	RJMP __MAXRES
                 __REPACK2:
001a33 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
001a34 e850      	LDI  R21,0x80
001a35 2e19      	MOV  R1,R25
001a36 2215      	AND  R1,R21
001a37 0f88      	LSL  R24
001a38 1f99      	ROL  R25
001a39 2795      	EOR  R25,R21
001a3a 0f55      	LSL  R21
001a3b 9587      	ROR  R24
                 
                 __UNPACK1:
001a3c e850      	LDI  R21,0x80
001a3d 2e07      	MOV  R0,R23
001a3e 2205      	AND  R0,R21
001a3f 0f66      	LSL  R22
001a40 1f77      	ROL  R23
001a41 2775      	EOR  R23,R21
001a42 0f55      	LSL  R21
001a43 9567      	ROR  R22
001a44 9508      	RET
                 
                 __CFD1U:
001a45 9468      	SET
001a46 c001      	RJMP __CFD1U0
                 __CFD1:
001a47 94e8      	CLT
                 __CFD1U0:
001a48 935f      	PUSH R21
001a49 dff2      	RCALL __UNPACK1
001a4a 3870      	CPI  R23,0x80
001a4b f018      	BRLO __CFD10
001a4c 3f7f      	CPI  R23,0xFF
001a4d f408      	BRCC __CFD10
001a4e c0a7      	RJMP __ZERORES
                 __CFD10:
001a4f e156      	LDI  R21,22
001a50 1b57      	SUB  R21,R23
001a51 f4aa      	BRPL __CFD11
001a52 9551      	NEG  R21
001a53 3058      	CPI  R21,8
001a54 f40e      	BRTC __CFD19
001a55 3059      	CPI  R21,9
                 __CFD19:
001a56 f030      	BRLO __CFD17
001a57 efef      	SER  R30
001a58 efff      	SER  R31
001a59 ef6f      	SER  R22
001a5a e77f      	LDI  R23,0x7F
001a5b f977      	BLD  R23,7
001a5c c01a      	RJMP __CFD15
                 __CFD17:
001a5d 2777      	CLR  R23
001a5e 2355      	TST  R21
001a5f f0b9      	BREQ __CFD15
                 __CFD18:
001a60 0fee      	LSL  R30
001a61 1fff      	ROL  R31
001a62 1f66      	ROL  R22
001a63 1f77      	ROL  R23
001a64 955a      	DEC  R21
001a65 f7d1      	BRNE __CFD18
001a66 c010      	RJMP __CFD15
                 __CFD11:
001a67 2777      	CLR  R23
                 __CFD12:
001a68 3058      	CPI  R21,8
001a69 f028      	BRLO __CFD13
001a6a 2fef      	MOV  R30,R31
001a6b 2ff6      	MOV  R31,R22
001a6c 2f67      	MOV  R22,R23
001a6d 5058      	SUBI R21,8
001a6e cff9      	RJMP __CFD12
                 __CFD13:
001a6f 2355      	TST  R21
001a70 f031      	BREQ __CFD15
                 __CFD14:
001a71 9576      	LSR  R23
001a72 9567      	ROR  R22
001a73 95f7      	ROR  R31
001a74 95e7      	ROR  R30
001a75 955a      	DEC  R21
001a76 f7d1      	BRNE __CFD14
                 __CFD15:
001a77 2000      	TST  R0
001a78 f40a      	BRPL __CFD16
001a79 d180      	RCALL __ANEGD1
                 __CFD16:
001a7a 915f      	POP  R21
001a7b 9508      	RET
                 
                 __CDF1U:
001a7c 9468      	SET
001a7d c001      	RJMP __CDF1U0
                 __CDF1:
001a7e 94e8      	CLT
                 __CDF1U0:
001a7f 9730      	SBIW R30,0
001a80 4060      	SBCI R22,0
001a81 4070      	SBCI R23,0
001a82 f0b1      	BREQ __CDF10
001a83 2400      	CLR  R0
001a84 f026      	BRTS __CDF11
001a85 2377      	TST  R23
001a86 f412      	BRPL __CDF11
001a87 9400      	COM  R0
001a88 d171      	RCALL __ANEGD1
                 __CDF11:
001a89 2e17      	MOV  R1,R23
001a8a e17e      	LDI  R23,30
001a8b 2011      	TST  R1
                 __CDF12:
001a8c f032      	BRMI __CDF13
001a8d 957a      	DEC  R23
001a8e 0fee      	LSL  R30
001a8f 1fff      	ROL  R31
001a90 1f66      	ROL  R22
001a91 1c11      	ROL  R1
001a92 cff9      	RJMP __CDF12
                 __CDF13:
001a93 2fef      	MOV  R30,R31
001a94 2ff6      	MOV  R31,R22
001a95 2d61      	MOV  R22,R1
001a96 935f      	PUSH R21
001a97 df8a      	RCALL __REPACK
001a98 915f      	POP  R21
                 __CDF10:
001a99 9508      	RET
                 
                 __SWAPACC:
001a9a 934f      	PUSH R20
001a9b 01af      	MOVW R20,R30
001a9c 01fd      	MOVW R30,R26
001a9d 01da      	MOVW R26,R20
001a9e 01ab      	MOVW R20,R22
001a9f 01bc      	MOVW R22,R24
001aa0 01ca      	MOVW R24,R20
001aa1 2d40      	MOV  R20,R0
001aa2 2c01      	MOV  R0,R1
001aa3 2e14      	MOV  R1,R20
001aa4 914f      	POP  R20
001aa5 9508      	RET
                 
                 __UADD12:
001aa6 0fea      	ADD  R30,R26
001aa7 1ffb      	ADC  R31,R27
001aa8 1f68      	ADC  R22,R24
001aa9 9508      	RET
                 
                 __NEGMAN1:
001aaa 95e0      	COM  R30
001aab 95f0      	COM  R31
001aac 9560      	COM  R22
001aad 5fef      	SUBI R30,-1
001aae 4fff      	SBCI R31,-1
001aaf 4f6f      	SBCI R22,-1
001ab0 9508      	RET
                 
                 __SUBF12:
001ab1 935f      	PUSH R21
001ab2 df81      	RCALL __UNPACK
001ab3 3890      	CPI  R25,0x80
001ab4 f171      	BREQ __ADDF129
001ab5 e850      	LDI  R21,0x80
001ab6 2615      	EOR  R1,R21
                 
001ab7 c004      	RJMP __ADDF120
                 
                 __ADDF12:
001ab8 935f      	PUSH R21
001ab9 df7a      	RCALL __UNPACK
001aba 3890      	CPI  R25,0x80
001abb f139      	BREQ __ADDF129
                 
                 __ADDF120:
001abc 3870      	CPI  R23,0x80
001abd f121      	BREQ __ADDF128
                 __ADDF121:
001abe 2f57      	MOV  R21,R23
001abf 1b59      	SUB  R21,R25
001ac0 f12b      	BRVS __ADDF1211
001ac1 f412      	BRPL __ADDF122
001ac2 dfd7      	RCALL __SWAPACC
001ac3 cffa      	RJMP __ADDF121
                 __ADDF122:
001ac4 3158      	CPI  R21,24
001ac5 f018      	BRLO __ADDF123
001ac6 27aa      	CLR  R26
001ac7 27bb      	CLR  R27
001ac8 2788      	CLR  R24
                 __ADDF123:
001ac9 3058      	CPI  R21,8
001aca f028      	BRLO __ADDF124
001acb 2fab      	MOV  R26,R27
001acc 2fb8      	MOV  R27,R24
001acd 2788      	CLR  R24
001ace 5058      	SUBI R21,8
001acf cff9      	RJMP __ADDF123
                 __ADDF124:
001ad0 2355      	TST  R21
001ad1 f029      	BREQ __ADDF126
                 __ADDF125:
001ad2 9586      	LSR  R24
001ad3 95b7      	ROR  R27
001ad4 95a7      	ROR  R26
001ad5 955a      	DEC  R21
001ad6 f7d9      	BRNE __ADDF125
                 __ADDF126:
001ad7 2d50      	MOV  R21,R0
001ad8 2551      	EOR  R21,R1
001ad9 f072      	BRMI __ADDF127
001ada dfcb      	RCALL __UADD12
001adb f438      	BRCC __ADDF129
001adc 9567      	ROR  R22
001add 95f7      	ROR  R31
001ade 95e7      	ROR  R30
001adf 9573      	INC  R23
001ae0 f413      	BRVC __ADDF129
001ae1 c020      	RJMP __MAXRES
                 __ADDF128:
001ae2 dfb7      	RCALL __SWAPACC
                 __ADDF129:
001ae3 df3e      	RCALL __REPACK
001ae4 915f      	POP  R21
001ae5 9508      	RET
                 __ADDF1211:
001ae6 f7d8      	BRCC __ADDF128
001ae7 cffb      	RJMP __ADDF129
                 __ADDF127:
001ae8 1bea      	SUB  R30,R26
001ae9 0bfb      	SBC  R31,R27
001aea 0b68      	SBC  R22,R24
001aeb f051      	BREQ __ZERORES
001aec f410      	BRCC __ADDF1210
001aed 9400      	COM  R0
001aee dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
001aef 2366      	TST  R22
001af0 f392      	BRMI __ADDF129
001af1 0fee      	LSL  R30
001af2 1fff      	ROL  R31
001af3 1f66      	ROL  R22
001af4 957a      	DEC  R23
001af5 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
001af6 27ee      	CLR  R30
001af7 27ff      	CLR  R31
001af8 2766      	CLR  R22
001af9 2777      	CLR  R23
001afa 915f      	POP  R21
001afb 9508      	RET
                 
                 __MINRES:
001afc efef      	SER  R30
001afd efff      	SER  R31
001afe e76f      	LDI  R22,0x7F
001aff ef7f      	SER  R23
001b00 915f      	POP  R21
001b01 9508      	RET
                 
                 __MAXRES:
001b02 efef      	SER  R30
001b03 efff      	SER  R31
001b04 e76f      	LDI  R22,0x7F
001b05 e77f      	LDI  R23,0x7F
001b06 915f      	POP  R21
001b07 9508      	RET
                 
                 __MULF12:
001b08 935f      	PUSH R21
001b09 df2a      	RCALL __UNPACK
001b0a 3870      	CPI  R23,0x80
001b0b f351      	BREQ __ZERORES
001b0c 3890      	CPI  R25,0x80
001b0d f341      	BREQ __ZERORES
001b0e 2401      	EOR  R0,R1
001b0f 9408      	SEC
001b10 1f79      	ADC  R23,R25
001b11 f423      	BRVC __MULF124
001b12 f31c      	BRLT __ZERORES
                 __MULF125:
001b13 2000      	TST  R0
001b14 f33a      	BRMI __MINRES
001b15 cfec      	RJMP __MAXRES
                 __MULF124:
001b16 920f      	PUSH R0
001b17 931f      	PUSH R17
001b18 932f      	PUSH R18
001b19 933f      	PUSH R19
001b1a 934f      	PUSH R20
001b1b 2711      	CLR  R17
001b1c 2722      	CLR  R18
001b1d 2799      	CLR  R25
001b1e 9f68      	MUL  R22,R24
001b1f 01a0      	MOVW R20,R0
001b20 9f8f      	MUL  R24,R31
001b21 2d30      	MOV  R19,R0
001b22 0d41      	ADD  R20,R1
001b23 1f59      	ADC  R21,R25
001b24 9f6b      	MUL  R22,R27
001b25 0d30      	ADD  R19,R0
001b26 1d41      	ADC  R20,R1
001b27 1f59      	ADC  R21,R25
001b28 9f8e      	MUL  R24,R30
001b29 d027      	RCALL __MULF126
001b2a 9fbf      	MUL  R27,R31
001b2b d025      	RCALL __MULF126
001b2c 9f6a      	MUL  R22,R26
001b2d d023      	RCALL __MULF126
001b2e 9fbe      	MUL  R27,R30
001b2f d01d      	RCALL __MULF127
001b30 9faf      	MUL  R26,R31
001b31 d01b      	RCALL __MULF127
001b32 9fae      	MUL  R26,R30
001b33 0d11      	ADD  R17,R1
001b34 1f29      	ADC  R18,R25
001b35 1f39      	ADC  R19,R25
001b36 1f49      	ADC  R20,R25
001b37 1f59      	ADC  R21,R25
001b38 2fe3      	MOV  R30,R19
001b39 2ff4      	MOV  R31,R20
001b3a 2f65      	MOV  R22,R21
001b3b 2f52      	MOV  R21,R18
001b3c 914f      	POP  R20
001b3d 913f      	POP  R19
001b3e 912f      	POP  R18
001b3f 911f      	POP  R17
001b40 900f      	POP  R0
001b41 2366      	TST  R22
001b42 f02a      	BRMI __MULF122
001b43 0f55      	LSL  R21
001b44 1fee      	ROL  R30
001b45 1fff      	ROL  R31
001b46 1f66      	ROL  R22
001b47 c002      	RJMP __MULF123
                 __MULF122:
001b48 9573      	INC  R23
001b49 f24b      	BRVS __MULF125
                 __MULF123:
001b4a decd      	RCALL __ROUND_REPACK
001b4b 915f      	POP  R21
001b4c 9508      	RET
                 
                 __MULF127:
001b4d 0d10      	ADD  R17,R0
001b4e 1d21      	ADC  R18,R1
001b4f 1f39      	ADC  R19,R25
001b50 c002      	RJMP __MULF128
                 __MULF126:
001b51 0d20      	ADD  R18,R0
001b52 1d31      	ADC  R19,R1
                 __MULF128:
001b53 1f49      	ADC  R20,R25
001b54 1f59      	ADC  R21,R25
001b55 9508      	RET
                 
                 __DIVF21:
001b56 935f      	PUSH R21
001b57 dedc      	RCALL __UNPACK
001b58 3870      	CPI  R23,0x80
001b59 f421      	BRNE __DIVF210
001b5a 2011      	TST  R1
                 __DIVF211:
001b5b f40a      	BRPL __DIVF219
001b5c cf9f      	RJMP __MINRES
                 __DIVF219:
001b5d cfa4      	RJMP __MAXRES
                 __DIVF210:
001b5e 3890      	CPI  R25,0x80
001b5f f409      	BRNE __DIVF218
                 __DIVF217:
001b60 cf95      	RJMP __ZERORES
                 __DIVF218:
001b61 2401      	EOR  R0,R1
001b62 9408      	SEC
001b63 0b97      	SBC  R25,R23
001b64 f41b      	BRVC __DIVF216
001b65 f3d4      	BRLT __DIVF217
001b66 2000      	TST  R0
001b67 cff3      	RJMP __DIVF211
                 __DIVF216:
001b68 2f79      	MOV  R23,R25
001b69 931f      	PUSH R17
001b6a 932f      	PUSH R18
001b6b 933f      	PUSH R19
001b6c 934f      	PUSH R20
001b6d 2411      	CLR  R1
001b6e 2711      	CLR  R17
001b6f 2722      	CLR  R18
001b70 2733      	CLR  R19
001b71 2744      	CLR  R20
001b72 2755      	CLR  R21
001b73 e290      	LDI  R25,32
                 __DIVF212:
001b74 17ae      	CP   R26,R30
001b75 07bf      	CPC  R27,R31
001b76 0786      	CPC  R24,R22
001b77 0741      	CPC  R20,R17
001b78 f030      	BRLO __DIVF213
001b79 1bae      	SUB  R26,R30
001b7a 0bbf      	SBC  R27,R31
001b7b 0b86      	SBC  R24,R22
001b7c 0b41      	SBC  R20,R17
001b7d 9408      	SEC
001b7e c001      	RJMP __DIVF214
                 __DIVF213:
001b7f 9488      	CLC
                 __DIVF214:
001b80 1f55      	ROL  R21
001b81 1f22      	ROL  R18
001b82 1f33      	ROL  R19
001b83 1c11      	ROL  R1
001b84 1faa      	ROL  R26
001b85 1fbb      	ROL  R27
001b86 1f88      	ROL  R24
001b87 1f44      	ROL  R20
001b88 959a      	DEC  R25
001b89 f751      	BRNE __DIVF212
001b8a 01f9      	MOVW R30,R18
001b8b 2d61      	MOV  R22,R1
001b8c 914f      	POP  R20
001b8d 913f      	POP  R19
001b8e 912f      	POP  R18
001b8f 911f      	POP  R17
001b90 2366      	TST  R22
001b91 f032      	BRMI __DIVF215
001b92 0f55      	LSL  R21
001b93 1fee      	ROL  R30
001b94 1fff      	ROL  R31
001b95 1f66      	ROL  R22
001b96 957a      	DEC  R23
001b97 f243      	BRVS __DIVF217
                 __DIVF215:
001b98 de7f      	RCALL __ROUND_REPACK
001b99 915f      	POP  R21
001b9a 9508      	RET
                 
                 __CMPF12:
001b9b 2399      	TST  R25
001b9c f09a      	BRMI __CMPF120
001b9d 2377      	TST  R23
001b9e f042      	BRMI __CMPF121
001b9f 1797      	CP   R25,R23
001ba0 f048      	BRLO __CMPF122
001ba1 f429      	BRNE __CMPF121
001ba2 17ae      	CP   R26,R30
001ba3 07bf      	CPC  R27,R31
001ba4 0786      	CPC  R24,R22
001ba5 f020      	BRLO __CMPF122
001ba6 f031      	BREQ __CMPF123
                 __CMPF121:
001ba7 9498      	CLZ
001ba8 9488      	CLC
001ba9 9508      	RET
                 __CMPF122:
001baa 9498      	CLZ
001bab 9408      	SEC
001bac 9508      	RET
                 __CMPF123:
001bad 9418      	SEZ
001bae 9488      	CLC
001baf 9508      	RET
                 __CMPF120:
001bb0 2377      	TST  R23
001bb1 f7c2      	BRPL __CMPF122
001bb2 1797      	CP   R25,R23
001bb3 f398      	BRLO __CMPF121
001bb4 f7a9      	BRNE __CMPF122
001bb5 17ea      	CP   R30,R26
001bb6 07fb      	CPC  R31,R27
001bb7 0768      	CPC  R22,R24
001bb8 f388      	BRLO __CMPF122
001bb9 f399      	BREQ __CMPF123
001bba cfec      	RJMP __CMPF121
                 
                 _sqrt:
001bbb d106      	rcall __PUTPARD2
001bbc 9724      	sbiw r28,4
001bbd 935f      	push r21
001bbe 819f      	ldd  r25,y+7
001bbf 2399      	tst  r25
001bc0 f411      	brne __sqrt0
001bc1 9628      	adiw r28,8
001bc2 cf33      	rjmp __zerores
                 __sqrt0:
001bc3 f412      	brpl __sqrt1
001bc4 9628      	adiw r28,8
001bc5 cf3c      	rjmp __maxres
                 __sqrt1:
001bc6 934f      	push r20
001bc7 e442      	ldi  r20,66
001bc8 818e      	ldd  r24,y+6
001bc9 81bd      	ldd  r27,y+5
001bca 81ac      	ldd  r26,y+4
                 __sqrt2:
001bcb 8388      	st   y,r24
001bcc 8399      	std  y+1,r25
001bcd 83aa      	std  y+2,r26
001bce 83bb      	std  y+3,r27
001bcf 01fd      	movw r30,r26
001bd0 01bc      	movw r22,r24
001bd1 81ac      	ldd  r26,y+4
001bd2 81bd      	ldd  r27,y+5
001bd3 818e      	ldd  r24,y+6
001bd4 819f      	ldd  r25,y+7
001bd5 df80      	rcall __divf21
001bd6 8188      	ld   r24,y
001bd7 8199      	ldd  r25,y+1
001bd8 81aa      	ldd  r26,y+2
001bd9 81bb      	ldd  r27,y+3
001bda dedd      	rcall __addf12
001bdb de60      	rcall __unpack1
001bdc 957a      	dec  r23
001bdd de44      	rcall __repack
001bde 8188      	ld   r24,y
001bdf 8199      	ldd  r25,y+1
001be0 81aa      	ldd  r26,y+2
001be1 81bb      	ldd  r27,y+3
001be2 27ae      	eor  r26,r30
001be3 7fa8      	andi r26,0xf8
001be4 f421      	brne __sqrt4
001be5 17bf      	cp   r27,r31
001be6 0786      	cpc  r24,r22
001be7 0797      	cpc  r25,r23
001be8 f029      	breq __sqrt3
                 __sqrt4:
001be9 954a      	dec  r20
001bea f019      	breq __sqrt3
001beb 01df      	movw r26,r30
001bec 01cb      	movw r24,r22
001bed cfdd      	rjmp __sqrt2
                 __sqrt3:
001bee 914f      	pop  r20
001bef 915f      	pop  r21
001bf0 9628      	adiw r28,8
001bf1 9508      	ret
                 
                 __ADDW2R15:
001bf2 2400      	CLR  R0
001bf3 0daf      	ADD  R26,R15
001bf4 1db0      	ADC  R27,R0
001bf5 9508      	RET
                 
                 __ANEGW1:
001bf6 95f1      	NEG  R31
001bf7 95e1      	NEG  R30
001bf8 40f0      	SBCI R31,0
001bf9 9508      	RET
                 
                 __ANEGD1:
001bfa 95f0      	COM  R31
001bfb 9560      	COM  R22
001bfc 9570      	COM  R23
001bfd 95e1      	NEG  R30
001bfe 4fff      	SBCI R31,-1
001bff 4f6f      	SBCI R22,-1
001c00 4f7f      	SBCI R23,-1
001c01 9508      	RET
                 
                 __CBD1:
001c02 2ffe      	MOV  R31,R30
001c03 0fff      	ADD  R31,R31
001c04 0bff      	SBC  R31,R31
001c05 2f6f      	MOV  R22,R31
001c06 2f7f      	MOV  R23,R31
001c07 9508      	RET
                 
                 __CWD1:
001c08 2f6f      	MOV  R22,R31
001c09 0f66      	ADD  R22,R22
001c0a 0b66      	SBC  R22,R22
001c0b 2f76      	MOV  R23,R22
001c0c 9508      	RET
                 
                 __DIVB21U:
001c0d 2400      	CLR  R0
001c0e e098      	LDI  R25,8
                 __DIVB21U1:
001c0f 0faa      	LSL  R26
001c10 1c00      	ROL  R0
001c11 1a0e      	SUB  R0,R30
001c12 f410      	BRCC __DIVB21U2
001c13 0e0e      	ADD  R0,R30
001c14 c001      	RJMP __DIVB21U3
                 __DIVB21U2:
001c15 60a1      	SBR  R26,1
                 __DIVB21U3:
001c16 959a      	DEC  R25
001c17 f7b9      	BRNE __DIVB21U1
001c18 2fea      	MOV  R30,R26
001c19 2da0      	MOV  R26,R0
001c1a 9508      	RET
                 
                 __DIVB21:
001c1b d05f      	RCALL __CHKSIGNB
001c1c dff0      	RCALL __DIVB21U
001c1d f40e      	BRTC __DIVB211
001c1e 95e1      	NEG  R30
                 __DIVB211:
001c1f 9508      	RET
                 
                 __DIVW21U:
001c20 2400      	CLR  R0
001c21 2411      	CLR  R1
001c22 e190      	LDI  R25,16
                 __DIVW21U1:
001c23 0faa      	LSL  R26
001c24 1fbb      	ROL  R27
001c25 1c00      	ROL  R0
001c26 1c11      	ROL  R1
001c27 1a0e      	SUB  R0,R30
001c28 0a1f      	SBC  R1,R31
001c29 f418      	BRCC __DIVW21U2
001c2a 0e0e      	ADD  R0,R30
001c2b 1e1f      	ADC  R1,R31
001c2c c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001c2d 60a1      	SBR  R26,1
                 __DIVW21U3:
001c2e 959a      	DEC  R25
001c2f f799      	BRNE __DIVW21U1
001c30 01fd      	MOVW R30,R26
001c31 01d0      	MOVW R26,R0
001c32 9508      	RET
                 
                 __DIVW21:
001c33 d053      	RCALL __CHKSIGNW
001c34 dfeb      	RCALL __DIVW21U
001c35 f40e      	BRTC __DIVW211
001c36 dfbf      	RCALL __ANEGW1
                 __DIVW211:
001c37 9508      	RET
                 
                 __DIVD21U:
001c38 933f      	PUSH R19
001c39 934f      	PUSH R20
001c3a 935f      	PUSH R21
001c3b 2400      	CLR  R0
001c3c 2411      	CLR  R1
001c3d 2744      	CLR  R20
001c3e 2755      	CLR  R21
001c3f e230      	LDI  R19,32
                 __DIVD21U1:
001c40 0faa      	LSL  R26
001c41 1fbb      	ROL  R27
001c42 1f88      	ROL  R24
001c43 1f99      	ROL  R25
001c44 1c00      	ROL  R0
001c45 1c11      	ROL  R1
001c46 1f44      	ROL  R20
001c47 1f55      	ROL  R21
001c48 1a0e      	SUB  R0,R30
001c49 0a1f      	SBC  R1,R31
001c4a 0b46      	SBC  R20,R22
001c4b 0b57      	SBC  R21,R23
001c4c f428      	BRCC __DIVD21U2
001c4d 0e0e      	ADD  R0,R30
001c4e 1e1f      	ADC  R1,R31
001c4f 1f46      	ADC  R20,R22
001c50 1f57      	ADC  R21,R23
001c51 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
001c52 60a1      	SBR  R26,1
                 __DIVD21U3:
001c53 953a      	DEC  R19
001c54 f759      	BRNE __DIVD21U1
001c55 01fd      	MOVW R30,R26
001c56 01bc      	MOVW R22,R24
001c57 01d0      	MOVW R26,R0
001c58 01ca      	MOVW R24,R20
001c59 915f      	POP  R21
001c5a 914f      	POP  R20
001c5b 913f      	POP  R19
001c5c 9508      	RET
                 
                 __MODB21:
001c5d 94e8      	CLT
001c5e ffa7      	SBRS R26,7
001c5f c002      	RJMP __MODB211
001c60 95a1      	NEG  R26
001c61 9468      	SET
                 __MODB211:
001c62 fde7      	SBRC R30,7
001c63 95e1      	NEG  R30
001c64 dfa8      	RCALL __DIVB21U
001c65 2fea      	MOV  R30,R26
001c66 f40e      	BRTC __MODB212
001c67 95e1      	NEG  R30
                 __MODB212:
001c68 9508      	RET
                 
                 __MODW21:
001c69 94e8      	CLT
001c6a ffb7      	SBRS R27,7
001c6b c004      	RJMP __MODW211
001c6c 95a0      	COM  R26
001c6d 95b0      	COM  R27
001c6e 9611      	ADIW R26,1
001c6f 9468      	SET
                 __MODW211:
001c70 fdf7      	SBRC R31,7
001c71 df84      	RCALL __ANEGW1
001c72 dfad      	RCALL __DIVW21U
001c73 01fd      	MOVW R30,R26
001c74 f40e      	BRTC __MODW212
001c75 df80      	RCALL __ANEGW1
                 __MODW212:
001c76 9508      	RET
                 
                 __MODD21U:
001c77 dfc0      	RCALL __DIVD21U
001c78 01fd      	MOVW R30,R26
001c79 01bc      	MOVW R22,R24
001c7a 9508      	RET
                 
                 __CHKSIGNB:
001c7b 94e8      	CLT
001c7c ffe7      	SBRS R30,7
001c7d c002      	RJMP __CHKSB1
001c7e 95e1      	NEG  R30
001c7f 9468      	SET
                 __CHKSB1:
001c80 ffa7      	SBRS R26,7
001c81 c004      	RJMP __CHKSB2
001c82 95a1      	NEG  R26
001c83 f800      	BLD  R0,0
001c84 9403      	INC  R0
001c85 fa00      	BST  R0,0
                 __CHKSB2:
001c86 9508      	RET
                 
                 __CHKSIGNW:
001c87 94e8      	CLT
001c88 fff7      	SBRS R31,7
001c89 c002      	RJMP __CHKSW1
001c8a df6b      	RCALL __ANEGW1
001c8b 9468      	SET
                 __CHKSW1:
001c8c ffb7      	SBRS R27,7
001c8d c006      	RJMP __CHKSW2
001c8e 95a0      	COM  R26
001c8f 95b0      	COM  R27
001c90 9611      	ADIW R26,1
001c91 f800      	BLD  R0,0
001c92 9403      	INC  R0
001c93 fa00      	BST  R0,0
                 __CHKSW2:
001c94 9508      	RET
                 
                 __GETW1P:
001c95 91ed      	LD   R30,X+
001c96 91fc      	LD   R31,X
001c97 9711      	SBIW R26,1
001c98 9508      	RET
                 
                 __GETD1P:
001c99 91ed      	LD   R30,X+
001c9a 91fd      	LD   R31,X+
001c9b 916d      	LD   R22,X+
001c9c 917c      	LD   R23,X
001c9d 9713      	SBIW R26,3
001c9e 9508      	RET
                 
                 __GETD1P_INC:
001c9f 91ed      	LD   R30,X+
001ca0 91fd      	LD   R31,X+
001ca1 916d      	LD   R22,X+
001ca2 917d      	LD   R23,X+
001ca3 9508      	RET
                 
                 __PUTDP1:
001ca4 93ed      	ST   X+,R30
001ca5 93fd      	ST   X+,R31
001ca6 936d      	ST   X+,R22
001ca7 937c      	ST   X,R23
001ca8 9508      	RET
                 
                 __PUTDP1_DEC:
001ca9 937e      	ST   -X,R23
001caa 936e      	ST   -X,R22
001cab 93fe      	ST   -X,R31
001cac 93ee      	ST   -X,R30
001cad 9508      	RET
                 
                 __GETD1S0:
001cae 81e8      	LD   R30,Y
001caf 81f9      	LDD  R31,Y+1
001cb0 816a      	LDD  R22,Y+2
001cb1 817b      	LDD  R23,Y+3
001cb2 9508      	RET
                 
                 __GETD2S0:
001cb3 81a8      	LD   R26,Y
001cb4 81b9      	LDD  R27,Y+1
001cb5 818a      	LDD  R24,Y+2
001cb6 819b      	LDD  R25,Y+3
001cb7 9508      	RET
                 
                 __PUTD1S0:
001cb8 83e8      	ST   Y,R30
001cb9 83f9      	STD  Y+1,R31
001cba 836a      	STD  Y+2,R22
001cbb 837b      	STD  Y+3,R23
001cbc 9508      	RET
                 
                 __PUTPARD1:
001cbd 937a      	ST   -Y,R23
001cbe 936a      	ST   -Y,R22
001cbf 93fa      	ST   -Y,R31
001cc0 93ea      	ST   -Y,R30
001cc1 9508      	RET
                 
                 __PUTPARD2:
001cc2 939a      	ST   -Y,R25
001cc3 938a      	ST   -Y,R24
001cc4 93ba      	ST   -Y,R27
001cc5 93aa      	ST   -Y,R26
001cc6 9508      	RET
                 
                 __SWAPD12:
001cc7 2e18      	MOV  R1,R24
001cc8 2f86      	MOV  R24,R22
001cc9 2d61      	MOV  R22,R1
001cca 2e19      	MOV  R1,R25
001ccb 2f97      	MOV  R25,R23
001ccc 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
001ccd 2e1b      	MOV  R1,R27
001cce 2fbf      	MOV  R27,R31
001ccf 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
001cd0 2e1a      	MOV  R1,R26
001cd1 2fae      	MOV  R26,R30
001cd2 2de1      	MOV  R30,R1
001cd3 9508      	RET
                 
                 __EEPROMRDD:
001cd4 9612      	ADIW R26,2
001cd5 d002      	RCALL __EEPROMRDW
001cd6 01bf      	MOVW R22,R30
001cd7 9712      	SBIW R26,2
                 
                 __EEPROMRDW:
001cd8 9611      	ADIW R26,1
001cd9 d002      	RCALL __EEPROMRDB
001cda 2ffe      	MOV  R31,R30
001cdb 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
001cdc 99e1      	SBIC EECR,EEWE
001cdd cffe      	RJMP __EEPROMRDB
001cde 93ff      	PUSH R31
001cdf b7ff      	IN   R31,SREG
001ce0 94f8      	CLI
001ce1 bbae      	OUT  EEARL,R26
001ce2 bbbf      	OUT  EEARH,R27
001ce3 9ae0      	SBI  EECR,EERE
001ce4 b3ed      	IN   R30,EEDR
001ce5 bfff      	OUT  SREG,R31
001ce6 91ff      	POP  R31
001ce7 9508      	RET
                 
                 __CPD10:
001ce8 9730      	SBIW R30,0
001ce9 4060      	SBCI R22,0
001cea 4070      	SBCI R23,0
001ceb 9508      	RET
                 
                 __CPW02:
001cec 2400      	CLR  R0
001ced 160a      	CP   R0,R26
001cee 060b      	CPC  R0,R27
001cef 9508      	RET
                 
                 __CPD02:
001cf0 2400      	CLR  R0
001cf1 160a      	CP   R0,R26
001cf2 060b      	CPC  R0,R27
001cf3 0608      	CPC  R0,R24
001cf4 0609      	CPC  R0,R25
001cf5 9508      	RET
                 
                 __CPD12:
001cf6 17ea      	CP   R30,R26
001cf7 07fb      	CPC  R31,R27
001cf8 0768      	CPC  R22,R24
001cf9 0779      	CPC  R23,R25
001cfa 9508      	RET
                 
                 __SAVELOCR6:
001cfb 935a      	ST   -Y,R21
                 __SAVELOCR5:
001cfc 934a      	ST   -Y,R20
                 __SAVELOCR4:
001cfd 933a      	ST   -Y,R19
                 __SAVELOCR3:
001cfe 932a      	ST   -Y,R18
                 __SAVELOCR2:
001cff 931a      	ST   -Y,R17
001d00 930a      	ST   -Y,R16
001d01 9508      	RET
                 
                 __LOADLOCR6:
001d02 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
001d03 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
001d04 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
001d05 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
001d06 8119      	LDD  R17,Y+1
001d07 8108      	LD   R16,Y
001d08 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  88 r1 :  40 r2 :   1 r3 :   0 r4 :   6 r5 :   2 r6 :   4 r7 :   3 
r8 :   3 r9 :   0 r10:   4 r11:   2 r12:   1 r13:   7 r14:   0 r15:   6 
r16: 137 r17: 130 r18:  66 r19:  48 r20:  69 r21: 101 r22: 223 r23: 200 
r24: 134 r25: 111 r26: 547 r27: 280 r28:  63 r29:   5 r30:1174 r31: 549 
x  :  90 y  : 805 z  :  34 
Registers used: 32 out of 35 (91.4%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  40 add   :  34 
adiw  :  72 and   :   5 andi  :  13 asr   :   0 bclr  :   0 bld   :   5 
brbc  :   0 brbs  :   0 brcc  :  15 brcs  :   1 break :   0 breq  :  74 
brge  :  16 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  32 
brlt  :   5 brmi  :  11 brne  : 143 brpl  :  10 brsh  :  14 brtc  :   6 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   6 call  : 754 
cbi   :   7 cbr   :   1 clc   :   3 clh   :   0 cli   :   3 cln   :   0 
clr   :  75 cls   :   0 clt   :   7 clv   :   0 clz   :   2 com   :  12 
cp    :  36 cpc   :  94 cpi   : 144 cpse  :   0 dec   :  15 des   :   0 
elpm  :   0 eor   :   8 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 
ijmp  :   0 in    :  15 inc   :   5 jmp   :  68 ld    : 123 ldd   : 370 
ldi   : 851 lds   : 180 lpm   :  12 lsl   :  26 lsr   :   5 mov   :  99 
movw  : 124 mul   :  11 muls  :   0 mulsu :   0 neg   :  11 nop   :   0 
or    :   8 ori   :  14 out   :  52 pop   :  43 push  :  43 rcall :  76 
ret   : 212 reti  :   3 rjmp  : 257 rol   :  40 ror   :  17 sbc   :  16 
sbci  :  43 sbi   :  15 sbic  :  10 sbis  :   3 sbiw  :  58 sbr   :   5 
sbrc  :   5 sbrs  :  23 sec   :   5 seh   :   0 sei   :   3 sen   :   0 
ser   :   8 ses   :   0 set   :   7 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    : 325 std   : 100 sts   : 214 sub   :  10 subi  :  78 
swap  :   0 tst   :  26 wdr   :   1 
Instructions used: 82 out of 117 (70.1%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x003a12  13026   1840  14866  131072  11.3%
[.dseg] 0x000100 0x0009ec      0   1004   1004    4351  23.1%
[.eseg] 0x000000 0x00000c      0     12     12    4096   0.3%

Assembly complete, 0 errors, 17 warnings
