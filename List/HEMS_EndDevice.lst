
AVRASM ver. 2.1.30  C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm Mon Oct 30 16:34:07 2017

C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1074): warning: Register r5 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1075): warning: Register r4 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1076): warning: Register r6 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1077): warning: Register r8 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1078): warning: Register r10 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1079): warning: Register r13 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1080): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128A
                 ;Program type             : Application
                 ;Clock frequency          : 11.059200 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : float, width, precision
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1280 byte(s)
                 ;Heap size                : 1024 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0500
                 	.EQU __HEAP_SIZE=0x0400
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _error=R5
                 	.DEF _read_D_SW=R4
                 	.DEF _start_event=R6
                 	.DEF _counter=R8
                 	.DEF _rx_wr_index1=R10
                 	.DEF _rxPackageIndex0=R13
                 	.DEF _rxPackageIndexCount0=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 041b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0718 	JMP  _timer1_ovf_isr
00001e 940c 0000 	JMP  0x00
000020 940c 070a 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 07b9 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0737 	JMP  _timer3_ovf_isr
00003c 940c 07df 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000046 0000      	.DW  0x0000
                 
                 ;HEAP START MARKER INITIALIZATION
                 __HEAP_START_MARKER:
000047 0000
000048 0000      	.DW  0,0
                 
                 _0x3:
000049 0000
00004a 0000
00004b 0000
00004c 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004d ff00
00004e ffff
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1135): warning: .cseg .db misalignment - padding zero byte
00004f 00ff      	.DB  0x0,0xFF,0xFF,0xFF,0xFF
                 _0x4D:
000050 0000      	.DB  0x0,0x0
                 _0x0:
000051 0a0d
000052 2b2b
000053 2b2b
000054 2b2b      	.DB  0xD,0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000055 2b2b
000056 2b2b
000057 5320
000058 616d      	.DB  0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x6D,0x61
000059 7472
00005a 5320
00005b 6977
00005c 6374      	.DB  0x72,0x74,0x20,0x53,0x77,0x69,0x74,0x63
00005d 2068
00005e 2b2b
00005f 2b2b
000060 2b2b      	.DB  0x68,0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000061 2b2b
000062 2b2b
000063 0a0d
000064 0d00      	.DB  0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0,0xD
000065 460a
000066 7269
000067 776d
000068 7261      	.DB  0xA,0x46,0x69,0x72,0x6D,0x77,0x61,0x72
000069 2065
00006a 6556
00006b 7372
00006c 6f69      	.DB  0x65,0x20,0x56,0x65,0x72,0x73,0x69,0x6F
00006d 206e
00006e 203a
00006f 3025
000070 312e      	.DB  0x6E,0x20,0x3A,0x20,0x25,0x30,0x2E,0x31
000071 0d66
000072 000a
000073 7543
000074 7272      	.DB  0x66,0xD,0xA,0x0,0x43,0x75,0x72,0x72
000075 6e65
000076 2074
000077 6553
000078 736e      	.DB  0x65,0x6E,0x74,0x20,0x53,0x65,0x6E,0x73
000079 726f
00007a 2020
00007b 3a20
00007c 4120      	.DB  0x6F,0x72,0x20,0x20,0x20,0x3A,0x20,0x41
00007d 5343
00007e 3137
00007f 4532
000080 434c      	.DB  0x43,0x53,0x37,0x31,0x32,0x45,0x4C,0x43
000081 5254
000082 302d
000083 4235
000084 542d      	.DB  0x54,0x52,0x2D,0x30,0x35,0x42,0x2D,0x54
000085 2820
000086 3025
000087 312e
000088 2066      	.DB  0x20,0x28,0x25,0x30,0x2E,0x31,0x66,0x20
000089 566d
00008a 412f
00008b 706d
00008c 292e      	.DB  0x6D,0x56,0x2F,0x41,0x6D,0x70,0x2E,0x29
00008d 0a0d
00008e 0d00
00008f 2b0a
000090 2b2b      	.DB  0xD,0xA,0x0,0xD,0xA,0x2B,0x2B,0x2B
000091 2b2b
000092 2b2b
000093 2b2b
000094 202b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
000095 6d53
000096 7261
000097 2074
000098 6c50      	.DB  0x53,0x6D,0x61,0x72,0x74,0x20,0x50,0x6C
000099 6775
00009a 2b20
00009b 2b2b
00009c 2b2b      	.DB  0x75,0x67,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
00009d 2b2b
00009e 2b2b
00009f 0d2b
0000a0 000a      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0
0000a1 7543
0000a2 7272
0000a3 6e65
0000a4 2074      	.DB  0x43,0x75,0x72,0x72,0x65,0x6E,0x74,0x20
0000a5 6553
0000a6 736e
0000a7 726f
0000a8 2020      	.DB  0x53,0x65,0x6E,0x73,0x6F,0x72,0x20,0x20
0000a9 3a20
0000aa 4120
0000ab 5343
0000ac 3137      	.DB  0x20,0x3A,0x20,0x41,0x43,0x53,0x37,0x31
0000ad 4532
0000ae 434c
0000af 5254
0000b0 322d      	.DB  0x32,0x45,0x4C,0x43,0x54,0x52,0x2D,0x32
0000b1 4130
0000b2 542d
0000b3 2820
0000b4 3025      	.DB  0x30,0x41,0x2D,0x54,0x20,0x28,0x25,0x30
0000b5 312e
0000b6 2066
0000b7 566d
0000b8 412f      	.DB  0x2E,0x31,0x66,0x20,0x6D,0x56,0x2F,0x41
0000b9 706d
0000ba 292e
0000bb 0a0d
0000bc 0d00      	.DB  0x6D,0x70,0x2E,0x29,0xD,0xA,0x0,0xD
0000bd 2b0a
0000be 2b2b
0000bf 2b2b
0000c0 2b2b      	.DB  0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000c1 2b2b
0000c2 202b
0000c3 6d53
0000c4 7261      	.DB  0x2B,0x2B,0x2B,0x20,0x53,0x6D,0x61,0x72
0000c5 2074
0000c6 7242
0000c7 6165
0000c8 656b      	.DB  0x74,0x20,0x42,0x72,0x65,0x61,0x6B,0x65
0000c9 2072
0000ca 2b2b
0000cb 2b2b
0000cc 2b2b      	.DB  0x72,0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000cd 2b2b
0000ce 2b2b
0000cf 0a0d
0000d0 4300      	.DB  0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0,0x43
0000d1 7275
0000d2 6572
0000d3 746e
0000d4 5320      	.DB  0x75,0x72,0x72,0x65,0x6E,0x74,0x20,0x53
0000d5 6e65
0000d6 6f73
0000d7 2072
0000d8 2020      	.DB  0x65,0x6E,0x73,0x6F,0x72,0x20,0x20,0x20
0000d9 203a
0000da 4341
0000db 3753
0000dc 3231      	.DB  0x3A,0x20,0x41,0x43,0x53,0x37,0x31,0x32
0000dd 4c45
0000de 5443
0000df 2d52
0000e0 3033      	.DB  0x45,0x4C,0x43,0x54,0x52,0x2D,0x33,0x30
0000e1 2d41
0000e2 2054
0000e3 2528
0000e4 2e30      	.DB  0x41,0x2D,0x54,0x20,0x28,0x25,0x30,0x2E
0000e5 6631
0000e6 6d20
0000e7 2f56
0000e8 6d41      	.DB  0x31,0x66,0x20,0x6D,0x56,0x2F,0x41,0x6D
0000e9 2e70
0000ea 0d29
0000eb 000a
0000ec 6552      	.DB  0x70,0x2E,0x29,0xD,0xA,0x0,0x52,0x65
0000ed 6461
0000ee 4420
0000ef 7069
0000f0 532d      	.DB  0x61,0x64,0x20,0x44,0x69,0x70,0x2D,0x53
0000f1 6977
0000f2 6374
0000f3 2068
0000f4 5245      	.DB  0x77,0x69,0x74,0x63,0x68,0x20,0x45,0x52
0000f5 4f52
0000f6 2152
0000f7 0a0d
0000f8 0d00      	.DB  0x52,0x4F,0x52,0x21,0xD,0xA,0x0,0xD
0000f9 2b0a
0000fa 2b2b
0000fb 2b2b
0000fc 2b2b      	.DB  0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000fd 2b2b
0000fe 202b
0000ff 6544
000100 6166      	.DB  0x2B,0x2B,0x2B,0x20,0x44,0x65,0x66,0x61
000101 6c75
000102 2074
000103 7954
000104 6570      	.DB  0x75,0x6C,0x74,0x20,0x54,0x79,0x70,0x65
000105 3a20
000106 5320
000107 616d
000108 7472      	.DB  0x20,0x3A,0x20,0x53,0x6D,0x61,0x72,0x74
000109 5320
00010a 6977
00010b 6374
00010c 2068      	.DB  0x20,0x53,0x77,0x69,0x74,0x63,0x68,0x20
00010d 2b2b
00010e 2b2b
00010f 2b2b
000110 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000111 2b2b
000112 0a0d
000113 4300
000114 7275      	.DB  0x2B,0x2B,0xD,0xA,0x0,0x43,0x75,0x72
000115 6572
000116 746e
000117 4d20
000118 6165      	.DB  0x72,0x65,0x6E,0x74,0x20,0x4D,0x65,0x61
000119 7573
00011a 6572
00011b 2020
00011c 203a      	.DB  0x73,0x75,0x72,0x65,0x20,0x20,0x3A,0x20
00011d 203e
00011e 3025
00011f 322e
000120 2066      	.DB  0x3E,0x20,0x25,0x30,0x2E,0x32,0x66,0x20
000121 6d41
000122 2e70
000123 0a0d
000124 0d00      	.DB  0x41,0x6D,0x70,0x2E,0xD,0xA,0x0,0xD
000125 2d0a
000126 2d2d
000127 2d2d
000128 2d2d      	.DB  0xA,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000129 202d
00012a 6e49
00012b 7469
00012c 6169      	.DB  0x2D,0x20,0x49,0x6E,0x69,0x74,0x69,0x61
00012d 206c
00012e 6f43
00012f 706d
000130 656c      	.DB  0x6C,0x20,0x43,0x6F,0x6D,0x70,0x6C,0x65
000131 6574
000132 2d20
000133 2d2d
000134 2d2d      	.DB  0x74,0x65,0x20,0x2D,0x2D,0x2D,0x2D,0x2D
000135 2d2d
000136 0d2d
000137 000a
000138 0a0d      	.DB  0x2D,0x2D,0x2D,0xD,0xA,0x0,0xD,0xA
000139 2d2d
00013a 2d2d
00013b 2d2d
00013c 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00013d 5320
00013e 6174
00013f 7472
000140 5020      	.DB  0x20,0x53,0x74,0x61,0x72,0x74,0x20,0x50
000141 6f72
000142 7267
000143 6d61
000144 2d20      	.DB  0x72,0x6F,0x67,0x72,0x61,0x6D,0x20,0x2D
000145 2d2d
000146 2d2d
000147 2d2d
000148 0d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD
000149 000a
00014a 0a0d
00014b 2d2d
00014c 2d2d      	.DB  0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D,0x2D
00014d 2d2d
00014e 2d2d
00014f 4920
000150 6c64      	.DB  0x2D,0x2D,0x2D,0x2D,0x20,0x49,0x64,0x6C
000151 2065
000152 2d2d
000153 2d2d
000154 2d2d      	.DB  0x65,0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000155 2d2d
000156 0a0d
000157 0d00
000158 2d0a      	.DB  0x2D,0x2D,0xD,0xA,0x0,0xD,0xA,0x2D
000159 2d2d
00015a 2d2d
00015b 2d2d
00015c 202d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x20
00015d 4f50
00015e 2050
00015f 5645
000160 4e45      	.DB  0x50,0x4F,0x50,0x20,0x45,0x56,0x45,0x4E
000161 2054
000162 2d2d
000163 2d2d
000164 2d2d      	.DB  0x54,0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000165 2d2d
000166 0a0d
000167 0d00
000168 2d0a      	.DB  0x2D,0x2D,0xD,0xA,0x0,0xD,0xA,0x2D
000169 2d2d
00016a 2d2d
00016b 2d2d
00016c 202d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x20
00016d 6341
00016e 6974
00016f 6576
000170 2d20      	.DB  0x41,0x63,0x74,0x69,0x76,0x65,0x20,0x2D
000171 2d2d
000172 2d2d
000173 2d2d
000174 0d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD
000175 000a      	.DB  0xA,0x0
                 _0x20000:
000176 3025
000177 6435
000178 2020
000179 0020      	.DB  0x25,0x30,0x35,0x64,0x20,0x20,0x20,0x0
00017a 3025
00017b 5832
00017c 0020
00017d 6325      	.DB  0x25,0x30,0x32,0x58,0x20,0x0,0x25,0x63
00017e 2e00
00017f 0d00
000180 000a      	.DB  0x0,0x2E,0x0,0xD,0xA,0x0
                 _0x60000:
000181 4157
000182 4e52
000183 4e49
000184 2047      	.DB  0x57,0x41,0x52,0x4E,0x49,0x4E,0x47,0x20
000185 203a
000186 4155
000187 5452
000188 2030      	.DB  0x3A,0x20,0x55,0x41,0x52,0x54,0x30,0x20
000189 5542
00018a 4646
00018b 5245
00018c 4f20      	.DB  0x42,0x55,0x46,0x46,0x45,0x52,0x20,0x4F
00018d 4556
00018e 4652
00018f 4f4c
000190 2057      	.DB  0x56,0x45,0x52,0x46,0x4C,0x4F,0x57,0x20
000191 6425
000192 0a0d
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1222): warning: .cseg .db misalignment - padding zero byte
000193 0000      	.DB  0x25,0x64,0xD,0xA,0x0
                 _0x80003:
000194 007e
000195 0804
000196 4101
000197 6c49      	.DB  0x7E,0x0,0x4,0x8,0x1,0x41,0x49,0x6C
                 _0x80004:
000198 007e
000199 0804
00019a 5301
00019b 574c      	.DB  0x7E,0x0,0x4,0x8,0x1,0x53,0x4C,0x57
                 _0x80005:
00019c 007e
00019d 0804
00019e 5301
00019f 5b48      	.DB  0x7E,0x0,0x4,0x8,0x1,0x53,0x48,0x5B
                 _0x80000:
0001a0 0a0d
0001a1 2b20
0001a2 2b2b
0001a3 2b2b      	.DB  0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
0001a4 2b2b
0001a5 2b2b
0001a6 202b
0001a7 6553      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x65
0001a8 646e
0001a9 4120
0001aa 2049
0001ab 2b2b      	.DB  0x6E,0x64,0x20,0x41,0x49,0x20,0x2B,0x2B
0001ac 2b2b
0001ad 2b2b
0001ae 2b2b
0001af 0a0d      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA
0001b0 0d00
0001b1 200a
0001b2 2b2b
0001b3 2b2b      	.DB  0x0,0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B
0001b4 2b2b
0001b5 2b2b
0001b6 2b2b
0001b7 5320      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53
0001b8 6e65
0001b9 2064
0001ba 4853
0001bb 2b20      	.DB  0x65,0x6E,0x64,0x20,0x53,0x48,0x20,0x2B
0001bc 2b2b
0001bd 2b2b
0001be 2b2b
0001bf 0d2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD
0001c0 000a
0001c1 0a0d
0001c2 2b20
0001c3 2b2b      	.DB  0xA,0x0,0xD,0xA,0x20,0x2B,0x2B,0x2B
0001c4 2b2b
0001c5 2b2b
0001c6 2b2b
0001c7 202b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
0001c8 6553
0001c9 646e
0001ca 5320
0001cb 204c      	.DB  0x53,0x65,0x6E,0x64,0x20,0x53,0x4C,0x20
0001cc 2b2b
0001cd 2b2b
0001ce 2b2b
0001cf 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0001d0 0a0d
0001d1 0d00
0001d2 200a
0001d3 2b2b      	.DB  0xD,0xA,0x0,0xD,0xA,0x20,0x2B,0x2B
0001d4 2b2b
0001d5 2b2b
0001d6 2b2b
0001d7 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0001d8 5220
0001d9 6365
0001da 6572
0001db 7669      	.DB  0x20,0x52,0x65,0x63,0x72,0x65,0x69,0x76
0001dc 2065
0001dd 6144
0001de 6174
0001df 2b20      	.DB  0x65,0x20,0x44,0x61,0x74,0x61,0x20,0x2B
0001e0 2b2b
0001e1 2b2b
0001e2 2b2b
0001e3 0d2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD
0001e4 000a      	.DB  0xA,0x0
                 _0xC0003:
0001e5 007e
0001e6 1023
0001e7 0001
0001e8 0000      	.DB  0x7E,0x0,0x23,0x10,0x1,0x0,0x0,0x0
0001e9 0000
0001ea 0000
0001eb ff00
0001ec 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
0001ed 3000
0001ee 0000
0001ef 0000
0001f0 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
0001f1 0000
0001f2 0000
0001f3 0000
0001f4 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001f5 0000
0001f6 007e
0001f7 a101      	.DB  0x0,0x0,0x7E,0x0,0x1,0xA1
                 _0xC0004:
0001f8 007e
0001f9 1023
0001fa 0001
0001fb 0000      	.DB  0x7E,0x0,0x23,0x10,0x1,0x0,0x0,0x0
0001fc 0000
0001fd 0000
0001fe ff00
0001ff 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
000200 3000
000201 0000
000202 0000
000203 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
000204 0000
000205 0000
000206 0000
000207 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000208 0000
000209 007e
00020a a401      	.DB  0x0,0x0,0x7E,0x0,0x1,0xA4
                 _0xC0005:
00020b 007e
00020c 1025
00020d 0001
00020e 0000      	.DB  0x7E,0x0,0x25,0x10,0x1,0x0,0x0,0x0
00020f 0000
000210 0000
000211 ff00
000212 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
000213 3000
000214 0000
000215 0000
000216 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
000217 0000
000218 0000
000219 0000
00021a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00021b 0000
00021c 007e
00021d a501
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1265): warning: .cseg .db misalignment - padding zero byte
00021e 0001      	.DB  0x0,0x0,0x7E,0x0,0x1,0xA5,0x1
                 _0xC0006:
00021f 007e
000220 1048
000221 0001
000222 0000      	.DB  0x7E,0x0,0x48,0x10,0x1,0x0,0x0,0x0
000223 0000
000224 0000
000225 ff00
000226 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
000227 3000
000228 0000
000229 0000
00022a 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
00022b 0000
00022c 0000
00022d 0000
00022e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00022f 0000
000230 007e
000231 a726
000232 0101      	.DB  0x0,0x0,0x7E,0x0,0x26,0xA7,0x1,0x1
000233 0000
000234 0000
000235 0000
000236 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000237 0002
000238 0000
000239 0000
00023a 0000      	.DB  0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00023b 0300
00023c 0000
00023d 0000
00023e 0000      	.DB  0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0
00023f 0000
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1275): warning: .cseg .db misalignment - padding zero byte
000240 0004      	.DB  0x0,0x0,0x4
                 _0xC0000:
000241 0a0d
000242 2b20
000243 2b2b
000244 2b2b      	.DB  0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
000245 2b2b
000246 2b2b
000247 202b
000248 6553      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x65
000249 646e
00024a 4c20
00024b 4445
00024c 2b20      	.DB  0x6E,0x64,0x20,0x4C,0x45,0x44,0x20,0x2B
00024d 2b2b
00024e 2b2b
00024f 2b2b
000250 0d2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD
000251 000a
000252 0a0d
000253 2b20
000254 2b2b      	.DB  0xA,0x0,0xD,0xA,0x20,0x2B,0x2B,0x2B
000255 2b2b
000256 2b2b
000257 2b2b
000258 202b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
000259 6553
00025a 646e
00025b 4a20
00025c 696f      	.DB  0x53,0x65,0x6E,0x64,0x20,0x4A,0x6F,0x69
00025d 206e
00025e 2b2b
00025f 2b2b
000260 2b2b      	.DB  0x6E,0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000261 2b2b
000262 0a0d
000263 0d00
000264 200a      	.DB  0x2B,0x2B,0xD,0xA,0x0,0xD,0xA,0x20
000265 2b2b
000266 2b2b
000267 2b2b
000268 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000269 2b2b
00026a 5320
00026b 6e65
00026c 2064      	.DB  0x2B,0x2B,0x20,0x53,0x65,0x6E,0x64,0x20
00026d 6950
00026e 676e
00026f 2b20
000270 2b2b      	.DB  0x50,0x69,0x6E,0x67,0x20,0x2B,0x2B,0x2B
000271 2b2b
000272 2b2b
000273 0d2b
000274 000a      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0
000275 0a0d
000276 2b20
000277 2b2b
000278 2b2b      	.DB  0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
000279 2b2b
00027a 2b2b
00027b 202b
00027c 6553      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x65
00027d 646e
00027e 4520
00027f 4556
000280 544e      	.DB  0x6E,0x64,0x20,0x45,0x56,0x45,0x4E,0x54
000281 5220
000282 4345
000283 5649
000284 2045      	.DB  0x20,0x52,0x45,0x43,0x49,0x56,0x45,0x20
000285 2b2b
000286 2b2b
000287 2b2b
000288 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000289 0a0d
00028a 0d00
00028b 200a
00028c 2b2b      	.DB  0xD,0xA,0x0,0xD,0xA,0x20,0x2B,0x2B
00028d 2b2b
00028e 2b2b
00028f 2b2b
000290 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000291 5320
000292 6e65
000293 2064
000294 4552      	.DB  0x20,0x53,0x65,0x6E,0x64,0x20,0x52,0x45
000295 4f50
000296 5452
000297 2b20
000298 2b2b      	.DB  0x50,0x4F,0x52,0x54,0x20,0x2B,0x2B,0x2B
000299 2b2b
00029a 2b2b
00029b 0d2b
00029c 000a      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0
00029d 0a0d
00029e 3d3d
00029f 3d3d
0002a0 3d3d      	.DB  0xD,0xA,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002a1 3d3d
0002a2 3d3d
0002a3 3d3d
0002a4 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002a5 3d3d
0002a6 3d3d
0002a7 3d3d
0002a8 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002a9 3d3d
0002aa 3d3d
0002ab 3d3d
0002ac 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002ad 3d3d
0002ae 3d3d
0002af 3d3d
0002b0 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002b1 3d3d
0002b2 3d3d
0002b3 3d3d
0002b4 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002b5 3d3d
0002b6 3d3d
0002b7 3d3d
0002b8 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002b9 0a0d
0002ba 5600
0002bb 7573
0002bc 206d      	.DB  0xD,0xA,0x0,0x56,0x73,0x75,0x6D,0x20
0002bd 203d
0002be 3025
0002bf 342e
0002c0 2066      	.DB  0x3D,0x20,0x25,0x30,0x2E,0x34,0x66,0x20
0002c1 0020
0002c2 7349
0002c3 6d75
0002c4 3d20      	.DB  0x20,0x0,0x49,0x73,0x75,0x6D,0x20,0x3D
0002c5 2520
0002c6 2e30
0002c7 6634
0002c8 2020      	.DB  0x20,0x25,0x30,0x2E,0x34,0x66,0x20,0x20
0002c9 5000
0002ca 7573
0002cb 206d
0002cc 203d      	.DB  0x0,0x50,0x73,0x75,0x6D,0x20,0x3D,0x20
0002cd 3025
0002ce 342e
0002cf 0d66
0002d0 000a      	.DB  0x25,0x30,0x2E,0x34,0x66,0xD,0xA,0x0
0002d1 6156
0002d2 6776
0002d3 3d20
0002d4 2520      	.DB  0x56,0x61,0x76,0x67,0x20,0x3D,0x20,0x25
0002d5 2e30
0002d6 6634
0002d7 2020
0002d8 0020      	.DB  0x30,0x2E,0x34,0x66,0x20,0x20,0x20,0x0
0002d9 6149
0002da 6776
0002db 3d20
0002dc 2520      	.DB  0x49,0x61,0x76,0x67,0x20,0x3D,0x20,0x25
0002dd 2e30
0002de 6634
0002df 2020
0002e0 0020      	.DB  0x30,0x2E,0x34,0x66,0x20,0x20,0x20,0x0
0002e1 6150
0002e2 6776
0002e3 3d20
0002e4 2520      	.DB  0x50,0x61,0x76,0x67,0x20,0x3D,0x20,0x25
0002e5 2e30
0002e6 6634
0002e7 0a0d
0002e8 5700      	.DB  0x30,0x2E,0x34,0x66,0xD,0xA,0x0,0x57
0002e9 7461
0002ea 2d74
0002eb 6f48
0002ec 7275      	.DB  0x61,0x74,0x74,0x2D,0x48,0x6F,0x75,0x72
0002ed 5320
0002ee 6d75
0002ef 3d20
0002f0 2520      	.DB  0x20,0x53,0x75,0x6D,0x20,0x3D,0x20,0x25
0002f1 2e30
0002f2 6634
0002f3 0a0d
0002f4 4e00      	.DB  0x30,0x2E,0x34,0x66,0xD,0xA,0x0,0x4E
0002f5 6d75
0002f6 6562
0002f7 2072
0002f8 6153      	.DB  0x75,0x6D,0x62,0x65,0x72,0x20,0x53,0x61
0002f9 706d
0002fa 696c
0002fb 676e
0002fc 3d20      	.DB  0x6D,0x70,0x6C,0x69,0x6E,0x67,0x20,0x3D
0002fd 2520
0002fe 0d64
0002ff 000a
000300 3d3d      	.DB  0x20,0x25,0x64,0xD,0xA,0x0,0x3D,0x3D
000301 3d3d
000302 3d3d
000303 3d3d
000304 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000305 3d3d
000306 3d3d
000307 3d3d
000308 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000309 3d3d
00030a 3d3d
00030b 3d3d
00030c 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00030d 3d3d
00030e 3d3d
00030f 3d3d
000310 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000311 3d3d
000312 3d3d
000313 3d3d
000314 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000315 3d3d
000316 3d3d
000317 3d3d
000318 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000319 3d3d
00031a 3d3d
00031b 0a0d
00031c 0a0d      	.DB  0x3D,0x3D,0x3D,0x3D,0xD,0xA,0xD,0xA
00031d 4300
00031e 7275
00031f 6572
000320 746e      	.DB  0x0,0x43,0x75,0x72,0x72,0x65,0x6E,0x74
000321 4520
000322 6378
000323 6565
000324 2064      	.DB  0x20,0x45,0x78,0x63,0x65,0x65,0x64,0x20
000325 2d2d
000326 5753
000327 5449
000328 4843      	.DB  0x2D,0x2D,0x53,0x57,0x49,0x54,0x43,0x48
000329 4f20
00032a 4646
00032b 0d21
00032c 000a      	.DB  0x20,0x4F,0x46,0x46,0x21,0xD,0xA,0x0
                 _0xE0003:
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1337): warning: .cseg .db misalignment - padding zero byte
00032d 0040      	.DB  0x40
                 _0x100003:
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1339): warning: .cseg .db misalignment - padding zero byte
00032e 0005      	.DB  0x5
                 _0x120003:
00032f 4000
000330 451c      	.DB  0x0,0x40,0x1C,0x45
                 _0x120000:
000331 4441
000332 2043
000333 203d
000334 6425      	.DB  0x41,0x44,0x43,0x20,0x3D,0x20,0x25,0x64
000335 0a0d
000336 5600
000337 6c6f
000338 2074      	.DB  0xD,0xA,0x0,0x56,0x6F,0x6C,0x74,0x20
000339 203d
00033a 6625
00033b 0a0d
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1345): warning: .cseg .db misalignment - padding zero byte
00033c 0000      	.DB  0x3D,0x20,0x25,0x66,0xD,0xA,0x0
                 _0x140000:
00033d 5645
00033e 4e45
00033f 2054
000340 203d      	.DB  0x45,0x56,0x45,0x4E,0x54,0x20,0x3D,0x20
000341 6425
000342 0a0d
000343 6300
000344 756f      	.DB  0x25,0x64,0xD,0xA,0x0,0x63,0x6F,0x75
000345 746e
000346 655f
000347 6576
000348 746e      	.DB  0x6E,0x74,0x5F,0x65,0x76,0x65,0x6E,0x74
000349 3d20
00034a 2520
00034b 0d64
00034c 000a      	.DB  0x20,0x3D,0x20,0x25,0x64,0xD,0xA,0x0
00034d 0a0d
00034e 2d2d
00034f 2d2d
000350 2d2d      	.DB  0xD,0xA,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000351 2d2d
000352 4a20
000353 494f
000354 544e      	.DB  0x2D,0x2D,0x20,0x4A,0x4F,0x49,0x4E,0x54
000355 5320
000356 4355
000357 4543
000358 5353      	.DB  0x20,0x53,0x55,0x43,0x43,0x45,0x53,0x53
000359 2d20
00035a 2d2d
00035b 2d2d
00035c 2d2d      	.DB  0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00035d 0d2d
00035e 000a
00035f 0a0d
000360 2d2d      	.DB  0x2D,0xD,0xA,0x0,0xD,0xA,0x2D,0x2D
000361 2d2d
000362 2d2d
000363 2d2d
000364 5220      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x20,0x52
000365 4345
000366 5649
000367 2045
000368 4950      	.DB  0x45,0x43,0x49,0x56,0x45,0x20,0x50,0x49
000369 474e
00036a 2d20
00036b 2d2d
00036c 2d2d      	.DB  0x4E,0x47,0x20,0x2D,0x2D,0x2D,0x2D,0x2D
00036d 2d2d
00036e 0d2d
00036f 000a
000370 0a0d      	.DB  0x2D,0x2D,0x2D,0xD,0xA,0x0,0xD,0xA
000371 2b20
000372 2b2b
000373 2b2b
000374 2b2b      	.DB  0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000375 2b2b
000376 202b
000377 655f
000378 6576      	.DB  0x2B,0x2B,0x2B,0x20,0x5F,0x65,0x76,0x65
000379 746e
00037a 3d20
00037b 203d
00037c 3135      	.DB  0x6E,0x74,0x20,0x3D,0x3D,0x20,0x35,0x31
00037d 2030
00037e 7c7c
00037f 5f20
000380 7665      	.DB  0x30,0x20,0x7C,0x7C,0x20,0x5F,0x65,0x76
000381 6e65
000382 2074
000383 3d3d
000384 3520      	.DB  0x65,0x6E,0x74,0x20,0x3D,0x3D,0x20,0x35
000385 3131
000386 2b20
000387 2b2b
000388 2b2b      	.DB  0x31,0x31,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
000389 2b2b
00038a 0d2b
00038b 000a
00038c 0a0d      	.DB  0x2B,0x2B,0x2B,0xD,0xA,0x0,0xD,0xA
00038d 2d2d
00038e 2d2d
00038f 2d2d
000390 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000391 5220
000392 4345
000393 5649
000394 2045      	.DB  0x20,0x52,0x45,0x43,0x49,0x56,0x45,0x20
000395 5645
000396 4e45
000397 2054
000398 2d2d      	.DB  0x45,0x56,0x45,0x4E,0x54,0x20,0x2D,0x2D
000399 2d2d
00039a 2d2d
00039b 2d2d
00039c 0a0d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD,0xA
00039d 0d00
00039e 200a
00039f 2b2b
0003a0 2b2b      	.DB  0x0,0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B
0003a1 2b2b
0003a2 2b2b
0003a3 2b2b
0003a4 5f20      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x5F
0003a5 7665
0003a6 6e65
0003a7 2074
0003a8 3d3d      	.DB  0x65,0x76,0x65,0x6E,0x74,0x20,0x3D,0x3D
0003a9 3520
0003aa 3031
0003ab 2030
0003ac 7c7c      	.DB  0x20,0x35,0x31,0x30,0x30,0x20,0x7C,0x7C
0003ad 5f20
0003ae 7665
0003af 6e65
0003b0 2074      	.DB  0x20,0x5F,0x65,0x76,0x65,0x6E,0x74,0x20
0003b1 3d3d
0003b2 3520
0003b3 3131
0003b4 2030      	.DB  0x3D,0x3D,0x20,0x35,0x31,0x31,0x30,0x20
0003b5 2b2b
0003b6 2b2b
0003b7 2b2b
0003b8 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0003b9 0a0d
0003ba 0d00
0003bb 2d0a
0003bc 2d2d      	.DB  0xD,0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D
0003bd 2d2d
0003be 2d2d
0003bf 202d
0003c0 4553      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x20,0x53,0x45
0003c1 444e
0003c2 4520
0003c3 4556
0003c4 544e      	.DB  0x4E,0x44,0x20,0x45,0x56,0x45,0x4E,0x54
0003c5 5320
0003c6 4355
0003c7 4543
0003c8 5353      	.DB  0x20,0x53,0x55,0x43,0x43,0x45,0x53,0x53
0003c9 2d20
0003ca 2d2d
0003cb 2d2d
0003cc 2d2d      	.DB  0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
0003cd 0d2d
0003ce 000a
0003cf 0a0d
0003d0 2d2d      	.DB  0x2D,0xD,0xA,0x0,0xD,0xA,0x2D,0x2D
0003d1 2d2d
0003d2 2d2d
0003d3 2d2d
0003d4 5320      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x20,0x53
0003d5 4e45
0003d6 2044
0003d7 4552
0003d8 4f50      	.DB  0x45,0x4E,0x44,0x20,0x52,0x45,0x50,0x4F
0003d9 5452
0003da 5320
0003db 4355
0003dc 4543      	.DB  0x52,0x54,0x20,0x53,0x55,0x43,0x43,0x45
0003dd 5353
0003de 2d20
0003df 2d2d
0003e0 2d2d      	.DB  0x53,0x53,0x20,0x2D,0x2D,0x2D,0x2D,0x2D
0003e1 2d2d
0003e2 0d2d
0003e3 000a      	.DB  0x2D,0x2D,0x2D,0xD,0xA,0x0
                 _0x2000060:
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1390): warning: .cseg .db misalignment - padding zero byte
0003e4 0001      	.DB  0x1
                 _0x2000000:
0003e5 4e2d
0003e6 4e41
0003e7 4900
0003e8 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1393): warning: .cseg .db misalignment - padding zero byte
0003e9 0000      	.DB  0x0
                 _0x2020000:
0003ea 4e2d
0003eb 4e41
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1395): warning: .cseg .db misalignment - padding zero byte
0003ec 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 
                 __GLOBAL_INI_TBL:
0003ed 0001      	.DW  0x01
0003ee 0002      	.DW  0x02
0003ef 008c      	.DW  __REG_BIT_VARS*2
                 
0003f0 0004      	.DW  0x04
0003f1 0d00      	.DW  0xD00
0003f2 008e      	.DW  __HEAP_START_MARKER*2
                 
0003f3 000d      	.DW  0x0D
0003f4 08df      	.DW  _specData
0003f5 0092      	.DW  _0x3*2
                 
0003f6 0002      	.DW  0x02
0003f7 0008      	.DW  0x08
0003f8 00a0      	.DW  _0x4D*2
                 
0003f9 0008      	.DW  0x08
0003fa 08ec      	.DW  _AI_COMMAND
0003fb 0328      	.DW  _0x80003*2
                 
0003fc 0008      	.DW  0x08
0003fd 08f4      	.DW  _SL_COMMAND
0003fe 0330      	.DW  _0x80004*2
                 
0003ff 0008      	.DW  0x08
000400 08fc      	.DW  _SH_COMMAND
000401 0338      	.DW  _0x80005*2
                 
000402 0026      	.DW  0x26
000403 0904      	.DW  _JOIN_A1
000404 03ca      	.DW  _0xC0003*2
                 
000405 0026      	.DW  0x26
000406 092b      	.DW  _PING_A4
000407 03f0      	.DW  _0xC0004*2
                 
000408 0027      	.DW  0x27
000409 0952      	.DW  _SEND_EVENT_
00040a 0416      	.DW  _0xC0005*2
                 
00040b 0043      	.DW  0x43
00040c 097b      	.DW  _SEND_REPORT_
00040d 043e      	.DW  _0xC0006*2
                 
00040e 0001      	.DW  0x01
00040f 09e7      	.DW  _Vreferent
000410 065a      	.DW  _0xE0003*2
                 
000411 0001      	.DW  0x01
000412 089e      	.DW  _Eaddress
000413 065c      	.DW  _0x100003*2
                 
000414 0004      	.DW  0x04
000415 0840      	.DW  _avg
000416 065e      	.DW  _0x120003*2
                 
000417 0001      	.DW  0x01
000418 09e8      	.DW  __seed_G100
000419 07c8      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
00041a 0000      	.DW  0
                 
                 __RESET:
00041b 94f8      	CLI
00041c 27ee      	CLR  R30
00041d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00041e e0f1      	LDI  R31,1
00041f bff5      	OUT  MCUCR,R31
000420 bfe5      	OUT  MCUCR,R30
000421 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000423 e1f8      	LDI  R31,0x18
000424 bdf1      	OUT  WDTCR,R31
000425 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000426 e08d      	LDI  R24,(14-2)+1
000427 e0a2      	LDI  R26,2
000428 27bb      	CLR  R27
                 __CLEAR_REG:
000429 93ed      	ST   X+,R30
00042a 958a      	DEC  R24
00042b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00042c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00042d e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00042e e0a0      	LDI  R26,LOW(__SRAM_START)
00042f e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000430 93ed      	ST   X+,R30
000431 9701      	SBIW R24,1
000432 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000433 edea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000434 e0f7      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000435 9185      	LPM  R24,Z+
000436 9195      	LPM  R25,Z+
000437 9700      	SBIW R24,0
000438 f061      	BREQ __GLOBAL_INI_END
000439 91a5      	LPM  R26,Z+
00043a 91b5      	LPM  R27,Z+
00043b 9005      	LPM  R0,Z+
00043c 9015      	LPM  R1,Z+
00043d 01bf      	MOVW R22,R30
00043e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00043f 9005      	LPM  R0,Z+
000440 920d      	ST   X+,R0
000441 9701      	SBIW R24,1
000442 f7e1      	BRNE __GLOBAL_INI_LOOP
000443 01fb      	MOVW R30,R22
000444 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000445 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000446 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000447 bfed      	OUT  SPL,R30
000448 e0ec      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000449 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00044a e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00044b e0d6      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00044c 940c 0465 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x600
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Project         : Smart_Plug
                 ;Date            : 9/2017
                 ;Author          : Krerkkiat Hemadhulin
                 ;Company         : NextCrop Co.,Ltd.
                 ;Comments        :
                 ;Version Format  :
                 ;Chip type       : ATmega128a
                 ;Program type    : Application
                 ;Frequency       : 11.059200 MHz
                 ;*****************************************************/
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <sleep.h>
                 ;#include <io.h>
                 ;#include <math.h>
                 ;#include <initial_system.h>
                 ;#include <int_protocol.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <timer.h>
                 ;#include <adc.h>
                 ;#include <eeprom.h>
                 ;#include <meansure.h>
                 ;#include <queue.h>
                 ;#define SWITCH_PRESSED !(PINC & (1<<PINC0))
                 ;
                 ;uint8_t SWITCH          = TURN_OFF;
                 ;uint8_t specData[]      = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF};   // Specific Stucture of Join Req packet
                 
                 	.DSEG
                 ;uint8_t error;
                 ;int8_t read_D_SW;
                 ;int start_event;
                 ;int counter = 0;
                 ;//int e = 0;
                 ;//uint8_t SEND_EVENT_TEST[38];
                 ;
                 ;void device_state(int state){
                 ; 0000 002A void device_state(int state){
                 
                 	.CSEG
                 _device_state:
                 ; 0000 002B     if(state == 0){
00044e 940e 165e 	CALL SUBOPT_0x0
                 ;	state -> Y+0
000450 f429      	BRNE _0x4
                 ; 0000 002C         POWER_RELAY_OFF;
000451 940e 1664 	CALL SUBOPT_0x1
                 ; 0000 002D         LED_STAT_OFF;
000453 9aaf      	SBI  0x15,7
                 ; 0000 002E         STATUS_DEVICE = 0;
000454 e0e0      	LDI  R30,LOW(0)
000455 c00b      	RJMP _0x44
                 ; 0000 002F     }else if(state == 1){
                 _0x4:
000456 81a8      	LD   R26,Y
000457 81b9      	LDD  R27,Y+1
000458 9711      	SBIW R26,1
000459 f449      	BRNE _0x8
                 ; 0000 0030         POWER_RELAY_ON;
00045a 91e0 0065 	LDS  R30,101
00045c 60e4      	ORI  R30,4
00045d 93e0 0065 	STS  101,R30
                 ; 0000 0031         LED_STAT_ON;
00045f 98af      	CBI  0x15,7
                 ; 0000 0032         STATUS_DEVICE = 1;
000460 e0e1      	LDI  R30,LOW(1)
                 _0x44:
000461 93e0 0892 	STS  _STATUS_DEVICE,R30
                 ; 0000 0033     }
                 ; 0000 0034 }
                 _0x8:
000463 9622      	ADIW R28,2
000464 9508      	RET
                 ;
                 ;void main(void) {
                 ; 0000 0036 void main(void) {
                 _main:
                 ; 0000 0037 
                 ; 0000 0038     start_event = 0;
000465 2466      	CLR  R6
000466 2477      	CLR  R7
                 ; 0000 0039     STATUS_DEVICE = EEPROM_read(Eaddress);
000467 940e 166a 	CALL SUBOPT_0x2
                 ; 0000 003A     if(STATUS_DEVICE == 0xFF){
000469 91a0 0892 	LDS  R26,_STATUS_DEVICE
00046b 3faf      	CPI  R26,LOW(0xFF)
00046c f439      	BRNE _0xB
                 ; 0000 003B         EEPROM_write(Eaddress,0);
00046d 940e 1672 	CALL SUBOPT_0x3
00046f e0a0      	LDI  R26,LOW(0)
000470 940e 0dc8 	CALL _EEPROM_write
                 ; 0000 003C         STATUS_DEVICE = EEPROM_read(Eaddress);
000472 940e 166a 	CALL SUBOPT_0x2
                 ; 0000 003D     }
                 ; 0000 003E 
                 ; 0000 003F     /*=============== System Initialize ===============*/
                 ; 0000 0040     do{ error = initial_system(); }while(error);
                 _0xB:
                 _0xD:
000474 940e 0a4a 	CALL _initial_system
000476 2e5e      	MOV  R5,R30
000477 2055      	TST  R5
000478 f7d9      	BRNE _0xD
                 ; 0000 0041 
                 ; 0000 0042     /*=============== Select Device Type ===============*/
                 ; 0000 0043 
                 ; 0000 0044     do {
                 _0x10:
                 ; 0000 0045         read_D_SW = read_dSwitch();
000479 940e 0a81 	CALL _read_dSwitch
00047b 2e4e      	MOV  R4,R30
                 ; 0000 0046         if(read_D_SW == 0x0F) {
00047c e0ef      	LDI  R30,LOW(15)
00047d 15e4      	CP   R30,R4
00047e f531      	BRNE _0x12
                 ; 0000 0047             SENSOR_SENSITIVE = SENSOR5A;
00047f 940e 1678 	CALL SUBOPT_0x4
                 ; 0000 0048             if((ADJ0_SENSOR5A > 0.0) && (ADJ0_SENSOR5A < 0.12)) {
000481 940e 1689 	CALL SUBOPT_0x5
000483 f44c      	BRGE _0x14
000484 01df      	MOVW R26,R30
000485 01cb      	MOVW R24,R22
                +
000486 e8ef     +LDI R30 , LOW ( 0x3DF5C28F )
000487 ecf2     +LDI R31 , HIGH ( 0x3DF5C28F )
000488 ef65     +LDI R22 , BYTE3 ( 0x3DF5C28F )
000489 e37d     +LDI R23 , BYTE4 ( 0x3DF5C28F )
                 	__GETD1N 0x3DF5C28F
00048a 940e 1bf9 	CALL __CMPF12
00048c f008      	BRLO _0x15
                 _0x14:
00048d c005      	RJMP _0x13
                 _0x15:
                 ; 0000 0049                 AMP_ADJ_ZERO = ADJ0_SENSOR5A;
00048e e0a0      	LDI  R26,LOW(_ADJ0_SENSOR5A)
00048f e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR5A)
000490 940e 1d32 	CALL __EEPROMRDD
000492 c004      	RJMP _0x45
                 ; 0000 004A             }else {AMP_ADJ_ZERO = 0.09;}
                 _0x13:
                +
000493 eeec     +LDI R30 , LOW ( 0x3DB851EC )
000494 e5f1     +LDI R31 , HIGH ( 0x3DB851EC )
000495 eb68     +LDI R22 , BYTE3 ( 0x3DB851EC )
000496 e37d     +LDI R23 , BYTE4 ( 0x3DB851EC )
                 	__GETD1N 0x3DB851EC
                 _0x45:
000497 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
000499 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
00049b 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
00049d 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 004B             specData[8] = TYPE_SMART_SWITCH;                             // Device Type
00049f e1e2      	LDI  R30,LOW(18)
                +
0004a0 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 004C             printDebug("\r\n++++++++++ Smart Switch ++++++++++\r\n");
                +
0004a2 eae2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0004a3 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0004a4 c081      	RJMP _0x46
                 ; 0000 004D             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                 ; 0000 004E             printDebug("Current Sensor   : ACS712ELCTR-05B-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                 ; 0000 004F         }else if(read_D_SW == 0x0E) {
                 _0x12:
0004a5 e0ee      	LDI  R30,LOW(14)
0004a6 15e4      	CP   R30,R4
0004a7 f591      	BRNE _0x18
                 ; 0000 0050             SENSOR_SENSITIVE = SENSOR20A;
                +
0004a8 e0e0     +LDI R30 , LOW ( 0x42C80000 )
0004a9 e0f0     +LDI R31 , HIGH ( 0x42C80000 )
0004aa ec68     +LDI R22 , BYTE3 ( 0x42C80000 )
0004ab e472     +LDI R23 , BYTE4 ( 0x42C80000 )
                 	__GETD1N 0x42C80000
0004ac 940e 168e 	CALL SUBOPT_0x6
                 ; 0000 0051             if((ADJ0_SENSOR20A > 0.0) && (ADJ0_SENSOR20A < 0.14)) {
0004ae e0a4      	LDI  R26,LOW(_ADJ0_SENSOR20A)
0004af e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR20A)
0004b0 940e 1d32 	CALL __EEPROMRDD
0004b2 940e 1689 	CALL SUBOPT_0x5
0004b4 f44c      	BRGE _0x1A
0004b5 01df      	MOVW R26,R30
0004b6 01cb      	MOVW R24,R22
                +
0004b7 e2e9     +LDI R30 , LOW ( 0x3E0F5C29 )
0004b8 e5fc     +LDI R31 , HIGH ( 0x3E0F5C29 )
0004b9 e06f     +LDI R22 , BYTE3 ( 0x3E0F5C29 )
0004ba e37e     +LDI R23 , BYTE4 ( 0x3E0F5C29 )
                 	__GETD1N 0x3E0F5C29
0004bb 940e 1bf9 	CALL __CMPF12
0004bd f008      	BRLO _0x1B
                 _0x1A:
0004be c005      	RJMP _0x19
                 _0x1B:
                 ; 0000 0052                 AMP_ADJ_ZERO = ADJ0_SENSOR20A;
0004bf e0a4      	LDI  R26,LOW(_ADJ0_SENSOR20A)
0004c0 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR20A)
0004c1 940e 1d32 	CALL __EEPROMRDD
0004c3 c004      	RJMP _0x47
                 ; 0000 0053             }else {AMP_ADJ_ZERO = 0.11;}
                 _0x19:
                +
0004c4 eaee     +LDI R30 , LOW ( 0x3DE147AE )
0004c5 e4f7     +LDI R31 , HIGH ( 0x3DE147AE )
0004c6 ee61     +LDI R22 , BYTE3 ( 0x3DE147AE )
0004c7 e37d     +LDI R23 , BYTE4 ( 0x3DE147AE )
                 	__GETD1N 0x3DE147AE
                 _0x47:
0004c8 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
0004ca 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
0004cc 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
0004ce 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 0054             specData[8] = TYPE_SMART_PLUG;                               // Device Type
0004d0 e1e1      	LDI  R30,LOW(17)
                +
0004d1 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 0055             printDebug("\r\n++++++++++ Smart Plug ++++++++++\r\n");
                +
0004d3 e1ed     +LDI R30 , LOW ( 2 * _0x0 + ( 123 ) )
0004d4 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 123 ) )
                 	__POINTW1FN _0x0,123
0004d5 940e 1697 	CALL SUBOPT_0x7
                 ; 0000 0056             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                 ; 0000 0057             printDebug("Current Sensor   : ACS712ELCTR-20A-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
0004d7 e4e2     +LDI R30 , LOW ( 2 * _0x0 + ( 160 ) )
0004d8 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 160 ) )
                 	__POINTW1FN _0x0,160
0004d9 c05b      	RJMP _0x48
                 ; 0000 0058         }else if(read_D_SW == 0x0D) {
                 _0x18:
0004da e0ed      	LDI  R30,LOW(13)
0004db 15e4      	CP   R30,R4
0004dc f591      	BRNE _0x1E
                 ; 0000 0059             SENSOR_SENSITIVE = SENSOR30A;
                +
0004dd e0e0     +LDI R30 , LOW ( 0x42840000 )
0004de e0f0     +LDI R31 , HIGH ( 0x42840000 )
0004df e864     +LDI R22 , BYTE3 ( 0x42840000 )
0004e0 e472     +LDI R23 , BYTE4 ( 0x42840000 )
                 	__GETD1N 0x42840000
0004e1 940e 168e 	CALL SUBOPT_0x6
                 ; 0000 005A             if((ADJ0_SENSOR30A > 0.0) && (ADJ0_SENSOR30A < 0.15)) {
0004e3 e0a8      	LDI  R26,LOW(_ADJ0_SENSOR30A)
0004e4 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR30A)
0004e5 940e 1d32 	CALL __EEPROMRDD
0004e7 940e 1689 	CALL SUBOPT_0x5
0004e9 f44c      	BRGE _0x20
0004ea 01df      	MOVW R26,R30
0004eb 01cb      	MOVW R24,R22
                +
0004ec e9ea     +LDI R30 , LOW ( 0x3E19999A )
0004ed e9f9     +LDI R31 , HIGH ( 0x3E19999A )
0004ee e169     +LDI R22 , BYTE3 ( 0x3E19999A )
0004ef e37e     +LDI R23 , BYTE4 ( 0x3E19999A )
                 	__GETD1N 0x3E19999A
0004f0 940e 1bf9 	CALL __CMPF12
0004f2 f008      	BRLO _0x21
                 _0x20:
0004f3 c005      	RJMP _0x1F
                 _0x21:
                 ; 0000 005B                 AMP_ADJ_ZERO = ADJ0_SENSOR30A;
0004f4 e0a8      	LDI  R26,LOW(_ADJ0_SENSOR30A)
0004f5 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR30A)
0004f6 940e 1d32 	CALL __EEPROMRDD
0004f8 c004      	RJMP _0x49
                 ; 0000 005C             }else {AMP_ADJ_ZERO = 0.12;}
                 _0x1F:
                +
0004f9 e8ef     +LDI R30 , LOW ( 0x3DF5C28F )
0004fa ecf2     +LDI R31 , HIGH ( 0x3DF5C28F )
0004fb ef65     +LDI R22 , BYTE3 ( 0x3DF5C28F )
0004fc e37d     +LDI R23 , BYTE4 ( 0x3DF5C28F )
                 	__GETD1N 0x3DF5C28F
                 _0x49:
0004fd 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
0004ff 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
000501 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
000503 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 005D             specData[8] = TYPE_SMART_BREAKER;                            // Device Type
000505 e1e3      	LDI  R30,LOW(19)
                +
000506 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 005E             printDebug("\r\n++++++++++ Smart Breaker ++++++++++\r\n");
                +
000508 e7e9     +LDI R30 , LOW ( 2 * _0x0 + ( 215 ) )
000509 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 215 ) )
                 	__POINTW1FN _0x0,215
00050a 940e 1697 	CALL SUBOPT_0x7
                 ; 0000 005F             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                 ; 0000 0060             printDebug("Current Sensor   : ACS712ELCTR-30A-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
00050c eae1     +LDI R30 , LOW ( 2 * _0x0 + ( 255 ) )
00050d e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 255 ) )
                 	__POINTW1FN _0x0,255
00050e c026      	RJMP _0x48
                 ; 0000 0061         }else if(read_D_SW < 0) {
                 _0x1E:
00050f e0e0      	LDI  R30,LOW(0)
000510 164e      	CP   R4,R30
000511 f42c      	BRGE _0x24
                 ; 0000 0062             printDebug("Read Dip-Switch ERROR!\r\n");
                +
000512 ede8     +LDI R30 , LOW ( 2 * _0x0 + ( 310 ) )
000513 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 310 ) )
                 	__POINTW1FN _0x0,310
000514 940e 16ac 	CALL SUBOPT_0x8
                 ; 0000 0063         }else {
000516 c024      	RJMP _0x25
                 _0x24:
                 ; 0000 0064             SENSOR_SENSITIVE = SENSOR5A;
000517 940e 1678 	CALL SUBOPT_0x4
                 ; 0000 0065             AMP_ADJ_ZERO = ADJ0_SENSOR5A;
000519 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
00051b 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
00051d 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
00051f 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 0066             specData[8] = TYPE_SMART_SWITCH;
000521 e1e2      	LDI  R30,LOW(18)
                +
000522 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 0067             printDebug("\r\n++++++++++ Default Type : Smart Switch ++++++++++\r\n");
                +
000524 efe1     +LDI R30 , LOW ( 2 * _0x0 + ( 335 ) )
000525 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 335 ) )
                 	__POINTW1FN _0x0,335
                 _0x46:
000526 93fa      	ST   -Y,R31
000527 93ea      	ST   -Y,R30
000528 e080      	LDI  R24,0
000529 d104      	RCALL _printDebug
00052a 9622      	ADIW R28,2
                 ; 0000 0068             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                +
00052b ece9     +LDI R30 , LOW ( 2 * _0x0 + ( 39 ) )
00052c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 39 ) )
                 	__POINTW1FN _0x0,39
00052d 93fa      	ST   -Y,R31
00052e 93ea      	ST   -Y,R30
00052f 940e 16b3 	CALL SUBOPT_0x9
000531 940e 16b8 	CALL SUBOPT_0xA
                 ; 0000 0069             printDebug("Current Sensor   : ACS712ELCTR-05B-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
000533 eee6     +LDI R30 , LOW ( 2 * _0x0 + ( 68 ) )
000534 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 68 ) )
                 	__POINTW1FN _0x0,68
                 _0x48:
000535 93fa      	ST   -Y,R31
000536 93ea      	ST   -Y,R30
000537 940e 16bf 	CALL SUBOPT_0xB
000539 940e 16b8 	CALL SUBOPT_0xA
                 ; 0000 006A         }
                 _0x25:
                 ; 0000 006B     }while(read_D_SW < 0);
00053b e0e0      	LDI  R30,LOW(0)
00053c 164e      	CP   R4,R30
00053d f40c      	BRGE _0x11
00053e cf3a      	RJMP _0x10
                 _0x11:
                 ; 0000 006C 
                 ; 0000 006D     /*=============== Current Measurement ===============*/
                 ; 0000 006E     printDebug("Current Measure  : > %0.2f Amp.\r\n", AMP_ADJ_ZERO);
                +
00053f e2e7     +LDI R30 , LOW ( 2 * _0x0 + ( 389 ) )
000540 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 389 ) )
                 	__POINTW1FN _0x0,389
000541 93fa      	ST   -Y,R31
000542 93ea      	ST   -Y,R30
000543 940e 16c8 	CALL SUBOPT_0xC
000545 940e 16b8 	CALL SUBOPT_0xA
                 ; 0000 006F 
                 ; 0000 0070 
                 ; 0000 0071     #asm("sei")    // Global enable interrupts
000547 9478      	sei
                 ; 0000 0072 
                 ; 0000 0073     printDebug("\r\n-------- Initial Complete --------\r\n");
                +
000548 e4e9     +LDI R30 , LOW ( 2 * _0x0 + ( 423 ) )
000549 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 423 ) )
                 	__POINTW1FN _0x0,423
00054a 940e 16ac 	CALL SUBOPT_0x8
                 ; 0000 0074     delay_ms(5000);
00054c e8a8      	LDI  R26,LOW(5000)
00054d e1b3      	LDI  R27,HIGH(5000)
00054e 940e 1a49 	CALL _delay_ms
                 ; 0000 0075 
                 ; 0000 0076     printDebug("\r\n-------- Start Program --------\r\n");
                +
000550 e7e0     +LDI R30 , LOW ( 2 * _0x0 + ( 462 ) )
000551 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 462 ) )
                 	__POINTW1FN _0x0,462
000552 940e 16ac 	CALL SUBOPT_0x8
                 ; 0000 0077     while(1) {
                 _0x26:
                 ; 0000 0078         xbee_read();
000554 940e 0a06 	CALL _xbee_read
                 ; 0000 0079 
                 ; 0000 007A //        if(counter%111 == 0 && counter >= 111){
                 ; 0000 007B //        if(e%2 == 0){
                 ; 0000 007C //            SEND_EVENT_TEST[2] = 0x90;
                 ; 0000 007D //            SEND_EVENT_TEST[3] = 0x90;
                 ; 0000 007E //            SEND_EVENT_TEST[35] = 0xA5;
                 ; 0000 007F //            SEND_EVENT_TEST[36] = 0x01;
                 ; 0000 0080 //            SEND_EVENT_TEST[37] = 0x01;
                 ; 0000 0081 //            xbee_receivePacket(SEND_EVENT_TEST,38);
                 ; 0000 0082 //        }else{
                 ; 0000 0083 //            SEND_EVENT_TEST[2] = 0x90;
                 ; 0000 0084 //            SEND_EVENT_TEST[3] = 0x90;
                 ; 0000 0085 //            SEND_EVENT_TEST[35] = 0xA5;
                 ; 0000 0086 //            SEND_EVENT_TEST[36] = 0x01;
                 ; 0000 0087 //            SEND_EVENT_TEST[37] = 0x00;
                 ; 0000 0088 //            xbee_receivePacket(SEND_EVENT_TEST,38);
                 ; 0000 0089 //       }
                 ; 0000 008A //       e++;
                 ; 0000 008B //}
                 ; 0000 008C         switch (flag_state) {
000556 91e0 062a 	LDS  R30,_flag_state
000558 91f0 062b 	LDS  R31,_flag_state+1
                 ; 0000 008D 
                 ; 0000 008E             /*=============== Send AI ===============*/
                 ; 0000 008F             case 0 :
00055a 9730      	SBIW R30,0
00055b f4c1      	BRNE _0x2C
                 ; 0000 0090                 xbee_sendATCommand(AI);
00055c 940e 16d1 	CALL SUBOPT_0xD
00055e 940e 16d4 	CALL SUBOPT_0xE
                 ; 0000 0091                 delay_ms(100);
                 ; 0000 0092 
                 ; 0000 0093                 /*=============== Check last state from eeprom ===============*/
                 ; 0000 0094 
                 ; 0000 0095                 if(STATUS_DEVICE == 1){
000560 91a0 0892 	LDS  R26,_STATUS_DEVICE
000562 30a1      	CPI  R26,LOW(0x1)
000563 f479      	BRNE _0x2D
                 ; 0000 0096                     delay_ms(100);
000564 940e 16da 	CALL SUBOPT_0xF
                 ; 0000 0097                     device_state(1);   //on
000566 940e 16de 	CALL SUBOPT_0x10
000568 940e 16e1 	CALL SUBOPT_0x11
                 ; 0000 0098                     EEPROM_write(Eaddress,STATUS_DEVICE);
00056a 940e 16e4 	CALL SUBOPT_0x12
                 ; 0000 0099                     start_event = 1;
00056c e0e1      	LDI  R30,LOW(1)
00056d e0f0      	LDI  R31,HIGH(1)
00056e 013f      	MOVW R6,R30
                 ; 0000 009A                     push_event(511);
00056f efaf      	LDI  R26,LOW(511)
000570 e0b1      	LDI  R27,HIGH(511)
000571 940e 0f67 	CALL _push_event
                 ; 0000 009B                 }
                 ; 0000 009C             break;
                 _0x2D:
000573 c0b8      	RJMP _0x2B
                 ; 0000 009D 
                 ; 0000 009E             /*=============== Send SH( High Bits MacAddress) ===============*/
                 ; 0000 009F             case 1 :
                 _0x2C:
000574 30e1      	CPI  R30,LOW(0x1)
000575 e0a0      	LDI  R26,HIGH(0x1)
000576 07fa      	CPC  R31,R26
000577 f429      	BRNE _0x2E
                 ; 0000 00A0                 xbee_sendATCommand(SH);
000578 940e 16de 	CALL SUBOPT_0x10
00057a 940e 16d4 	CALL SUBOPT_0xE
                 ; 0000 00A1                 delay_ms(100);
                 ; 0000 00A2             break;
00057c c0af      	RJMP _0x2B
                 ; 0000 00A3 
                 ; 0000 00A4             /*=============== Send SL( LOW Bits MacAddress) ===============*/
                 ; 0000 00A5             case 2 :
                 _0x2E:
00057d 30e2      	CPI  R30,LOW(0x2)
00057e e0a0      	LDI  R26,HIGH(0x2)
00057f 07fa      	CPC  R31,R26
000580 f429      	BRNE _0x2F
                 ; 0000 00A6                 xbee_sendATCommand(SL);
000581 940e 16e8 	CALL SUBOPT_0x13
000583 940e 16d4 	CALL SUBOPT_0xE
                 ; 0000 00A7                 delay_ms(100);
                 ; 0000 00A8             break;
000585 c0a6      	RJMP _0x2B
                 ; 0000 00A9 
                 ; 0000 00AA             /*=============== Send Join ===============*/
                 ; 0000 00AB             case 3 :
                 _0x2F:
000586 30e3      	CPI  R30,LOW(0x3)
000587 e0a0      	LDI  R26,HIGH(0x3)
000588 07fa      	CPC  R31,R26
000589 f541      	BRNE _0x30
                 ; 0000 00AC                 delay_ms(2000);
00058a eda0      	LDI  R26,LOW(2000)
00058b e0b7      	LDI  R27,HIGH(2000)
00058c 940e 1a49 	CALL _delay_ms
                 ; 0000 00AD                 send_join();
00058e 940e 0b77 	CALL _send_join
                 ; 0000 00AE                 delay_ms(100);
000590 940e 16da 	CALL SUBOPT_0xF
                 ; 0000 00AF 
                 ; 0000 00B0                 if(SWITCH_PRESSED){
000592 9998      	SBIC 0x13,0
000593 c01d      	RJMP _0x31
                 ; 0000 00B1                     delay_ms(100);
000594 940e 16da 	CALL SUBOPT_0xF
                 ; 0000 00B2                     if(STATUS_DEVICE == 0){
000596 91e0 0892 	LDS  R30,_STATUS_DEVICE
000598 30e0      	CPI  R30,0
000599 f449      	BRNE _0x32
                 ; 0000 00B3                         device_state(1);      //on
00059a 940e 16de 	CALL SUBOPT_0x10
00059c 940e 16e1 	CALL SUBOPT_0x11
                 ; 0000 00B4                         EEPROM_write(Eaddress,STATUS_DEVICE);
00059e 940e 16e4 	CALL SUBOPT_0x12
                 ; 0000 00B5                         push_event(5110);
0005a0 efa6      	LDI  R26,LOW(5110)
0005a1 e1b3      	LDI  R27,HIGH(5110)
0005a2 c00c      	RJMP _0x4A
                 ; 0000 00B6 
                 ; 0000 00B7                     }else if(STATUS_DEVICE == 1){
                 _0x32:
0005a3 91a0 0892 	LDS  R26,_STATUS_DEVICE
0005a5 30a1      	CPI  R26,LOW(0x1)
0005a6 f451      	BRNE _0x34
                 ; 0000 00B8                         device_state(0);      //off
0005a7 940e 16d1 	CALL SUBOPT_0xD
0005a9 940e 16e1 	CALL SUBOPT_0x11
                 ; 0000 00B9                         EEPROM_write(Eaddress,STATUS_DEVICE);
0005ab 940e 16e4 	CALL SUBOPT_0x12
                 ; 0000 00BA                         push_event(5100);
0005ad eeac      	LDI  R26,LOW(5100)
0005ae e1b3      	LDI  R27,HIGH(5100)
                 _0x4A:
0005af 940e 0f67 	CALL _push_event
                 ; 0000 00BB 
                 ; 0000 00BC                     }
                 ; 0000 00BD                 }
                 _0x34:
                 ; 0000 00BE             break;
                 _0x31:
0005b1 c07a      	RJMP _0x2B
                 ; 0000 00BF 
                 ; 0000 00C0             /*=============== Idle State ===============*/
                 ; 0000 00C1             case 4 :
                 _0x30:
0005b2 30e4      	CPI  R30,LOW(0x4)
0005b3 e0a0      	LDI  R26,HIGH(0x4)
0005b4 07fa      	CPC  R31,R26
0005b5 f011      	BREQ PC+3
0005b6 940c 05ff 	JMP _0x35
                 ; 0000 00C2                 printDebug("\r\n-------- Idle --------\r\n");
                +
0005b8 e9e4     +LDI R30 , LOW ( 2 * _0x0 + ( 498 ) )
0005b9 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 498 ) )
                 	__POINTW1FN _0x0,498
0005ba 940e 16ac 	CALL SUBOPT_0x8
                 ; 0000 00C3                 counter++;
0005bc 940e 16eb 	CALL SUBOPT_0x14
                 ; 0000 00C4                 if(counter%10 == 0 ){
0005be f431      	BRNE _0x36
                 ; 0000 00C5                     pop_event();
0005bf 940e 0f7a 	CALL _pop_event
                 ; 0000 00C6                     printDebug("\r\n-------- POP EVENT --------\r\n");
                +
0005c1 eaef     +LDI R30 , LOW ( 2 * _0x0 + ( 525 ) )
0005c2 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 525 ) )
                 	__POINTW1FN _0x0,525
0005c3 940e 16ac 	CALL SUBOPT_0x8
                 ; 0000 00C7                 }
                 ; 0000 00C8 
                 ; 0000 00C9                 if(start_event == 1){
                 _0x36:
0005c5 e0e1      	LDI  R30,LOW(1)
0005c6 e0f0      	LDI  R31,HIGH(1)
0005c7 15e6      	CP   R30,R6
0005c8 05f7      	CPC  R31,R7
0005c9 f499      	BRNE _0x37
                 ; 0000 00CA                     if(STATUS_DEVICE == 1){
0005ca 91a0 0892 	LDS  R26,_STATUS_DEVICE
0005cc 30a1      	CPI  R26,LOW(0x1)
0005cd f419      	BRNE _0x38
                 ; 0000 00CB                         flag_state = 5;
0005ce e0e5      	LDI  R30,LOW(5)
0005cf e0f0      	LDI  R31,HIGH(5)
0005d0 c006      	RJMP _0x4B
                 ; 0000 00CC                     }else if(STATUS_DEVICE == 0){
                 _0x38:
0005d1 91e0 0892 	LDS  R30,_STATUS_DEVICE
0005d3 30e0      	CPI  R30,0
0005d4 f431      	BRNE _0x3A
                 ; 0000 00CD                         flag_state = 4;
0005d5 e0e4      	LDI  R30,LOW(4)
0005d6 e0f0      	LDI  R31,HIGH(4)
                 _0x4B:
0005d7 93e0 062a 	STS  _flag_state,R30
0005d9 93f0 062b 	STS  _flag_state+1,R31
                 ; 0000 00CE                     }
                 ; 0000 00CF                     start_event = 0;
                 _0x3A:
0005db 2466      	CLR  R6
0005dc 2477      	CLR  R7
                 ; 0000 00D0                 }
                 ; 0000 00D1 
                 ; 0000 00D2 
                 ; 0000 00D3                 if(SWITCH_PRESSED){
                 _0x37:
0005dd 9998      	SBIC 0x13,0
0005de c01f      	RJMP _0x3B
                 ; 0000 00D4                     delay_ms(200);
0005df 940e 16f5 	CALL SUBOPT_0x15
                 ; 0000 00D5                        if(STATUS_DEVICE == 0){
0005e1 91e0 0892 	LDS  R30,_STATUS_DEVICE
0005e3 30e0      	CPI  R30,0
0005e4 f459      	BRNE _0x3C
                 ; 0000 00D6                             device_state(1);      //on
0005e5 940e 16de 	CALL SUBOPT_0x10
0005e7 940e 16e1 	CALL SUBOPT_0x11
                 ; 0000 00D7                             EEPROM_write(Eaddress,STATUS_DEVICE);
0005e9 940e 16e4 	CALL SUBOPT_0x12
                 ; 0000 00D8                             flag_state = 5;
0005eb 940e 16f9 	CALL SUBOPT_0x16
                 ; 0000 00D9                             //printDebug("count_input = %d\r\n", count_input);
                 ; 0000 00DA                             push_event(5110);
0005ed efa6      	LDI  R26,LOW(5110)
0005ee e1b3      	LDI  R27,HIGH(5110)
0005ef c00c      	RJMP _0x4C
                 ; 0000 00DB                        }else if(STATUS_DEVICE == 1){
                 _0x3C:
0005f0 91a0 0892 	LDS  R26,_STATUS_DEVICE
0005f2 30a1      	CPI  R26,LOW(0x1)
0005f3 f451      	BRNE _0x3E
                 ; 0000 00DC                             device_state(0);     //off
0005f4 940e 16d1 	CALL SUBOPT_0xD
0005f6 940e 16e1 	CALL SUBOPT_0x11
                 ; 0000 00DD                             EEPROM_write(Eaddress,STATUS_DEVICE);
0005f8 940e 16e4 	CALL SUBOPT_0x12
                 ; 0000 00DE                             flag_state = 4;
0005fa 940e 1700 	CALL SUBOPT_0x17
                 ; 0000 00DF                             //printDebug("count_input = %d\r\n", count_input);
                 ; 0000 00E0                             push_event(5100);
                 _0x4C:
0005fc 940e 0f67 	CALL _push_event
                 ; 0000 00E1                        }
                 ; 0000 00E2                 }
                 _0x3E:
                 ; 0000 00E3             break;
                 _0x3B:
0005fe c02d      	RJMP _0x2B
                 ; 0000 00E4 
                 ; 0000 00E5             /*=============== Active State ===============*/
                 ; 0000 00E6             case 5 :
                 _0x35:
0005ff 30e5      	CPI  R30,LOW(0x5)
000600 e0a0      	LDI  R26,HIGH(0x5)
000601 07fa      	CPC  R31,R26
000602 f549      	BRNE _0x2B
                 ; 0000 00E7             printDebug("\r\n-------- Active --------\r\n");
                +
000603 ecef     +LDI R30 , LOW ( 2 * _0x0 + ( 557 ) )
000604 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 557 ) )
                 	__POINTW1FN _0x0,557
000605 940e 16ac 	CALL SUBOPT_0x8
                 ; 0000 00E8                 ReadCurrent();
000607 940e 0de1 	CALL _ReadCurrent
                 ; 0000 00E9                 ReadVoltage();
000609 940e 0e57 	CALL _ReadVoltage
                 ; 0000 00EA 
                 ; 0000 00EB                 counter++;
00060b 940e 16eb 	CALL SUBOPT_0x14
                 ; 0000 00EC                 if(counter%10 == 0 ){
00060d f431      	BRNE _0x40
                 ; 0000 00ED                     printDebug("\r\n-------- POP EVENT --------\r\n");
                +
00060e eaef     +LDI R30 , LOW ( 2 * _0x0 + ( 525 ) )
00060f e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 525 ) )
                 	__POINTW1FN _0x0,525
000610 940e 16ac 	CALL SUBOPT_0x8
                 ; 0000 00EE                     pop_event();
000612 940e 0f7a 	CALL _pop_event
                 ; 0000 00EF                 }
                 ; 0000 00F0 
                 ; 0000 00F1 
                 ; 0000 00F2                 if(number == 1000){
                 _0x40:
000614 91a0 0830 	LDS  R26,_number
000616 91b0 0831 	LDS  R27,_number+1
000618 3ea8      	CPI  R26,LOW(0x3E8)
000619 e0e3      	LDI  R30,HIGH(0x3E8)
00061a 07be      	CPC  R27,R30
00061b f411      	BRNE _0x41
                 ; 0000 00F3                     SendStatusReport();
00061c 940e 0c62 	CALL _SendStatusReport
                 ; 0000 00F4                 }
                 ; 0000 00F5 
                 ; 0000 00F6                 if(SWITCH_PRESSED){
                 _0x41:
00061e 9998      	SBIC 0x13,0
00061f c00c      	RJMP _0x42
                 ; 0000 00F7                     delay_ms(200);
000620 940e 16f5 	CALL SUBOPT_0x15
                 ; 0000 00F8                     device_state(0); // off
000622 940e 16d1 	CALL SUBOPT_0xD
000624 940e 16e1 	CALL SUBOPT_0x11
                 ; 0000 00F9                     EEPROM_write(Eaddress,STATUS_DEVICE);
000626 940e 16e4 	CALL SUBOPT_0x12
                 ; 0000 00FA                     flag_state = 4;
000628 940e 1700 	CALL SUBOPT_0x17
                 ; 0000 00FB //                    printDebug("count_input = %d\r\n", count_input);
                 ; 0000 00FC                     push_event(5100);
00062a 940e 0f67 	CALL _push_event
                 ; 0000 00FD                 }
                 ; 0000 00FE             break;
                 _0x42:
                 ; 0000 00FF         }
                 _0x2B:
                 ; 0000 0100     }
00062c cf27      	RJMP _0x26
                 ; 0000 0101 }
                 _0x43:
00062d cfff      	RJMP _0x43
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <stdarg.h>
                 ;#include <ctype.h>
                 ;#include <stdint.h>
                 ;#include <debug.h>
                 ;#include <uart.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <adc.h>
                 ;#include <initial_system.h>
                 ;
                 ;/* ================================================================================= */
                 ;void printDebug(flash char *fmtstr, ...)
                 ; 0001 000E {
                 
                 	.CSEG
                 _printDebug:
00062e 92ff      	PUSH R15
00062f 2ef8      	MOV  R15,R24
                 ; 0001 000F     char textBuffer[256];
                 ; 0001 0010     va_list argptr;
                 ; 0001 0011 
                 ; 0001 0012     va_start(argptr, fmtstr);
000630 50d1      	SUBI R29,1
000631 931a      	ST   -Y,R17
000632 930a      	ST   -Y,R16
                 ;	*fmtstr -> Y+258
                 ;	textBuffer -> Y+2
                 ;	*argptr -> R16,R17
000633 01de      	MOVW R26,R28
000634 50a2      	SUBI R26,LOW(-(254))
000635 4fbf      	SBCI R27,HIGH(-(254))
000636 940e 1c50 	CALL __ADDW2R15
000638 018d      	MOVW R16,R26
                 ; 0001 0013     vsprintf(textBuffer,fmtstr,argptr);
000639 940e 1709 	CALL SUBOPT_0x18
00063b 01de      	MOVW R26,R28
00063c 5fac      	SUBI R26,LOW(-(260))
00063d 4fbe      	SBCI R27,HIGH(-(260))
00063e 940e 1c50 	CALL __ADDW2R15
000640 940e 1cf3 	CALL __GETW1P
000642 93fa      	ST   -Y,R31
000643 93ea      	ST   -Y,R30
000644 01d8      	MOVW R26,R16
000645 940e 144a 	CALL _vsprintf
                 ; 0001 0014     send_uart(0, textBuffer);
000647 e0e0      	LDI  R30,LOW(0)
000648 93ea      	ST   -Y,R30
000649 01de      	MOVW R26,R28
00064a 9613      	ADIW R26,3
00064b 940e 0829 	CALL _send_uart
                 ; 0001 0015     va_end(argptr);
                 ; 0001 0016 
                 ; 0001 0017     return;
00064d 8119      	LDD  R17,Y+1
00064e 8108      	LDD  R16,Y+0
00064f 9622      	ADIW R28,2
000650 5fdf      	SUBI R29,-1
000651 90ff      	POP  R15
000652 9508      	RET
                 ; 0001 0018 }
                 ;/* ================================================================================= */
                 ; void print_payload(const unsigned char *payload, int len) {
                 ; 0001 001A void print_payload(const unsigned char *payload, int len) {
                 _print_payload:
                 ; 0001 001B 
                 ; 0001 001C     int len_rem = len;
                 ; 0001 001D     int line_width = 16;            // number of bytes per line //
                 ; 0001 001E     int line_len;
                 ; 0001 001F     int offset = 0;                  // zero-based offset counter //
                 ; 0001 0020     const unsigned char *ch = payload;
                 ; 0001 0021 
                 ; 0001 0022     if (len <= 0)
000653 940e 170e 	CALL SUBOPT_0x19
000655 83ea      	STD  Y+2,R30
000656 e0e0      	LDI  R30,LOW(0)
000657 83eb      	STD  Y+3,R30
000658 940e 1d59 	CALL __SAVELOCR6
                 ;	*payload -> Y+12
                 ;	len -> Y+10
                 ;	len_rem -> R16,R17
                 ;	line_width -> R18,R19
                 ;	line_len -> R20,R21
                 ;	offset -> Y+8
                 ;	*ch -> Y+6
                +
00065a 850a     +LDD R16 , Y + 10
00065b 851b     +LDD R17 , Y + 10 + 1
                 	__GETWRS 16,17,10
                +
00065c e120     +LDI R18 , LOW ( 16 )
00065d e030     +LDI R19 , HIGH ( 16 )
                 	__GETWRN 18,19,16
00065e 85ec      	LDD  R30,Y+12
00065f 85fd      	LDD  R31,Y+12+1
000660 83ee      	STD  Y+6,R30
000661 83ff      	STD  Y+6+1,R31
000662 85aa      	LDD  R26,Y+10
000663 85bb      	LDD  R27,Y+10+1
000664 940e 1d4a 	CALL __CPW02
000666 f584      	BRGE _0x20C0012
                 ; 0001 0023         return;
                 ; 0001 0024 
                 ; 0001 0025     // data fits on one line //
                 ; 0001 0026     if (len <= line_width) {
000667 172a      	CP   R18,R26
000668 073b      	CPC  R19,R27
000669 f04c      	BRLT _0x20004
                 ; 0001 0027         print_hex_ascii_line(ch, len, offset);
00066a 940e 1713 	CALL SUBOPT_0x1A
00066c 85ec      	LDD  R30,Y+12
00066d 85fd      	LDD  R31,Y+12+1
00066e 93fa      	ST   -Y,R31
00066f 93ea      	ST   -Y,R30
000670 940e 1718 	CALL SUBOPT_0x1B
                 ; 0001 0028         return;
000672 c024      	RJMP _0x20C0012
                 ; 0001 0029     }
                 ; 0001 002A     // data spans multiple lines //
                 ; 0001 002B     for ( ;; ) {
                 _0x20004:
                 _0x20006:
                 ; 0001 002C         // compute current line length //
                 ; 0001 002D         line_len = line_width % len_rem;
000673 01f8      	MOVW R30,R16
000674 01d9      	MOVW R26,R18
000675 940e 1cc7 	CALL __MODW21
000677 01af      	MOVW R20,R30
                 ; 0001 002E         // print line //
                 ; 0001 002F         print_hex_ascii_line(ch, line_len, offset);
000678 940e 1713 	CALL SUBOPT_0x1A
00067a 935a      	ST   -Y,R21
00067b 934a      	ST   -Y,R20
00067c 940e 1718 	CALL SUBOPT_0x1B
                 ; 0001 0030         // compute total remaining //
                 ; 0001 0031         len_rem = len_rem - line_len;
                +
00067e 1b04     +SUB R16 , R20
00067f 0b15     +SBC R17 , R21
                 	__SUBWRR 16,17,20,21
                 ; 0001 0032         // shift pointer to remaining bytes to print //
                 ; 0001 0033         ch = ch + line_len;
000680 01fa      	MOVW R30,R20
000681 81ae      	LDD  R26,Y+6
000682 81bf      	LDD  R27,Y+6+1
000683 0fea      	ADD  R30,R26
000684 1ffb      	ADC  R31,R27
000685 83ee      	STD  Y+6,R30
000686 83ff      	STD  Y+6+1,R31
                 ; 0001 0034         // add offset //
                 ; 0001 0035         offset = offset + line_width;
000687 01f9      	MOVW R30,R18
000688 940e 171c 	CALL SUBOPT_0x1C
00068a 87e8      	STD  Y+8,R30
00068b 87f9      	STD  Y+8+1,R31
                 ; 0001 0036         // check if we have line width chars or less //
                 ; 0001 0037         if (len_rem <= line_width) {
                +
00068c 1720     +CP R18 , R16
00068d 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
00068e f03c      	BRLT _0x20008
                 ; 0001 0038             // print last line and get out //
                 ; 0001 0039             print_hex_ascii_line(ch, len_rem, offset);
00068f 940e 1713 	CALL SUBOPT_0x1A
000691 931a      	ST   -Y,R17
000692 930a      	ST   -Y,R16
000693 940e 1718 	CALL SUBOPT_0x1B
                 ; 0001 003A             break;
000695 c001      	RJMP _0x20007
                 ; 0001 003B         }
                 ; 0001 003C     }
                 _0x20008:
000696 cfdc      	RJMP _0x20006
                 _0x20007:
                 ; 0001 003D     return;
                 _0x20C0012:
000697 940e 1d60 	CALL __LOADLOCR6
000699 962e      	ADIW R28,14
00069a 9508      	RET
                 ; 0001 003E 
                 ; 0001 003F }
                 ;/* ================================================================================= */
                 ;void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
                 ; 0001 0041 void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
                 _print_hex_ascii_line:
                 ; 0001 0042 
                 ; 0001 0043     int i;
                 ; 0001 0044     int gap;
                 ; 0001 0045     const unsigned char *ch;
                 ; 0001 0046 
                 ; 0001 0047     // offset //
                 ; 0001 0048     printDebug("%05d   ", offset);
00069b 93ba      	ST   -Y,R27
00069c 93aa      	ST   -Y,R26
00069d 940e 1d59 	CALL __SAVELOCR6
                 ;	*payload -> Y+10
                 ;	len -> Y+8
                 ;	offset -> Y+6
                 ;	i -> R16,R17
                 ;	gap -> R18,R19
                 ;	*ch -> R20,R21
                +
00069f eeec     +LDI R30 , LOW ( 2 * _0x20000 + ( 0 ) )
0006a0 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 0 ) )
                 	__POINTW1FN _0x20000,0
0006a1 93fa      	ST   -Y,R31
0006a2 93ea      	ST   -Y,R30
0006a3 85e8      	LDD  R30,Y+8
0006a4 85f9      	LDD  R31,Y+8+1
0006a5 940e 1721 	CALL SUBOPT_0x1D
                 ; 0001 0049 
                 ; 0001 004A     // hex //
                 ; 0001 004B     ch = payload;
                +
0006a7 854a     +LDD R20 , Y + 10
0006a8 855b     +LDD R21 , Y + 10 + 1
                 	__GETWRS 20,21,10
                 ; 0001 004C     for(i = 0; i < len; i++) {
                +
0006a9 e000     +LDI R16 , LOW ( 0 )
0006aa e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2000A:
0006ab 85e8      	LDD  R30,Y+8
0006ac 85f9      	LDD  R31,Y+8+1
0006ad 170e      	CP   R16,R30
0006ae 071f      	CPC  R17,R31
0006af f494      	BRGE _0x2000B
                 ; 0001 004D         printDebug("%02X ", *ch);
                +
0006b0 efe4     +LDI R30 , LOW ( 2 * _0x20000 + ( 8 ) )
0006b1 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 8 ) )
                 	__POINTW1FN _0x20000,8
0006b2 940e 1724 	CALL SUBOPT_0x1E
                 ; 0001 004E 
                 ; 0001 004F         ch++;
                +
0006b4 5f4f     +SUBI R20 , LOW ( - 1 )
0006b5 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0001 0050         // print extra space after 8th byte for visual aid //
                 ; 0001 0051         if (i == 7){
0006b6 e0e7      	LDI  R30,LOW(7)
0006b7 e0f0      	LDI  R31,HIGH(7)
0006b8 17e0      	CP   R30,R16
0006b9 07f1      	CPC  R31,R17
0006ba f421      	BRNE _0x2000C
                 ; 0001 0052             printDebug(" ");
                +
0006bb efe2     +LDI R30 , LOW ( 2 * _0x20000 + ( 6 ) )
0006bc e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 6 ) )
                 	__POINTW1FN _0x20000,6
0006bd 940e 16ac 	CALL SUBOPT_0x8
                 ; 0001 0053 
                 ; 0001 0054         }
                 ; 0001 0055     }
                 _0x2000C:
                +
0006bf 5f0f     +SUBI R16 , LOW ( - 1 )
0006c0 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0006c1 cfe9      	RJMP _0x2000A
                 _0x2000B:
                 ; 0001 0056     // print space to handle line less than 8 bytes //
                 ; 0001 0057     if (len < 8){
0006c2 85a8      	LDD  R26,Y+8
0006c3 85b9      	LDD  R27,Y+8+1
0006c4 9718      	SBIW R26,8
0006c5 f424      	BRGE _0x2000D
                 ; 0001 0058         printDebug(" ");
                +
0006c6 efe2     +LDI R30 , LOW ( 2 * _0x20000 + ( 6 ) )
0006c7 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 6 ) )
                 	__POINTW1FN _0x20000,6
0006c8 940e 16ac 	CALL SUBOPT_0x8
                 ; 0001 0059 
                 ; 0001 005A     }
                 ; 0001 005B 
                 ; 0001 005C     // fill hex gap with spaces if not full line //
                 ; 0001 005D     if (len < 16) {
                 _0x2000D:
0006ca 85a8      	LDD  R26,Y+8
0006cb 85b9      	LDD  R27,Y+8+1
0006cc 9750      	SBIW R26,16
0006cd f49c      	BRGE _0x2000E
                 ; 0001 005E         gap = 16 - len;
0006ce 85a8      	LDD  R26,Y+8
0006cf 85b9      	LDD  R27,Y+8+1
0006d0 e1e0      	LDI  R30,LOW(16)
0006d1 e0f0      	LDI  R31,HIGH(16)
0006d2 1bea      	SUB  R30,R26
0006d3 0bfb      	SBC  R31,R27
0006d4 019f      	MOVW R18,R30
                 ; 0001 005F         for (i = 0; i < gap; i++) {
                +
0006d5 e000     +LDI R16 , LOW ( 0 )
0006d6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20010:
                +
0006d7 1702     +CP R16 , R18
0006d8 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
0006d9 f43c      	BRGE _0x20011
                 ; 0001 0060             printDebug("   ");
                +
0006da efe0     +LDI R30 , LOW ( 2 * _0x20000 + ( 4 ) )
0006db e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 4 ) )
                 	__POINTW1FN _0x20000,4
0006dc 940e 16ac 	CALL SUBOPT_0x8
                 ; 0001 0061 
                 ; 0001 0062         }
                +
0006de 5f0f     +SUBI R16 , LOW ( - 1 )
0006df 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0006e0 cff6      	RJMP _0x20010
                 _0x20011:
                 ; 0001 0063     }
                 ; 0001 0064     printDebug("   ");
                 _0x2000E:
                +
0006e1 efe0     +LDI R30 , LOW ( 2 * _0x20000 + ( 4 ) )
0006e2 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 4 ) )
                 	__POINTW1FN _0x20000,4
0006e3 940e 16ac 	CALL SUBOPT_0x8
                 ; 0001 0065 
                 ; 0001 0066 
                 ; 0001 0067     // ascii (if printable) //
                 ; 0001 0068     ch = payload;
                +
0006e5 854a     +LDD R20 , Y + 10
0006e6 855b     +LDD R21 , Y + 10 + 1
                 	__GETWRS 20,21,10
                 ; 0001 0069     for(i = 0; i < len; i++) {
                +
0006e7 e000     +LDI R16 , LOW ( 0 )
0006e8 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20013:
0006e9 85e8      	LDD  R30,Y+8
0006ea 85f9      	LDD  R31,Y+8+1
0006eb 170e      	CP   R16,R30
0006ec 071f      	CPC  R17,R31
0006ed f4a4      	BRGE _0x20014
                 ; 0001 006A         if (isprint(*ch)){
0006ee 01da      	MOVW R26,R20
0006ef 91ac      	LD   R26,X
0006f0 940e 1655 	CALL _isprint
0006f2 30e0      	CPI  R30,0
0006f3 f029      	BREQ _0x20015
                 ; 0001 006B             printDebug("%c", *ch);
                +
0006f4 efea     +LDI R30 , LOW ( 2 * _0x20000 + ( 14 ) )
0006f5 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 14 ) )
                 	__POINTW1FN _0x20000,14
0006f6 940e 1724 	CALL SUBOPT_0x1E
                 ; 0001 006C 
                 ; 0001 006D         }
                 ; 0001 006E         else{
0006f8 c004      	RJMP _0x20016
                 _0x20015:
                 ; 0001 006F             printDebug(".");
                +
0006f9 efed     +LDI R30 , LOW ( 2 * _0x20000 + ( 17 ) )
0006fa e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 17 ) )
                 	__POINTW1FN _0x20000,17
0006fb 940e 16ac 	CALL SUBOPT_0x8
                 ; 0001 0070 
                 ; 0001 0071         }
                 _0x20016:
                 ; 0001 0072         ch++;
                +
0006fd 5f4f     +SUBI R20 , LOW ( - 1 )
0006fe 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0001 0073     }
                +
0006ff 5f0f     +SUBI R16 , LOW ( - 1 )
000700 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000701 cfe7      	RJMP _0x20013
                 _0x20014:
                 ; 0001 0074 
                 ; 0001 0075     printDebug("\r\n");
                +
000702 efef     +LDI R30 , LOW ( 2 * _0x20000 + ( 19 ) )
000703 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 19 ) )
                 	__POINTW1FN _0x20000,19
000704 940e 16ac 	CALL SUBOPT_0x8
                 ; 0001 0076     return;
000706 940e 1d60 	CALL __LOADLOCR6
000708 962c      	ADIW R28,12
000709 9508      	RET
                 ; 0001 0077 }
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <timer.h>
                 ;#include <debug.h>
                 ;#include <int_protocol.h>
                 ;#include <initial_system.h>
                 ;
                 ;TIMER baseCounter = 0;    // -- increase continually by 1 second timer. use for timer comparison -- //
                 ;uint8_t pressedBTCounter = 0;
                 ;uint8_t _FlagBT = 0;
                 ;uint8_t _Flag05INT = 0;
                 ;uint8_t _Flag0001INT = 0;
                 ;uint8_t _BlinkLED_1Hz = 0;
                 ;
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/******************************* Software Timer Support ******************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;
                 ;/* ================================================================================= */
                 ;
                 ;/* ================================================================================= */
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/********************************* Hardware Support **********************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;// Timer 0 overflow interrupt service routine (1 ms.)
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0002 0021 interrupt [17] void timer0_ovf_isr(void) {
                 
                 	.CSEG
                 _timer0_ovf_isr:
00070a 93aa      	ST   -Y,R26
00070b 93ea      	ST   -Y,R30
00070c b7ef      	IN   R30,SREG
00070d 93ea      	ST   -Y,R30
                 ; 0002 0022 
                 ; 0002 0023     // Reinitialize Timer 0 value
                 ; 0002 0024     TCNT0 = 0xD7;
00070e ede7      	LDI  R30,LOW(215)
00070f bfe2      	OUT  0x32,R30
                 ; 0002 0025     // Place your code here
                 ; 0002 0026     if(SWITCH == TURN_ON /*&& _pired*/) {
000710 91a0 0600 	LDS  R26,_SWITCH
000712 30a1      	CPI  R26,LOW(0x1)
000713 f419      	BRNE _0x40003
                 ; 0002 0027         _Flag0001INT = 1;
000714 e0e1      	LDI  R30,LOW(1)
000715 93e0 089c 	STS  __Flag0001INT,R30
                 ; 0002 0028     }
                 ; 0002 0029 
                 ; 0002 002A }
                 _0x40003:
000717 c03e      	RJMP _0x40015
                 ;/* ================================================================================= */
                 ;// Timer1 overflow interrupt service routine (1 sec.)
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void) {
                 ; 0002 002D interrupt [15] void timer1_ovf_isr(void) {
                 _timer1_ovf_isr:
000718 936a      	ST   -Y,R22
000719 937a      	ST   -Y,R23
00071a 93aa      	ST   -Y,R26
00071b 93ba      	ST   -Y,R27
00071c 93ea      	ST   -Y,R30
00071d 93fa      	ST   -Y,R31
00071e b7ef      	IN   R30,SREG
00071f 93ea      	ST   -Y,R30
                 ; 0002 002E 
                 ; 0002 002F     //char i;
                 ; 0002 0030 
                 ; 0002 0031     // Reinitialize Timer1 value
                 ; 0002 0032     TCNT1H = 0x57;
000720 e5e7      	LDI  R30,LOW(87)
000721 bded      	OUT  0x2D,R30
                 ; 0002 0033     TCNT1L = 0x40;
000722 e4e0      	LDI  R30,LOW(64)
000723 bdec      	OUT  0x2C,R30
                 ; 0002 0034 
                 ; 0002 0035     baseCounter++;
000724 e9a5      	LDI  R26,LOW(_baseCounter)
000725 e0b8      	LDI  R27,HIGH(_baseCounter)
000726 940e 1cfd 	CALL __GETD1P_INC
                +
000728 5fef     +SUBI R30 , LOW ( - 1 )
000729 4fff     +SBCI R31 , HIGH ( - 1 )
00072a 4f6f     +SBCI R22 , BYTE3 ( - 1 )
00072b 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
00072c 940e 1d07 	CALL __PUTDP1_DEC
                 ; 0002 0036 }
00072e 91e9      	LD   R30,Y+
00072f bfef      	OUT  SREG,R30
000730 91f9      	LD   R31,Y+
000731 91e9      	LD   R30,Y+
000732 91b9      	LD   R27,Y+
000733 91a9      	LD   R26,Y+
000734 9179      	LD   R23,Y+
000735 9169      	LD   R22,Y+
000736 9518      	RETI
                 ;/* ================================================================================= */
                 ;// Timer3 overflow interrupt service routine (0.5 sec.)
                 ;interrupt [TIM3_OVF] void timer3_ovf_isr(void) {
                 ; 0002 0039 interrupt [30] void timer3_ovf_isr(void) {
                 _timer3_ovf_isr:
000737 93aa      	ST   -Y,R26
000738 93ea      	ST   -Y,R30
000739 b7ef      	IN   R30,SREG
00073a 93ea      	ST   -Y,R30
                 ; 0002 003A 
                 ; 0002 003B     // Reinitialize Timer3 value
                 ; 0002 003C     TCNT3H = 0xAB;
00073b 940e 172c 	CALL SUBOPT_0x1F
                 ; 0002 003D     TCNT3L = 0xA0;
                 ; 0002 003E 
                 ; 0002 003F     /*----- Count time pressed button -----*/
                 ; 0002 0040     if(_FlagBT) {
00073d 91e0 089a 	LDS  R30,__FlagBT
00073f 30e0      	CPI  R30,0
000740 f029      	BREQ _0x40004
                 ; 0002 0041         pressedBTCounter++;
000741 91e0 0899 	LDS  R30,_pressedBTCounter
000743 5fef      	SUBI R30,-LOW(1)
000744 93e0 0899 	STS  _pressedBTCounter,R30
                 ; 0002 0042     }
                 ; 0002 0043 
                 ; 0002 0044     /*----- 0.5 millisecond flag -----*/
                 ; 0002 0045     if(SWITCH == TURN_ON /*&& _pired*/) {
                 _0x40004:
000746 91a0 0600 	LDS  R26,_SWITCH
000748 30a1      	CPI  R26,LOW(0x1)
000749 f419      	BRNE _0x40005
                 ; 0002 0046         _Flag05INT = 1;
00074a e0e1      	LDI  R30,LOW(1)
00074b 93e0 089b 	STS  __Flag05INT,R30
                 ; 0002 0047     }
                 ; 0002 0048 
                 ; 0002 0049     /*----- Blink Power LED 1 Hz -----*/
                 ; 0002 004A     if(_BlinkLED_1Hz) {
                 _0x40005:
00074d 91e0 089d 	LDS  R30,__BlinkLED_1Hz
00074f 30e0      	CPI  R30,0
000750 f029      	BREQ _0x40006
                 ; 0002 004B         if(LED_STAT_PIN == 1) {
000751 9b9f      	SBIS 0x13,7
000752 c002      	RJMP _0x40007
                 ; 0002 004C             LED_STAT_ON;
000753 98af      	CBI  0x15,7
                 ; 0002 004D         }else {
000754 c001      	RJMP _0x4000A
                 _0x40007:
                 ; 0002 004E             LED_STAT_OFF;
000755 9aaf      	SBI  0x15,7
                 ; 0002 004F         }
                 _0x4000A:
                 ; 0002 0050     }
                 ; 0002 0051 
                 ; 0002 0052 }
                 _0x40006:
                 _0x40015:
000756 91e9      	LD   R30,Y+
000757 bfef      	OUT  SREG,R30
000758 91e9      	LD   R30,Y+
000759 91a9      	LD   R26,Y+
00075a 9518      	RETI
                 ;/* ================================================================================= */
                 ;void init_timer(void) {
                 ; 0002 0054 void init_timer(void) {
                 _init_timer:
                 ; 0002 0055 
                 ; 0002 0056     // Timer/Counter 0 initialization (1 ms.)
                 ; 0002 0057     // Clock source: System Clock
                 ; 0002 0058     // Clock value: 43.200 kHz
                 ; 0002 0059     // Mode: Normal top=0xFF
                 ; 0002 005A     // OC0 output: Disconnected
                 ; 0002 005B     ASSR=0x00;
00075b e0e0      	LDI  R30,LOW(0)
00075c bfe0      	OUT  0x30,R30
                 ; 0002 005C     TCCR0=0x06;
00075d e0e6      	LDI  R30,LOW(6)
00075e bfe3      	OUT  0x33,R30
                 ; 0002 005D     TCNT0=0xD7;
00075f ede7      	LDI  R30,LOW(215)
000760 bfe2      	OUT  0x32,R30
                 ; 0002 005E     OCR0=0x00;
000761 e0e0      	LDI  R30,LOW(0)
000762 bfe1      	OUT  0x31,R30
                 ; 0002 005F 
                 ; 0002 0060     // Timer/Counter 1 initialization (1 sec.)
                 ; 0002 0061     // Clock source: System Clock
                 ; 0002 0062     // Clock value: 43.200 kHz
                 ; 0002 0063     // Mode: Normal top=0xFFFF
                 ; 0002 0064     // OC1A output: Discon.
                 ; 0002 0065     // OC1B output: Discon.
                 ; 0002 0066     // OC1C output: Discon.
                 ; 0002 0067     // Noise Canceler: Off
                 ; 0002 0068     // Input Capture on Falling Edge
                 ; 0002 0069     // Timer1 Overflow Interrupt: On
                 ; 0002 006A     // Input Capture Interrupt: Off
                 ; 0002 006B     // Compare A Match Interrupt: Off
                 ; 0002 006C     // Compare B Match Interrupt: Off
                 ; 0002 006D     // Compare C Match Interrupt: Off
                 ; 0002 006E     TCCR1A=0x00;
000763 bdef      	OUT  0x2F,R30
                 ; 0002 006F     TCCR1B=0x04;
000764 e0e4      	LDI  R30,LOW(4)
000765 bdee      	OUT  0x2E,R30
                 ; 0002 0070     TCNT1H=0x57;
000766 e5e7      	LDI  R30,LOW(87)
000767 bded      	OUT  0x2D,R30
                 ; 0002 0071     TCNT1L=0x40;
000768 e4e0      	LDI  R30,LOW(64)
000769 bdec      	OUT  0x2C,R30
                 ; 0002 0072     ICR1H=0x00;
00076a e0e0      	LDI  R30,LOW(0)
00076b bde7      	OUT  0x27,R30
                 ; 0002 0073     ICR1L=0x00;
00076c bde6      	OUT  0x26,R30
                 ; 0002 0074     OCR1AH=0x00;
00076d bdeb      	OUT  0x2B,R30
                 ; 0002 0075     OCR1AL=0x00;
00076e bdea      	OUT  0x2A,R30
                 ; 0002 0076     OCR1BH=0x00;
00076f bde9      	OUT  0x29,R30
                 ; 0002 0077     OCR1BL=0x00;
000770 bde8      	OUT  0x28,R30
                 ; 0002 0078     OCR1CH=0x00;
000771 93e0 0079 	STS  121,R30
                 ; 0002 0079     OCR1CL=0x00;
000773 93e0 0078 	STS  120,R30
                 ; 0002 007A 
                 ; 0002 007B     // Timer/Counter 2 initialization
                 ; 0002 007C     // Clock source: System Clock
                 ; 0002 007D     // Clock value: Timer2 Stopped
                 ; 0002 007E     // Mode: Normal top=0xFF
                 ; 0002 007F     // OC2 output: Disconnected
                 ; 0002 0080     TCCR2=0x00;
000775 bde5      	OUT  0x25,R30
                 ; 0002 0081     TCNT2=0x00;
000776 bde4      	OUT  0x24,R30
                 ; 0002 0082     OCR2=0x00;
000777 bde3      	OUT  0x23,R30
                 ; 0002 0083 
                 ; 0002 0084     // Timer/Counter 3 initialization (0.5 sec.)
                 ; 0002 0085     // Clock source: System Clock
                 ; 0002 0086     // Clock value: 43.200 kHz
                 ; 0002 0087     // Mode: Normal top=0xFFFF
                 ; 0002 0088     // OC3A output: Discon.
                 ; 0002 0089     // OC3B output: Discon.
                 ; 0002 008A     // OC3C output: Discon.
                 ; 0002 008B     // Noise Canceler: Off
                 ; 0002 008C     // Input Capture on Falling Edge
                 ; 0002 008D     // Timer3 Overflow Interrupt: On
                 ; 0002 008E     // Input Capture Interrupt: Off
                 ; 0002 008F     // Compare A Match Interrupt: Off
                 ; 0002 0090     // Compare B Match Interrupt: Off
                 ; 0002 0091     // Compare C Match Interrupt: Off
                 ; 0002 0092     TCCR3A=0x00;
000778 93e0 008b 	STS  139,R30
                 ; 0002 0093     TCCR3B=0x04;
00077a e0e4      	LDI  R30,LOW(4)
00077b 93e0 008a 	STS  138,R30
                 ; 0002 0094     TCNT3H=0xAB;
00077d 940e 172c 	CALL SUBOPT_0x1F
                 ; 0002 0095     TCNT3L=0xA0;
                 ; 0002 0096     ICR3H=0x00;
00077f e0e0      	LDI  R30,LOW(0)
000780 93e0 0081 	STS  129,R30
                 ; 0002 0097     ICR3L=0x00;
000782 93e0 0080 	STS  128,R30
                 ; 0002 0098     OCR3AH=0x00;
000784 93e0 0087 	STS  135,R30
                 ; 0002 0099     OCR3AL=0x00;
000786 93e0 0086 	STS  134,R30
                 ; 0002 009A     OCR3BH=0x00;
000788 93e0 0085 	STS  133,R30
                 ; 0002 009B     OCR3BL=0x00;
00078a 93e0 0084 	STS  132,R30
                 ; 0002 009C     OCR3CH=0x00;
00078c 93e0 0083 	STS  131,R30
                 ; 0002 009D     OCR3CL=0x00;
00078e 93e0 0082 	STS  130,R30
                 ; 0002 009E 
                 ; 0002 009F     // Watchdog Timer initialization
                 ; 0002 00A0     // Watchdog Timer Prescaler: OSC/2048k
                 ; 0002 00A1     #pragma optsize-
                 ; 0002 00A2     WDTCR=0x1F;
000790 e1ef      	LDI  R30,LOW(31)
000791 bde1      	OUT  0x21,R30
                 ; 0002 00A3     WDTCR=0x0F;
000792 e0ef      	LDI  R30,LOW(15)
000793 bde1      	OUT  0x21,R30
                 ; 0002 00A4     #ifdef _OPTIMIZE_SIZE_
                 ; 0002 00A5     #pragma optsize+
                 ; 0002 00A6     #endif
                 ; 0002 00A7 
                 ; 0002 00A8     // Timer/Counter 0 Interrupt(s) initialization
                 ; 0002 00A9     TIMSK = 0x00;
000794 e0e0      	LDI  R30,LOW(0)
000795 bfe7      	OUT  0x37,R30
                 ; 0002 00AA 
                 ; 0002 00AB     // Timer/Counter 1 Interrupt(s) initialization
                 ; 0002 00AC     TIMSK = 0x00;
000796 bfe7      	OUT  0x37,R30
                 ; 0002 00AD 
                 ; 0002 00AE     // Timer/Counter 3 Interrupt(s) initialization
                 ; 0002 00AF     ETIMSK = 0x00;
000797 93e0 007d 	STS  125,R30
                 ; 0002 00B0 
                 ; 0002 00B1 }
000799 9508      	RET
                 ;/* ================================================================================= */
                 ;void enable_timerOverflow(int ch) {
                 ; 0002 00B3 void enable_timerOverflow(int ch) {
                 _enable_timerOverflow:
                 ; 0002 00B4 
                 ; 0002 00B5     /*-------------- enable timer ---------------*/
                 ; 0002 00B6     switch(ch){
00079a 940e 165e 	CALL SUBOPT_0x0
                 ;	ch -> Y+0
                 ; 0002 00B7         case 0: // Timer/Counter 0 Interrupt(s) initialization
00079c f421      	BRNE _0x40010
                 ; 0002 00B8                 TIMSK |= 0x01;
00079d b7e7      	IN   R30,0x37
00079e 60e1      	ORI  R30,1
00079f bfe7      	OUT  0x37,R30
                 ; 0002 00B9                 break;
0007a0 c015      	RJMP _0x4000F
                 ; 0002 00BA         case 1: // Timer/Counter 1 Interrupt(s) initialization
                 _0x40010:
0007a1 30e1      	CPI  R30,LOW(0x1)
0007a2 e0a0      	LDI  R26,HIGH(0x1)
0007a3 07fa      	CPC  R31,R26
0007a4 f421      	BRNE _0x40011
                 ; 0002 00BB                 TIMSK |= 0x04;
0007a5 b7e7      	IN   R30,0x37
0007a6 60e4      	ORI  R30,4
0007a7 bfe7      	OUT  0x37,R30
                 ; 0002 00BC                 break;
0007a8 c00d      	RJMP _0x4000F
                 ; 0002 00BD         case 2: // Timer/Counter 2 Interrupt(s) initialization
                 _0x40011:
0007a9 30e2      	CPI  R30,LOW(0x2)
0007aa e0a0      	LDI  R26,HIGH(0x2)
0007ab 07fa      	CPC  R31,R26
0007ac f049      	BREQ _0x4000F
                 ; 0002 00BE                 //TIMSK2=0x01;
                 ; 0002 00BF                 break;
                 ; 0002 00C0         case 3: // Timer/Counter 3 Interrupt(s) initialization
0007ad 30e3      	CPI  R30,LOW(0x3)
0007ae e0a0      	LDI  R26,HIGH(0x3)
0007af 07fa      	CPC  R31,R26
0007b0 f429      	BRNE _0x40013
                 ; 0002 00C1                 ETIMSK |= 0x04;
0007b1 91e0 007d 	LDS  R30,125
0007b3 60e4      	ORI  R30,4
0007b4 93e0 007d 	STS  125,R30
                 ; 0002 00C2                 break;
                 ; 0002 00C3         case 4: // Timer/Counter 4 Interrupt(s) initialization
                 _0x40013:
                 ; 0002 00C4                 //TIMSK4=0x01;
                 ; 0002 00C5                 break;
                 ; 0002 00C6     }
                 _0x4000F:
                 ; 0002 00C7     // Global enable interrupts
                 ; 0002 00C8     #asm("sei")
0007b6 9478      	sei
                 ; 0002 00C9 }
0007b7 940c 0b75 	JMP  _0x20C000C
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;
                 ;// UART 1
                 ;uint8_t rx_buffer1[RX_BUFFER_SIZE1];                                       // USART0 Receiver buffer
                 ;uint16_t rx_wr_index1, rx_rd_index1, rx_counter1;
                 ;bit rx_buffer_overflow1;                                                // This flag is set on USART0 Receiver buffer overflow
                 ;
                 ;// UART 0
                 ;flash uint8_t charHeader            = '$';
                 ;flash uint8_t charTerminate         = '#';
                 ;uint8_t _FlagPackageTerminate0      = 0;
                 ;uint8_t rxPackageIndex0;
                 ;uint8_t rxPackage0[RX_BUFFER_SIZE0];
                 ;uint8_t rxPackageIndexCount0;
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;#else
                 ;#endif
                 ;
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void) {
                 ; 0003 001B interrupt [19] void usart0_rx_isr(void) {
                 
                 	.CSEG
                 _usart0_rx_isr:
0007b9 940e 1733 	CALL SUBOPT_0x20
                 ; 0003 001C 
                 ; 0003 001D     uint8_t status, data;
                 ; 0003 001E     status  = UCSR0A;
                 ;	status -> R17
                 ;	data -> R16
0007bb b11b      	IN   R17,11
                 ; 0003 001F     data    = UDR0;
0007bc b10c      	IN   R16,12
                 ; 0003 0020 
                 ; 0003 0021     if((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
0007bd 2fe1      	MOV  R30,R17
0007be 71ec      	ANDI R30,LOW(0x1C)
0007bf f4c1      	BRNE _0x60003
                 ; 0003 0022 
                 ; 0003 0023         putchar0(data);
0007c0 2fa0      	MOV  R26,R16
0007c1 d017      	RCALL _putchar0
                 ; 0003 0024         // Detect Package Header
                 ; 0003 0025         if(data == charHeader) {
0007c2 3204      	CPI  R16,36
0007c3 f409      	BRNE _0x60004
                 ; 0003 0026             rxPackageIndex0 = 0;
0007c4 24dd      	CLR  R13
                 ; 0003 0027         }
                 ; 0003 0028 
                 ; 0003 0029         rxPackage0[rxPackageIndex0++] = data;
                 _0x60004:
0007c5 2ded      	MOV  R30,R13
0007c6 94d3      	INC  R13
0007c7 e0f0      	LDI  R31,0
0007c8 5fe6      	SUBI R30,LOW(-_rxPackage0)
0007c9 4ff9      	SBCI R31,HIGH(-_rxPackage0)
0007ca 8300      	ST   Z,R16
                 ; 0003 002A 
                 ; 0003 002B         if(rxPackageIndex0 >= RX_BUFFER_SIZE0) {
0007cb e2e0      	LDI  R30,LOW(32)
0007cc 16de      	CP   R13,R30
0007cd f008      	BRLO _0x60005
                 ; 0003 002C             rxPackageIndex0 = 0;
0007ce 24dd      	CLR  R13
                 ; 0003 002D         }
                 ; 0003 002E 
                 ; 0003 002F         if(data == charTerminate) {
                 _0x60005:
0007cf 3203      	CPI  R16,35
0007d0 f439      	BRNE _0x60006
                 ; 0003 0030             rxPackageIndexCount0 = (rxPackageIndex0 - 1);
0007d1 2ded      	MOV  R30,R13
0007d2 50e1      	SUBI R30,LOW(1)
0007d3 2ece      	MOV  R12,R30
                 ; 0003 0031             rxPackageIndex0 = 0;
0007d4 24dd      	CLR  R13
                 ; 0003 0032             _FlagPackageTerminate0 = 1;
0007d5 e0e1      	LDI  R30,LOW(1)
0007d6 93e0 0609 	STS  __FlagPackageTerminate0,R30
                 ; 0003 0033         }
                 ; 0003 0034     }
                 _0x60006:
                 ; 0003 0035 }
                 _0x60003:
0007d8 c036      	RJMP _0x6003E
                 ;/* ================================================================================= */
                 ;// Write a character to the USART0 Transmitter
                 ;#pragma used+
                 ;void putchar0(uint8_t c) {
                 ; 0003 0039 void putchar0(uint8_t c) {
                 _putchar0:
                 ; 0003 003A     while((UCSR0A & DATA_REGISTER_EMPTY) == 0);
0007d9 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x60007:
0007da 9b5d      	SBIS 0xB,5
0007db cffe      	RJMP _0x60007
                 ; 0003 003B     UDR0 = c;
0007dc 81e8      	LD   R30,Y
0007dd b9ec      	OUT  0xC,R30
                 ; 0003 003C }
0007de c048      	RJMP _0x20C0011
                 ;#pragma used-
                 ;
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void) {
                 ; 0003 003F interrupt [31] void usart1_rx_isr(void) {
                 _usart1_rx_isr:
0007df 940e 1733 	CALL SUBOPT_0x20
                 ; 0003 0040 
                 ; 0003 0041     uint8_t status, data;
                 ; 0003 0042     status  = UCSR1A;
                 ;	status -> R17
                 ;	data -> R16
0007e1 9110 009b 	LDS  R17,155
                 ; 0003 0043     data    = UDR1;
0007e3 9100 009c 	LDS  R16,156
                 ; 0003 0044 
                 ; 0003 0045     if((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
0007e5 2fe1      	MOV  R30,R17
0007e6 71ec      	ANDI R30,LOW(0x1C)
0007e7 f539      	BRNE _0x6000A
                 ; 0003 0046         rx_buffer1[rx_wr_index1++] = data;
0007e8 01f5      	MOVW R30,R10
0007e9 9631      	ADIW R30,1
0007ea 015f      	MOVW R10,R30
0007eb 9731      	SBIW R30,1
0007ec 5de0      	SUBI R30,LOW(-_rx_buffer1)
0007ed 4ff9      	SBCI R31,HIGH(-_rx_buffer1)
0007ee 8300      	ST   Z,R16
                 ; 0003 0047          //printDebug("%02X ",data);
                 ; 0003 0048         if (rx_wr_index1 == RX_BUFFER_SIZE1)
0007ef e0e0      	LDI  R30,LOW(512)
0007f0 e0f2      	LDI  R31,HIGH(512)
0007f1 15ea      	CP   R30,R10
0007f2 05fb      	CPC  R31,R11
0007f3 f411      	BRNE _0x6000B
                 ; 0003 0049             rx_wr_index1 = 0;
0007f4 24aa      	CLR  R10
0007f5 24bb      	CLR  R11
                 ; 0003 004A         if (++rx_counter1 == RX_BUFFER_SIZE1) {
                 _0x6000B:
0007f6 e2ae      	LDI  R26,LOW(_rx_counter1)
0007f7 e0b6      	LDI  R27,HIGH(_rx_counter1)
0007f8 940e 1743 	CALL SUBOPT_0x21
0007fa 30e0      	CPI  R30,LOW(0x200)
0007fb e0a2      	LDI  R26,HIGH(0x200)
0007fc 07fa      	CPC  R31,R26
0007fd f489      	BRNE _0x6000C
                 ; 0003 004B             printDebug("WARNING : UART0 BUFFER OVERFLOW %d\r\n", rx_counter1);
                +
0007fe e0e2     +LDI R30 , LOW ( 2 * _0x60000 + ( 0 ) )
0007ff e0f3     +LDI R31 , HIGH ( 2 * _0x60000 + ( 0 ) )
                 	__POINTW1FN _0x60000,0
000800 93fa      	ST   -Y,R31
000801 93ea      	ST   -Y,R30
000802 91e0 062e 	LDS  R30,_rx_counter1
000804 91f0 062f 	LDS  R31,_rx_counter1+1
000806 940e 1749 	CALL SUBOPT_0x22
                 ; 0003 004C             rx_counter1 = 0;
000808 e0e0      	LDI  R30,LOW(0)
000809 93e0 062e 	STS  _rx_counter1,R30
00080b 93e0 062f 	STS  _rx_counter1+1,R30
                 ; 0003 004D             rx_buffer_overflow1 = 1;
00080d 9468      	SET
00080e f820      	BLD  R2,0
                 ; 0003 004E         }
                 ; 0003 004F     }
                 _0x6000C:
                 ; 0003 0050 }
                 _0x6000A:
                 _0x6003E:
00080f 9109      	LD   R16,Y+
000810 9119      	LD   R17,Y+
000811 91e9      	LD   R30,Y+
000812 bfef      	OUT  SREG,R30
000813 91f9      	LD   R31,Y+
000814 91e9      	LD   R30,Y+
000815 91b9      	LD   R27,Y+
000816 91a9      	LD   R26,Y+
000817 9199      	LD   R25,Y+
000818 9189      	LD   R24,Y+
000819 9179      	LD   R23,Y+
00081a 9169      	LD   R22,Y+
00081b 90f9      	LD   R15,Y+
00081c 9019      	LD   R1,Y+
00081d 9009      	LD   R0,Y+
00081e 9518      	RETI
                 ;
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART1 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void) {
                 ; 0003 0057 char getchar(void) {
                 ; 0003 0058 
                 ; 0003 0059     uint8_t data;
                 ; 0003 005A 
                 ; 0003 005B     while (rx_counter1 == 0);
                 ;	data -> R17
                 ; 0003 005C     data = rx_buffer1[rx_rd_index1++];
                 ; 0003 005D     if(rx_rd_index1 == RX_BUFFER_SIZE1)
                 ; 0003 005E         rx_rd_index1 = 0;
                 ; 0003 005F     #asm("cli")
                 ; 0003 0060     --rx_counter1;
                 ; 0003 0061     #asm("sei")
                 ; 0003 0062     return data;
                 ; 0003 0063 }
                 ;
                 ;
                 ;#pragma used-
                 ;// Write a character to the USART1 Transmitter
                 ;#pragma used+
                 ;void putchar1(uint8_t c) {
                 ; 0003 0069 void putchar1(uint8_t c) {
                 _putchar1:
                 ; 0003 006A 
                 ; 0003 006B     while((UCSR1A & DATA_REGISTER_EMPTY) == 0);
00081f 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x60011:
000820 91e0 009b 	LDS  R30,155
000822 72e0      	ANDI R30,LOW(0x20)
000823 f3e1      	BREQ _0x60011
                 ; 0003 006C     UDR1 = c;
000824 81e8      	LD   R30,Y
000825 93e0 009c 	STS  156,R30
                 ; 0003 006D }
                 _0x20C0011:
000827 9621      	ADIW R28,1
000828 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;
                 ;void send_uart(uint8_t port, uint8_t *buffer) {
                 ; 0003 0071 void send_uart(uint8_t port, uint8_t *buffer) {
                 _send_uart:
                 ; 0003 0072 
                 ; 0003 0073     uint8_t i = 0;
                 ; 0003 0074 
                 ; 0003 0075     switch(port) {
000829 93ba      	ST   -Y,R27
00082a 93aa      	ST   -Y,R26
00082b 931a      	ST   -Y,R17
                 ;	port -> Y+3
                 ;	*buffer -> Y+1
                 ;	i -> R17
00082c e010      	LDI  R17,0
00082d 81eb      	LDD  R30,Y+3
00082e e0f0      	LDI  R31,0
                 ; 0003 0076         case 0:
00082f 9730      	SBIW R30,0
000830 f461      	BRNE _0x60017
                 ; 0003 0077             while(buffer[i] != 0) {
                 _0x60018:
000831 940e 174c 	CALL SUBOPT_0x23
000833 91ec      	LD   R30,X
000834 30e0      	CPI  R30,0
000835 f031      	BREQ _0x6001A
                 ; 0003 0078                 putchar0(buffer[i]);
000836 940e 174c 	CALL SUBOPT_0x23
000838 91ac      	LD   R26,X
000839 df9f      	RCALL _putchar0
                 ; 0003 0079                 i++;
00083a 5f1f      	SUBI R17,-1
                 ; 0003 007A             }
00083b cff5      	RJMP _0x60018
                 _0x6001A:
                 ; 0003 007B             break;
00083c c00f      	RJMP _0x60016
                 ; 0003 007C         case 1:
                 _0x60017:
00083d 30e1      	CPI  R30,LOW(0x1)
00083e e0a0      	LDI  R26,HIGH(0x1)
00083f 07fa      	CPC  R31,R26
000840 f459      	BRNE _0x60016
                 ; 0003 007D             while(buffer[i] != 0) {
                 _0x6001C:
000841 940e 174c 	CALL SUBOPT_0x23
000843 91ec      	LD   R30,X
000844 30e0      	CPI  R30,0
000845 f031      	BREQ _0x6001E
                 ; 0003 007E                 putchar1(buffer[i]);
000846 940e 174c 	CALL SUBOPT_0x23
000848 91ac      	LD   R26,X
000849 dfd5      	RCALL _putchar1
                 ; 0003 007F                 i++;
00084a 5f1f      	SUBI R17,-1
                 ; 0003 0080             }
00084b cff5      	RJMP _0x6001C
                 _0x6001E:
                 ; 0003 0081             break;
                 ; 0003 0082     }
                 _0x60016:
                 ; 0003 0083 }
00084c 8118      	LDD  R17,Y+0
00084d c0c8      	RJMP _0x20C0010
                 ;
                 ;
                 ;void init_uart(uint8_t channel, uint32_t baud) {
                 ; 0003 0086 void init_uart(uint8_t channel, uint32_t baud) {
                 _init_uart:
                 ; 0003 0087 
                 ; 0003 0088     switch(channel) {
00084e 940e 1d20 	CALL __PUTPARD2
                 ;	channel -> Y+4
                 ;	baud -> Y+0
000850 81ec      	LDD  R30,Y+4
000851 e0f0      	LDI  R31,0
                 ; 0003 0089     case 0:
000852 9730      	SBIW R30,0
000853 f571      	BRNE _0x60022
                 ; 0003 008A         // USART0 initialization
                 ; 0003 008B         // FOSC = 11.0592 MHz
                 ; 0003 008C         // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0003 008D         // USART0 Receiver: On
                 ; 0003 008E         // USART0 Transmitter: On
                 ; 0003 008F         // USART0 Mode: Asynchronous
                 ; 0003 0090         // USART0 Baud Rate: 9600
                 ; 0003 0091         UCSR0A=0x00;
000854 e0e0      	LDI  R30,LOW(0)
000855 b9eb      	OUT  0xB,R30
                 ; 0003 0092         UCSR0B=0x98;
000856 e9e8      	LDI  R30,LOW(152)
000857 b9ea      	OUT  0xA,R30
                 ; 0003 0093         UCSR0C=0x06;
000858 e0e6      	LDI  R30,LOW(6)
000859 93e0 0095 	STS  149,R30
                 ; 0003 0094         UBRR0H=0x00;
00085b e0e0      	LDI  R30,LOW(0)
00085c 93e0 0090 	STS  144,R30
                 ; 0003 0095         switch (baud) {
00085e 940e 1752 	CALL SUBOPT_0x24
                 ; 0003 0096         case 2400:
000860 f411      	BRNE _0x60026
                 ; 0003 0097             UBRR0L = 0x1F;
000861 e1ef      	LDI  R30,LOW(31)
000862 c01d      	RJMP _0x6003A
                 ; 0003 0098             break;
                 ; 0003 0099         case 9600:
                 _0x60026:
000863 940e 175c 	CALL SUBOPT_0x25
000865 f0c9      	BREQ _0x6003B
                 ; 0003 009A             UBRR0L = 0x47;
                 ; 0003 009B             break;
                 ; 0003 009C         case 14400:
000866 940e 1764 	CALL SUBOPT_0x26
000868 f411      	BRNE _0x60028
                 ; 0003 009D             UBRR0L = 0x2F;
000869 e2ef      	LDI  R30,LOW(47)
00086a c015      	RJMP _0x6003A
                 ; 0003 009E             break;
                 ; 0003 009F         case 19200:
                 _0x60028:
00086b 940e 176c 	CALL SUBOPT_0x27
00086d f411      	BRNE _0x60029
                 ; 0003 00A0             UBRR0L = 0x23;
00086e e2e3      	LDI  R30,LOW(35)
00086f c010      	RJMP _0x6003A
                 ; 0003 00A1             break;
                 ; 0003 00A2         case 38400:
                 _0x60029:
000870 940e 1774 	CALL SUBOPT_0x28
000872 f411      	BRNE _0x6002A
                 ; 0003 00A3             UBRR0L = 0x11;
000873 e1e1      	LDI  R30,LOW(17)
000874 c00b      	RJMP _0x6003A
                 ; 0003 00A4             break;
                 ; 0003 00A5         case 57600:
                 _0x6002A:
000875 940e 177c 	CALL SUBOPT_0x29
000877 f411      	BRNE _0x6002B
                 ; 0003 00A6             UBRR0L = 0x0B;
000878 e0eb      	LDI  R30,LOW(11)
000879 c006      	RJMP _0x6003A
                 ; 0003 00A7             break;
                 ; 0003 00A8         case 115200:
                 _0x6002B:
00087a 940e 1784 	CALL SUBOPT_0x2A
00087c f411      	BRNE _0x6002D
                 ; 0003 00A9             UBRR0L = 0x05;
00087d e0e5      	LDI  R30,LOW(5)
00087e c001      	RJMP _0x6003A
                 ; 0003 00AA             break;
                 ; 0003 00AB         default:
                 _0x6002D:
                 ; 0003 00AC             UBRR0L = 0x47;       // default baudrate is 9600
                 _0x6003B:
00087f e4e7      	LDI  R30,LOW(71)
                 _0x6003A:
000880 b9e9      	OUT  0x9,R30
                 ; 0003 00AD         }
                 ; 0003 00AE         break;
000881 c034      	RJMP _0x60021
                 ; 0003 00AF     case 1:
                 _0x60022:
000882 30e1      	CPI  R30,LOW(0x1)
000883 e0a0      	LDI  R26,HIGH(0x1)
000884 07fa      	CPC  R31,R26
000885 f581      	BRNE _0x60021
                 ; 0003 00B0         // USART1 initialization
                 ; 0003 00B1         // FOSC = 11.0592 MHz
                 ; 0003 00B2         // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0003 00B3         // USART1 Receiver: On
                 ; 0003 00B4         // USART1 Transmitter: On
                 ; 0003 00B5         // USART1 Mode: Asynchronous
                 ; 0003 00B6         // USART1 Baud Rate: 9600
                 ; 0003 00B7         UCSR1A=0x00;
000886 e0e0      	LDI  R30,LOW(0)
000887 93e0 009b 	STS  155,R30
                 ; 0003 00B8         UCSR1B=0x98;
000889 e9e8      	LDI  R30,LOW(152)
00088a 93e0 009a 	STS  154,R30
                 ; 0003 00B9         UCSR1C=0x06;
00088c e0e6      	LDI  R30,LOW(6)
00088d 93e0 009d 	STS  157,R30
                 ; 0003 00BA         UBRR1H=0x00;
00088f e0e0      	LDI  R30,LOW(0)
000890 93e0 0098 	STS  152,R30
                 ; 0003 00BB         switch ( baud ) {
000892 940e 1752 	CALL SUBOPT_0x24
                 ; 0003 00BC         case 2400:
000894 f411      	BRNE _0x60032
                 ; 0003 00BD             UBRR1L = 0x1F;
000895 e1ef      	LDI  R30,LOW(31)
000896 c01d      	RJMP _0x6003C
                 ; 0003 00BE             break;
                 ; 0003 00BF         case 9600:
                 _0x60032:
000897 940e 175c 	CALL SUBOPT_0x25
000899 f0c9      	BREQ _0x6003D
                 ; 0003 00C0             UBRR1L = 0x47;
                 ; 0003 00C1             break;
                 ; 0003 00C2         case 14400:
00089a 940e 1764 	CALL SUBOPT_0x26
00089c f411      	BRNE _0x60034
                 ; 0003 00C3             UBRR1L = 0x2F;
00089d e2ef      	LDI  R30,LOW(47)
00089e c015      	RJMP _0x6003C
                 ; 0003 00C4             break;
                 ; 0003 00C5         case 19200:
                 _0x60034:
00089f 940e 176c 	CALL SUBOPT_0x27
0008a1 f411      	BRNE _0x60035
                 ; 0003 00C6             UBRR1L = 0x23;
0008a2 e2e3      	LDI  R30,LOW(35)
0008a3 c010      	RJMP _0x6003C
                 ; 0003 00C7             break;
                 ; 0003 00C8         case 38400:
                 _0x60035:
0008a4 940e 1774 	CALL SUBOPT_0x28
0008a6 f411      	BRNE _0x60036
                 ; 0003 00C9             UBRR1L = 0x11;
0008a7 e1e1      	LDI  R30,LOW(17)
0008a8 c00b      	RJMP _0x6003C
                 ; 0003 00CA             break;
                 ; 0003 00CB         case 57600:
                 _0x60036:
0008a9 940e 177c 	CALL SUBOPT_0x29
0008ab f411      	BRNE _0x60037
                 ; 0003 00CC             UBRR1L = 0x0B;
0008ac e0eb      	LDI  R30,LOW(11)
0008ad c006      	RJMP _0x6003C
                 ; 0003 00CD             break;
                 ; 0003 00CE         case 115200:
                 _0x60037:
0008ae 940e 1784 	CALL SUBOPT_0x2A
0008b0 f411      	BRNE _0x60039
                 ; 0003 00CF             UBRR1L = 0x05;
0008b1 e0e5      	LDI  R30,LOW(5)
0008b2 c001      	RJMP _0x6003C
                 ; 0003 00D0             break;
                 ; 0003 00D1         default:
                 _0x60039:
                 ; 0003 00D2             UBRR1L = 0x47;       // default baudrate is 9600
                 _0x6003D:
0008b3 e4e7      	LDI  R30,LOW(71)
                 _0x6003C:
0008b4 93e0 0099 	STS  153,R30
                 ; 0003 00D3         }
                 ; 0003 00D4         break;
                 ; 0003 00D5 
                 ; 0003 00D6     }
                 _0x60021:
                 ; 0003 00D7 
                 ; 0003 00D8 }
0008b6 9625      	ADIW R28,5
0008b7 9508      	RET
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <uart.h>
                 ;#include <xbee.h>
                 ;#include <queue.h>
                 ;#include <debug.h>
                 ;#include <int_protocol.h>
                 ;#include <eeprom.h>
                 ;
                 ;
                 ;#define XBEE_RESET PORTE.2
                 ;
                 ;char EndDevice_MacAddress[8];
                 ;char Gateway_MacAddress[8];
                 ;
                 ;
                 ;uint8_t AI_COMMAND[]            = {0x7E,0x00,0x04,0x08,0x01,0x41,0x49,0x6C};
                 
                 	.DSEG
                 ;uint8_t SL_COMMAND[]            = {0x7E,0x00,0x04,0x08,0x01,0x53,0x4C,0x57};
                 ;uint8_t SH_COMMAND[]            = {0x7E,0x00,0x04,0x08,0x01,0x53,0x48,0x5B};
                 ;uint8_t EVENT[2]                = {0x00,0x00};
                 ;uint8_t STATUS_DEVICE           = 0;
                 ;int flag_state                  = 0;
                 ;
                 ;
                 ;void xbee_sendATCommand(int param){
                 ; 0004 001C void xbee_sendATCommand(int param){
                 
                 	.CSEG
                 _xbee_sendATCommand:
                 ; 0004 001D      switch(param) {
0008b8 940e 165e 	CALL SUBOPT_0x0
                 ;	param -> Y+0
                 ; 0004 001E         case 0  :
0008ba f459      	BRNE _0x80009
                 ; 0004 001F             printDebug("\r\n ++++++++++ Send AI ++++++++\r\n");
                +
0008bb e4e0     +LDI R30 , LOW ( 2 * _0x80000 + ( 0 ) )
0008bc e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 0 ) )
                 	__POINTW1FN _0x80000,0
0008bd 940e 16ac 	CALL SUBOPT_0x8
                 ; 0004 0020             print_payload(AI_COMMAND,8);
0008bf eeec      	LDI  R30,LOW(_AI_COMMAND)
0008c0 e0f8      	LDI  R31,HIGH(_AI_COMMAND)
0008c1 940e 178c 	CALL SUBOPT_0x2B
                 ; 0004 0021             xbee_send(AI_COMMAND,8);
0008c3 eeec      	LDI  R30,LOW(_AI_COMMAND)
0008c4 e0f8      	LDI  R31,HIGH(_AI_COMMAND)
0008c5 c01d      	RJMP _0x80035
                 ; 0004 0022 
                 ; 0004 0023         break;
                 ; 0004 0024 
                 ; 0004 0025         case 1  :
                 _0x80009:
0008c6 30e1      	CPI  R30,LOW(0x1)
0008c7 e0a0      	LDI  R26,HIGH(0x1)
0008c8 07fa      	CPC  R31,R26
0008c9 f459      	BRNE _0x8000A
                 ; 0004 0026             printDebug("\r\n ++++++++++ Send SH ++++++++\r\n");
                +
0008ca e6e1     +LDI R30 , LOW ( 2 * _0x80000 + ( 33 ) )
0008cb e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 33 ) )
                 	__POINTW1FN _0x80000,33
0008cc 940e 16ac 	CALL SUBOPT_0x8
                 ; 0004 0027             print_payload(SH_COMMAND,8);
0008ce efec      	LDI  R30,LOW(_SH_COMMAND)
0008cf e0f8      	LDI  R31,HIGH(_SH_COMMAND)
0008d0 940e 178c 	CALL SUBOPT_0x2B
                 ; 0004 0028             xbee_send(SH_COMMAND,8);
0008d2 efec      	LDI  R30,LOW(_SH_COMMAND)
0008d3 e0f8      	LDI  R31,HIGH(_SH_COMMAND)
0008d4 c00e      	RJMP _0x80035
                 ; 0004 0029 
                 ; 0004 002A         break;
                 ; 0004 002B 
                 ; 0004 002C         case 2  :
                 _0x8000A:
0008d5 30e2      	CPI  R30,LOW(0x2)
0008d6 e0a0      	LDI  R26,HIGH(0x2)
0008d7 07fa      	CPC  R31,R26
0008d8 f479      	BRNE _0x80008
                 ; 0004 002D             printDebug("\r\n ++++++++++ Send SL ++++++++\r\n");
                +
0008d9 e8e2     +LDI R30 , LOW ( 2 * _0x80000 + ( 66 ) )
0008da e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 66 ) )
                 	__POINTW1FN _0x80000,66
0008db 940e 16ac 	CALL SUBOPT_0x8
                 ; 0004 002E             print_payload(SL_COMMAND,8);
0008dd efe4      	LDI  R30,LOW(_SL_COMMAND)
0008de e0f8      	LDI  R31,HIGH(_SL_COMMAND)
0008df 940e 178c 	CALL SUBOPT_0x2B
                 ; 0004 002F             xbee_send(SL_COMMAND,8);
0008e1 efe4      	LDI  R30,LOW(_SL_COMMAND)
0008e2 e0f8      	LDI  R31,HIGH(_SL_COMMAND)
                 _0x80035:
0008e3 93fa      	ST   -Y,R31
0008e4 93ea      	ST   -Y,R30
0008e5 940e 1792 	CALL SUBOPT_0x2C
0008e7 d109      	RCALL _xbee_send
                 ; 0004 0030 
                 ; 0004 0031         break;
                 ; 0004 0032      }
                 _0x80008:
                 ; 0004 0033 }
0008e8 940c 0b75 	JMP  _0x20C000C
                 ;
                 ;int xbee_checksum(char buf[],int len) {
                 ; 0004 0035 int xbee_checksum(char buf[],int len) {
                 _xbee_checksum:
                 ; 0004 0036 
                 ; 0004 0037     int i;
                 ; 0004 0038     char sum = 0;
                 ; 0004 0039     for (i = 0; i < len; i++) {
0008ea 93ba      	ST   -Y,R27
0008eb 93aa      	ST   -Y,R26
0008ec 940e 1d5b 	CALL __SAVELOCR4
                 ;	buf -> Y+6
                 ;	len -> Y+4
                 ;	i -> R16,R17
                 ;	sum -> R19
0008ee e030      	LDI  R19,0
                +
0008ef e000     +LDI R16 , LOW ( 0 )
0008f0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x8000D:
0008f1 81ec      	LDD  R30,Y+4
0008f2 81fd      	LDD  R31,Y+4+1
0008f3 170e      	CP   R16,R30
0008f4 071f      	CPC  R17,R31
0008f5 f454      	BRGE _0x8000E
                 ; 0004 003A         sum += buf[i];
0008f6 01f8      	MOVW R30,R16
0008f7 81ae      	LDD  R26,Y+6
0008f8 81bf      	LDD  R27,Y+6+1
0008f9 0fae      	ADD  R26,R30
0008fa 1fbf      	ADC  R27,R31
0008fb 91ec      	LD   R30,X
0008fc 0f3e      	ADD  R19,R30
                 ; 0004 003B     }
                +
0008fd 5f0f     +SUBI R16 , LOW ( - 1 )
0008fe 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0008ff cff1      	RJMP _0x8000D
                 _0x8000E:
                 ; 0004 003C     return (0xFF - (sum & 0xFF));
000900 2fe3      	MOV  R30,R19
000901 e0f0      	LDI  R31,0
000902 70f0      	ANDI R31,HIGH(0xFF)
000903 efaf      	LDI  R26,LOW(255)
000904 e0b0      	LDI  R27,HIGH(255)
000905 940e 1d2b 	CALL __SWAPW12
000907 1bea      	SUB  R30,R26
000908 0bfb      	SBC  R31,R27
000909 940e 1d62 	CALL __LOADLOCR4
00090b 940c 0afd 	JMP  _0x20C000D
                 ; 0004 003D }
                 ;
                 ;
                 ;void xbee_sendAPI(uint8_t buff[],uint16_t len){
                 ; 0004 0040 void xbee_sendAPI(uint8_t buff[],uint16_t len){
                 _xbee_sendAPI:
                 ; 0004 0041     xbee_send(buff,len);
00090d 93ba      	ST   -Y,R27
00090e 93aa      	ST   -Y,R26
                 ;	buff -> Y+2
                 ;	len -> Y+0
00090f 81ea      	LDD  R30,Y+2
000910 81fb      	LDD  R31,Y+2+1
000911 93fa      	ST   -Y,R31
000912 93ea      	ST   -Y,R30
000913 81aa      	LDD  R26,Y+2
000914 81bb      	LDD  R27,Y+2+1
000915 d0db      	RCALL _xbee_send
                 ; 0004 0042 }
                 _0x20C0010:
000916 9624      	ADIW R28,4
000917 9508      	RET
                 ;
                 ;
                 ;void xbee_receivePacket( uint8_t recvPacket[],uint16_t size){
                 ; 0004 0045 void xbee_receivePacket( uint8_t recvPacket[],uint16_t size){
                 _xbee_receivePacket:
                 ; 0004 0046 
                 ; 0004 0047     int start = 3;
                 ; 0004 0048     if(size <= 5)
000918 940e 1795 	CALL SUBOPT_0x2D
                 ;	recvPacket -> Y+4
                 ;	size -> Y+2
                 ;	start -> R16,R17
                +
00091a e003     +LDI R16 , LOW ( 3 )
00091b e010     +LDI R17 , HIGH ( 3 )
                 	__GETWRN 16,17,3
00091c 81aa      	LDD  R26,Y+2
00091d 81bb      	LDD  R27,Y+2+1
00091e 9716      	SBIW R26,6
00091f f408      	BRSH _0x8000F
                 ; 0004 0049         return;
000920 c0e1      	RJMP _0x20C000F
                 ; 0004 004A     printDebug("\r\n ++++++++++ Recreive Data ++++++++\r\n");
                 _0x8000F:
                +
000921 eae3     +LDI R30 , LOW ( 2 * _0x80000 + ( 99 ) )
000922 e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 99 ) )
                 	__POINTW1FN _0x80000,99
000923 940e 16ac 	CALL SUBOPT_0x8
                 ; 0004 004B     print_payload(recvPacket, size);
000925 81ec      	LDD  R30,Y+4
000926 81fd      	LDD  R31,Y+4+1
000927 93fa      	ST   -Y,R31
000928 93ea      	ST   -Y,R30
000929 81ac      	LDD  R26,Y+4
00092a 81bd      	LDD  R27,Y+4+1
00092b 940e 0653 	CALL _print_payload
                 ; 0004 004C     xbee_processPacket(&recvPacket[start]);
00092d 940e 179a 	CALL SUBOPT_0x2E
00092f d001      	RCALL _xbee_processPacket
                 ; 0004 004D 
                 ; 0004 004E }
000930 c0d1      	RJMP _0x20C000F
                 ;
                 ;void xbee_processPacket(char *buf) {
                 ; 0004 0050 void xbee_processPacket(char *buf) {
                 _xbee_processPacket:
                 ; 0004 0051       uint8_t frameType;
                 ; 0004 0052       frameType = buf[0];
000931 93ba      	ST   -Y,R27
000932 93aa      	ST   -Y,R26
000933 931a      	ST   -Y,R17
                 ;	*buf -> Y+1
                 ;	frameType -> R17
000934 81a9      	LDD  R26,Y+1
000935 81ba      	LDD  R27,Y+1+1
000936 911c      	LD   R17,X
                 ; 0004 0053       switch(frameType) {
000937 2fe1      	MOV  R30,R17
000938 e0f0      	LDI  R31,0
                 ; 0004 0054 
                 ; 0004 0055         /*=============== Recive AI ===============*/
                 ; 0004 0056         case 0x88  :
000939 38e8      	CPI  R30,LOW(0x88)
00093a e0a0      	LDI  R26,HIGH(0x88)
00093b 07fa      	CPC  R31,R26
00093c f591      	BRNE _0x80013
                 ; 0004 0057             if(buf[2] == 0x41 && buf[3] == 0x49){
00093d 940e 17a0 	CALL SUBOPT_0x2F
00093f 34a1      	CPI  R26,LOW(0x41)
000940 f421      	BRNE _0x80015
000941 940e 17a5 	CALL SUBOPT_0x30
000943 34a9      	CPI  R26,LOW(0x49)
000944 f009      	BREQ _0x80016
                 _0x80015:
000945 c003      	RJMP _0x80014
                 _0x80016:
                 ; 0004 0058                 flag_state = 1;
000946 e0e1      	LDI  R30,LOW(1)
000947 e0f0      	LDI  R31,HIGH(1)
000948 c021      	RJMP _0x80036
                 ; 0004 0059             }
                 ; 0004 005A 
                 ; 0004 005B         /*=============== Recive SH ===============*/
                 ; 0004 005C 
                 ; 0004 005D             else if (buf[2] == 0x53 && buf[3] == 0x48){
                 _0x80014:
000949 940e 17a0 	CALL SUBOPT_0x2F
00094b 35a3      	CPI  R26,LOW(0x53)
00094c f421      	BRNE _0x80019
00094d 940e 17a5 	CALL SUBOPT_0x30
00094f 34a8      	CPI  R26,LOW(0x48)
000950 f009      	BREQ _0x8001A
                 _0x80019:
000951 c007      	RJMP _0x80018
                 _0x8001A:
                 ; 0004 005E                 memcpy(EndDevice_MacAddress,&buf[5],4);
000952 940e 17aa 	CALL SUBOPT_0x31
000954 940e 17af 	CALL SUBOPT_0x32
                 ; 0004 005F                 flag_state = 2;
000956 e0e2      	LDI  R30,LOW(2)
000957 e0f0      	LDI  R31,HIGH(2)
000958 c011      	RJMP _0x80036
                 ; 0004 0060             }
                 ; 0004 0061 
                 ; 0004 0062         /*=============== Recive SL ===============*/
                 ; 0004 0063 
                 ; 0004 0064             else if( buf[2] == 0x53 && buf[3] == 0x4C){
                 _0x80018:
000959 940e 17a0 	CALL SUBOPT_0x2F
00095b 35a3      	CPI  R26,LOW(0x53)
00095c f421      	BRNE _0x8001D
00095d 940e 17a5 	CALL SUBOPT_0x30
00095f 34ac      	CPI  R26,LOW(0x4C)
000960 f009      	BREQ _0x8001E
                 _0x8001D:
000961 c00c      	RJMP _0x8001C
                 _0x8001E:
                 ; 0004 0065                 memcpy(&EndDevice_MacAddress[4],&buf[5],4);
                +
000962 e8e6     +LDI R30 , LOW ( _EndDevice_MacAddress + ( 4 ) )
000963 e0f8     +LDI R31 , HIGH ( _EndDevice_MacAddress + ( 4 ) )
                 	__POINTW1MN _EndDevice_MacAddress,4
000964 93fa      	ST   -Y,R31
000965 93ea      	ST   -Y,R30
000966 940e 17af 	CALL SUBOPT_0x32
                 ; 0004 0066                 flag_state = 3;
000968 e0e3      	LDI  R30,LOW(3)
000969 e0f0      	LDI  R31,HIGH(3)
                 _0x80036:
00096a 93e0 062a 	STS  _flag_state,R30
00096c 93f0 062b 	STS  _flag_state+1,R31
                 ; 0004 0067             }
                 ; 0004 0068 
                 ; 0004 0069         break;
                 _0x8001C:
00096e c060      	RJMP _0x80012
                 ; 0004 006A 
                 ; 0004 006B         /*=============== Recive ACK ===============*/
                 ; 0004 006C         case 0x90  :
                 _0x80013:
00096f 39e0      	CPI  R30,LOW(0x90)
000970 e0a0      	LDI  R26,HIGH(0x90)
000971 07fa      	CPC  R31,R26
000972 f011      	BREQ PC+3
000973 940c 09cf 	JMP _0x80012
                 ; 0004 006D 
                 ; 0004 006E         if(buf[32] == 0xA2){
000975 940e 17b8 	CALL SUBOPT_0x33
000977 3aa2      	CPI  R26,LOW(0xA2)
000978 f439      	BRNE _0x80020
                 ; 0004 006F             memcpy(Gateway_MacAddress,&buf[1],8);
000979 940e 17bd 	CALL SUBOPT_0x34
00097b 940e 1475 	CALL _memcpy
                 ; 0004 0070             //input[count_input] = 2;
                 ; 0004 0071             flag_state = 4;
00097d 940e 17c7 	CALL SUBOPT_0x35
                 ; 0004 0072         }
                 ; 0004 0073         else if(buf[32] == 0xA3){
00097f c04f      	RJMP _0x80021
                 _0x80020:
000980 940e 17b8 	CALL SUBOPT_0x33
000982 3aa3      	CPI  R26,LOW(0xA3)
000983 f439      	BRNE _0x80022
                 ; 0004 0074             memcpy(Gateway_MacAddress,&buf[1],8);
000984 940e 17bd 	CALL SUBOPT_0x34
000986 940e 17ce 	CALL SUBOPT_0x36
                 ; 0004 0075             input[count_input] = 3;
000988 e0e3      	LDI  R30,LOW(3)
000989 e0f0      	LDI  R31,HIGH(3)
00098a c03e      	RJMP _0x80037
                 ; 0004 0076             count_input++;
                 ; 0004 0077         }
                 ; 0004 0078         else if(buf[32] == 0xA5){
                 _0x80022:
00098b 940e 17b8 	CALL SUBOPT_0x33
00098d 3aa5      	CPI  R26,LOW(0xA5)
00098e f4d9      	BRNE _0x80024
                 ; 0004 0079             memcpy(Gateway_MacAddress,&buf[1],8);
00098f 940e 17bd 	CALL SUBOPT_0x34
000991 940e 1475 	CALL _memcpy
                 ; 0004 007A             if(buf[34] == 0x01)
000993 81a9      	LDD  R26,Y+1
000994 81ba      	LDD  R27,Y+1+1
000995 9692      	ADIW R26,34
000996 91ac      	LD   R26,X
000997 30a1      	CPI  R26,LOW(0x1)
000998 f429      	BRNE _0x80025
                 ; 0004 007B                 input[count_input] = 511;
000999 940e 17db 	CALL SUBOPT_0x37
00099b efef      	LDI  R30,LOW(511)
00099c e0f1      	LDI  R31,HIGH(511)
00099d c009      	RJMP _0x80038
                 ; 0004 007C             else if(buf[34] == 0x00)
                 _0x80025:
00099e 81e9      	LDD  R30,Y+1
00099f 81fa      	LDD  R31,Y+1+1
0009a0 a1e2      	LDD  R30,Z+34
0009a1 30e0      	CPI  R30,0
0009a2 f431      	BRNE _0x80027
                 ; 0004 007D                 input[count_input] = 510;
0009a3 940e 17db 	CALL SUBOPT_0x37
0009a5 efee      	LDI  R30,LOW(510)
0009a6 e0f1      	LDI  R31,HIGH(510)
                 _0x80038:
0009a7 93ed      	ST   X+,R30
0009a8 93fc      	ST   X,R31
                 ; 0004 007E             count_input++;
                 _0x80027:
0009a9 c021      	RJMP _0x80039
                 ; 0004 007F         }
                 ; 0004 0080         else if(buf[32] == 0xA6){
                 _0x80024:
0009aa 940e 17b8 	CALL SUBOPT_0x33
0009ac 3aa6      	CPI  R26,LOW(0xA6)
0009ad f489      	BRNE _0x80029
                 ; 0004 0081             EVENT[0] = buf[33];
0009ae 81e9      	LDD  R30,Y+1
0009af 81fa      	LDD  R31,Y+1+1
0009b0 a1e1      	LDD  R30,Z+33
0009b1 93e0 0893 	STS  _EVENT,R30
                 ; 0004 0082             EVENT[1] = buf[34];
0009b3 81e9      	LDD  R30,Y+1
0009b4 81fa      	LDD  R31,Y+1+1
0009b5 a1e2      	LDD  R30,Z+34
                +
0009b6 93e0 0894+STS _EVENT + ( 1 ) , R30
                 	__PUTB1MN _EVENT,1
                 ; 0004 0083             memcpy(Gateway_MacAddress,&buf[1],8);
0009b8 940e 17bd 	CALL SUBOPT_0x34
0009ba 940e 17ce 	CALL SUBOPT_0x36
                 ; 0004 0084             input[count_input] = 6;
0009bc e0e6      	LDI  R30,LOW(6)
0009bd e0f0      	LDI  R31,HIGH(6)
0009be c00a      	RJMP _0x80037
                 ; 0004 0085             count_input++;
                 ; 0004 0086         }
                 ; 0004 0087         else if(buf[32] == 0xA8){
                 _0x80029:
0009bf 940e 17b8 	CALL SUBOPT_0x33
0009c1 3aa8      	CPI  R26,LOW(0xA8)
0009c2 f461      	BRNE _0x8002B
                 ; 0004 0088             memcpy(Gateway_MacAddress,&buf[1],8);
0009c3 940e 17bd 	CALL SUBOPT_0x34
0009c5 940e 17ce 	CALL SUBOPT_0x36
                 ; 0004 0089             input[count_input] = 8;
0009c7 e0e8      	LDI  R30,LOW(8)
0009c8 e0f0      	LDI  R31,HIGH(8)
                 _0x80037:
0009c9 93ed      	ST   X+,R30
0009ca 93fc      	ST   X,R31
                 ; 0004 008A             count_input++;
                 _0x80039:
0009cb edab      	LDI  R26,LOW(_count_input)
0009cc e0b8      	LDI  R27,HIGH(_count_input)
0009cd 940e 1743 	CALL SUBOPT_0x21
                 ; 0004 008B         }
                 ; 0004 008C 
                 ; 0004 008D         break;
                 _0x8002B:
                 _0x80021:
                 ; 0004 008E       }
                 _0x80012:
                 ; 0004 008F       if(input[count_input-1] != 0) do_event(input[count_input]);
0009cf 91e0 08db 	LDS  R30,_count_input
0009d1 91f0 08dc 	LDS  R31,_count_input+1
0009d3 9731      	SBIW R30,1
0009d4 940e 17e6 	CALL SUBOPT_0x38
0009d6 0fae      	ADD  R26,R30
0009d7 1fbf      	ADC  R27,R31
0009d8 940e 1cf3 	CALL __GETW1P
0009da 9730      	SBIW R30,0
0009db f039      	BREQ _0x8002C
0009dc 940e 17db 	CALL SUBOPT_0x37
0009de 940e 1cf3 	CALL __GETW1P
0009e0 01df      	MOVW R26,R30
0009e1 940e 0fb0 	CALL _do_event
                 ; 0004 0090       if(count_input == 30)  count_input = 0;
                 _0x8002C:
0009e3 91a0 08db 	LDS  R26,_count_input
0009e5 91b0 08dc 	LDS  R27,_count_input+1
0009e7 975e      	SBIW R26,30
0009e8 f429      	BRNE _0x8002D
0009e9 e0e0      	LDI  R30,LOW(0)
0009ea 93e0 08db 	STS  _count_input,R30
0009ec 93e0 08dc 	STS  _count_input+1,R30
                 ; 0004 0091 }
                 _0x8002D:
0009ee 8118      	LDD  R17,Y+0
0009ef 940c 0dd3 	JMP  _0x20C000A
                 ;
                 ;uint16_t xbee_send(uint8_t buff[],uint16_t len){
                 ; 0004 0093 uint16_t xbee_send(uint8_t buff[],uint16_t len){
                 _xbee_send:
                 ; 0004 0094     uint16_t i;
                 ; 0004 0095     for(i = 0; i < len; i++) {
0009f1 940e 1795 	CALL SUBOPT_0x2D
                 ;	buff -> Y+4
                 ;	len -> Y+2
                 ;	i -> R16,R17
                +
0009f3 e000     +LDI R16 , LOW ( 0 )
0009f4 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x8002F:
0009f5 81ea      	LDD  R30,Y+2
0009f6 81fb      	LDD  R31,Y+2+1
0009f7 170e      	CP   R16,R30
0009f8 071f      	CPC  R17,R31
0009f9 f438      	BRSH _0x80030
                 ; 0004 0096         putchar1(buff[i]);
0009fa 940e 179a 	CALL SUBOPT_0x2E
0009fc 91ac      	LD   R26,X
0009fd de21      	RCALL _putchar1
                 ; 0004 0097     }
                +
0009fe 5f0f     +SUBI R16 , LOW ( - 1 )
0009ff 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000a00 cff4      	RJMP _0x8002F
                 _0x80030:
                 ; 0004 0098     return i;
000a01 01f8      	MOVW R30,R16
                 _0x20C000F:
000a02 8119      	LDD  R17,Y+1
000a03 8108      	LDD  R16,Y+0
000a04 9626      	ADIW R28,6
000a05 9508      	RET
                 ; 0004 0099 }
                 ;
                 ;void xbee_read() {
                 ; 0004 009B void xbee_read() {
                 _xbee_read:
                 ; 0004 009C 
                 ; 0004 009D     uint8_t readbuf[256];
                 ; 0004 009E     uint8_t data;
                 ; 0004 009F     uint16_t len = 0;
                 ; 0004 00A0     int i = 0;
                 ; 0004 00A1     delay_ms(100);
000a06 50d1      	SUBI R29,1
000a07 940e 1d59 	CALL __SAVELOCR6
                 ;	readbuf -> Y+6
                 ;	data -> R17
                 ;	len -> R18,R19
                 ;	i -> R20,R21
                +
000a09 e020     +LDI R18 , LOW ( 0 )
000a0a e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000a0b e040     +LDI R20 , LOW ( 0 )
000a0c e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000a0d 940e 16da 	CALL SUBOPT_0xF
                 ; 0004 00A2 
                 ; 0004 00A3     while (rx_counter1>0){
                 _0x80031:
000a0f 91a0 062e 	LDS  R26,_rx_counter1
000a11 91b0 062f 	LDS  R27,_rx_counter1+1
000a13 940e 1d4a 	CALL __CPW02
000a15 f548      	BRSH _0x80033
                 ; 0004 00A4         data=rx_buffer1[rx_rd_index1++];
000a16 e2ac      	LDI  R26,LOW(_rx_rd_index1)
000a17 e0b6      	LDI  R27,HIGH(_rx_rd_index1)
000a18 940e 1743 	CALL SUBOPT_0x21
000a1a 9731      	SBIW R30,1
000a1b 5de0      	SUBI R30,LOW(-_rx_buffer1)
000a1c 4ff9      	SBCI R31,HIGH(-_rx_buffer1)
000a1d 8110      	LD   R17,Z
                 ; 0004 00A5         readbuf[i++] = data;
000a1e 01fa      	MOVW R30,R20
                +
000a1f 5f4f     +SUBI R20 , LOW ( - 1 )
000a20 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000a21 01de      	MOVW R26,R28
000a22 9616      	ADIW R26,6
000a23 0fea      	ADD  R30,R26
000a24 1ffb      	ADC  R31,R27
000a25 8310      	ST   Z,R17
                 ; 0004 00A6         len++;
                +
000a26 5f2f     +SUBI R18 , LOW ( - 1 )
000a27 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0004 00A7         #if RX_BUFFER_SIZE1 != 256
                 ; 0004 00A8         if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
000a28 91a0 062c 	LDS  R26,_rx_rd_index1
000a2a 91b0 062d 	LDS  R27,_rx_rd_index1+1
000a2c 30a0      	CPI  R26,LOW(0x200)
000a2d e0e2      	LDI  R30,HIGH(0x200)
000a2e 07be      	CPC  R27,R30
000a2f f429      	BRNE _0x80034
000a30 e0e0      	LDI  R30,LOW(0)
000a31 93e0 062c 	STS  _rx_rd_index1,R30
000a33 93e0 062d 	STS  _rx_rd_index1+1,R30
                 ; 0004 00A9         #endif
                 ; 0004 00AA         #asm("cli")
                 _0x80034:
000a35 94f8      	cli
                 ; 0004 00AB         --rx_counter1;
000a36 e2ae      	LDI  R26,LOW(_rx_counter1)
000a37 e0b6      	LDI  R27,HIGH(_rx_counter1)
000a38 91ed      	LD   R30,X+
000a39 91fd      	LD   R31,X+
000a3a 9731      	SBIW R30,1
000a3b 93fe      	ST   -X,R31
000a3c 93ee      	ST   -X,R30
                 ; 0004 00AC         #asm("sei")
000a3d 9478      	sei
                 ; 0004 00AD     }
000a3e cfd0      	RJMP _0x80031
                 _0x80033:
                 ; 0004 00AE 
                 ; 0004 00AF     xbee_receivePacket(readbuf, len);
000a3f 01fe      	MOVW R30,R28
000a40 9636      	ADIW R30,6
000a41 93fa      	ST   -Y,R31
000a42 93ea      	ST   -Y,R30
000a43 01d9      	MOVW R26,R18
000a44 ded3      	RCALL _xbee_receivePacket
                 ; 0004 00B0 }
000a45 940e 1d60 	CALL __LOADLOCR6
000a47 9626      	ADIW R28,6
000a48 5fdf      	SUBI R29,-1
000a49 9508      	RET
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;#include <io.h>
                 ;#include <initial_system.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <timer.h>
                 ;#include <int_protocol.h>
                 ;#include <adc.h>
                 ;
                 ;/* ================================================================================= */
                 ;int initial_system(void) {
                 ; 0005 000F int initial_system(void) {
                 
                 	.CSEG
                 _initial_system:
                 ; 0005 0010 
                 ; 0005 0011     init_IO();
000a4a d01a      	RCALL _init_IO
                 ; 0005 0012 
                 ; 0005 0013     //============ Uart Initial ============//
                 ; 0005 0014     init_uart(0, 38400);     // uart0 for printDebug
000a4b e0e0      	LDI  R30,LOW(0)
000a4c 940e 17eb 	CALL SUBOPT_0x39
                 ; 0005 0015     init_uart(1, 38400);    // uart1 for xbee
000a4e e0e1      	LDI  R30,LOW(1)
000a4f 940e 17eb 	CALL SUBOPT_0x39
                 ; 0005 0016 
                 ; 0005 0017     //============ Timer Initial ============//
                 ; 0005 0018     init_timer();
000a51 940e 075b 	CALL _init_timer
                 ; 0005 0019     enable_timerOverflow(0);      // interrupt every 0.021 sec.
000a53 940e 16d1 	CALL SUBOPT_0xD
000a55 940e 079a 	CALL _enable_timerOverflow
                 ; 0005 001A     enable_timerOverflow(1);      // interrupt every 1 sec.
000a57 940e 16de 	CALL SUBOPT_0x10
000a59 940e 079a 	CALL _enable_timerOverflow
                 ; 0005 001B     enable_timerOverflow(3);      // interrupt every 0.5 sec.
000a5b e0a3      	LDI  R26,LOW(3)
000a5c e0b0      	LDI  R27,0
000a5d 940e 079a 	CALL _enable_timerOverflow
                 ; 0005 001C 
                 ; 0005 001D     //============ Module Initial ============//
                 ; 0005 001E     init_adc(VREF_AVCC);
000a5f e4a0      	LDI  R26,LOW(64)
000a60 940e 0da2 	CALL _init_adc
                 ; 0005 001F 
                 ; 0005 0020     return 0;
000a62 e0e0      	LDI  R30,LOW(0)
000a63 e0f0      	LDI  R31,HIGH(0)
000a64 9508      	RET
                 ; 0005 0021 }
                 ;
                 ;/* ================================================================================= */
                 ;void init_IO(void) {
                 ; 0005 0024 void init_IO(void) {
                 _init_IO:
                 ; 0005 0025 
                 ; 0005 0026     /*----- Digital Input -----*/
                 ; 0005 0027     // Initial Direction
                 ; 0005 0028     SW_BUTTON_DDR;           // Switch Button, Join Button
000a65 98a0      	CBI  0x14,0
                 ; 0005 0029     // pull up
                 ; 0005 002A     SW_BUTTON_PORT = 1;
000a66 9aa8      	SBI  0x15,0
                 ; 0005 002B 
                 ; 0005 002C     D_SW1_DDR;
000a67 98d7      	CBI  0x1A,7
                 ; 0005 002D     D_SW2_DDR;
000a68 98d6      	CBI  0x1A,6
                 ; 0005 002E     D_SW3_DDR;
000a69 98d5      	CBI  0x1A,5
                 ; 0005 002F     D_SW4_DDR;
000a6a 98d4      	CBI  0x1A,4
                 ; 0005 0030 
                 ; 0005 0031     /*----- Digital Output -----*/
                 ; 0005 0032     // Initial Direction
                 ; 0005 0033     LED_STAT_DDR;                   // LED Status
000a6b 9aa7      	SBI  0x14,7
                 ; 0005 0034     POWER_RELAY_DDR;                // Drive relay
000a6c 91e0 0064 	LDS  R30,100
000a6e 60e4      	ORI  R30,4
000a6f 93e0 0064 	STS  100,R30
                 ; 0005 0035     XBEE_RESET_DDR;
000a71 9a12      	SBI  0x2,2
                 ; 0005 0036     XBEE_SLEEP_DDR;
000a72 91e0 0064 	LDS  R30,100
000a74 60e8      	ORI  R30,8
000a75 93e0 0064 	STS  100,R30
                 ; 0005 0037 
                 ; 0005 0038     LED_STAT_OFF;
000a77 9aaf      	SBI  0x15,7
                 ; 0005 0039     POWER_RELAY_OFF;
000a78 940e 1664 	CALL SUBOPT_0x1
                 ; 0005 003A     XBEE_RESET_HIGH;      // XBee Reset active low
000a7a 9a1a      	SBI  0x3,2
                 ; 0005 003B     XBEE_SLEEP_LOW;
000a7b 91e0 0065 	LDS  R30,101
000a7d 7fe7      	ANDI R30,0XF7
000a7e 93e0 0065 	STS  101,R30
                 ; 0005 003C 
                 ; 0005 003D }
000a80 9508      	RET
                 ;/* ================================================================================= */
                 ;int8_t read_dSwitch() {
                 ; 0005 003F int8_t read_dSwitch() {
                 _read_dSwitch:
                 ; 0005 0040     int8_t read1, read2;
                 ; 0005 0041     read1 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
000a81 931a      	ST   -Y,R17
000a82 930a      	ST   -Y,R16
                 ;	read1 -> R17
                 ;	read2 -> R16
000a83 940e 17f2 	CALL SUBOPT_0x3A
000a85 2f1e      	MOV  R17,R30
                 ; 0005 0042     delay_ms(100);
000a86 940e 16da 	CALL SUBOPT_0xF
                 ; 0005 0043     read2 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
000a88 940e 17f2 	CALL SUBOPT_0x3A
000a8a 2f0e      	MOV  R16,R30
                 ; 0005 0044     if(read1 == read2) {
000a8b 1701      	CP   R16,R17
000a8c f411      	BRNE _0xA0017
                 ; 0005 0045         return read1;
000a8d 2fe1      	MOV  R30,R17
000a8e c001      	RJMP _0x20C000E
                 ; 0005 0046     }else {
                 _0xA0017:
                 ; 0005 0047         return -1;
000a8f efef      	LDI  R30,LOW(255)
                 ; 0005 0048     }
                 ; 0005 0049 }
                 _0x20C000E:
000a90 9109      	LD   R16,Y+
000a91 9119      	LD   R17,Y+
000a92 9508      	RET
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdint.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <math.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <meansure.h>
                 ;
                 ;uint8_t JOIN_A1[]           = {0x7E,0x00,0x23,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x01,0xA1,0x00};
                 
                 	.DSEG
                 ;uint8_t PING_A4[]           = {0x7E,0x00,0x23,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x01,0xA4,0x00};
                 ;uint8_t SEND_EVENT_[]       = {0x7E,0x00,0x25,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x01,0xA5,0x01,0x00,0x00};
                 ;uint8_t SEND_REPORT_[]      = {0x7E,0x00,0x48,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x26,0xA7,0x01,0x01,0x00,0x00,0x00,0x00,0x0                 0,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _voltage[8]         = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _amp[8]             = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _power[8]           = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _watt[8]            = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;
                 ;void reverse(char *str, int len){
                 ; 0006 0016 void reverse(char *str, int len){
                 
                 	.CSEG
                 _reverse:
                 ; 0006 0017     int i=0,j=len-1,temp;
                 ; 0006 0018 
000a93 93ba      ; 0006 0019     while (i<j){
000a94 93aa      	ST   -Y,R27
000a95 940e 1d59 	ST   -Y,R26
                 	CALL __SAVELOCR6
                 ;	*str -> Y+8
                 ;	len -> Y+6
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                +
000a97 e000     +LDI R16 , LOW ( 0 )
000a98 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000a99 81ee      	LDD  R30,Y+6
000a9a 81ff      	LDD  R31,Y+6+1
000a9b 9731      	SBIW R30,1
000a9c 019f      	MOVW R18,R30
                 _0xC0007:
                +
000a9d 1702     +CP R16 , R18
000a9e 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
000a9f f4dc      	BRGE _0xC0009
                 ; 0006 001A         temp = str[i];
000aa0 01f8      	MOVW R30,R16
000aa1 85a8      	LDD  R26,Y+8
000aa2 85b9      	LDD  R27,Y+8+1
000aa3 0fae      	ADD  R26,R30
000aa4 1fbf      	ADC  R27,R31
000aa5 914c      	LD   R20,X
000aa6 2755      	CLR  R21
                 ; 0006 001B         str[i] = str[j];
000aa7 940e 171c 	CALL SUBOPT_0x1C
000aa9 010f      	MOVW R0,R30
000aaa 01f9      	MOVW R30,R18
000aab 85a8      	LDD  R26,Y+8
000aac 85b9      	LDD  R27,Y+8+1
000aad 0fae      	ADD  R26,R30
000aae 1fbf      	ADC  R27,R31
000aaf 91ec      	LD   R30,X
000ab0 01d0      	MOVW R26,R0
000ab1 93ec      	ST   X,R30
                 ; 0006 001C         str[j] = temp;
000ab2 01f9      	MOVW R30,R18
000ab3 940e 171c 	CALL SUBOPT_0x1C
000ab5 8340      	ST   Z,R20
                 ; 0006 001D         i++; j--;
                +
000ab6 5f0f     +SUBI R16 , LOW ( - 1 )
000ab7 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                +
000ab8 5021     +SUBI R18 , LOW ( 1 )
000ab9 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0006 001E     }
000aba cfe2      	RJMP _0xC0007
                 _0xC0009:
                 ; 0006 001F }
000abb 940e 1d60 	CALL __LOADLOCR6
000abd 962a      	ADIW R28,10
000abe 9508      	RET
                 ;
                 ;// Converts a given integer x to string str[]. d is the number
                 ;// of digits required in output. If d is more than the number
                 ;// of digits in x, then 0s are added at the beginning.
                 ;
                 ;int intToStr(int x, char str[], int d){
                 ; 0006 0025 int intToStr(int x, char str[], int d){
                 _intToStr:
                 ; 0006 0026     int i = 0;
                 ; 0006 0027     while (x){
000abf 940e 1795 	CALL SUBOPT_0x2D
                 ;	x -> Y+6
                 ;	str -> Y+4
                 ;	d -> Y+2
                 ;	i -> R16,R17
                +
000ac1 e000     +LDI R16 , LOW ( 0 )
000ac2 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xC000A:
000ac3 81ee      	LDD  R30,Y+6
000ac4 81ff      	LDD  R31,Y+6+1
000ac5 9730      	SBIW R30,0
000ac6 f0d1      	BREQ _0xC000C
                 ; 0006 0028         str[i++] = (x%10) + '0';
000ac7 01f8      	MOVW R30,R16
                +
000ac8 5f0f     +SUBI R16 , LOW ( - 1 )
000ac9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000aca 81ac      	LDD  R26,Y+4
000acb 81bd      	LDD  R27,Y+4+1
000acc 0fea      	ADD  R30,R26
000acd 1ffb      	ADC  R31,R27
000ace 01bf      	MOVW R22,R30
000acf 81ae      	LDD  R26,Y+6
000ad0 81bf      	LDD  R27,Y+6+1
000ad1 e0ea      	LDI  R30,LOW(10)
000ad2 e0f0      	LDI  R31,HIGH(10)
000ad3 940e 1cc7 	CALL __MODW21
000ad5 5de0      	SUBI R30,-LOW(48)
000ad6 01db      	MOVW R26,R22
000ad7 93ec      	ST   X,R30
                 ; 0006 0029         x = x/10;
000ad8 81ae      	LDD  R26,Y+6
000ad9 81bf      	LDD  R27,Y+6+1
000ada e0ea      	LDI  R30,LOW(10)
000adb e0f0      	LDI  R31,HIGH(10)
000adc 940e 1c91 	CALL __DIVW21
000ade 83ee      	STD  Y+6,R30
000adf 83ff      	STD  Y+6+1,R31
                 ; 0006 002A     }
000ae0 cfe2      	RJMP _0xC000A
                 _0xC000C:
                 ; 0006 002B 
                 ; 0006 002C     // If number of digits required is more, then
                 ; 0006 002D     // add 0s at the beginning
                 ; 0006 002E     while (i < d)
                 _0xC000D:
000ae1 81ea      	LDD  R30,Y+2
000ae2 81fb      	LDD  R31,Y+2+1
000ae3 170e      	CP   R16,R30
000ae4 071f      	CPC  R17,R31
000ae5 f454      	BRGE _0xC000F
                 ; 0006 002F         str[i++] = '0';
000ae6 01f8      	MOVW R30,R16
                +
000ae7 5f0f     +SUBI R16 , LOW ( - 1 )
000ae8 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000ae9 81ac      	LDD  R26,Y+4
000aea 81bd      	LDD  R27,Y+4+1
000aeb 0fae      	ADD  R26,R30
000aec 1fbf      	ADC  R27,R31
000aed e3e0      	LDI  R30,LOW(48)
000aee 93ec      	ST   X,R30
000aef cff1      	RJMP _0xC000D
                 _0xC000F:
                 ; 0006 0031 reverse(str, i);
000af0 81ec      	LDD  R30,Y+4
000af1 81fd      	LDD  R31,Y+4+1
000af2 93fa      	ST   -Y,R31
000af3 93ea      	ST   -Y,R30
000af4 01d8      	MOVW R26,R16
000af5 df9d      	RCALL _reverse
                 ; 0006 0032     str[i] = '\0';
000af6 940e 179a 	CALL SUBOPT_0x2E
000af8 e0e0      	LDI  R30,LOW(0)
000af9 93ec      	ST   X,R30
                 ; 0006 0033     return i;
000afa 01f8      	MOVW R30,R16
000afb 8119      	LDD  R17,Y+1
000afc 8108      	LDD  R16,Y+0
                 _0x20C000D:
000afd 9628      	ADIW R28,8
000afe 9508      	RET
                 ; 0006 0034 }
                 ;
                 ;void _ftoa(float n, char *res, int afterpoint){
                 ; 0006 0036 void _ftoa(float n, char *res, int afterpoint){
                 __ftoa:
                 ; 0006 0037     // Extract integer part
                 ; 0006 0038     int ipart = (int)n;
                 ; 0006 0039 
                 ; 0006 003A     // Extract floating part
                 ; 0006 003B     float fpart = n - (float)ipart;
                 ; 0006 003C 
                 ; 0006 003D     // convert integer part to string
                 ; 0006 003E     int i = intToStr(ipart, res, 0);
                 ; 0006 003F     if(ipart == 0){
000aff 93ba      	ST   -Y,R27
000b00 93aa      	ST   -Y,R26
000b01 9724      	SBIW R28,4
000b02 940e 1d5b 	CALL __SAVELOCR4
                 ;	n -> Y+12
                 ;	*res -> Y+10
                 ;	afterpoint -> Y+8
                 ;	ipart -> R16,R17
                 ;	fpart -> Y+4
                 ;	i -> R18,R19
000b04 940e 180c 	CALL SUBOPT_0x3B
000b06 940e 1aa5 	CALL __CFD1
000b08 018f      	MOVW R16,R30
000b09 01f8      	MOVW R30,R16
000b0a 940e 1811 	CALL SUBOPT_0x3C
000b0c 940e 1816 	CALL SUBOPT_0x3D
000b0e 940e 181b 	CALL SUBOPT_0x3E
000b10 940e 1820 	CALL SUBOPT_0x3F
000b12 931a      	ST   -Y,R17
000b13 930a      	ST   -Y,R16
000b14 85ec      	LDD  R30,Y+12
000b15 85fd      	LDD  R31,Y+12+1
000b16 93fa      	ST   -Y,R31
000b17 93ea      	ST   -Y,R30
000b18 940e 16d1 	CALL SUBOPT_0xD
000b1a dfa4      	RCALL _intToStr
000b1b 019f      	MOVW R18,R30
000b1c 2e00      	MOV  R0,R16
000b1d 2a01      	OR   R0,R17
000b1e f449      	BRNE _0xC0010
                 ; 0006 0040        res[i] = '0';
000b1f 01f9      	MOVW R30,R18
000b20 85aa      	LDD  R26,Y+10
000b21 85bb      	LDD  R27,Y+10+1
000b22 0fae      	ADD  R26,R30
000b23 1fbf      	ADC  R27,R31
000b24 e3e0      	LDI  R30,LOW(48)
000b25 93ec      	ST   X,R30
                 ; 0006 0041        i++;
                +
000b26 5f2f     +SUBI R18 , LOW ( - 1 )
000b27 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0006 0042     }
                 ; 0006 0043     // check for display option after point
                 ; 0006 0044     if (afterpoint != 0){
                 _0xC0010:
000b28 85e8      	LDD  R30,Y+8
000b29 85f9      	LDD  R31,Y+8+1
000b2a 9730      	SBIW R30,0
000b2b f141      	BREQ _0xC0011
                 ; 0006 0045         res[i] = '.'; // add dot
000b2c 01f9      	MOVW R30,R18
000b2d 85aa      	LDD  R26,Y+10
000b2e 85bb      	LDD  R27,Y+10+1
000b2f 0fae      	ADD  R26,R30
000b30 1fbf      	ADC  R27,R31
000b31 e2ee      	LDI  R30,LOW(46)
000b32 93ec      	ST   X,R30
                 ; 0006 0046 
                 ; 0006 0047         // Get the value of fraction part upto given no.
                 ; 0006 0048         // of points after dot. The third parameter is needed
                 ; 0006 0049         // to handle cases like 233.007
                 ; 0006 004A         fpart = fpart * pow(10, afterpoint);
000b33 940e 1825 	CALL SUBOPT_0x40
000b35 940e 1d1b 	CALL __PUTPARD1
000b37 85ec      	LDD  R30,Y+12
000b38 85fd      	LDD  R31,Y+12+1
000b39 940e 1811 	CALL SUBOPT_0x3C
000b3b 01df      	MOVW R26,R30
000b3c 01cb      	MOVW R24,R22
000b3d 940e 1605 	CALL _pow
000b3f 940e 182a 	CALL SUBOPT_0x41
000b41 940e 182f 	CALL SUBOPT_0x42
                 ; 0006 004B 
                 ; 0006 004C         intToStr((int)fpart, res + i + 1, afterpoint);
000b43 940e 1832 	CALL SUBOPT_0x43
000b45 940e 1aa5 	CALL __CFD1
000b47 93fa      	ST   -Y,R31
000b48 93ea      	ST   -Y,R30
000b49 01f9      	MOVW R30,R18
000b4a 85ac      	LDD  R26,Y+12
000b4b 85bd      	LDD  R27,Y+12+1
000b4c 0fea      	ADD  R30,R26
000b4d 1ffb      	ADC  R31,R27
000b4e 9631      	ADIW R30,1
000b4f 93fa      	ST   -Y,R31
000b50 93ea      	ST   -Y,R30
000b51 85ac      	LDD  R26,Y+12
000b52 85bd      	LDD  R27,Y+12+1
000b53 df6b      	RCALL _intToStr
                 ; 0006 004D     }
                 ; 0006 004E }
                 _0xC0011:
000b54 940e 1d62 	CALL __LOADLOCR4
000b56 9660      	ADIW R28,16
000b57 9508      	RET
                 ;
                 ;
                 ;void send_event(uint8_t led,uint8_t state){
                 ; 0006 0051 void send_event(uint8_t led,uint8_t state){
                 _send_event:
                 ; 0006 0052 
                 ; 0006 0053     memcpy(&SEND_EVENT_[5],Gateway_MacAddress,8);
000b58 940e 1837 	CALL SUBOPT_0x44
                 ;	led -> Y+1
                 ;	state -> Y+0
000b5a 940e 1841 	CALL SUBOPT_0x45
                 ; 0006 0054     memcpy(&SEND_EVENT_[18],EndDevice_MacAddress,8);
000b5c 940e 1792 	CALL SUBOPT_0x2C
000b5e 940e 1848 	CALL SUBOPT_0x46
                 ; 0006 0055     memcpy(&SEND_EVENT_[26],Gateway_MacAddress,8);
000b60 940e 1853 	CALL SUBOPT_0x47
                 ; 0006 0056     memcpy(&SEND_EVENT_[39],&state,1);
000b62 940e 16de 	CALL SUBOPT_0x10
000b64 940e 1475 	CALL _memcpy
                 ; 0006 0057     SEND_EVENT_[37] = 0xA5;
000b66 eae5      	LDI  R30,LOW(165)
000b67 940e 185a 	CALL SUBOPT_0x48
                 ; 0006 0058     SEND_EVENT_[38] = led;
                 ; 0006 0059     SEND_EVENT_[40] = xbee_checksum(&SEND_EVENT_[3],SEND_EVENT_[2]);
                 ; 0006 005A     printDebug("\r\n ++++++++++ Send LED ++++++++\r\n");
                +
000b69 e8e2     +LDI R30 , LOW ( 2 * _0xC0000 + ( 0 ) )
000b6a e0f4     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 0 ) )
                 	__POINTW1FN _0xC0000,0
000b6b 940e 16ac 	CALL SUBOPT_0x8
                 ; 0006 005B     print_payload(SEND_EVENT_,41);
000b6d 940e 186b 	CALL SUBOPT_0x49
000b6f 940e 0653 	CALL _print_payload
                 ; 0006 005C     xbee_sendAPI(SEND_EVENT_,41);
000b71 940e 186b 	CALL SUBOPT_0x49
000b73 940e 090d 	CALL _xbee_sendAPI
                 ; 0006 005D 
                 ; 0006 005E }
                 _0x20C000C:
000b75 9622      	ADIW R28,2
000b76 9508      	RET
                 ;
                 ;void send_join(){
                 ; 0006 0060 void send_join(){
                 _send_join:
                 ; 0006 0061 
                 ; 0006 0062     memcpy(&JOIN_A1[18],EndDevice_MacAddress,8);
                +
000b77 e1e6     +LDI R30 , LOW ( _JOIN_A1 + ( 18 ) )
000b78 e0f9     +LDI R31 , HIGH ( _JOIN_A1 + ( 18 ) )
                 	__POINTW1MN _JOIN_A1,18
000b79 940e 1872 	CALL SUBOPT_0x4A
000b7b 940e 1792 	CALL SUBOPT_0x2C
000b7d 940e 1475 	CALL _memcpy
                 ; 0006 0063     JOIN_A1[38] = xbee_checksum(&JOIN_A1[3],JOIN_A1[2]);
                +
000b7f e0e7     +LDI R30 , LOW ( _JOIN_A1 + ( 3 ) )
000b80 e0f9     +LDI R31 , HIGH ( _JOIN_A1 + ( 3 ) )
                 	__POINTW1MN _JOIN_A1,3
000b81 93fa      	ST   -Y,R31
000b82 93ea      	ST   -Y,R30
                +
000b83 91a0 0906+LDS R26 , _JOIN_A1 + ( 2 )
                 	__GETB2MN _JOIN_A1,2
000b85 940e 1875 	CALL SUBOPT_0x4B
                +
000b87 93e0 092a+STS _JOIN_A1 + ( 38 ) , R30
                 	__PUTB1MN _JOIN_A1,38
                 ; 0006 0064     printDebug("\r\n ++++++++++ Send Join ++++++++\r\n");
                +
000b89 eae4     +LDI R30 , LOW ( 2 * _0xC0000 + ( 34 ) )
000b8a e0f4     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 34 ) )
                 	__POINTW1FN _0xC0000,34
000b8b 940e 16ac 	CALL SUBOPT_0x8
                 ; 0006 0065     print_payload(JOIN_A1, 39);
000b8d e0e4      	LDI  R30,LOW(_JOIN_A1)
000b8e e0f9      	LDI  R31,HIGH(_JOIN_A1)
000b8f 940e 1878 	CALL SUBOPT_0x4C
                 ; 0006 0066     xbee_sendAPI(JOIN_A1,39);
000b91 e0e4      	LDI  R30,LOW(_JOIN_A1)
000b92 e0f9      	LDI  R31,HIGH(_JOIN_A1)
000b93 c028      	RJMP _0x20C000B
                 ; 0006 0067 
                 ; 0006 0068 }
                 ;
                 ;void send_ping(){
                 ; 0006 006A void send_ping(){
                 _send_ping:
                 ; 0006 006B 
                 ; 0006 006C     memcpy(&PING_A4[5],Gateway_MacAddress,8);
                +
000b94 e3e0     +LDI R30 , LOW ( _PING_A4 + ( 5 ) )
000b95 e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 5 ) )
                 	__POINTW1MN _PING_A4,5
000b96 940e 187e 	CALL SUBOPT_0x4D
000b98 940e 1475 	CALL _memcpy
                 ; 0006 006D     memcpy(&PING_A4[18],EndDevice_MacAddress,8);
                +
000b9a e3ed     +LDI R30 , LOW ( _PING_A4 + ( 18 ) )
000b9b e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 18 ) )
                 	__POINTW1MN _PING_A4,18
000b9c 940e 1872 	CALL SUBOPT_0x4A
000b9e 940e 1792 	CALL SUBOPT_0x2C
000ba0 940e 1475 	CALL _memcpy
                 ; 0006 006E     memcpy(&PING_A4[26],Gateway_MacAddress,8);
                +
000ba2 e4e5     +LDI R30 , LOW ( _PING_A4 + ( 26 ) )
000ba3 e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 26 ) )
                 	__POINTW1MN _PING_A4,26
000ba4 940e 187e 	CALL SUBOPT_0x4D
000ba6 940e 1475 	CALL _memcpy
                 ; 0006 006F     PING_A4[38] = xbee_checksum(&PING_A4[3],PING_A4[2]);
                +
000ba8 e2ee     +LDI R30 , LOW ( _PING_A4 + ( 3 ) )
000ba9 e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 3 ) )
                 	__POINTW1MN _PING_A4,3
000baa 93fa      	ST   -Y,R31
000bab 93ea      	ST   -Y,R30
                +
000bac 91a0 092d+LDS R26 , _PING_A4 + ( 2 )
                 	__GETB2MN _PING_A4,2
000bae 940e 1875 	CALL SUBOPT_0x4B
                +
000bb0 93e0 0951+STS _PING_A4 + ( 38 ) , R30
                 	__PUTB1MN _PING_A4,38
                 ; 0006 0070     printDebug("\r\n ++++++++++ Send Ping ++++++++\r\n");
                +
000bb2 ece7     +LDI R30 , LOW ( 2 * _0xC0000 + ( 69 ) )
000bb3 e0f4     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 69 ) )
                 	__POINTW1FN _0xC0000,69
000bb4 940e 16ac 	CALL SUBOPT_0x8
                 ; 0006 0071     print_payload(PING_A4, 39);
000bb6 e2eb      	LDI  R30,LOW(_PING_A4)
000bb7 e0f9      	LDI  R31,HIGH(_PING_A4)
000bb8 940e 1878 	CALL SUBOPT_0x4C
                 ; 0006 0072     xbee_sendAPI(PING_A4,39);
000bba e2eb      	LDI  R30,LOW(_PING_A4)
000bbb e0f9      	LDI  R31,HIGH(_PING_A4)
                 _0x20C000B:
000bbc 93fa      	ST   -Y,R31
000bbd 93ea      	ST   -Y,R30
000bbe e2a7      	LDI  R26,LOW(39)
000bbf e0b0      	LDI  R27,0
000bc0 940e 090d 	CALL _xbee_sendAPI
                 ; 0006 0073 
                 ; 0006 0074 }
000bc2 9508      	RET
                 ;
                 ;void recive_event(uint8_t led,uint8_t state){
                 ; 0006 0076 void recive_event(uint8_t led,uint8_t state){
                 _recive_event:
                 ; 0006 0077 
                 ; 0006 0078     memcpy(&SEND_EVENT_[5],Gateway_MacAddress,8);
000bc3 940e 1837 	CALL SUBOPT_0x44
                 ;	led -> Y+1
                 ;	state -> Y+0
000bc5 940e 1841 	CALL SUBOPT_0x45
                 ; 0006 0079     memcpy(&SEND_EVENT_[18],EndDevice_MacAddress,8);
000bc7 940e 1792 	CALL SUBOPT_0x2C
000bc9 940e 1848 	CALL SUBOPT_0x46
                 ; 0006 007A     memcpy(&SEND_EVENT_[26],Gateway_MacAddress,8);
000bcb 940e 1853 	CALL SUBOPT_0x47
                 ; 0006 007B     memcpy(&SEND_EVENT_[39],&state,1);
000bcd 940e 16de 	CALL SUBOPT_0x10
000bcf 940e 1475 	CALL _memcpy
                 ; 0006 007C     SEND_EVENT_[37] = 0xA6;
000bd1 eae6      	LDI  R30,LOW(166)
000bd2 940e 185a 	CALL SUBOPT_0x48
                 ; 0006 007D     SEND_EVENT_[38] = led;
                 ; 0006 007E     SEND_EVENT_[40] = xbee_checksum(&SEND_EVENT_[3],SEND_EVENT_[2]);
                 ; 0006 007F     printDebug("\r\n ++++++++++ Send EVENT RECIVE ++++++++\r\n");
                +
000bd4 eeea     +LDI R30 , LOW ( 2 * _0xC0000 + ( 104 ) )
000bd5 e0f4     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 104 ) )
                 	__POINTW1FN _0xC0000,104
000bd6 940e 16ac 	CALL SUBOPT_0x8
                 ; 0006 0080     print_payload(SEND_EVENT_,41);
000bd8 940e 186b 	CALL SUBOPT_0x49
000bda 940e 0653 	CALL _print_payload
                 ; 0006 0081     xbee_sendAPI(SEND_EVENT_,41);
000bdc 940e 186b 	CALL SUBOPT_0x49
000bde 940e 090d 	CALL _xbee_sendAPI
                 ; 0006 0082 
                 ; 0006 0083 }
000be0 940c 105c 	JMP  _0x20C0008
                 ;
                 ;void send_report(uint8_t data_id,float Vavg,float Iavg,float Pavg,float WHsum){
                 ; 0006 0085 void send_report(uint8_t data_id,float Vavg,float Iavg,float Pavg,float WHsum){
                 _send_report:
                 ; 0006 0086 
                 ; 0006 0087     memcpy(&SEND_REPORT_[5],Gateway_MacAddress,8);
000be2 940e 1d20 	CALL __PUTPARD2
                 ;	data_id -> Y+16
                 ;	Vavg -> Y+12
                 ;	Iavg -> Y+8
                 ;	Pavg -> Y+4
                 ;	WHsum -> Y+0
                +
000be4 e8e0     +LDI R30 , LOW ( _SEND_REPORT_ + ( 5 ) )
000be5 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 5 ) )
                 	__POINTW1MN _SEND_REPORT_,5
000be6 940e 187e 	CALL SUBOPT_0x4D
000be8 940e 1475 	CALL _memcpy
                 ; 0006 0088     memcpy(&SEND_REPORT_[18],EndDevice_MacAddress,8);
                +
000bea e8ed     +LDI R30 , LOW ( _SEND_REPORT_ + ( 18 ) )
000beb e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 18 ) )
                 	__POINTW1MN _SEND_REPORT_,18
000bec 940e 1872 	CALL SUBOPT_0x4A
000bee 940e 1792 	CALL SUBOPT_0x2C
000bf0 940e 1475 	CALL _memcpy
                 ; 0006 0089     memcpy(&SEND_REPORT_[26],Gateway_MacAddress,8);
                +
000bf2 e9e5     +LDI R30 , LOW ( _SEND_REPORT_ + ( 26 ) )
000bf3 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 26 ) )
                 	__POINTW1MN _SEND_REPORT_,26
000bf4 940e 187e 	CALL SUBOPT_0x4D
000bf6 940e 1475 	CALL _memcpy
                 ; 0006 008A 
                 ; 0006 008B     /*=============== Convert Data from float to ASCII ===============*/
                 ; 0006 008C     _ftoa(Vavg, _voltage,2);
000bf8 940e 180c 	CALL SUBOPT_0x3B
000bfa 940e 1d1b 	CALL __PUTPARD1
000bfc ece7      	LDI  R30,LOW(__voltage)
000bfd e0f9      	LDI  R31,HIGH(__voltage)
000bfe 940e 1885 	CALL SUBOPT_0x4E
000c00 defe      	RCALL __ftoa
                 ; 0006 008D     _ftoa(Iavg, _amp,2);
000c01 940e 1888 	CALL SUBOPT_0x4F
000c03 940e 1d1b 	CALL __PUTPARD1
000c05 ecef      	LDI  R30,LOW(__amp)
000c06 e0f9      	LDI  R31,HIGH(__amp)
000c07 940e 1885 	CALL SUBOPT_0x4E
000c09 def5      	RCALL __ftoa
                 ; 0006 008E     _ftoa(Pavg, _power,2);
000c0a 940e 1832 	CALL SUBOPT_0x43
000c0c 940e 1d1b 	CALL __PUTPARD1
000c0e ede7      	LDI  R30,LOW(__power)
000c0f e0f9      	LDI  R31,HIGH(__power)
000c10 940e 1885 	CALL SUBOPT_0x4E
000c12 deec      	RCALL __ftoa
                 ; 0006 008F     _ftoa(WHsum, _watt,2);
000c13 940e 188d 	CALL SUBOPT_0x50
000c15 940e 1d1b 	CALL __PUTPARD1
000c17 edef      	LDI  R30,LOW(__watt)
000c18 e0f9      	LDI  R31,HIGH(__watt)
000c19 940e 1885 	CALL SUBOPT_0x4E
000c1b dee3      	RCALL __ftoa
                 ; 0006 0090 
                 ; 0006 0091     SEND_REPORT_[37] = 0xA7;
000c1c eae7      	LDI  R30,LOW(167)
                +
000c1d 93e0 09a0+STS _SEND_REPORT_ + ( 37 ) , R30
                 	__PUTB1MN _SEND_REPORT_,37
                 ; 0006 0092     SEND_REPORT_[38] = data_id;
000c1f 89e8      	LDD  R30,Y+16
                +
000c20 93e0 09a1+STS _SEND_REPORT_ + ( 38 ) , R30
                 	__PUTB1MN _SEND_REPORT_,38
                 ; 0006 0093     memcpy(&SEND_REPORT_[40],_voltage,8);
                +
000c22 eae3     +LDI R30 , LOW ( _SEND_REPORT_ + ( 40 ) )
000c23 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 40 ) )
                 	__POINTW1MN _SEND_REPORT_,40
000c24 93fa      	ST   -Y,R31
000c25 93ea      	ST   -Y,R30
000c26 ece7      	LDI  R30,LOW(__voltage)
000c27 e0f9      	LDI  R31,HIGH(__voltage)
000c28 940e 1890 	CALL SUBOPT_0x51
000c2a 940e 1475 	CALL _memcpy
                 ; 0006 0094     memcpy(&SEND_REPORT_[49],_amp,8);
                +
000c2c eaec     +LDI R30 , LOW ( _SEND_REPORT_ + ( 49 ) )
000c2d e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 49 ) )
                 	__POINTW1MN _SEND_REPORT_,49
000c2e 93fa      	ST   -Y,R31
000c2f 93ea      	ST   -Y,R30
000c30 ecef      	LDI  R30,LOW(__amp)
000c31 e0f9      	LDI  R31,HIGH(__amp)
000c32 940e 1890 	CALL SUBOPT_0x51
000c34 940e 1475 	CALL _memcpy
                 ; 0006 0095     memcpy(&SEND_REPORT_[58],_power,8);
                +
000c36 ebe5     +LDI R30 , LOW ( _SEND_REPORT_ + ( 58 ) )
000c37 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 58 ) )
                 	__POINTW1MN _SEND_REPORT_,58
000c38 93fa      	ST   -Y,R31
000c39 93ea      	ST   -Y,R30
000c3a ede7      	LDI  R30,LOW(__power)
000c3b e0f9      	LDI  R31,HIGH(__power)
000c3c 940e 1890 	CALL SUBOPT_0x51
000c3e 940e 1475 	CALL _memcpy
                 ; 0006 0096     memcpy(&SEND_REPORT_[67],_watt,8);
                +
000c40 ebee     +LDI R30 , LOW ( _SEND_REPORT_ + ( 67 ) )
000c41 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 67 ) )
                 	__POINTW1MN _SEND_REPORT_,67
000c42 93fa      	ST   -Y,R31
000c43 93ea      	ST   -Y,R30
000c44 edef      	LDI  R30,LOW(__watt)
000c45 e0f9      	LDI  R31,HIGH(__watt)
000c46 940e 1890 	CALL SUBOPT_0x51
000c48 940e 1475 	CALL _memcpy
                 ; 0006 0097 
                 ; 0006 0098     SEND_REPORT_[75] = xbee_checksum(&SEND_REPORT_[3],SEND_REPORT_[2]);
                +
000c4a e7ee     +LDI R30 , LOW ( _SEND_REPORT_ + ( 3 ) )
000c4b e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 3 ) )
                 	__POINTW1MN _SEND_REPORT_,3
000c4c 93fa      	ST   -Y,R31
000c4d 93ea      	ST   -Y,R30
                +
000c4e 91a0 097d+LDS R26 , _SEND_REPORT_ + ( 2 )
                 	__GETB2MN _SEND_REPORT_,2
000c50 940e 1875 	CALL SUBOPT_0x4B
                +
000c52 93e0 09c6+STS _SEND_REPORT_ + ( 75 ) , R30
                 	__PUTB1MN _SEND_REPORT_,75
                 ; 0006 0099     printDebug("\r\n ++++++++++ Send REPORT ++++++++\r\n");
                +
000c54 e1e5     +LDI R30 , LOW ( 2 * _0xC0000 + ( 147 ) )
000c55 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 147 ) )
                 	__POINTW1FN _0xC0000,147
000c56 940e 16ac 	CALL SUBOPT_0x8
                 ; 0006 009A     print_payload(SEND_REPORT_,76);
000c58 940e 1893 	CALL SUBOPT_0x52
000c5a 940e 0653 	CALL _print_payload
                 ; 0006 009B     xbee_sendAPI(SEND_REPORT_,76);
000c5c 940e 1893 	CALL SUBOPT_0x52
000c5e 940e 090d 	CALL _xbee_sendAPI
                 ; 0006 009C 
                 ; 0006 009D }
000c60 9661      	ADIW R28,17
000c61 9508      	RET
                 ;
                 ;void SendStatusReport(void){
                 ; 0006 009F void SendStatusReport(void){
                 _SendStatusReport:
                 ; 0006 00A0 
                 ; 0006 00A1     Vavg = Vsum/number;      // Voltage
000c62 940e 189a 	CALL SUBOPT_0x53
000c64 940e 189f 	CALL SUBOPT_0x54
000c66 940e 18a8 	CALL SUBOPT_0x55
000c68 93e0 0874 	STS  _Vavg,R30
000c6a 93f0 0875 	STS  _Vavg+1,R31
000c6c 9360 0876 	STS  _Vavg+2,R22
000c6e 9370 0877 	STS  _Vavg+3,R23
                 ; 0006 00A2     Iavg = Isum/number;      // Current
000c70 940e 189a 	CALL SUBOPT_0x53
000c72 940e 18af 	CALL SUBOPT_0x56
000c74 940e 18a8 	CALL SUBOPT_0x55
000c76 940e 18b8 	CALL SUBOPT_0x57
                 ; 0006 00A3     Pavg = Psum/number;      // Power
000c78 940e 189a 	CALL SUBOPT_0x53
000c7a 940e 18c1 	CALL SUBOPT_0x58
000c7c 940e 18a8 	CALL SUBOPT_0x55
000c7e 93e0 087c 	STS  _Pavg,R30
000c80 93f0 087d 	STS  _Pavg+1,R31
000c82 9360 087e 	STS  _Pavg+2,R22
000c84 9370 087f 	STS  _Pavg+3,R23
                 ; 0006 00A4 
                 ; 0006 00A5     CURRENT_VOLT = Vavg;
000c86 940e 18ca 	CALL SUBOPT_0x59
000c88 93e0 0601 	STS  _CURRENT_VOLT,R30
000c8a 93f0 0602 	STS  _CURRENT_VOLT+1,R31
000c8c 9360 0603 	STS  _CURRENT_VOLT+2,R22
000c8e 9370 0604 	STS  _CURRENT_VOLT+3,R23
                 ; 0006 00A6     CURRENT_AMP = Iavg;
000c90 940e 18d3 	CALL SUBOPT_0x5A
000c92 93e0 0605 	STS  _CURRENT_AMP,R30
000c94 93f0 0606 	STS  _CURRENT_AMP+1,R31
000c96 9360 0607 	STS  _CURRENT_AMP+2,R22
000c98 9370 0608 	STS  _CURRENT_AMP+3,R23
                 ; 0006 00A7 
                 ; 0006 00A8     printDebug("\r\n======================================================\r\n");
                +
000c9a e3ea     +LDI R30 , LOW ( 2 * _0xC0000 + ( 184 ) )
000c9b e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 184 ) )
                 	__POINTW1FN _0xC0000,184
000c9c 940e 16ac 	CALL SUBOPT_0x8
                 ; 0006 00A9     printDebug("Vsum = %0.4f  ", Vsum); printDebug("Isum = %0.4f  ", Isum); printDebug("Psum = %0.4f\r\n", Psum);
                +
000c9e e7e5     +LDI R30 , LOW ( 2 * _0xC0000 + ( 243 ) )
000c9f e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 243 ) )
                 	__POINTW1FN _0xC0000,243
000ca0 93fa      	ST   -Y,R31
000ca1 93ea      	ST   -Y,R30
000ca2 91e0 0864 	LDS  R30,_Vsum
000ca4 91f0 0865 	LDS  R31,_Vsum+1
000ca6 9160 0866 	LDS  R22,_Vsum+2
000ca8 9170 0867 	LDS  R23,_Vsum+3
000caa 940e 16b8 	CALL SUBOPT_0xA
                +
000cac e8e4     +LDI R30 , LOW ( 2 * _0xC0000 + ( 258 ) )
000cad e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 258 ) )
                 	__POINTW1FN _0xC0000,258
000cae 93fa      	ST   -Y,R31
000caf 93ea      	ST   -Y,R30
000cb0 91e0 0868 	LDS  R30,_Isum
000cb2 91f0 0869 	LDS  R31,_Isum+1
000cb4 9160 086a 	LDS  R22,_Isum+2
000cb6 9170 086b 	LDS  R23,_Isum+3
000cb8 940e 16b8 	CALL SUBOPT_0xA
                +
000cba e9e3     +LDI R30 , LOW ( 2 * _0xC0000 + ( 273 ) )
000cbb e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 273 ) )
                 	__POINTW1FN _0xC0000,273
000cbc 93fa      	ST   -Y,R31
000cbd 93ea      	ST   -Y,R30
000cbe 91e0 086c 	LDS  R30,_Psum
000cc0 91f0 086d 	LDS  R31,_Psum+1
000cc2 9160 086e 	LDS  R22,_Psum+2
000cc4 9170 086f 	LDS  R23,_Psum+3
000cc6 940e 16b8 	CALL SUBOPT_0xA
                 ; 0006 00AA     printDebug("Vavg = %0.4f   ", Vavg); printDebug("Iavg = %0.4f   ", Iavg); printDebug("Pavg = %0.4f\r\n", Pavg);
                +
000cc8 eae2     +LDI R30 , LOW ( 2 * _0xC0000 + ( 288 ) )
000cc9 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 288 ) )
                 	__POINTW1FN _0xC0000,288
000cca 93fa      	ST   -Y,R31
000ccb 93ea      	ST   -Y,R30
000ccc 940e 18ca 	CALL SUBOPT_0x59
000cce 940e 16b8 	CALL SUBOPT_0xA
                +
000cd0 ebe2     +LDI R30 , LOW ( 2 * _0xC0000 + ( 304 ) )
000cd1 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 304 ) )
                 	__POINTW1FN _0xC0000,304
000cd2 93fa      	ST   -Y,R31
000cd3 93ea      	ST   -Y,R30
000cd4 940e 18d3 	CALL SUBOPT_0x5A
000cd6 940e 16b8 	CALL SUBOPT_0xA
                +
000cd8 ece2     +LDI R30 , LOW ( 2 * _0xC0000 + ( 320 ) )
000cd9 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 320 ) )
                 	__POINTW1FN _0xC0000,320
000cda 93fa      	ST   -Y,R31
000cdb 93ea      	ST   -Y,R30
000cdc 940e 18dc 	CALL SUBOPT_0x5B
000cde 940e 16b8 	CALL SUBOPT_0xA
                 ; 0006 00AB     printDebug("Watt-Hour Sum = %0.4f\r\n", WHsum);
                +
000ce0 ede1     +LDI R30 , LOW ( 2 * _0xC0000 + ( 335 ) )
000ce1 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 335 ) )
                 	__POINTW1FN _0xC0000,335
000ce2 93fa      	ST   -Y,R31
000ce3 93ea      	ST   -Y,R30
000ce4 91e0 0870 	LDS  R30,_WHsum
000ce6 91f0 0871 	LDS  R31,_WHsum+1
000ce8 9160 0872 	LDS  R22,_WHsum+2
000cea 9170 0873 	LDS  R23,_WHsum+3
000cec 940e 16b8 	CALL SUBOPT_0xA
                 ; 0006 00AC     printDebug("Number Sampling = %d\r\n", number);
                +
000cee eee9     +LDI R30 , LOW ( 2 * _0xC0000 + ( 359 ) )
000cef e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 359 ) )
                 	__POINTW1FN _0xC0000,359
000cf0 93fa      	ST   -Y,R31
000cf1 93ea      	ST   -Y,R30
000cf2 940e 189a 	CALL SUBOPT_0x53
000cf4 940e 1749 	CALL SUBOPT_0x22
                 ; 0006 00AD     printDebug("======================================================\r\n\r\n");
                +
000cf6 e0e0     +LDI R30 , LOW ( 2 * _0xC0000 + ( 382 ) )
000cf7 e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 382 ) )
                 	__POINTW1FN _0xC0000,382
000cf8 940e 16ac 	CALL SUBOPT_0x8
                 ; 0006 00AE 
                 ; 0006 00AF     Iavg *= 1000.0;
000cfa 940e 18e5 	CALL SUBOPT_0x5C
000cfc 940e 1b66 	CALL __MULF12
000cfe 940e 18b8 	CALL SUBOPT_0x57
                 ; 0006 00B0     send_report(01,Vavg,Iavg,Pavg,WHsum);
000d00 e0e1      	LDI  R30,LOW(1)
000d01 93ea      	ST   -Y,R30
000d02 940e 18ca 	CALL SUBOPT_0x59
000d04 940e 1d1b 	CALL __PUTPARD1
000d06 940e 18d3 	CALL SUBOPT_0x5A
000d08 940e 1d1b 	CALL __PUTPARD1
000d0a 940e 18dc 	CALL SUBOPT_0x5B
000d0c 940e 1d1b 	CALL __PUTPARD1
000d0e 940e 18f2 	CALL SUBOPT_0x5D
000d10 ded1      	RCALL _send_report
                 ; 0006 00B1     Iavg /= 1000.0;
000d11 940e 18e5 	CALL SUBOPT_0x5C
000d13 940e 1bb4 	CALL __DIVF21
000d15 940e 18b8 	CALL SUBOPT_0x57
                 ; 0006 00B2     /* Safety Current Sensor */
                 ; 0006 00B3     if((SENSOR_SENSITIVE == SENSOR5A) && (Iavg > 4.9)) {
000d17 940e 18fb 	CALL SUBOPT_0x5E
                +
000d19 30a0     +CPI R26 , LOW ( 0x43390000 )
000d1a e0e0     +LDI R30 , HIGH ( 0x43390000 )
000d1b 07be     +CPC R27 , R30
000d1c e3e9     +LDI R30 , BYTE3 ( 0x43390000 )
000d1d 078e     +CPC R24 , R30
000d1e e4e3     +LDI R30 , BYTE4 ( 0x43390000 )
000d1f 079e     +CPC R25 , R30
                 	__CPD2N 0x43390000
000d20 f469      	BRNE _0xC0013
000d21 940e 1904 	CALL SUBOPT_0x5F
                +
000d23 eced     +LDI R30 , LOW ( 0x409CCCCD )
000d24 ecfc     +LDI R31 , HIGH ( 0x409CCCCD )
000d25 e96c     +LDI R22 , BYTE3 ( 0x409CCCCD )
000d26 e470     +LDI R23 , BYTE4 ( 0x409CCCCD )
                 	__GETD1N 0x409CCCCD
000d27 940e 1bf9 	CALL __CMPF12
000d29 f009      	BREQ PC+2
000d2a f410      	BRCC PC+3
000d2b 940c 0d2e 	JMP  _0xC0013
000d2d c001      	RJMP _0xC0014
                 _0xC0013:
000d2e c001      	RJMP _0xC0012
                 _0xC0014:
                 ; 0006 00B4         SWITCH = TURN_OFF;
000d2f c031      	RJMP _0xC0023
                 ; 0006 00B5         POWER_RELAY_OFF;
                 ; 0006 00B6         LED_STAT_OFF;
                 ; 0006 00B7         CURRENT_VOLT = 0.0;
                 ; 0006 00B8         CURRENT_AMP = 0.0;
                 ; 0006 00B9         printDebug("Current Exceed --SWITCH OFF!\r\n");
                 ; 0006 00BA     }else if((SENSOR_SENSITIVE == SENSOR20A) && (Iavg > 19.9)) {
                 _0xC0012:
000d30 940e 18fb 	CALL SUBOPT_0x5E
                +
000d32 30a0     +CPI R26 , LOW ( 0x42C80000 )
000d33 e0e0     +LDI R30 , HIGH ( 0x42C80000 )
000d34 07be     +CPC R27 , R30
000d35 ece8     +LDI R30 , BYTE3 ( 0x42C80000 )
000d36 078e     +CPC R24 , R30
000d37 e4e2     +LDI R30 , BYTE4 ( 0x42C80000 )
000d38 079e     +CPC R25 , R30
                 	__CPD2N 0x42C80000
000d39 f469      	BRNE _0xC0019
000d3a 940e 1904 	CALL SUBOPT_0x5F
                +
000d3c e3e3     +LDI R30 , LOW ( 0x419F3333 )
000d3d e3f3     +LDI R31 , HIGH ( 0x419F3333 )
000d3e e96f     +LDI R22 , BYTE3 ( 0x419F3333 )
000d3f e471     +LDI R23 , BYTE4 ( 0x419F3333 )
                 	__GETD1N 0x419F3333
000d40 940e 1bf9 	CALL __CMPF12
000d42 f009      	BREQ PC+2
000d43 f410      	BRCC PC+3
000d44 940c 0d47 	JMP  _0xC0019
000d46 c001      	RJMP _0xC001A
                 _0xC0019:
000d47 c001      	RJMP _0xC0018
                 _0xC001A:
                 ; 0006 00BB         SWITCH = TURN_OFF;
000d48 c018      	RJMP _0xC0023
                 ; 0006 00BC         POWER_RELAY_OFF;
                 ; 0006 00BD         LED_STAT_OFF;
                 ; 0006 00BE         CURRENT_VOLT = 0.0;
                 ; 0006 00BF         CURRENT_AMP = 0.0;
                 ; 0006 00C0         printDebug("Current Exceed --SWITCH OFF!\r\n");
                 ; 0006 00C1     }else if((SENSOR_SENSITIVE == SENSOR30A) && (Iavg > 29.9)) {
                 _0xC0018:
000d49 940e 18fb 	CALL SUBOPT_0x5E
                +
000d4b 30a0     +CPI R26 , LOW ( 0x42840000 )
000d4c e0e0     +LDI R30 , HIGH ( 0x42840000 )
000d4d 07be     +CPC R27 , R30
000d4e e8e4     +LDI R30 , BYTE3 ( 0x42840000 )
000d4f 078e     +CPC R24 , R30
000d50 e4e2     +LDI R30 , BYTE4 ( 0x42840000 )
000d51 079e     +CPC R25 , R30
                 	__CPD2N 0x42840000
000d52 f469      	BRNE _0xC001F
000d53 940e 1904 	CALL SUBOPT_0x5F
                +
000d55 e3e3     +LDI R30 , LOW ( 0x41EF3333 )
000d56 e3f3     +LDI R31 , HIGH ( 0x41EF3333 )
000d57 ee6f     +LDI R22 , BYTE3 ( 0x41EF3333 )
000d58 e471     +LDI R23 , BYTE4 ( 0x41EF3333 )
                 	__GETD1N 0x41EF3333
000d59 940e 1bf9 	CALL __CMPF12
000d5b f009      	BREQ PC+2
000d5c f410      	BRCC PC+3
000d5d 940c 0d60 	JMP  _0xC001F
000d5f c001      	RJMP _0xC0020
                 _0xC001F:
000d60 c01b      	RJMP _0xC001E
                 _0xC0020:
                 ; 0006 00C2         SWITCH = TURN_OFF;
                 _0xC0023:
000d61 e0e0      	LDI  R30,LOW(0)
000d62 93e0 0600 	STS  _SWITCH,R30
                 ; 0006 00C3         POWER_RELAY_OFF;
000d64 940e 1664 	CALL SUBOPT_0x1
                 ; 0006 00C4         LED_STAT_OFF;
000d66 9aaf      	SBI  0x15,7
                 ; 0006 00C5         CURRENT_VOLT = 0.0;
000d67 e0e0      	LDI  R30,LOW(0)
000d68 93e0 0601 	STS  _CURRENT_VOLT,R30
000d6a 93e0 0602 	STS  _CURRENT_VOLT+1,R30
000d6c 93e0 0603 	STS  _CURRENT_VOLT+2,R30
000d6e 93e0 0604 	STS  _CURRENT_VOLT+3,R30
                 ; 0006 00C6         CURRENT_AMP = 0.0;
000d70 93e0 0605 	STS  _CURRENT_AMP,R30
000d72 93e0 0606 	STS  _CURRENT_AMP+1,R30
000d74 93e0 0607 	STS  _CURRENT_AMP+2,R30
000d76 93e0 0608 	STS  _CURRENT_AMP+3,R30
                 ; 0006 00C7         printDebug("Current Exceed --SWITCH OFF!\r\n");
                +
000d78 e3eb     +LDI R30 , LOW ( 2 * _0xC0000 + ( 441 ) )
000d79 e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 441 ) )
                 	__POINTW1FN _0xC0000,441
000d7a 940e 16ac 	CALL SUBOPT_0x8
                 ; 0006 00C8     }
                 ; 0006 00C9 
                 ; 0006 00CA     /* Reset value */
                 ; 0006 00CB     number = 0;
                 _0xC001E:
000d7c e0e0      	LDI  R30,LOW(0)
000d7d 93e0 0830 	STS  _number,R30
000d7f 93e0 0831 	STS  _number+1,R30
                 ; 0006 00CC     Vsum = 0.0;
000d81 93e0 0864 	STS  _Vsum,R30
000d83 93e0 0865 	STS  _Vsum+1,R30
000d85 93e0 0866 	STS  _Vsum+2,R30
000d87 93e0 0867 	STS  _Vsum+3,R30
                 ; 0006 00CD     Isum = 0.0;
000d89 93e0 0868 	STS  _Isum,R30
000d8b 93e0 0869 	STS  _Isum+1,R30
000d8d 93e0 086a 	STS  _Isum+2,R30
000d8f 93e0 086b 	STS  _Isum+3,R30
                 ; 0006 00CE     Psum = 0.0;
000d91 93e0 086c 	STS  _Psum,R30
000d93 93e0 086d 	STS  _Psum+1,R30
000d95 93e0 086e 	STS  _Psum+2,R30
000d97 93e0 086f 	STS  _Psum+3,R30
                 ; 0006 00CF     WHsum = 0.0;
000d99 93e0 0870 	STS  _WHsum,R30
000d9b 93e0 0871 	STS  _WHsum+1,R30
000d9d 93e0 0872 	STS  _WHsum+2,R30
000d9f 93e0 0873 	STS  _WHsum+3,R30
                 ; 0006 00D0 
                 ; 0006 00D1 }
000da1 9508      	RET
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <adc.h>
                 ;#include <debug.h>
                 ;
                 ;char Vreferent = VREF_AVCC;
                 
                 	.DSEG
                 ;
                 ;
                 ;void init_adc(unsigned char vrff) {
                 ; 0007 000C void init_adc(unsigned char vrff) {
                 
                 	.CSEG
                 _init_adc:
                 ; 0007 000D 
                 ; 0007 000E     // ADC initialization
                 ; 0007 000F     // ADC Clock frequency: 691.200 kHz
                 ; 0007 0010     // ADC Voltage Reference: vrff
                 ; 0007 0011     Vreferent = vrff;
000da2 93aa      	ST   -Y,R26
                 ;	vrff -> Y+0
000da3 81e8      	LD   R30,Y
000da4 93e0 09e7 	STS  _Vreferent,R30
                 ; 0007 0012     ADMUX = Vreferent & 0xff;
000da6 b9e7      	OUT  0x7,R30
                 ; 0007 0013     ADCSRA = 0xA4;
000da7 eae4      	LDI  R30,LOW(164)
000da8 b9e6      	OUT  0x6,R30
                 ; 0007 0014     //printDebug("ADMUX = %02X\r\n", ADMUX);
                 ; 0007 0015 
                 ; 0007 0016 }
000da9 9621      	ADIW R28,1
000daa 9508      	RET
                 ;
                 ;// Read the AD conversion result
                 ;uint16_t read_adc(unsigned char adc_input) {
                 ; 0007 0019 uint16_t read_adc(unsigned char adc_input) {
                 _read_adc:
                 ; 0007 001A 
                 ; 0007 001B     unsigned int adc_data = 0x0000;
                 ; 0007 001C 
                 ; 0007 001D     ADMUX = (Vreferent | adc_input);
000dab 93aa      	ST   -Y,R26
000dac 931a      	ST   -Y,R17
000dad 930a      	ST   -Y,R16
                 ;	adc_input -> Y+2
                 ;	adc_data -> R16,R17
                +
000dae e000     +LDI R16 , LOW ( 0 )
000daf e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000db0 81ea      	LDD  R30,Y+2
000db1 91a0 09e7 	LDS  R26,_Vreferent
000db3 2bea      	OR   R30,R26
000db4 b9e7      	OUT  0x7,R30
                 ; 0007 001E     //printDebug("ADMUX = %02X\r\n", ADMUX);
                 ; 0007 001F 
                 ; 0007 0020     // Delay needed for the stabilization of the ADC input voltage
                 ; 0007 0021     delay_us(50);
                +
000db5 eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
000db6 958a     +DEC R24
000db7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
                 ; 0007 0022 
                 ; 0007 0023     // Start the AD conversion
                 ; 0007 0024     ADCSRA |= 0x80; // ENABLE ADC
000db8 9a37      	SBI  0x6,7
                 ; 0007 0025     ADCSRA |= 0x40;  // Start convert
000db9 9a36      	SBI  0x6,6
                 ; 0007 0026 
                 ; 0007 0027     // Wait for the AD conversion to complete
                 ; 0007 0028     while((ADCSRA & 0x10) == 0);
                 _0xE0004:
000dba 9b34      	SBIS 0x6,4
000dbb cffe      	RJMP _0xE0004
                 ; 0007 0029     adc_data = ADCL;
000dbc b104      	IN   R16,4
000dbd 2711      	CLR  R17
                 ; 0007 002A     adc_data |= (ADCH & 0x00ff) << 8;
000dbe b1e5      	IN   R30,0x5
000dbf 2ffe      	MOV  R31,R30
000dc0 e0e0      	LDI  R30,0
                +
000dc1 2b0e     +OR R16 , R30
000dc2 2b1f     +OR R17 , R31
                 	__ORWRR 16,17,30,31
                 ; 0007 002B 
                 ; 0007 002C     ADCSRA |= 0x10;
000dc3 9a34      	SBI  0x6,4
                 ; 0007 002D 
                 ; 0007 002E     return adc_data;
000dc4 01f8      	MOVW R30,R16
000dc5 8119      	LDD  R17,Y+1
000dc6 8108      	LDD  R16,Y+0
000dc7 c00b      	RJMP _0x20C000A
                 ; 0007 002F }
                 ;
                 ;
                 ;
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <uart.h>
                 ;#include <int_protocol.h>
                 ;#include <debug.h>
                 ;
                 ;uint8_t Eaddress        = 5;
                 
                 	.DSEG
                 ;
                 ;void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
                 ; 0008 000C void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
                 
                 	.CSEG
                 _EEPROM_write:
                 ; 0008 000D     while(EECR & (1<<EEWE))
000dc8 93aa      	ST   -Y,R26
                 ;	uiAddress -> Y+1
                 ;	ucData -> Y+0
                 _0x100004:
000dc9 99e1      	SBIC 0x1C,1
                 ; 0008 000E     ;
000dca cffe      	RJMP _0x100004
                 ; 0008 000F     EEAR = uiAddress;
000dcb 81e9      	LDD  R30,Y+1
000dcc 81fa      	LDD  R31,Y+1+1
000dcd bbff      	OUT  0x1E+1,R31
000dce bbee      	OUT  0x1E,R30
                 ; 0008 0010     EEDR = ucData;
000dcf 81e8      	LD   R30,Y
000dd0 bbed      	OUT  0x1D,R30
                 ; 0008 0011     EECR |= (1<<EEMWE);
000dd1 9ae2      	SBI  0x1C,2
                 ; 0008 0012     EECR |= (1<<EEWE);
000dd2 9ae1      	SBI  0x1C,1
                 ; 0008 0013 }
                 _0x20C000A:
000dd3 9623      	ADIW R28,3
000dd4 9508      	RET
                 ;
                 ;
                 ;unsigned char EEPROM_read(unsigned int uiAddress){
                 ; 0008 0016 unsigned char EEPROM_read(unsigned int uiAddress){
                 _EEPROM_read:
                 ; 0008 0017     while(EECR & (1<<EEWE))
000dd5 93ba      	ST   -Y,R27
000dd6 93aa      	ST   -Y,R26
                 ;	uiAddress -> Y+0
                 _0x100007:
000dd7 99e1      	SBIC 0x1C,1
                 ; 0008 0018     ;
000dd8 cffe      	RJMP _0x100007
                 ; 0008 0019     EEAR = uiAddress;
000dd9 81e8      	LD   R30,Y
000dda 81f9      	LDD  R31,Y+1
000ddb bbff      	OUT  0x1E+1,R31
000ddc bbee      	OUT  0x1E,R30
                 ; 0008 001A     EECR |= (1<<EERE);
000ddd 9ae0      	SBI  0x1C,0
                 ; 0008 001B     return EEDR;
000dde b3ed      	IN   R30,0x1D
000ddf 940c 105c 	JMP  _0x20C0008
                 ; 0008 001C }
                 ;
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <uart.h>
                 ;#include <int_protocol.h>
                 ;#include <debug.h>
                 ;#include <adc.h>
                 ;#include <math.h>
                 ;#include <meansure.h>
                 ;
                 ;float SENSOR_SENSITIVE;
                 ;float AMP_ADJ_ZERO;
                 ;float total                 = 0.0;
                 ;float avg                   = 2500.0;
                 
                 	.DSEG
                 ;float value                 = 0.0;
                 ;float Viout                 = 0.0;
                 ;float Vdif                  = 0.0;
                 ;float Vsq_avg               = 0.0;
                 ;float volt                  = 0.0;
                 ;float amp                   = 0.0;
                 ;float power                 = 0.0;
                 ;float whour                 = 0.0;
                 ;float Vsum                  = 0.0;
                 ;float Isum                  = 0.0;
                 ;float Psum                  = 0.0;
                 ;float WHsum                 = 0.0;
                 ;float Vavg                  = 0.0;
                 ;float Iavg                  = 0.0;
                 ;float Pavg                  = 0.0;
                 ;float CURRENT_VOLT          = 0.0;
                 ;float CURRENT_AMP           = 0.0;
                 ;uint16_t number             = 0;
                 ;uint16_t adcValue           = 0;
                 ;uint16_t countSampling      = 0;
                 ;eeprom float ADJ0_SENSOR5A  = 0.090;
                 ;eeprom float ADJ0_SENSOR20A = 0.11;
                 ;eeprom float ADJ0_SENSOR30A = 0.11;
                 ;
                 ;void ReadCurrent(void){
                 ; 0009 0029 void ReadCurrent(void){
                 
                 	.CSEG
                 _ReadCurrent:
                 ; 0009 002A     adcValue = read_adc(ADC1);
000de1 e0a1      	LDI  R26,LOW(1)
000de2 940e 190d 	CALL SUBOPT_0x60
                 ; 0009 002B     printDebug("ADC = %d\r\n", adcValue);
                +
000de4 e6e2     +LDI R30 , LOW ( 2 * _0x120000 + ( 0 ) )
000de5 e0f6     +LDI R31 , HIGH ( 2 * _0x120000 + ( 0 ) )
                 	__POINTW1FN _0x120000,0
000de6 93fa      	ST   -Y,R31
000de7 93ea      	ST   -Y,R30
000de8 940e 1914 	CALL SUBOPT_0x61
000dea 940e 1749 	CALL SUBOPT_0x22
                 ; 0009 002C     value = adcValue * (5000.0 / 1023.0);
000dec 940e 1919 	CALL SUBOPT_0x62
                +
000dee e1aa     +LDI R26 , LOW ( 0x409C671A )
000def e6b7     +LDI R27 , HIGH ( 0x409C671A )
000df0 e98c     +LDI R24 , BYTE3 ( 0x409C671A )
000df1 e490     +LDI R25 , BYTE4 ( 0x409C671A )
                 	__GETD2N 0x409C671A
000df2 940e 1b66 	CALL __MULF12
000df4 93e0 0844 	STS  _value,R30
000df6 93f0 0845 	STS  _value+1,R31
000df8 9360 0846 	STS  _value+2,R22
000dfa 9370 0847 	STS  _value+3,R23
                 ; 0009 002D 
                 ; 0009 002E     // Keep track of the moving average
                 ; 0009 002F     // See more : http://jeelabs.org/2011/09/15/power-measurement-acs-code/
                 ; 0009 0030     avg = (499.0*avg + value) / 500.0;
000dfc 940e 191f 	CALL SUBOPT_0x63
                +
000dfe e0a0     +LDI R26 , LOW ( 0x43F98000 )
000dff e8b0     +LDI R27 , HIGH ( 0x43F98000 )
000e00 ef89     +LDI R24 , BYTE3 ( 0x43F98000 )
000e01 e493     +LDI R25 , BYTE4 ( 0x43F98000 )
                 	__GETD2N 0x43F98000
000e02 940e 1b66 	CALL __MULF12
000e04 940e 1928 	CALL SUBOPT_0x64
000e06 940e 1931 	CALL SUBOPT_0x65
                +
000e08 e0e0     +LDI R30 , LOW ( 0x43FA0000 )
000e09 e0f0     +LDI R31 , HIGH ( 0x43FA0000 )
000e0a ef6a     +LDI R22 , BYTE3 ( 0x43FA0000 )
000e0b e473     +LDI R23 , BYTE4 ( 0x43FA0000 )
                 	__GETD1N 0x43FA0000
000e0c 940e 1bb4 	CALL __DIVF21
000e0e 93e0 0840 	STS  _avg,R30
000e10 93f0 0841 	STS  _avg+1,R31
000e12 9360 0842 	STS  _avg+2,R22
000e14 9370 0843 	STS  _avg+3,R23
                 ; 0009 0031 
                 ; 0009 0032     if(value > avg){
000e16 940e 1936 	CALL SUBOPT_0x66
000e18 f009      	BREQ PC+2
000e19 f410      	BRCC PC+3
000e1a 940c 0e2d 	JMP  _0x120004
                 ; 0009 0033         Vdif = value - avg;
000e1c 91a0 0840 	LDS  R26,_avg
000e1e 91b0 0841 	LDS  R27,_avg+1
000e20 9180 0842 	LDS  R24,_avg+2
000e22 9190 0843 	LDS  R25,_avg+3
000e24 91e0 0844 	LDS  R30,_value
000e26 91f0 0845 	LDS  R31,_value+1
000e28 9160 0846 	LDS  R22,_value+2
000e2a 9170 0847 	LDS  R23,_value+3
000e2c c007      	RJMP _0x12000B
                 ; 0009 0034         total += (Vdif*Vdif);
                 ; 0009 0035     }else if(value < avg) {
                 _0x120004:
000e2d 940e 1936 	CALL SUBOPT_0x66
000e2f f520      	BRSH _0x120006
                 ; 0009 0036         Vdif = avg - value;
000e30 940e 1928 	CALL SUBOPT_0x64
000e32 940e 191f 	CALL SUBOPT_0x63
                 _0x12000B:
000e34 940e 1b0f 	CALL __SUBF12
000e36 93e0 084c 	STS  _Vdif,R30
000e38 93f0 084d 	STS  _Vdif+1,R31
000e3a 9360 084e 	STS  _Vdif+2,R22
000e3c 9370 084f 	STS  _Vdif+3,R23
                 ; 0009 0037         total += (Vdif*Vdif);
000e3e 91a0 084c 	LDS  R26,_Vdif
000e40 91b0 084d 	LDS  R27,_Vdif+1
000e42 9180 084e 	LDS  R24,_Vdif+2
000e44 9190 084f 	LDS  R25,_Vdif+3
000e46 940e 1b66 	CALL __MULF12
000e48 940e 193b 	CALL SUBOPT_0x67
000e4a 940e 1b16 	CALL __ADDF12
000e4c 93e0 083c 	STS  _total,R30
000e4e 93f0 083d 	STS  _total+1,R31
000e50 9360 083e 	STS  _total+2,R22
000e52 9370 083f 	STS  _total+3,R23
                 ; 0009 0038     }
                 ; 0009 0039     countSampling++;
                 _0x120006:
000e54 e8a0      	LDI  R26,LOW(_countSampling)
000e55 e0b8      	LDI  R27,HIGH(_countSampling)
000e56 c10a      	RJMP _0x20C0009
                 ; 0009 003A }
                 ;
                 ;void ReadVoltage(void){
                 ; 0009 003C void ReadVoltage(void){
                 _ReadVoltage:
                 ; 0009 003D    /*---------- Voltage ----------*/
                 ; 0009 003E     adcValue = read_adc(ADC0);
000e57 e0a0      	LDI  R26,LOW(0)
000e58 940e 190d 	CALL SUBOPT_0x60
                 ; 0009 003F     volt = (((adcValue*5.0)/1023.0)/0.01);
000e5a 940e 1919 	CALL SUBOPT_0x62
                +
000e5c e0a0     +LDI R26 , LOW ( 0x40A00000 )
000e5d e0b0     +LDI R27 , HIGH ( 0x40A00000 )
000e5e ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
000e5f e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
000e60 940e 1944 	CALL SUBOPT_0x68
                +
000e62 e0e0     +LDI R30 , LOW ( 0x447FC000 )
000e63 ecf0     +LDI R31 , HIGH ( 0x447FC000 )
000e64 e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
000e65 e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
000e66 940e 1bb4 	CALL __DIVF21
000e68 01df      	MOVW R26,R30
000e69 01cb      	MOVW R24,R22
                +
000e6a e0ea     +LDI R30 , LOW ( 0x3C23D70A )
000e6b edf7     +LDI R31 , HIGH ( 0x3C23D70A )
000e6c e263     +LDI R22 , BYTE3 ( 0x3C23D70A )
000e6d e37c     +LDI R23 , BYTE4 ( 0x3C23D70A )
                 	__GETD1N 0x3C23D70A
000e6e 940e 1bb4 	CALL __DIVF21
000e70 93e0 0854 	STS  _volt,R30
000e72 93f0 0855 	STS  _volt+1,R31
000e74 9360 0856 	STS  _volt+2,R22
000e76 9370 0857 	STS  _volt+3,R23
                 ; 0009 0040     if(volt < 223.0) {
000e78 940e 1949 	CALL SUBOPT_0x69
                +
000e7a e0e0     +LDI R30 , LOW ( 0x435F0000 )
000e7b e0f0     +LDI R31 , HIGH ( 0x435F0000 )
000e7c e56f     +LDI R22 , BYTE3 ( 0x435F0000 )
000e7d e473     +LDI R23 , BYTE4 ( 0x435F0000 )
                 	__GETD1N 0x435F0000
000e7e 940e 1bf9 	CALL __CMPF12
000e80 f448      	BRSH _0x120007
                 ; 0009 0041         volt += 9.0;
000e81 940e 1952 	CALL SUBOPT_0x6A
                +
000e83 e0a0     +LDI R26 , LOW ( 0x41100000 )
000e84 e0b0     +LDI R27 , HIGH ( 0x41100000 )
000e85 e180     +LDI R24 , BYTE3 ( 0x41100000 )
000e86 e491     +LDI R25 , BYTE4 ( 0x41100000 )
                 	__GETD2N 0x41100000
000e87 940e 1b16 	CALL __ADDF12
000e89 c014      	RJMP _0x12000C
                 ; 0009 0042     }else if(volt > 233.0) {
                 _0x120007:
000e8a 940e 1949 	CALL SUBOPT_0x69
                +
000e8c e0e0     +LDI R30 , LOW ( 0x43690000 )
000e8d e0f0     +LDI R31 , HIGH ( 0x43690000 )
000e8e e669     +LDI R22 , BYTE3 ( 0x43690000 )
000e8f e473     +LDI R23 , BYTE4 ( 0x43690000 )
                 	__GETD1N 0x43690000
000e90 940e 1bf9 	CALL __CMPF12
000e92 f009      	BREQ PC+2
000e93 f410      	BRCC PC+3
000e94 940c 0ea6 	JMP  _0x120009
                 ; 0009 0043         volt -= 4.0;
000e96 940e 1952 	CALL SUBOPT_0x6A
                +
000e98 e0a0     +LDI R26 , LOW ( 0x40800000 )
000e99 e0b0     +LDI R27 , HIGH ( 0x40800000 )
000e9a e880     +LDI R24 , BYTE3 ( 0x40800000 )
000e9b e490     +LDI R25 , BYTE4 ( 0x40800000 )
                 	__GETD2N 0x40800000
000e9c 940e 1b0f 	CALL __SUBF12
                 _0x12000C:
000e9e 93e0 0854 	STS  _volt,R30
000ea0 93f0 0855 	STS  _volt+1,R31
000ea2 9360 0856 	STS  _volt+2,R22
000ea4 9370 0857 	STS  _volt+3,R23
                 ; 0009 0044     }
                 ; 0009 0045     printDebug("Volt = %f\r\n", volt);
                 _0x120009:
                +
000ea6 e6ed     +LDI R30 , LOW ( 2 * _0x120000 + ( 11 ) )
000ea7 e0f6     +LDI R31 , HIGH ( 2 * _0x120000 + ( 11 ) )
                 	__POINTW1FN _0x120000,11
000ea8 93fa      	ST   -Y,R31
000ea9 93ea      	ST   -Y,R30
000eaa 940e 1952 	CALL SUBOPT_0x6A
000eac 940e 16b8 	CALL SUBOPT_0xA
                 ; 0009 0046     Vsum += volt;
000eae 940e 1952 	CALL SUBOPT_0x6A
000eb0 940e 189f 	CALL SUBOPT_0x54
000eb2 940e 1b16 	CALL __ADDF12
000eb4 93e0 0864 	STS  _Vsum,R30
000eb6 93f0 0865 	STS  _Vsum+1,R31
000eb8 9360 0866 	STS  _Vsum+2,R22
000eba 9370 0867 	STS  _Vsum+3,R23
                 ; 0009 0047 
                 ; 0009 0048     /*---------- Current ----------*/
                 ; 0009 0049     // V-rms
                 ; 0009 004A     // See more : http://www.electronics-tutorials.ws/blog/rms-voltage.html
                 ; 0009 004B     Vsq_avg = total / countSampling;
000ebc 91e0 0880 	LDS  R30,_countSampling
000ebe 91f0 0881 	LDS  R31,_countSampling+1
000ec0 940e 193b 	CALL SUBOPT_0x67
000ec2 940e 18a8 	CALL SUBOPT_0x55
000ec4 93e0 0850 	STS  _Vsq_avg,R30
000ec6 93f0 0851 	STS  _Vsq_avg+1,R31
000ec8 9360 0852 	STS  _Vsq_avg+2,R22
000eca 9370 0853 	STS  _Vsq_avg+3,R23
                 ; 0009 004C     Viout = sqrt(Vsq_avg);
000ecc 91a0 0850 	LDS  R26,_Vsq_avg
000ece 91b0 0851 	LDS  R27,_Vsq_avg+1
000ed0 9180 0852 	LDS  R24,_Vsq_avg+2
000ed2 9190 0853 	LDS  R25,_Vsq_avg+3
000ed4 940e 1c19 	CALL _sqrt
000ed6 93e0 0848 	STS  _Viout,R30
000ed8 93f0 0849 	STS  _Viout+1,R31
000eda 9360 084a 	STS  _Viout+2,R22
000edc 9370 084b 	STS  _Viout+3,R23
                 ; 0009 004D     amp = Viout / SENSOR_SENSITIVE;                  // ACS712 +-5 or +-20 or +-30 Amp.
000ede 940e 16bf 	CALL SUBOPT_0xB
000ee0 91a0 0848 	LDS  R26,_Viout
000ee2 91b0 0849 	LDS  R27,_Viout+1
000ee4 9180 084a 	LDS  R24,_Viout+2
000ee6 9190 084b 	LDS  R25,_Viout+3
000ee8 940e 1bb4 	CALL __DIVF21
000eea 93e0 0858 	STS  _amp,R30
000eec 93f0 0859 	STS  _amp+1,R31
000eee 9360 085a 	STS  _amp+2,R22
000ef0 9370 085b 	STS  _amp+3,R23
                 ; 0009 004E 
                 ; 0009 004F     /* Adjust Current to 0 */
                 ; 0009 0050     if(amp < AMP_ADJ_ZERO) {
000ef2 940e 16c8 	CALL SUBOPT_0xC
000ef4 91a0 0858 	LDS  R26,_amp
000ef6 91b0 0859 	LDS  R27,_amp+1
000ef8 9180 085a 	LDS  R24,_amp+2
000efa 9190 085b 	LDS  R25,_amp+3
000efc 940e 1bf9 	CALL __CMPF12
000efe f448      	BRSH _0x12000A
                 ; 0009 0051         amp = 0.0;
000eff e0e0      	LDI  R30,LOW(0)
000f00 93e0 0858 	STS  _amp,R30
000f02 93e0 0859 	STS  _amp+1,R30
000f04 93e0 085a 	STS  _amp+2,R30
000f06 93e0 085b 	STS  _amp+3,R30
                 ; 0009 0052     }
                 ; 0009 0053 
                 ; 0009 0054     total = 0.0;
                 _0x12000A:
000f08 e0e0      	LDI  R30,LOW(0)
000f09 93e0 083c 	STS  _total,R30
000f0b 93e0 083d 	STS  _total+1,R30
000f0d 93e0 083e 	STS  _total+2,R30
000f0f 93e0 083f 	STS  _total+3,R30
                 ; 0009 0055     countSampling = 0;
000f11 93e0 0880 	STS  _countSampling,R30
000f13 93e0 0881 	STS  _countSampling+1,R30
                 ; 0009 0056     Isum += amp;
000f15 940e 195b 	CALL SUBOPT_0x6B
000f17 940e 18af 	CALL SUBOPT_0x56
000f19 940e 1b16 	CALL __ADDF12
000f1b 93e0 0868 	STS  _Isum,R30
000f1d 93f0 0869 	STS  _Isum+1,R31
000f1f 9360 086a 	STS  _Isum+2,R22
000f21 9370 086b 	STS  _Isum+3,R23
                 ; 0009 0057 
                 ; 0009 0058     /*---------- Power ----------*/
                 ; 0009 0059     power = volt*amp;
000f23 940e 195b 	CALL SUBOPT_0x6B
000f25 940e 1949 	CALL SUBOPT_0x69
000f27 940e 1b66 	CALL __MULF12
000f29 93e0 085c 	STS  _power,R30
000f2b 93f0 085d 	STS  _power+1,R31
000f2d 9360 085e 	STS  _power+2,R22
000f2f 9370 085f 	STS  _power+3,R23
                 ; 0009 005A     Psum += power;
000f31 940e 18c1 	CALL SUBOPT_0x58
000f33 940e 1b16 	CALL __ADDF12
000f35 93e0 086c 	STS  _Psum,R30
000f37 93f0 086d 	STS  _Psum+1,R31
000f39 9360 086e 	STS  _Psum+2,R22
000f3b 9370 086f 	STS  _Psum+3,R23
                 ; 0009 005B 
                 ; 0009 005C     /*----------  Watt-hour ----------*/
                 ; 0009 005D     whour = power*(0.5/3600.0);
000f3d 91a0 085c 	LDS  R26,_power
000f3f 91b0 085d 	LDS  R27,_power+1
000f41 9180 085e 	LDS  R24,_power+2
000f43 9190 085f 	LDS  R25,_power+3
                +
000f45 ebe4     +LDI R30 , LOW ( 0x3911A2B4 )
000f46 eaf2     +LDI R31 , HIGH ( 0x3911A2B4 )
000f47 e161     +LDI R22 , BYTE3 ( 0x3911A2B4 )
000f48 e379     +LDI R23 , BYTE4 ( 0x3911A2B4 )
                 	__GETD1N 0x3911A2B4
000f49 940e 1b66 	CALL __MULF12
000f4b 93e0 0860 	STS  _whour,R30
000f4d 93f0 0861 	STS  _whour+1,R31
000f4f 9360 0862 	STS  _whour+2,R22
000f51 9370 0863 	STS  _whour+3,R23
                 ; 0009 005E     WHsum += whour;
000f53 940e 18f2 	CALL SUBOPT_0x5D
000f55 940e 1b16 	CALL __ADDF12
000f57 93e0 0870 	STS  _WHsum,R30
000f59 93f0 0871 	STS  _WHsum+1,R31
000f5b 9360 0872 	STS  _WHsum+2,R22
000f5d 9370 0873 	STS  _WHsum+3,R23
                 ; 0009 005F     number++;
000f5f e3a0      	LDI  R26,LOW(_number)
000f60 e0b8      	LDI  R27,HIGH(_number)
                 _0x20C0009:
000f61 91ed      	LD   R30,X+
000f62 91fd      	LD   R31,X+
000f63 9631      	ADIW R30,1
000f64 93fe      	ST   -X,R31
000f65 93ee      	ST   -X,R30
                 ; 0009 0060 }
000f66 9508      	RET
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <queue.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <int_protocol.h>
                 ;#include <uart.h>
                 ;#include <eeprom.h>
                 ;
                 ;int input[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                 ;int count_input = 0;
                 ;int count_event = 0;
                 ;
                 ;void push_event(int event){
                 ; 000A 0010 void push_event(int event){
                 
                 	.CSEG
                 _push_event:
                 ; 000A 0011     input[count_input] = event;
000f67 93ba      	ST   -Y,R27
000f68 93aa      	ST   -Y,R26
                 ;	event -> Y+0
000f69 91e0 08db 	LDS  R30,_count_input
000f6b 91f0 08dc 	LDS  R31,_count_input+1
000f6d 940e 17e6 	CALL SUBOPT_0x38
000f6f 0fea      	ADD  R30,R26
000f70 1ffb      	ADC  R31,R27
000f71 81a8      	LD   R26,Y
000f72 81b9      	LDD  R27,Y+1
000f73 83a0      	STD  Z+0,R26
000f74 83b1      	STD  Z+1,R27
                 ; 000A 0012     count_input++;
000f75 edab      	LDI  R26,LOW(_count_input)
000f76 e0b8      	LDI  R27,HIGH(_count_input)
000f77 940e 1743 	CALL SUBOPT_0x21
                 ; 000A 0013 }
000f79 c0e2      	RJMP _0x20C0008
                 ;
                 ;void pop_event(){
                 ; 000A 0015 void pop_event(){
                 _pop_event:
                 ; 000A 0016     int event = 0;
                 ; 000A 0017     event = input[count_event];
000f7a 931a      	ST   -Y,R17
000f7b 930a      	ST   -Y,R16
                 ;	event -> R16,R17
                +
000f7c e000     +LDI R16 , LOW ( 0 )
000f7d e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000f7e 91e0 08dd 	LDS  R30,_count_event
000f80 91f0 08de 	LDS  R31,_count_event+1
000f82 940e 17e6 	CALL SUBOPT_0x38
000f84 0fae      	ADD  R26,R30
000f85 1fbf      	ADC  R27,R31
000f86 910d      	LD   R16,X+
000f87 911c      	LD   R17,X
                 ; 000A 0018     printDebug("EVENT = %d\r\n", event);
                +
000f88 e7ea     +LDI R30 , LOW ( 2 * _0x140000 + ( 0 ) )
000f89 e0f6     +LDI R31 , HIGH ( 2 * _0x140000 + ( 0 ) )
                 	__POINTW1FN _0x140000,0
000f8a 93fa      	ST   -Y,R31
000f8b 93ea      	ST   -Y,R30
000f8c 01f8      	MOVW R30,R16
000f8d 940e 1721 	CALL SUBOPT_0x1D
                 ; 000A 0019     if (event != 0) count_event++;
000f8f 2e00      	MOV  R0,R16
000f90 2a01      	OR   R0,R17
000f91 f021      	BREQ _0x140003
000f92 edad      	LDI  R26,LOW(_count_event)
000f93 e0b8      	LDI  R27,HIGH(_count_event)
000f94 940e 1743 	CALL SUBOPT_0x21
                 ; 000A 001A     printDebug("count_event = %d\r\n", count_event);
                 _0x140003:
                +
000f96 e8e7     +LDI R30 , LOW ( 2 * _0x140000 + ( 13 ) )
000f97 e0f6     +LDI R31 , HIGH ( 2 * _0x140000 + ( 13 ) )
                 	__POINTW1FN _0x140000,13
000f98 93fa      	ST   -Y,R31
000f99 93ea      	ST   -Y,R30
000f9a 91e0 08dd 	LDS  R30,_count_event
000f9c 91f0 08de 	LDS  R31,_count_event+1
000f9e 940e 1721 	CALL SUBOPT_0x1D
                 ; 000A 001B     if(count_event == 30 ) count_event = 0;
000fa0 91a0 08dd 	LDS  R26,_count_event
000fa2 91b0 08de 	LDS  R27,_count_event+1
000fa4 975e      	SBIW R26,30
000fa5 f429      	BRNE _0x140004
000fa6 e0e0      	LDI  R30,LOW(0)
000fa7 93e0 08dd 	STS  _count_event,R30
000fa9 93e0 08de 	STS  _count_event+1,R30
                 ; 000A 001C     do_event(event);
                 _0x140004:
000fab 01d8      	MOVW R26,R16
000fac d003      	RCALL _do_event
                 ; 000A 001D }
000fad 9109      	LD   R16,Y+
000fae 9119      	LD   R17,Y+
000faf 9508      	RET
                 ;
                 ;void do_event(int event){
                 ; 000A 001F void do_event(int event){
                 _do_event:
                 ; 000A 0020 
                 ; 000A 0021             if(event == 2){
000fb0 93ba      	ST   -Y,R27
000fb1 93aa      	ST   -Y,R26
                 ;	event -> Y+0
000fb2 81a8      	LD   R26,Y
000fb3 81b9      	LDD  R27,Y+1
000fb4 9712      	SBIW R26,2
000fb5 f429      	BRNE _0x140005
                 ; 000A 0022                 flag_state = 4;
000fb6 940e 17c7 	CALL SUBOPT_0x35
                 ; 000A 0023                 printDebug("\r\n-------- JOINT SUCCESS --------\r\n");
                +
000fb8 e9ea     +LDI R30 , LOW ( 2 * _0x140000 + ( 32 ) )
000fb9 e0f6     +LDI R31 , HIGH ( 2 * _0x140000 + ( 32 ) )
                 	__POINTW1FN _0x140000,32
000fba c09b      	RJMP _0x140022
                 ; 000A 0024             }
                 ; 000A 0025 
                 ; 000A 0026         /*=============== Recive ACK ===============*/
                 ; 000A 0027             else if(event == 3){
                 _0x140005:
000fbb 81a8      	LD   R26,Y
000fbc 81b9      	LDD  R27,Y+1
000fbd 9713      	SBIW R26,3
000fbe f439      	BRNE _0x140007
                 ; 000A 0028                 printDebug("\r\n-------- RECIVE PING --------\r\n");
                +
000fbf ebee     +LDI R30 , LOW ( 2 * _0x140000 + ( 68 ) )
000fc0 e0f6     +LDI R31 , HIGH ( 2 * _0x140000 + ( 68 ) )
                 	__POINTW1FN _0x140000,68
000fc1 940e 16ac 	CALL SUBOPT_0x8
                 ; 000A 0029                 send_ping();
000fc3 940e 0b94 	CALL _send_ping
                 ; 000A 002A             }
                 ; 000A 002B 
                 ; 000A 002C         /*=============== Recive EVENT ===============*/
                 ; 000A 002D             else if(event == 510 || event == 511){
000fc5 c096      	RJMP _0x140008
                 _0x140007:
000fc6 81a8      	LD   R26,Y
000fc7 81b9      	LDD  R27,Y+1
000fc8 3fae      	CPI  R26,LOW(0x1FE)
000fc9 e0e1      	LDI  R30,HIGH(0x1FE)
000fca 07be      	CPC  R27,R30
000fcb f021      	BREQ _0x14000A
000fcc 3faf      	CPI  R26,LOW(0x1FF)
000fcd e0e1      	LDI  R30,HIGH(0x1FF)
000fce 07be      	CPC  R27,R30
000fcf f5c1      	BRNE _0x140009
                 _0x14000A:
                 ; 000A 002E             printDebug("\r\n ++++++++++ _event == 510 || _event == 511 ++++++++\r\n");
                +
000fd0 eee0     +LDI R30 , LOW ( 2 * _0x140000 + ( 102 ) )
000fd1 e0f6     +LDI R31 , HIGH ( 2 * _0x140000 + ( 102 ) )
                 	__POINTW1FN _0x140000,102
000fd2 940e 16ac 	CALL SUBOPT_0x8
                 ; 000A 002F                 if(event == 511){
000fd4 81a8      	LD   R26,Y
000fd5 81b9      	LDD  R27,Y+1
000fd6 3faf      	CPI  R26,LOW(0x1FF)
000fd7 e0e1      	LDI  R30,HIGH(0x1FF)
000fd8 07be      	CPC  R27,R30
000fd9 f479      	BRNE _0x14000C
                 ; 000A 0030                     EVENT[1] = 1;
000fda e0e1      	LDI  R30,LOW(1)
                +
000fdb 93e0 0894+STS _EVENT + ( 1 ) , R30
                 	__PUTB1MN _EVENT,1
                 ; 000A 0031                     flag_state = 5;
000fdd 940e 16f9 	CALL SUBOPT_0x16
                 ; 000A 0032                     STATUS_DEVICE = 1;
000fdf e0e1      	LDI  R30,LOW(1)
000fe0 940e 1964 	CALL SUBOPT_0x6C
                 ; 000A 0033                     EEPROM_write(Eaddress,STATUS_DEVICE);
000fe2 940e 16e4 	CALL SUBOPT_0x12
                 ; 000A 0034                     LED_STAT_ON;
000fe4 98af      	CBI  0x15,7
                 ; 000A 0035                     POWER_RELAY_ON;
000fe5 91e0 0065 	LDS  R30,101
000fe7 60e4      	ORI  R30,4
000fe8 c014      	RJMP _0x140023
                 ; 000A 0036                 }else if(event == 510){
                 _0x14000C:
000fe9 81a8      	LD   R26,Y
000fea 81b9      	LDD  R27,Y+1
000feb 3fae      	CPI  R26,LOW(0x1FE)
000fec e0e1      	LDI  R30,HIGH(0x1FE)
000fed 07be      	CPC  R27,R30
000fee f481      	BRNE _0x140010
                 ; 000A 0037                     EVENT[1] = 0;
000fef e0e0      	LDI  R30,LOW(0)
                +
000ff0 93e0 0894+STS _EVENT + ( 1 ) , R30
                 	__PUTB1MN _EVENT,1
                 ; 000A 0038                     flag_state = 4;
000ff2 940e 17c7 	CALL SUBOPT_0x35
                 ; 000A 0039                     STATUS_DEVICE = 0;
000ff4 e0e0      	LDI  R30,LOW(0)
000ff5 940e 1964 	CALL SUBOPT_0x6C
                 ; 000A 003A                     EEPROM_write(Eaddress,STATUS_DEVICE);
000ff7 940e 16e4 	CALL SUBOPT_0x12
                 ; 000A 003B                     LED_STAT_OFF;
000ff9 9aaf      	SBI  0x15,7
                 ; 000A 003C                     POWER_RELAY_OFF;
000ffa 91e0 0065 	LDS  R30,101
000ffc 7feb      	ANDI R30,0xFB
                 _0x140023:
000ffd 93e0 0065 	STS  101,R30
                 ; 000A 003D                 }
                 ; 000A 003E                 recive_event(1,EVENT[1]);
                 _0x140010:
000fff e0e1      	LDI  R30,LOW(1)
001000 93ea      	ST   -Y,R30
                +
001001 91a0 0894+LDS R26 , _EVENT + ( 1 )
                 	__GETB2MN _EVENT,1
001003 940e 0bc3 	CALL _recive_event
                 ; 000A 003F                 printDebug("\r\n-------- RECIVE EVENT --------\r\n");
                +
001005 e1e8     +LDI R30 , LOW ( 2 * _0x140000 + ( 158 ) )
001006 e0f7     +LDI R31 , HIGH ( 2 * _0x140000 + ( 158 ) )
                 	__POINTW1FN _0x140000,158
001007 c04e      	RJMP _0x140022
                 ; 000A 0040             }
                 ; 000A 0041 
                 ; 000A 0042             else if(event == 5100 || event == 5110){
                 _0x140009:
001008 81a8      	LD   R26,Y
001009 81b9      	LDD  R27,Y+1
00100a 3eac      	CPI  R26,LOW(0x13EC)
00100b e1e3      	LDI  R30,HIGH(0x13EC)
00100c 07be      	CPC  R27,R30
00100d f021      	BREQ _0x140015
00100e 3fa6      	CPI  R26,LOW(0x13F6)
00100f e1e3      	LDI  R30,HIGH(0x13F6)
001010 07be      	CPC  R27,R30
001011 f5b9      	BRNE _0x140014
                 _0x140015:
                 ; 000A 0043             printDebug("\r\n ++++++++++ _event == 5100 || _event == 5110 ++++++++\r\n");
                +
001012 e3eb     +LDI R30 , LOW ( 2 * _0x140000 + ( 193 ) )
001013 e0f7     +LDI R31 , HIGH ( 2 * _0x140000 + ( 193 ) )
                 	__POINTW1FN _0x140000,193
001014 940e 16ac 	CALL SUBOPT_0x8
                 ; 000A 0044                 if(event == 5110){
001016 81a8      	LD   R26,Y
001017 81b9      	LDD  R27,Y+1
001018 3fa6      	CPI  R26,LOW(0x13F6)
001019 e1e3      	LDI  R30,HIGH(0x13F6)
00101a 07be      	CPC  R27,R30
00101b f4a1      	BRNE _0x140017
                 ; 000A 0045                     EVENT[1] = 1;
00101c e0e1      	LDI  R30,LOW(1)
                +
00101d 93e0 0894+STS _EVENT + ( 1 ) , R30
                 	__PUTB1MN _EVENT,1
                 ; 000A 0046                     flag_state = 5;
00101f 940e 16f9 	CALL SUBOPT_0x16
                 ; 000A 0047                     STATUS_DEVICE = 1;
001021 e0e1      	LDI  R30,LOW(1)
001022 940e 1964 	CALL SUBOPT_0x6C
                 ; 000A 0048                     EEPROM_write(Eaddress,STATUS_DEVICE);
001024 940e 16e4 	CALL SUBOPT_0x12
                 ; 000A 0049                     LED_STAT_ON;
001026 98af      	CBI  0x15,7
                 ; 000A 004A                     POWER_RELAY_ON;
001027 91e0 0065 	LDS  R30,101
001029 60e4      	ORI  R30,4
00102a 93e0 0065 	STS  101,R30
                 ; 000A 004B                     send_event(1,1);
00102c e0e1      	LDI  R30,LOW(1)
00102d 93ea      	ST   -Y,R30
00102e e0a1      	LDI  R26,LOW(1)
00102f c016      	RJMP _0x140024
                 ; 000A 004C                 }else if(event == 5100){
                 _0x140017:
001030 81a8      	LD   R26,Y
001031 81b9      	LDD  R27,Y+1
001032 3eac      	CPI  R26,LOW(0x13EC)
001033 e1e3      	LDI  R30,HIGH(0x13EC)
001034 07be      	CPC  R27,R30
001035 f491      	BRNE _0x14001B
                 ; 000A 004D                     EVENT[1] = 0;
001036 e0e0      	LDI  R30,LOW(0)
                +
001037 93e0 0894+STS _EVENT + ( 1 ) , R30
                 	__PUTB1MN _EVENT,1
                 ; 000A 004E                     flag_state = 4;
001039 940e 17c7 	CALL SUBOPT_0x35
                 ; 000A 004F                     STATUS_DEVICE = 0;
00103b e0e0      	LDI  R30,LOW(0)
00103c 940e 1964 	CALL SUBOPT_0x6C
                 ; 000A 0050                     EEPROM_write(Eaddress,STATUS_DEVICE);
00103e 940e 16e4 	CALL SUBOPT_0x12
                 ; 000A 0051                     LED_STAT_OFF;
001040 9aaf      	SBI  0x15,7
                 ; 000A 0052                     POWER_RELAY_OFF;
001041 940e 1664 	CALL SUBOPT_0x1
                 ; 000A 0053                     send_event(1,0);
001043 e0e1      	LDI  R30,LOW(1)
001044 93ea      	ST   -Y,R30
001045 e0a0      	LDI  R26,LOW(0)
                 _0x140024:
001046 940e 0b58 	CALL _send_event
                 ; 000A 0054                 }
                 ; 000A 0055             }
                 _0x14001B:
                 ; 000A 0056 
                 ; 000A 0057             /*=============== Send EVENT Success ===============*/
                 ; 000A 0058             else if(event == 6){
001048 c013      	RJMP _0x14001E
                 _0x140014:
001049 81a8      	LD   R26,Y
00104a 81b9      	LDD  R27,Y+1
00104b 9716      	SBIW R26,6
00104c f419      	BRNE _0x14001F
                 ; 000A 0059                 printDebug("\r\n-------- SEND EVENT SUCCESS --------\r\n");
                +
00104d e7e5     +LDI R30 , LOW ( 2 * _0x140000 + ( 251 ) )
00104e e0f7     +LDI R31 , HIGH ( 2 * _0x140000 + ( 251 ) )
                 	__POINTW1FN _0x140000,251
00104f c006      	RJMP _0x140022
                 ; 000A 005A             }
                 ; 000A 005B 
                 ; 000A 005C             /*=============== Send REPPORT Success ===============*/
                 ; 000A 005D             else if(event == 8){
                 _0x14001F:
001050 81a8      	LD   R26,Y
001051 81b9      	LDD  R27,Y+1
001052 9718      	SBIW R26,8
001053 f441      	BRNE _0x140021
                 ; 000A 005E                 printDebug("\r\n-------- SEND REPORT SUCCESS --------\r\n");
                +
001054 e9ee     +LDI R30 , LOW ( 2 * _0x140000 + ( 292 ) )
001055 e0f7     +LDI R31 , HIGH ( 2 * _0x140000 + ( 292 ) )
                 	__POINTW1FN _0x140000,292
                 _0x140022:
001056 93fa      	ST   -Y,R31
001057 93ea      	ST   -Y,R30
001058 e080      	LDI  R24,0
001059 940e 062e 	CALL _printDebug
00105b 9622      	ADIW R28,2
                 ; 000A 005F             }
                 ; 000A 0060 }
                 _0x140021:
                 _0x14001E:
                 _0x140008:
                 _0x20C0008:
00105c 9622      	ADIW R28,2
00105d 9508      	RET
                 ;
                 ;
                 ;
                 
                 	.CSEG
                 _ftoa:
00105e 940e 170e 	CALL SUBOPT_0x19
001060 83e8      	ST   Y,R30
001061 e0e0      	LDI  R30,LOW(0)
001062 83e9      	STD  Y+1,R30
001063 83ea      	STD  Y+2,R30
001064 e3ef      	LDI  R30,LOW(63)
001065 83eb      	STD  Y+3,R30
001066 931a      	ST   -Y,R17
001067 930a      	ST   -Y,R16
001068 85eb      	LDD  R30,Y+11
001069 85fc      	LDD  R31,Y+11+1
00106a 3fef      	CPI  R30,LOW(0xFFFF)
00106b efaf      	LDI  R26,HIGH(0xFFFF)
00106c 07fa      	CPC  R31,R26
00106d f439      	BRNE _0x200000D
00106e 940e 1713 	CALL SUBOPT_0x1A
                +
001070 ecaa     +LDI R26 , LOW ( 2 * _0x2000000 + ( 0 ) )
001071 e0b7     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 0 ) )
                 	__POINTW2FN _0x2000000,0
001072 940e 1487 	CALL _strcpyf
001074 c0a5      	RJMP _0x20C0007
                 _0x200000D:
001075 3fef      	CPI  R30,LOW(0x7FFF)
001076 e7af      	LDI  R26,HIGH(0x7FFF)
001077 07fa      	CPC  R31,R26
001078 f439      	BRNE _0x200000C
001079 940e 1713 	CALL SUBOPT_0x1A
                +
00107b ecab     +LDI R26 , LOW ( 2 * _0x2000000 + ( 1 ) )
00107c e0b7     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 1 ) )
                 	__POINTW2FN _0x2000000,1
00107d 940e 1487 	CALL _strcpyf
00107f c09a      	RJMP _0x20C0007
                 _0x200000C:
001080 85ac      	LDD  R26,Y+12
001081 23aa      	TST  R26
001082 f462      	BRPL _0x200000F
                +
001083 85e9     +LDD R30 , Y + 9
001084 85fa     +LDD R31 , Y + 9 + 1
001085 856b     +LDD R22 , Y + 9 + 2
001086 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
001087 940e 1a70 	CALL __ANEGF1
001089 940e 1967 	CALL SUBOPT_0x6D
00108b 940e 196c 	CALL SUBOPT_0x6E
00108d e2ed      	LDI  R30,LOW(45)
00108e 93ec      	ST   X,R30
                 _0x200000F:
00108f 85a8      	LDD  R26,Y+8
001090 30a7      	CPI  R26,LOW(0x7)
001091 f010      	BRLO _0x2000010
001092 e0e6      	LDI  R30,LOW(6)
001093 87e8      	STD  Y+8,R30
                 _0x2000010:
001094 8518      	LDD  R17,Y+8
                 _0x2000011:
001095 2fe1      	MOV  R30,R17
001096 5011      	SUBI R17,1
001097 30e0      	CPI  R30,0
001098 f039      	BREQ _0x2000013
001099 940e 1973 	CALL SUBOPT_0x6F
00109b 940e 1978 	CALL SUBOPT_0x70
00109d 940e 197f 	CALL SUBOPT_0x71
00109f cff5      	RJMP _0x2000011
                 _0x2000013:
0010a0 940e 1984 	CALL SUBOPT_0x72
0010a2 940e 1b16 	CALL __ADDF12
0010a4 940e 1967 	CALL SUBOPT_0x6D
0010a6 e010      	LDI  R17,LOW(0)
0010a7 940e 16b3 	CALL SUBOPT_0x9
0010a9 940e 197f 	CALL SUBOPT_0x71
                 _0x2000014:
0010ab 940e 1984 	CALL SUBOPT_0x72
0010ad 940e 1bf9 	CALL __CMPF12
0010af f088      	BRLO _0x2000016
0010b0 940e 1973 	CALL SUBOPT_0x6F
0010b2 940e 198d 	CALL SUBOPT_0x73
0010b4 940e 197f 	CALL SUBOPT_0x71
0010b6 5f1f      	SUBI R17,-LOW(1)
0010b7 3217      	CPI  R17,39
0010b8 f038      	BRLO _0x2000017
0010b9 940e 1713 	CALL SUBOPT_0x1A
                +
0010bb ecaf     +LDI R26 , LOW ( 2 * _0x2000000 + ( 5 ) )
0010bc e0b7     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 5 ) )
                 	__POINTW2FN _0x2000000,5
0010bd 940e 1487 	CALL _strcpyf
0010bf c05a      	RJMP _0x20C0007
                 _0x2000017:
0010c0 cfea      	RJMP _0x2000014
                 _0x2000016:
0010c1 3010      	CPI  R17,0
0010c2 f429      	BRNE _0x2000018
0010c3 940e 196c 	CALL SUBOPT_0x6E
0010c5 e3e0      	LDI  R30,LOW(48)
0010c6 93ec      	ST   X,R30
0010c7 c028      	RJMP _0x2000019
                 _0x2000018:
                 _0x200001A:
0010c8 2fe1      	MOV  R30,R17
0010c9 5011      	SUBI R17,1
0010ca 30e0      	CPI  R30,0
0010cb f121      	BREQ _0x200001C
0010cc 940e 1973 	CALL SUBOPT_0x6F
0010ce 940e 1978 	CALL SUBOPT_0x70
0010d0 940e 1991 	CALL SUBOPT_0x74
0010d2 940e 1931 	CALL SUBOPT_0x65
0010d4 940e 14de 	CALL _floor
0010d6 940e 197f 	CALL SUBOPT_0x71
0010d8 940e 1984 	CALL SUBOPT_0x72
0010da 940e 1bb4 	CALL __DIVF21
0010dc 940e 1aa3 	CALL __CFD1U
0010de 2f0e      	MOV  R16,R30
0010df 940e 196c 	CALL SUBOPT_0x6E
0010e1 940e 1996 	CALL SUBOPT_0x75
0010e3 940e 1973 	CALL SUBOPT_0x6F
0010e5 940e 1811 	CALL SUBOPT_0x3C
0010e7 940e 1b66 	CALL __MULF12
0010e9 940e 199c 	CALL SUBOPT_0x76
0010eb 940e 181b 	CALL SUBOPT_0x3E
0010ed 940e 1967 	CALL SUBOPT_0x6D
0010ef cfd8      	RJMP _0x200001A
                 _0x200001C:
                 _0x2000019:
0010f0 85e8      	LDD  R30,Y+8
0010f1 30e0      	CPI  R30,0
0010f2 f119      	BREQ _0x20C0006
0010f3 940e 196c 	CALL SUBOPT_0x6E
0010f5 e2ee      	LDI  R30,LOW(46)
0010f6 93ec      	ST   X,R30
                 _0x200001E:
0010f7 85e8      	LDD  R30,Y+8
0010f8 50e1      	SUBI R30,LOW(1)
0010f9 87e8      	STD  Y+8,R30
0010fa 5fef      	SUBI R30,-LOW(1)
0010fb f0d1      	BREQ _0x2000020
0010fc 940e 199c 	CALL SUBOPT_0x76
0010fe 940e 198d 	CALL SUBOPT_0x73
001100 940e 1967 	CALL SUBOPT_0x6D
                +
001102 85e9     +LDD R30 , Y + 9
001103 85fa     +LDD R31 , Y + 9 + 1
001104 856b     +LDD R22 , Y + 9 + 2
001105 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
001106 940e 1aa3 	CALL __CFD1U
001108 2f0e      	MOV  R16,R30
001109 940e 196c 	CALL SUBOPT_0x6E
00110b 940e 1996 	CALL SUBOPT_0x75
00110d 940e 199c 	CALL SUBOPT_0x76
00110f 940e 1811 	CALL SUBOPT_0x3C
001111 940e 181b 	CALL SUBOPT_0x3E
001113 940e 1967 	CALL SUBOPT_0x6D
001115 cfe1      	RJMP _0x200001E
                 _0x2000020:
                 _0x20C0006:
001116 81ae      	LDD  R26,Y+6
001117 81bf      	LDD  R27,Y+6+1
001118 e0e0      	LDI  R30,LOW(0)
001119 93ec      	ST   X,R30
                 _0x20C0007:
00111a 8119      	LDD  R17,Y+1
00111b 8108      	LDD  R16,Y+0
00111c 962d      	ADIW R28,13
00111d 9508      	RET
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
00111e 940e 1795 	CALL SUBOPT_0x2D
001120 81aa      	LDD  R26,Y+2
001121 81bb      	LDD  R27,Y+2+1
001122 9612      	ADIW R26,2
001123 940e 1cf3 	CALL __GETW1P
001125 9730      	SBIW R30,0
001126 f129      	BREQ _0x2020010
001127 81aa      	LDD  R26,Y+2
001128 81bb      	LDD  R27,Y+2+1
001129 9614      	ADIW R26,4
00112a 940e 1cf3 	CALL __GETW1P
00112c 018f      	MOVW R16,R30
00112d 9730      	SBIW R30,0
00112e f061      	BREQ _0x2020012
                +
00112f 3002     +CPI R16 , LOW ( 2 )
001130 e0e0     +LDI R30 , HIGH ( 2 )
001131 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
001132 f0c0      	BRLO _0x2020013
001133 01f8      	MOVW R30,R16
001134 9731      	SBIW R30,1
001135 018f      	MOVW R16,R30
                +
001136 81aa     +LDD R26 , Y + 2
001137 81bb     +LDD R27 , Y + 2 + 1
001138 9614     +ADIW R26 , 4
001139 93ed     +ST X + , R30
00113a 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
00113b 81aa      	LDD  R26,Y+2
00113c 81bb      	LDD  R27,Y+2+1
00113d 9612      	ADIW R26,2
00113e 940e 1743 	CALL SUBOPT_0x21
001140 9731      	SBIW R30,1
001141 81ac      	LDD  R26,Y+4
001142 83a0      	STD  Z+0,R26
001143 81aa      	LDD  R26,Y+2
001144 81bb      	LDD  R27,Y+2+1
001145 940e 1cf3 	CALL __GETW1P
001147 23ff      	TST  R31
001148 f012      	BRMI _0x2020014
001149 940e 1743 	CALL SUBOPT_0x21
                 _0x2020014:
                 _0x2020013:
00114b c006      	RJMP _0x2020015
                 _0x2020010:
00114c 81aa      	LDD  R26,Y+2
00114d 81bb      	LDD  R27,Y+2+1
00114e efef      	LDI  R30,LOW(65535)
00114f efff      	LDI  R31,HIGH(65535)
001150 93ed      	ST   X+,R30
001151 93fc      	ST   X,R31
                 _0x2020015:
001152 8119      	LDD  R17,Y+1
001153 8108      	LDD  R16,Y+0
001154 9625      	ADIW R28,5
001155 9508      	RET
                 __ftoe_G101:
001156 940e 170e 	CALL SUBOPT_0x19
001158 83e8      	ST   Y,R30
001159 e0e0      	LDI  R30,LOW(0)
00115a 83e9      	STD  Y+1,R30
00115b e8e0      	LDI  R30,LOW(128)
00115c 83ea      	STD  Y+2,R30
00115d e3ef      	LDI  R30,LOW(63)
00115e 83eb      	STD  Y+3,R30
00115f 940e 1d5b 	CALL __SAVELOCR4
001161 85ee      	LDD  R30,Y+14
001162 85ff      	LDD  R31,Y+14+1
001163 3fef      	CPI  R30,LOW(0xFFFF)
001164 efaf      	LDI  R26,HIGH(0xFFFF)
001165 07fa      	CPC  R31,R26
001166 f449      	BRNE _0x2020019
001167 85e8      	LDD  R30,Y+8
001168 85f9      	LDD  R31,Y+8+1
001169 93fa      	ST   -Y,R31
00116a 93ea      	ST   -Y,R30
                +
00116b eda4     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
00116c e0b7     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
00116d 940e 1487 	CALL _strcpyf
00116f c0ba      	RJMP _0x20C0005
                 _0x2020019:
001170 3fef      	CPI  R30,LOW(0x7FFF)
001171 e7af      	LDI  R26,HIGH(0x7FFF)
001172 07fa      	CPC  R31,R26
001173 f449      	BRNE _0x2020018
001174 85e8      	LDD  R30,Y+8
001175 85f9      	LDD  R31,Y+8+1
001176 93fa      	ST   -Y,R31
001177 93ea      	ST   -Y,R30
                +
001178 eda5     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
001179 e0b7     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
00117a 940e 1487 	CALL _strcpyf
00117c c0ad      	RJMP _0x20C0005
                 _0x2020018:
00117d 85ab      	LDD  R26,Y+11
00117e 30a7      	CPI  R26,LOW(0x7)
00117f f010      	BRLO _0x202001B
001180 e0e6      	LDI  R30,LOW(6)
001181 87eb      	STD  Y+11,R30
                 _0x202001B:
001182 851b      	LDD  R17,Y+11
                 _0x202001C:
001183 2fe1      	MOV  R30,R17
001184 5011      	SUBI R17,1
001185 30e0      	CPI  R30,0
001186 f019      	BREQ _0x202001E
001187 940e 19a1 	CALL SUBOPT_0x77
001189 cff9      	RJMP _0x202001C
                 _0x202001E:
00118a 940e 180c 	CALL SUBOPT_0x3B
00118c 940e 1d46 	CALL __CPD10
00118e f421      	BRNE _0x202001F
00118f e030      	LDI  R19,LOW(0)
001190 940e 19a1 	CALL SUBOPT_0x77
001192 c034      	RJMP _0x2020020
                 _0x202001F:
001193 853b      	LDD  R19,Y+11
001194 940e 19a4 	CALL SUBOPT_0x78
001196 f009      	BREQ PC+2
001197 f410      	BRCC PC+3
001198 940c 11a8 	JMP  _0x2020021
00119a 940e 19a1 	CALL SUBOPT_0x77
                 _0x2020022:
00119c 940e 19a4 	CALL SUBOPT_0x78
00119e f040      	BRLO _0x2020024
00119f 940e 1816 	CALL SUBOPT_0x3D
0011a1 940e 1978 	CALL SUBOPT_0x70
0011a3 940e 19a9 	CALL SUBOPT_0x79
0011a5 5f3f      	SUBI R19,-LOW(1)
0011a6 cff5      	RJMP _0x2020022
                 _0x2020024:
0011a7 c00d      	RJMP _0x2020025
                 _0x2020021:
                 _0x2020026:
0011a8 940e 19a4 	CALL SUBOPT_0x78
0011aa f440      	BRSH _0x2020028
0011ab 940e 1816 	CALL SUBOPT_0x3D
0011ad 940e 198d 	CALL SUBOPT_0x73
0011af 940e 19a9 	CALL SUBOPT_0x79
0011b1 5031      	SUBI R19,LOW(1)
0011b2 cff5      	RJMP _0x2020026
                 _0x2020028:
0011b3 940e 19a1 	CALL SUBOPT_0x77
                 _0x2020025:
0011b5 940e 180c 	CALL SUBOPT_0x3B
0011b7 940e 1991 	CALL SUBOPT_0x74
0011b9 940e 1b16 	CALL __ADDF12
0011bb 940e 19a9 	CALL SUBOPT_0x79
0011bd 940e 19a4 	CALL SUBOPT_0x78
0011bf f038      	BRLO _0x2020029
0011c0 940e 1816 	CALL SUBOPT_0x3D
0011c2 940e 1978 	CALL SUBOPT_0x70
0011c4 940e 19a9 	CALL SUBOPT_0x79
0011c6 5f3f      	SUBI R19,-LOW(1)
                 _0x2020029:
                 _0x2020020:
0011c7 e010      	LDI  R17,LOW(0)
                 _0x202002A:
0011c8 85eb      	LDD  R30,Y+11
0011c9 17e1      	CP   R30,R17
0011ca f198      	BRLO _0x202002C
0011cb 940e 182a 	CALL SUBOPT_0x41
0011cd 940e 1978 	CALL SUBOPT_0x70
0011cf 940e 1991 	CALL SUBOPT_0x74
0011d1 940e 1931 	CALL SUBOPT_0x65
0011d3 940e 14de 	CALL _floor
0011d5 940e 1820 	CALL SUBOPT_0x3F
0011d7 940e 1832 	CALL SUBOPT_0x43
0011d9 940e 1816 	CALL SUBOPT_0x3D
0011db 940e 1bb4 	CALL __DIVF21
0011dd 940e 1aa3 	CALL __CFD1U
0011df 2f0e      	MOV  R16,R30
0011e0 940e 19ae 	CALL SUBOPT_0x7A
0011e2 2fe0      	MOV  R30,R16
0011e3 5de0      	SUBI R30,-LOW(48)
0011e4 93ec      	ST   X,R30
0011e5 2fe0      	MOV  R30,R16
0011e6 27ff      	CLR  R31
0011e7 2766      	CLR  R22
0011e8 2777      	CLR  R23
0011e9 940e 1adc 	CALL __CDF1
0011eb 940e 182a 	CALL SUBOPT_0x41
0011ed 940e 1b66 	CALL __MULF12
0011ef 940e 1816 	CALL SUBOPT_0x3D
0011f1 940e 181b 	CALL SUBOPT_0x3E
0011f3 940e 19a9 	CALL SUBOPT_0x79
0011f5 2fe1      	MOV  R30,R17
0011f6 5f1f      	SUBI R17,-1
0011f7 30e0      	CPI  R30,0
0011f8 f679      	BRNE _0x202002A
0011f9 940e 19ae 	CALL SUBOPT_0x7A
0011fb e2ee      	LDI  R30,LOW(46)
0011fc 93ec      	ST   X,R30
0011fd cfca      	RJMP _0x202002A
                 _0x202002C:
0011fe 940e 19b5 	CALL SUBOPT_0x7B
001200 9731      	SBIW R30,1
001201 85aa      	LDD  R26,Y+10
001202 83a0      	STD  Z+0,R26
001203 3030      	CPI  R19,0
001204 f42c      	BRGE _0x202002E
001205 9531      	NEG  R19
001206 85a8      	LDD  R26,Y+8
001207 85b9      	LDD  R27,Y+8+1
001208 e2ed      	LDI  R30,LOW(45)
001209 c003      	RJMP _0x202010E
                 _0x202002E:
00120a 85a8      	LDD  R26,Y+8
00120b 85b9      	LDD  R27,Y+8+1
00120c e2eb      	LDI  R30,LOW(43)
                 _0x202010E:
00120d 93ec      	ST   X,R30
00120e 940e 19b5 	CALL SUBOPT_0x7B
001210 940e 19b5 	CALL SUBOPT_0x7B
001212 9731      	SBIW R30,1
001213 01bf      	MOVW R22,R30
001214 2fa3      	MOV  R26,R19
001215 e0ea      	LDI  R30,LOW(10)
001216 940e 1c79 	CALL __DIVB21
001218 5de0      	SUBI R30,-LOW(48)
001219 01db      	MOVW R26,R22
00121a 93ec      	ST   X,R30
00121b 940e 19b5 	CALL SUBOPT_0x7B
00121d 9731      	SBIW R30,1
00121e 01bf      	MOVW R22,R30
00121f 2fa3      	MOV  R26,R19
001220 e0ea      	LDI  R30,LOW(10)
001221 940e 1cbb 	CALL __MODB21
001223 5de0      	SUBI R30,-LOW(48)
001224 01db      	MOVW R26,R22
001225 93ec      	ST   X,R30
001226 85a8      	LDD  R26,Y+8
001227 85b9      	LDD  R27,Y+8+1
001228 e0e0      	LDI  R30,LOW(0)
001229 93ec      	ST   X,R30
                 _0x20C0005:
00122a 940e 1d62 	CALL __LOADLOCR4
00122c 9660      	ADIW R28,16
00122d 9508      	RET
                 __print_G101:
00122e 93ba      	ST   -Y,R27
00122f 93aa      	ST   -Y,R26
001230 97ef      	SBIW R28,63
001231 9761      	SBIW R28,17
001232 940e 1d59 	CALL __SAVELOCR6
001234 e010      	LDI  R17,0
                +
001235 01fe     +MOVW R30 , R28
001236 5ae8     +SUBI R30 , LOW ( - 88 )
001237 4fff     +SBCI R31 , HIGH ( - 88 )
001238 9001     +LD R0 , Z +
001239 81f0     +LD R31 , Z
00123a 2de0     +MOV R30 , R0
                 	__GETW1SX 88
00123b 87e8      	STD  Y+8,R30
00123c 87f9      	STD  Y+8+1,R31
                +
00123d 01fe     +MOVW R30 , R28
00123e 5aea     +SUBI R30 , LOW ( - 86 )
00123f 4fff     +SBCI R31 , HIGH ( - 86 )
001240 9001     +LD R0 , Z +
001241 81f0     +LD R31 , Z
001242 2de0     +MOV R30 , R0
                 	__GETW1SX 86
001243 83ee      	STD  Y+6,R30
001244 83ff      	STD  Y+6+1,R31
001245 81ae      	LDD  R26,Y+6
001246 81bf      	LDD  R27,Y+6+1
001247 e0e0      	LDI  R30,LOW(0)
001248 e0f0      	LDI  R31,HIGH(0)
001249 93ed      	ST   X+,R30
00124a 93fc      	ST   X,R31
                 _0x2020030:
00124b 01de      	MOVW R26,R28
00124c 5aa4      	SUBI R26,LOW(-(92))
00124d 4fbf      	SBCI R27,HIGH(-(92))
00124e 940e 1743 	CALL SUBOPT_0x21
001250 9731      	SBIW R30,1
001251 91e4      	LPM  R30,Z
001252 2f2e      	MOV  R18,R30
001253 30e0      	CPI  R30,0
001254 f411      	BRNE PC+3
001255 940c 1441 	JMP _0x2020032
001257 2fe1      	MOV  R30,R17
001258 30e0      	CPI  R30,0
001259 f439      	BRNE _0x2020036
00125a 3225      	CPI  R18,37
00125b f411      	BRNE _0x2020037
00125c e011      	LDI  R17,LOW(1)
00125d c002      	RJMP _0x2020038
                 _0x2020037:
00125e 940e 19bb 	CALL SUBOPT_0x7C
                 _0x2020038:
001260 c1df      	RJMP _0x2020035
                 _0x2020036:
001261 30e1      	CPI  R30,LOW(0x1)
001262 f4c1      	BRNE _0x2020039
001263 3225      	CPI  R18,37
001264 f419      	BRNE _0x202003A
001265 940e 19bb 	CALL SUBOPT_0x7C
001267 c1d7      	RJMP _0x202010F
                 _0x202003A:
001268 e012      	LDI  R17,LOW(2)
001269 e0e0      	LDI  R30,LOW(0)
00126a 8bed      	STD  Y+21,R30
00126b e000      	LDI  R16,LOW(0)
00126c 322d      	CPI  R18,45
00126d f411      	BRNE _0x202003B
00126e e001      	LDI  R16,LOW(1)
00126f c1d0      	RJMP _0x2020035
                 _0x202003B:
001270 322b      	CPI  R18,43
001271 f419      	BRNE _0x202003C
001272 e2eb      	LDI  R30,LOW(43)
001273 8bed      	STD  Y+21,R30
001274 c1cb      	RJMP _0x2020035
                 _0x202003C:
001275 3220      	CPI  R18,32
001276 f419      	BRNE _0x202003D
001277 e2e0      	LDI  R30,LOW(32)
001278 8bed      	STD  Y+21,R30
001279 c1c6      	RJMP _0x2020035
                 _0x202003D:
00127a c002      	RJMP _0x202003E
                 _0x2020039:
00127b 30e2      	CPI  R30,LOW(0x2)
00127c f439      	BRNE _0x202003F
                 _0x202003E:
00127d e050      	LDI  R21,LOW(0)
00127e e013      	LDI  R17,LOW(3)
00127f 3320      	CPI  R18,48
001280 f411      	BRNE _0x2020040
001281 6800      	ORI  R16,LOW(128)
001282 c1bd      	RJMP _0x2020035
                 _0x2020040:
001283 c002      	RJMP _0x2020041
                 _0x202003F:
001284 30e3      	CPI  R30,LOW(0x3)
001285 f491      	BRNE _0x2020042
                 _0x2020041:
001286 3320      	CPI  R18,48
001287 f010      	BRLO _0x2020044
001288 332a      	CPI  R18,58
001289 f008      	BRLO _0x2020045
                 _0x2020044:
00128a c007      	RJMP _0x2020043
                 _0x2020045:
00128b e0aa      	LDI  R26,LOW(10)
00128c 9f5a      	MUL  R21,R26
00128d 2d50      	MOV  R21,R0
00128e 2fe2      	MOV  R30,R18
00128f 53e0      	SUBI R30,LOW(48)
001290 0f5e      	ADD  R21,R30
001291 c1ae      	RJMP _0x2020035
                 _0x2020043:
001292 e040      	LDI  R20,LOW(0)
001293 322e      	CPI  R18,46
001294 f411      	BRNE _0x2020046
001295 e014      	LDI  R17,LOW(4)
001296 c1a9      	RJMP _0x2020035
                 _0x2020046:
001297 c00f      	RJMP _0x2020047
                 _0x2020042:
001298 30e4      	CPI  R30,LOW(0x4)
001299 f499      	BRNE _0x2020049
00129a 3320      	CPI  R18,48
00129b f010      	BRLO _0x202004B
00129c 332a      	CPI  R18,58
00129d f008      	BRLO _0x202004C
                 _0x202004B:
00129e c008      	RJMP _0x202004A
                 _0x202004C:
00129f 6200      	ORI  R16,LOW(32)
0012a0 e0aa      	LDI  R26,LOW(10)
0012a1 9f4a      	MUL  R20,R26
0012a2 2d40      	MOV  R20,R0
0012a3 2fe2      	MOV  R30,R18
0012a4 53e0      	SUBI R30,LOW(48)
0012a5 0f4e      	ADD  R20,R30
0012a6 c199      	RJMP _0x2020035
                 _0x202004A:
                 _0x2020047:
0012a7 362c      	CPI  R18,108
0012a8 f419      	BRNE _0x202004D
0012a9 6002      	ORI  R16,LOW(2)
0012aa e015      	LDI  R17,LOW(5)
0012ab c194      	RJMP _0x2020035
                 _0x202004D:
0012ac c004      	RJMP _0x202004E
                 _0x2020049:
0012ad 30e5      	CPI  R30,LOW(0x5)
0012ae f011      	BREQ PC+3
0012af 940c 1440 	JMP _0x2020035
                 _0x202004E:
0012b1 2fe2      	MOV  R30,R18
0012b2 36e3      	CPI  R30,LOW(0x63)
0012b3 f459      	BRNE _0x2020053
0012b4 940e 19c2 	CALL SUBOPT_0x7D
0012b6 940e 19c9 	CALL SUBOPT_0x7E
0012b8 940e 19c2 	CALL SUBOPT_0x7D
0012ba 81a4      	LDD  R26,Z+4
0012bb 93aa      	ST   -Y,R26
0012bc 940e 19d0 	CALL SUBOPT_0x7F
0012be c180      	RJMP _0x2020054
                 _0x2020053:
0012bf 34e5      	CPI  R30,LOW(0x45)
0012c0 f011      	BREQ _0x2020057
0012c1 36e5      	CPI  R30,LOW(0x65)
0012c2 f409      	BRNE _0x2020058
                 _0x2020057:
0012c3 c004      	RJMP _0x2020059
                 _0x2020058:
0012c4 36e6      	CPI  R30,LOW(0x66)
0012c5 f011      	BREQ PC+3
0012c6 940c 130e 	JMP _0x202005A
                 _0x2020059:
0012c8 01fe      	MOVW R30,R28
0012c9 9676      	ADIW R30,22
0012ca 87ee      	STD  Y+14,R30
0012cb 87ff      	STD  Y+14+1,R31
0012cc 940e 19d6 	CALL SUBOPT_0x80
0012ce 940e 1cf7 	CALL __GETD1P
0012d0 940e 19dd 	CALL SUBOPT_0x81
0012d2 940e 19e2 	CALL SUBOPT_0x82
0012d4 85ad      	LDD  R26,Y+13
0012d5 23aa      	TST  R26
0012d6 f022      	BRMI _0x202005B
0012d7 89ad      	LDD  R26,Y+21
0012d8 32ab      	CPI  R26,LOW(0x2B)
0012d9 f049      	BREQ _0x202005D
0012da c017      	RJMP _0x202005E
                 _0x202005B:
0012db 940e 19e4 	CALL SUBOPT_0x83
0012dd 940e 1a70 	CALL __ANEGF1
0012df 940e 19dd 	CALL SUBOPT_0x81
0012e1 e2ed      	LDI  R30,LOW(45)
0012e2 8bed      	STD  Y+21,R30
                 _0x202005D:
0012e3 ff07      	SBRS R16,7
0012e4 c005      	RJMP _0x202005F
0012e5 89ed      	LDD  R30,Y+21
0012e6 93ea      	ST   -Y,R30
0012e7 940e 19d0 	CALL SUBOPT_0x7F
0012e9 c008      	RJMP _0x2020060
                 _0x202005F:
0012ea 85ee      	LDD  R30,Y+14
0012eb 85ff      	LDD  R31,Y+14+1
0012ec 9631      	ADIW R30,1
0012ed 87ee      	STD  Y+14,R30
0012ee 87ff      	STD  Y+14+1,R31
0012ef 9731      	SBIW R30,1
0012f0 89ad      	LDD  R26,Y+21
0012f1 83a0      	STD  Z+0,R26
                 _0x2020060:
                 _0x202005E:
0012f2 ff05      	SBRS R16,5
0012f3 e046      	LDI  R20,LOW(6)
0012f4 3626      	CPI  R18,102
0012f5 f451      	BRNE _0x2020062
0012f6 940e 19e4 	CALL SUBOPT_0x83
0012f8 940e 1d1b 	CALL __PUTPARD1
0012fa 934a      	ST   -Y,R20
0012fb 89ab      	LDD  R26,Y+19
0012fc 89bc      	LDD  R27,Y+19+1
0012fd 940e 105e 	CALL _ftoa
0012ff c009      	RJMP _0x2020063
                 _0x2020062:
001300 940e 19e4 	CALL SUBOPT_0x83
001302 940e 1d1b 	CALL __PUTPARD1
001304 934a      	ST   -Y,R20
001305 932a      	ST   -Y,R18
001306 89ac      	LDD  R26,Y+20
001307 89bd      	LDD  R27,Y+20+1
001308 de4d      	RCALL __ftoe_G101
                 _0x2020063:
001309 01fe      	MOVW R30,R28
00130a 9676      	ADIW R30,22
00130b 940e 19e9 	CALL SUBOPT_0x84
00130d c01e      	RJMP _0x2020064
                 _0x202005A:
00130e 37e3      	CPI  R30,LOW(0x73)
00130f f439      	BRNE _0x2020066
001310 940e 19e2 	CALL SUBOPT_0x82
001312 940e 19f1 	CALL SUBOPT_0x85
001314 940e 19e9 	CALL SUBOPT_0x84
001316 c00e      	RJMP _0x2020067
                 _0x2020066:
001317 37e0      	CPI  R30,LOW(0x70)
001318 f4c1      	BRNE _0x2020069
001319 940e 19e2 	CALL SUBOPT_0x82
00131b 940e 19f1 	CALL SUBOPT_0x85
00131d 87ee      	STD  Y+14,R30
00131e 87ff      	STD  Y+14+1,R31
00131f 85ae      	LDD  R26,Y+14
001320 85bf      	LDD  R27,Y+14+1
001321 940e 14a0 	CALL _strlenf
001323 2f1e      	MOV  R17,R30
001324 6008      	ORI  R16,LOW(8)
                 _0x2020067:
001325 770f      	ANDI R16,LOW(127)
001326 3040      	CPI  R20,0
001327 f011      	BREQ _0x202006B
001328 1741      	CP   R20,R17
001329 f008      	BRLO _0x202006C
                 _0x202006B:
00132a c001      	RJMP _0x202006A
                 _0x202006C:
00132b 2f14      	MOV  R17,R20
                 _0x202006A:
                 _0x2020064:
00132c e040      	LDI  R20,LOW(0)
00132d e0e0      	LDI  R30,LOW(0)
00132e 8bec      	STD  Y+20,R30
00132f e030      	LDI  R19,LOW(0)
001330 c06e      	RJMP _0x202006D
                 _0x2020069:
001331 36e4      	CPI  R30,LOW(0x64)
001332 f011      	BREQ _0x2020070
001333 36e9      	CPI  R30,LOW(0x69)
001334 f411      	BRNE _0x2020071
                 _0x2020070:
001335 6004      	ORI  R16,LOW(4)
001336 c002      	RJMP _0x2020072
                 _0x2020071:
001337 37e5      	CPI  R30,LOW(0x75)
001338 f4a1      	BRNE _0x2020073
                 _0x2020072:
001339 e0ea      	LDI  R30,LOW(10)
00133a 8bec      	STD  Y+20,R30
00133b ff01      	SBRS R16,1
00133c c008      	RJMP _0x2020074
                +
00133d e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
00133e ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
00133f e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
001340 e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
001341 940e 19f6 	CALL SUBOPT_0x86
001343 e01a      	LDI  R17,LOW(10)
001344 c023      	RJMP _0x2020075
                 _0x2020074:
                +
001345 e1e0     +LDI R30 , LOW ( 0x2710 )
001346 e2f7     +LDI R31 , HIGH ( 0x2710 )
001347 e060     +LDI R22 , BYTE3 ( 0x2710 )
001348 e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
001349 940e 19f6 	CALL SUBOPT_0x86
00134b e015      	LDI  R17,LOW(5)
00134c c01b      	RJMP _0x2020075
                 _0x2020073:
00134d 35e8      	CPI  R30,LOW(0x58)
00134e f411      	BRNE _0x2020077
00134f 6008      	ORI  R16,LOW(8)
001350 c004      	RJMP _0x2020078
                 _0x2020077:
001351 37e8      	CPI  R30,LOW(0x78)
001352 f011      	BREQ PC+3
001353 940c 143f 	JMP _0x20200B6
                 _0x2020078:
001355 e1e0      	LDI  R30,LOW(16)
001356 8bec      	STD  Y+20,R30
001357 ff01      	SBRS R16,1
001358 c008      	RJMP _0x202007A
                +
001359 e0e0     +LDI R30 , LOW ( 0x10000000 )
00135a e0f0     +LDI R31 , HIGH ( 0x10000000 )
00135b e060     +LDI R22 , BYTE3 ( 0x10000000 )
00135c e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
00135d 940e 19f6 	CALL SUBOPT_0x86
00135f e018      	LDI  R17,LOW(8)
001360 c007      	RJMP _0x2020075
                 _0x202007A:
                +
001361 e0e0     +LDI R30 , LOW ( 0x1000 )
001362 e1f0     +LDI R31 , HIGH ( 0x1000 )
001363 e060     +LDI R22 , BYTE3 ( 0x1000 )
001364 e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
001365 940e 19f6 	CALL SUBOPT_0x86
001367 e014      	LDI  R17,LOW(4)
                 _0x2020075:
001368 3040      	CPI  R20,0
001369 f011      	BREQ _0x202007B
00136a 770f      	ANDI R16,LOW(127)
00136b c001      	RJMP _0x202007C
                 _0x202007B:
00136c e041      	LDI  R20,LOW(1)
                 _0x202007C:
00136d ff01      	SBRS R16,1
00136e c008      	RJMP _0x202007D
00136f 940e 19e2 	CALL SUBOPT_0x82
001371 940e 19d6 	CALL SUBOPT_0x80
001373 9614      	ADIW R26,4
001374 940e 1cf7 	CALL __GETD1P
001376 c00f      	RJMP _0x2020110
                 _0x202007D:
001377 ff02      	SBRS R16,2
001378 c007      	RJMP _0x202007F
001379 940e 19e2 	CALL SUBOPT_0x82
00137b 940e 19f1 	CALL SUBOPT_0x85
00137d 940e 1c66 	CALL __CWD1
00137f c006      	RJMP _0x2020110
                 _0x202007F:
001380 940e 19e2 	CALL SUBOPT_0x82
001382 940e 19f1 	CALL SUBOPT_0x85
001384 2766      	CLR  R22
001385 2777      	CLR  R23
                 _0x2020110:
                +
001386 87ea     +STD Y + 10 , R30
001387 87fb     +STD Y + 10 + 1 , R31
001388 876c     +STD Y + 10 + 2 , R22
001389 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
00138a ff02      	SBRS R16,2
00138b c012      	RJMP _0x2020081
00138c 85ad      	LDD  R26,Y+13
00138d 23aa      	TST  R26
00138e f442      	BRPL _0x2020082
00138f 940e 19e4 	CALL SUBOPT_0x83
001391 940e 1c58 	CALL __ANEGD1
001393 940e 19dd 	CALL SUBOPT_0x81
001395 e2ed      	LDI  R30,LOW(45)
001396 8bed      	STD  Y+21,R30
                 _0x2020082:
001397 89ed      	LDD  R30,Y+21
001398 30e0      	CPI  R30,0
001399 f019      	BREQ _0x2020083
00139a 5f1f      	SUBI R17,-LOW(1)
00139b 5f4f      	SUBI R20,-LOW(1)
00139c c001      	RJMP _0x2020084
                 _0x2020083:
00139d 7f0b      	ANDI R16,LOW(251)
                 _0x2020084:
                 _0x2020081:
00139e 2f34      	MOV  R19,R20
                 _0x202006D:
00139f fd00      	SBRC R16,0
0013a0 c014      	RJMP _0x2020085
                 _0x2020086:
0013a1 1715      	CP   R17,R21
0013a2 f410      	BRSH _0x2020089
0013a3 1735      	CP   R19,R21
0013a4 f008      	BRLO _0x202008A
                 _0x2020089:
0013a5 c00f      	RJMP _0x2020088
                 _0x202008A:
0013a6 ff07      	SBRS R16,7
0013a7 c008      	RJMP _0x202008B
0013a8 ff02      	SBRS R16,2
0013a9 c004      	RJMP _0x202008C
0013aa 7f0b      	ANDI R16,LOW(251)
0013ab 892d      	LDD  R18,Y+21
0013ac 5011      	SUBI R17,LOW(1)
0013ad c001      	RJMP _0x202008D
                 _0x202008C:
0013ae e320      	LDI  R18,LOW(48)
                 _0x202008D:
0013af c001      	RJMP _0x202008E
                 _0x202008B:
0013b0 e220      	LDI  R18,LOW(32)
                 _0x202008E:
0013b1 940e 19bb 	CALL SUBOPT_0x7C
0013b3 5051      	SUBI R21,LOW(1)
0013b4 cfec      	RJMP _0x2020086
                 _0x2020088:
                 _0x2020085:
                 _0x202008F:
0013b5 1714      	CP   R17,R20
0013b6 f490      	BRSH _0x2020091
0013b7 6100      	ORI  R16,LOW(16)
0013b8 ff02      	SBRS R16,2
0013b9 c006      	RJMP _0x2020092
0013ba 940e 19fb 	CALL SUBOPT_0x87
0013bc f009      	BREQ _0x2020093
0013bd 5051      	SUBI R21,LOW(1)
                 _0x2020093:
0013be 5011      	SUBI R17,LOW(1)
0013bf 5041      	SUBI R20,LOW(1)
                 _0x2020092:
0013c0 e3e0      	LDI  R30,LOW(48)
0013c1 93ea      	ST   -Y,R30
0013c2 940e 19d0 	CALL SUBOPT_0x7F
0013c4 3050      	CPI  R21,0
0013c5 f009      	BREQ _0x2020094
0013c6 5051      	SUBI R21,LOW(1)
                 _0x2020094:
0013c7 5041      	SUBI R20,LOW(1)
0013c8 cfec      	RJMP _0x202008F
                 _0x2020091:
0013c9 2f31      	MOV  R19,R17
0013ca 89ec      	LDD  R30,Y+20
0013cb 30e0      	CPI  R30,0
0013cc f4b9      	BRNE _0x2020095
                 _0x2020096:
0013cd 3030      	CPI  R19,0
0013ce f0a1      	BREQ _0x2020098
0013cf ff03      	SBRS R16,3
0013d0 c006      	RJMP _0x2020099
0013d1 85ee      	LDD  R30,Y+14
0013d2 85ff      	LDD  R31,Y+14+1
0013d3 9125      	LPM  R18,Z+
0013d4 87ee      	STD  Y+14,R30
0013d5 87ff      	STD  Y+14+1,R31
0013d6 c005      	RJMP _0x202009A
                 _0x2020099:
0013d7 85ae      	LDD  R26,Y+14
0013d8 85bf      	LDD  R27,Y+14+1
0013d9 912d      	LD   R18,X+
0013da 87ae      	STD  Y+14,R26
0013db 87bf      	STD  Y+14+1,R27
                 _0x202009A:
0013dc 940e 19bb 	CALL SUBOPT_0x7C
0013de 3050      	CPI  R21,0
0013df f009      	BREQ _0x202009B
0013e0 5051      	SUBI R21,LOW(1)
                 _0x202009B:
0013e1 5031      	SUBI R19,LOW(1)
0013e2 cfea      	RJMP _0x2020096
                 _0x2020098:
0013e3 c051      	RJMP _0x202009C
                 _0x2020095:
                 _0x202009E:
0013e4 940e 1a0d 	CALL SUBOPT_0x88
0013e6 940e 1c96 	CALL __DIVD21U
0013e8 2f2e      	MOV  R18,R30
0013e9 302a      	CPI  R18,10
0013ea f030      	BRLO _0x20200A0
0013eb ff03      	SBRS R16,3
0013ec c002      	RJMP _0x20200A1
0013ed 5c29      	SUBI R18,-LOW(55)
0013ee c001      	RJMP _0x20200A2
                 _0x20200A1:
0013ef 5a29      	SUBI R18,-LOW(87)
                 _0x20200A2:
0013f0 c001      	RJMP _0x20200A3
                 _0x20200A0:
0013f1 5d20      	SUBI R18,-LOW(48)
                 _0x20200A3:
0013f2 fd04      	SBRC R16,4
0013f3 c021      	RJMP _0x20200A5
0013f4 3321      	CPI  R18,49
0013f5 f460      	BRSH _0x20200A7
                +
0013f6 89a8     +LDD R26 , Y + 16
0013f7 89b9     +LDD R27 , Y + 16 + 1
0013f8 898a     +LDD R24 , Y + 16 + 2
0013f9 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
0013fa 30a1     +CPI R26 , LOW ( 0x1 )
0013fb e0e0     +LDI R30 , HIGH ( 0x1 )
0013fc 07be     +CPC R27 , R30
0013fd e0e0     +LDI R30 , BYTE3 ( 0x1 )
0013fe 078e     +CPC R24 , R30
0013ff e0e0     +LDI R30 , BYTE4 ( 0x1 )
001400 079e     +CPC R25 , R30
                 	__CPD2N 0x1
001401 f409      	BRNE _0x20200A6
                 _0x20200A7:
001402 c00b      	RJMP _0x20200A9
                 _0x20200A6:
001403 1743      	CP   R20,R19
001404 f440      	BRSH _0x2020111
001405 1753      	CP   R21,R19
001406 f010      	BRLO _0x20200AC
001407 ff00      	SBRS R16,0
001408 c001      	RJMP _0x20200AD
                 _0x20200AC:
001409 c010      	RJMP _0x20200AB
                 _0x20200AD:
00140a e220      	LDI  R18,LOW(32)
00140b ff07      	SBRS R16,7
00140c c008      	RJMP _0x20200AE
                 _0x2020111:
00140d e320      	LDI  R18,LOW(48)
                 _0x20200A9:
00140e 6100      	ORI  R16,LOW(16)
00140f ff02      	SBRS R16,2
001410 c004      	RJMP _0x20200AF
001411 940e 19fb 	CALL SUBOPT_0x87
001413 f009      	BREQ _0x20200B0
001414 5051      	SUBI R21,LOW(1)
                 _0x20200B0:
                 _0x20200AF:
                 _0x20200AE:
                 _0x20200A5:
001415 940e 19bb 	CALL SUBOPT_0x7C
001417 3050      	CPI  R21,0
001418 f009      	BREQ _0x20200B1
001419 5051      	SUBI R21,LOW(1)
                 _0x20200B1:
                 _0x20200AB:
00141a 5031      	SUBI R19,LOW(1)
00141b 940e 1a0d 	CALL SUBOPT_0x88
00141d 940e 1cd5 	CALL __MODD21U
00141f 940e 19dd 	CALL SUBOPT_0x81
001421 89ec      	LDD  R30,Y+20
                +
001422 89a8     +LDD R26 , Y + 16
001423 89b9     +LDD R27 , Y + 16 + 1
001424 898a     +LDD R24 , Y + 16 + 2
001425 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
001426 27ff      	CLR  R31
001427 2766      	CLR  R22
001428 2777      	CLR  R23
001429 940e 1c96 	CALL __DIVD21U
00142b 940e 19f6 	CALL SUBOPT_0x86
                +
00142d 89e8     +LDD R30 , Y + 16
00142e 89f9     +LDD R31 , Y + 16 + 1
00142f 896a     +LDD R22 , Y + 16 + 2
001430 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
001431 940e 1d46 	CALL __CPD10
001433 f009      	BREQ _0x202009F
001434 cfaf      	RJMP _0x202009E
                 _0x202009F:
                 _0x202009C:
001435 ff00      	SBRS R16,0
001436 c008      	RJMP _0x20200B2
                 _0x20200B3:
001437 3050      	CPI  R21,0
001438 f031      	BREQ _0x20200B5
001439 5051      	SUBI R21,LOW(1)
00143a e2e0      	LDI  R30,LOW(32)
00143b 93ea      	ST   -Y,R30
00143c 940e 19d0 	CALL SUBOPT_0x7F
00143e cff8      	RJMP _0x20200B3
                 _0x20200B5:
                 _0x20200B2:
                 _0x20200B6:
                 _0x2020054:
                 _0x202010F:
00143f e010      	LDI  R17,LOW(0)
                 _0x2020035:
001440 ce0a      	RJMP _0x2020030
                 _0x2020032:
001441 81ae      	LDD  R26,Y+6
001442 81bf      	LDD  R27,Y+6+1
001443 940e 1cf3 	CALL __GETW1P
001445 940e 1d60 	CALL __LOADLOCR6
001447 96ef      	ADIW R28,63
001448 966f      	ADIW R28,31
001449 9508      	RET
                 _vsprintf:
00144a 93ba      	ST   -Y,R27
00144b 93aa      	ST   -Y,R26
00144c 9726      	SBIW R28,6
00144d 931a      	ST   -Y,R17
00144e 930a      	ST   -Y,R16
00144f 85ec      	LDD  R30,Y+12
001450 85fd      	LDD  R31,Y+12+1
001451 9730      	SBIW R30,0
001452 f421      	BRNE _0x20200BA
001453 efef      	LDI  R30,LOW(65535)
001454 efff      	LDI  R31,HIGH(65535)
001455 940c 1601 	JMP  _0x20C0002
                 _0x20200BA:
001457 85ec      	LDD  R30,Y+12
001458 85fd      	LDD  R31,Y+12+1
001459 83ec      	STD  Y+4,R30
00145a 83fd      	STD  Y+4+1,R31
00145b e0e0      	LDI  R30,LOW(0)
00145c 83ee      	STD  Y+6,R30
00145d 83ef      	STD  Y+6+1,R30
00145e 85ea      	LDD  R30,Y+10
00145f 85fb      	LDD  R31,Y+10+1
001460 93fa      	ST   -Y,R31
001461 93ea      	ST   -Y,R30
001462 85ea      	LDD  R30,Y+10
001463 85fb      	LDD  R31,Y+10+1
001464 93fa      	ST   -Y,R31
001465 93ea      	ST   -Y,R30
001466 e1ee      	LDI  R30,LOW(_put_buff_G101)
001467 e1f1      	LDI  R31,HIGH(_put_buff_G101)
001468 93fa      	ST   -Y,R31
001469 93ea      	ST   -Y,R30
00146a 01de      	MOVW R26,R28
00146b 9618      	ADIW R26,8
00146c ddc1      	RCALL __print_G101
00146d 018f      	MOVW R16,R30
00146e 81ac      	LDD  R26,Y+4
00146f 81bd      	LDD  R27,Y+4+1
001470 e0e0      	LDI  R30,LOW(0)
001471 93ec      	ST   X,R30
001472 01f8      	MOVW R30,R16
001473 940c 1601 	JMP  _0x20C0002
                 
                 	.CSEG
                 _memcpy:
001475 93ba      	ST   -Y,R27
001476 93aa      	ST   -Y,R26
001477 8199          ldd  r25,y+1
001478 8188          ld   r24,y
001479 9600          adiw r24,0
00147a f041          breq memcpy1
00147b 81bd          ldd  r27,y+5
00147c 81ac          ldd  r26,y+4
00147d 81fb          ldd  r31,y+3
00147e 81ea          ldd  r30,y+2
                 memcpy0:
00147f 9161          ld   r22,z+
001480 936d          st   x+,r22
001481 9701          sbiw r24,1
001482 f7e1          brne memcpy0
                 memcpy1:
001483 81fd          ldd  r31,y+5
001484 81ec          ldd  r30,y+4
001485 9626      	ADIW R28,6
001486 9508      	RET
                 _strcpyf:
001487 93ba      	ST   -Y,R27
001488 93aa      	ST   -Y,R26
001489 91e9          ld   r30,y+
00148a 91f9          ld   r31,y+
00148b 91a9          ld   r26,y+
00148c 91b9          ld   r27,y+
00148d 01cd          movw r24,r26
                 strcpyf0:
00148e 9005      	lpm  r0,z+
00148f 920d          st   x+,r0
001490 2000          tst  r0
001491 f7e1          brne strcpyf0
001492 01fc          movw r30,r24
001493 9508          ret
                 _strlen:
001494 93ba      	ST   -Y,R27
001495 93aa      	ST   -Y,R26
001496 91a9          ld   r26,y+
001497 91b9          ld   r27,y+
001498 27ee          clr  r30
001499 27ff          clr  r31
                 strlen0:
00149a 916d          ld   r22,x+
00149b 2366          tst  r22
00149c f011          breq strlen1
00149d 9631          adiw r30,1
00149e cffb          rjmp strlen0
                 strlen1:
00149f 9508          ret
                 _strlenf:
0014a0 93ba      	ST   -Y,R27
0014a1 93aa      	ST   -Y,R26
0014a2 27aa          clr  r26
0014a3 27bb          clr  r27
0014a4 91e9          ld   r30,y+
0014a5 91f9          ld   r31,y+
                 strlenf0:
0014a6 9005      	lpm  r0,z+
0014a7 2000          tst  r0
0014a8 f011          breq strlenf1
0014a9 9611          adiw r26,1
0014aa cffb          rjmp strlenf0
                 strlenf1:
0014ab 01fd          movw r30,r26
0014ac 9508          ret
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
0014ad 940e 1d20 	CALL __PUTPARD2
0014af 817b         ldd  r23,y+3
0014b0 816a         ldd  r22,y+2
0014b1 81f9         ldd  r31,y+1
0014b2 81e8         ld   r30,y
0014b3 fb77         bst  r23,7
0014b4 0f77         lsl  r23
0014b5 fd67         sbrc r22,7
0014b6 6071         sbr  r23,1
0014b7 2f97         mov  r25,r23
0014b8 579e         subi r25,0x7e
0014b9 f081         breq __ftrunc0
0014ba f078         brcs __ftrunc0
0014bb 3198         cpi  r25,24
0014bc f490         brsh __ftrunc1
0014bd 27aa         clr  r26
0014be 27bb         clr  r27
0014bf 2788         clr  r24
                 __ftrunc2:
0014c0 9408         sec
0014c1 9587         ror  r24
0014c2 95b7         ror  r27
0014c3 95a7         ror  r26
0014c4 959a         dec  r25
0014c5 f7d1         brne __ftrunc2
0014c6 23ea         and  r30,r26
0014c7 23fb         and  r31,r27
0014c8 2368         and  r22,r24
0014c9 c005         rjmp __ftrunc1
                 __ftrunc0:
0014ca 94e8         clt
0014cb 2777         clr  r23
0014cc 27ee         clr  r30
0014cd 27ff         clr  r31
0014ce 2766         clr  r22
                 __ftrunc1:
0014cf 776f         cbr  r22,0x80
0014d0 9576         lsr  r23
0014d1 f408         brcc __ftrunc3
0014d2 6860         sbr  r22,0x80
                 __ftrunc3:
0014d3 f977         bld  r23,7
0014d4 91a9         ld   r26,y+
0014d5 91b9         ld   r27,y+
0014d6 9189         ld   r24,y+
0014d7 9199         ld   r25,y+
0014d8 17ea         cp   r30,r26
0014d9 07fb         cpc  r31,r27
0014da 0768         cpc  r22,r24
0014db 0779         cpc  r23,r25
0014dc fb97         bst  r25,7
0014dd 9508         ret
                 _floor:
0014de 940e 1d20 	CALL __PUTPARD2
0014e0 940e 1d11 	CALL __GETD2S0
0014e2 940e 14ad 	CALL _ftrunc
0014e4 940e 1d16 	CALL __PUTD1S0
0014e6 f419          brne __floor1
                 __floor0:
0014e7 940e 188d 	CALL SUBOPT_0x50
0014e9 c005      	RJMP _0x20C0004
                 __floor1:
0014ea f7e6          brtc __floor0
0014eb 940e 188d 	CALL SUBOPT_0x50
0014ed 940e 1a16 	CALL SUBOPT_0x89
                 _0x20C0004:
0014ef 9624      	ADIW R28,4
0014f0 9508      	RET
                 _log:
0014f1 940e 1d20 	CALL __PUTPARD2
0014f3 9724      	SBIW R28,4
0014f4 931a      	ST   -Y,R17
0014f5 930a      	ST   -Y,R16
0014f6 940e 1a1d 	CALL SUBOPT_0x8A
0014f8 940e 1d4e 	CALL __CPD02
0014fa f02c      	BRLT _0x208000C
                +
0014fb efef     +LDI R30 , LOW ( 0xFF7FFFFF )
0014fc efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
0014fd e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
0014fe ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
0014ff c071      	RJMP _0x20C0003
                 _0x208000C:
001500 940e 1a22 	CALL SUBOPT_0x8B
001502 940e 1d1b 	CALL __PUTPARD1
001504 b7ad      	IN   R26,SPL
001505 b7be      	IN   R27,SPH
001506 9711      	SBIW R26,1
001507 931f      	PUSH R17
001508 930f      	PUSH R16
001509 940e 1a53 	CALL _frexp
00150b 910f      	POP  R16
00150c 911f      	POP  R17
00150d 940e 1a27 	CALL SUBOPT_0x8C
00150f 940e 1a1d 	CALL SUBOPT_0x8A
                +
001511 efe3     +LDI R30 , LOW ( 0x3F3504F3 )
001512 e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
001513 e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
001514 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
001515 940e 1bf9 	CALL __CMPF12
001517 f440      	BRSH _0x208000D
001518 940e 1a2c 	CALL SUBOPT_0x8D
00151a 940e 1b16 	CALL __ADDF12
00151c 940e 1a27 	CALL SUBOPT_0x8C
                +
00151e 5001     +SUBI R16 , LOW ( 1 )
00151f 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x208000D:
001520 940e 1a22 	CALL SUBOPT_0x8B
001522 940e 1a16 	CALL SUBOPT_0x89
001524 937f      	PUSH R23
001525 936f      	PUSH R22
001526 93ff      	PUSH R31
001527 93ef      	PUSH R30
001528 940e 1a22 	CALL SUBOPT_0x8B
                +
00152a e0a0     +LDI R26 , LOW ( 0x3F800000 )
00152b e0b0     +LDI R27 , HIGH ( 0x3F800000 )
00152c e880     +LDI R24 , BYTE3 ( 0x3F800000 )
00152d e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00152e 940e 1b16 	CALL __ADDF12
001530 91af      	POP  R26
001531 91bf      	POP  R27
001532 918f      	POP  R24
001533 919f      	POP  R25
001534 940e 1bb4 	CALL __DIVF21
001536 940e 1a27 	CALL SUBOPT_0x8C
001538 940e 1a2c 	CALL SUBOPT_0x8D
00153a 940e 1a2e 	CALL SUBOPT_0x8E
                +
00153c e2a6     +LDI R26 , LOW ( 0x3F654226 )
00153d e4b2     +LDI R27 , HIGH ( 0x3F654226 )
00153e e685     +LDI R24 , BYTE3 ( 0x3F654226 )
00153f e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
001540 940e 1944 	CALL SUBOPT_0x68
                +
001542 e4ee     +LDI R30 , LOW ( 0x4054114E )
001543 e1f1     +LDI R31 , HIGH ( 0x4054114E )
001544 e564     +LDI R22 , BYTE3 ( 0x4054114E )
001545 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
001546 940e 181b 	CALL SUBOPT_0x3E
001548 940e 1a1d 	CALL SUBOPT_0x8A
00154a 940e 1b66 	CALL __MULF12
00154c 937f      	PUSH R23
00154d 936f      	PUSH R22
00154e 93ff      	PUSH R31
00154f 93ef      	PUSH R30
001550 940e 1a36 	CALL SUBOPT_0x8F
                +
001552 e4ad     +LDI R26 , LOW ( 0x3FD4114D )
001553 e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
001554 ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
001555 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
001556 940e 1b0f 	CALL __SUBF12
001558 91af      	POP  R26
001559 91bf      	POP  R27
00155a 918f      	POP  R24
00155b 919f      	POP  R25
00155c 940e 1bb4 	CALL __DIVF21
00155e 937f      	PUSH R23
00155f 936f      	PUSH R22
001560 93ff      	PUSH R31
001561 93ef      	PUSH R30
001562 01f8      	MOVW R30,R16
001563 940e 1811 	CALL SUBOPT_0x3C
                +
001565 e1a8     +LDI R26 , LOW ( 0x3F317218 )
001566 e7b2     +LDI R27 , HIGH ( 0x3F317218 )
001567 e381     +LDI R24 , BYTE3 ( 0x3F317218 )
001568 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
001569 940e 1b66 	CALL __MULF12
00156b 91af      	POP  R26
00156c 91bf      	POP  R27
00156d 918f      	POP  R24
00156e 919f      	POP  R25
00156f 940e 1b16 	CALL __ADDF12
                 _0x20C0003:
001571 8119      	LDD  R17,Y+1
001572 8108      	LDD  R16,Y+0
001573 962a      	ADIW R28,10
001574 9508      	RET
                 _exp:
001575 940e 1d20 	CALL __PUTPARD2
001577 9728      	SBIW R28,8
001578 931a      	ST   -Y,R17
001579 930a      	ST   -Y,R16
00157a 940e 1a3b 	CALL SUBOPT_0x90
                +
00157c e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
00157d eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
00157e ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
00157f ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
001580 940e 1bf9 	CALL __CMPF12
001582 f418      	BRSH _0x208000F
001583 940e 1a40 	CALL SUBOPT_0x91
001585 c07b      	RJMP _0x20C0002
                 _0x208000F:
001586 940e 19e4 	CALL SUBOPT_0x83
001588 940e 1d46 	CALL __CPD10
00158a f419      	BRNE _0x2080010
00158b 940e 16b3 	CALL SUBOPT_0x9
00158d c073      	RJMP _0x20C0002
                 _0x2080010:
00158e 940e 1a3b 	CALL SUBOPT_0x90
                +
001590 e1e8     +LDI R30 , LOW ( 0x42B17218 )
001591 e7f2     +LDI R31 , HIGH ( 0x42B17218 )
001592 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
001593 e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
001594 940e 1bf9 	CALL __CMPF12
001596 f009      	BREQ PC+2
001597 f410      	BRCC PC+3
001598 940c 159f 	JMP  _0x2080011
                +
00159a efef     +LDI R30 , LOW ( 0x7F7FFFFF )
00159b efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
00159c e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
00159d e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
00159e c062      	RJMP _0x20C0002
                 _0x2080011:
00159f 940e 1a3b 	CALL SUBOPT_0x90
                +
0015a1 e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
0015a2 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
0015a3 eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
0015a4 e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
0015a5 940e 1b66 	CALL __MULF12
0015a7 940e 19dd 	CALL SUBOPT_0x81
0015a9 940e 1a3b 	CALL SUBOPT_0x90
0015ab df32      	RCALL _floor
0015ac 940e 1aa5 	CALL __CFD1
0015ae 018f      	MOVW R16,R30
0015af 01f8      	MOVW R30,R16
0015b0 940e 1a3b 	CALL SUBOPT_0x90
0015b2 940e 1811 	CALL SUBOPT_0x3C
0015b4 940e 181b 	CALL SUBOPT_0x3E
0015b6 01df      	MOVW R26,R30
0015b7 01cb      	MOVW R24,R22
                +
0015b8 e0e0     +LDI R30 , LOW ( 0x3F000000 )
0015b9 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
0015ba e060     +LDI R22 , BYTE3 ( 0x3F000000 )
0015bb e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
0015bc 940e 181b 	CALL SUBOPT_0x3E
0015be 940e 1a27 	CALL SUBOPT_0x8C
0015c0 940e 1a2c 	CALL SUBOPT_0x8D
0015c2 940e 1a2e 	CALL SUBOPT_0x8E
                +
0015c4 e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
0015c5 e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
0015c6 e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
0015c7 e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
0015c8 940e 1b66 	CALL __MULF12
                +
0015ca eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
0015cb eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
0015cc ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
0015cd e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
0015ce 940e 1b16 	CALL __ADDF12
0015d0 940e 1a1d 	CALL SUBOPT_0x8A
0015d2 940e 1b66 	CALL __MULF12
0015d4 940e 1a27 	CALL SUBOPT_0x8C
0015d6 940e 1a36 	CALL SUBOPT_0x8F
                +
0015d8 e2a8     +LDI R26 , LOW ( 0x41A68D28 )
0015d9 e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
0015da ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
0015db e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
0015dc 940e 1b16 	CALL __ADDF12
0015de 940e 197f 	CALL SUBOPT_0x71
0015e0 940e 1a22 	CALL SUBOPT_0x8B
0015e2 940e 1973 	CALL SUBOPT_0x6F
0015e4 940e 1b16 	CALL __ADDF12
                +
0015e6 efa3     +LDI R26 , LOW ( 0x3FB504F3 )
0015e7 e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
0015e8 eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
0015e9 e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
0015ea 940e 1b66 	CALL __MULF12
0015ec 937f      	PUSH R23
0015ed 936f      	PUSH R22
0015ee 93ff      	PUSH R31
0015ef 93ef      	PUSH R30
0015f0 940e 1a1d 	CALL SUBOPT_0x8A
0015f2 940e 1a36 	CALL SUBOPT_0x8F
0015f4 940e 1b0f 	CALL __SUBF12
0015f6 91af      	POP  R26
0015f7 91bf      	POP  R27
0015f8 918f      	POP  R24
0015f9 919f      	POP  R25
0015fa 940e 1bb4 	CALL __DIVF21
0015fc 940e 1d1b 	CALL __PUTPARD1
0015fe 01d8      	MOVW R26,R16
0015ff 940e 1a64 	CALL _ldexp
                 _0x20C0002:
001601 8119      	LDD  R17,Y+1
001602 8108      	LDD  R16,Y+0
001603 962e      	ADIW R28,14
001604 9508      	RET
                 _pow:
001605 940e 1d20 	CALL __PUTPARD2
001607 9724      	SBIW R28,4
001608 940e 1888 	CALL SUBOPT_0x4F
00160a 940e 1d46 	CALL __CPD10
00160c f419      	BRNE _0x2080012
00160d 940e 1a40 	CALL SUBOPT_0x91
00160f c043      	RJMP _0x20C0001
                 _0x2080012:
                +
001610 85a8     +LDD R26 , Y + 8
001611 85b9     +LDD R27 , Y + 8 + 1
001612 858a     +LDD R24 , Y + 8 + 2
001613 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
001614 940e 1d4e 	CALL __CPD02
001616 f484      	BRGE _0x2080013
001617 940e 1832 	CALL SUBOPT_0x43
001619 940e 1d46 	CALL __CPD10
00161b f419      	BRNE _0x2080014
00161c 940e 16b3 	CALL SUBOPT_0x9
00161e c034      	RJMP _0x20C0001
                 _0x2080014:
                +
00161f 85a8     +LDD R26 , Y + 8
001620 85b9     +LDD R27 , Y + 8 + 1
001621 858a     +LDD R24 , Y + 8 + 2
001622 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
001623 940e 1a45 	CALL SUBOPT_0x92
001625 df4f      	RCALL _exp
001626 c02c      	RJMP _0x20C0001
                 _0x2080013:
001627 940e 1832 	CALL SUBOPT_0x43
001629 01de      	MOVW R26,R28
00162a 940e 1aa5 	CALL __CFD1
00162c 940e 1d02 	CALL __PUTDP1
00162e 940e 188d 	CALL SUBOPT_0x50
001630 940e 1adc 	CALL __CDF1
001632 01df      	MOVW R26,R30
001633 01cb      	MOVW R24,R22
001634 940e 1832 	CALL SUBOPT_0x43
001636 940e 1d54 	CALL __CPD12
001638 f019      	BREQ _0x2080015
001639 940e 1a40 	CALL SUBOPT_0x91
00163b c017      	RJMP _0x20C0001
                 _0x2080015:
00163c 940e 1888 	CALL SUBOPT_0x4F
00163e 940e 1a70 	CALL __ANEGF1
001640 01df      	MOVW R26,R30
001641 01cb      	MOVW R24,R22
001642 940e 1a45 	CALL SUBOPT_0x92
001644 df30      	RCALL _exp
                +
001645 87e8     +STD Y + 8 , R30
001646 87f9     +STD Y + 8 + 1 , R31
001647 876a     +STD Y + 8 + 2 , R22
001648 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
001649 81e8      	LD   R30,Y
00164a 70e1      	ANDI R30,LOW(0x1)
00164b f419      	BRNE _0x2080016
00164c 940e 1888 	CALL SUBOPT_0x4F
00164e c004      	RJMP _0x20C0001
                 _0x2080016:
00164f 940e 1888 	CALL SUBOPT_0x4F
001651 940e 1a70 	CALL __ANEGF1
                 _0x20C0001:
001653 962c      	ADIW R28,12
001654 9508      	RET
                 
                 	.CSEG
                 _isprint:
001655 93aa      	ST   -Y,R26
001656 e0e1          ldi  r30,1
001657 91f9          ld   r31,y+
001658 32f0          cpi  r31,32
001659 f010          brlo isprint0
00165a 38f0          cpi  r31,128
00165b f008          brlo isprint1
                 isprint0:
00165c 27ee          clr  r30
                 isprint1:
00165d 9508          ret
                 
                 	.DSEG
                 _SWITCH:
000600           	.BYTE 0x1
                 _CURRENT_VOLT:
000601           	.BYTE 0x4
                 _CURRENT_AMP:
000605           	.BYTE 0x4
                 
                 	.ESEG
                 _ADJ0_SENSOR5A:
000000 ec
000001 51
000002 b8
000003 3d        	.DB  0xEC,0x51,0xB8,0x3D
                 _ADJ0_SENSOR20A:
000004 ae
000005 47
000006 e1
000007 3d        	.DB  0xAE,0x47,0xE1,0x3D
                 _ADJ0_SENSOR30A:
000008 ae
000009 47
00000a e1
00000b 3d        	.DB  0xAE,0x47,0xE1,0x3D
                 
                 	.DSEG
                 __FlagPackageTerminate0:
000609           	.BYTE 0x1
                 _rxPackage0:
00060a           	.BYTE 0x20
                 _flag_state:
00062a           	.BYTE 0x2
                 _rx_rd_index1:
00062c           	.BYTE 0x2
                 _rx_counter1:
00062e           	.BYTE 0x2
                 _rx_buffer1:
000630           	.BYTE 0x200
                 _number:
000830           	.BYTE 0x2
                 _AMP_ADJ_ZERO:
000832           	.BYTE 0x4
                 _SENSOR_SENSITIVE:
000836           	.BYTE 0x4
                 _adcValue:
00083a           	.BYTE 0x2
                 _total:
00083c           	.BYTE 0x4
                 _avg:
000840           	.BYTE 0x4
                 _value:
000844           	.BYTE 0x4
                 _Viout:
000848           	.BYTE 0x4
                 _Vdif:
00084c           	.BYTE 0x4
                 _Vsq_avg:
000850           	.BYTE 0x4
                 _volt:
000854           	.BYTE 0x4
                 _amp:
000858           	.BYTE 0x4
                 _power:
00085c           	.BYTE 0x4
                 _whour:
000860           	.BYTE 0x4
                 _Vsum:
000864           	.BYTE 0x4
                 _Isum:
000868           	.BYTE 0x4
                 _Psum:
00086c           	.BYTE 0x4
                 _WHsum:
000870           	.BYTE 0x4
                 _Vavg:
000874           	.BYTE 0x4
                 _Iavg:
000878           	.BYTE 0x4
                 _Pavg:
00087c           	.BYTE 0x4
                 _countSampling:
000880           	.BYTE 0x2
                 _EndDevice_MacAddress:
000882           	.BYTE 0x8
                 _Gateway_MacAddress:
00088a           	.BYTE 0x8
                 _STATUS_DEVICE:
000892           	.BYTE 0x1
                 _EVENT:
000893           	.BYTE 0x2
                 _baseCounter:
000895           	.BYTE 0x4
                 _pressedBTCounter:
000899           	.BYTE 0x1
                 __FlagBT:
00089a           	.BYTE 0x1
                 __Flag05INT:
00089b           	.BYTE 0x1
                 __Flag0001INT:
00089c           	.BYTE 0x1
                 __BlinkLED_1Hz:
00089d           	.BYTE 0x1
                 _Eaddress:
00089e           	.BYTE 0x1
                 _input:
00089f           	.BYTE 0x3C
                 _count_input:
0008db           	.BYTE 0x2
                 _count_event:
0008dd           	.BYTE 0x2
                 _specData:
0008df           	.BYTE 0xD
                 _AI_COMMAND:
0008ec           	.BYTE 0x8
                 _SL_COMMAND:
0008f4           	.BYTE 0x8
                 _SH_COMMAND:
0008fc           	.BYTE 0x8
                 _JOIN_A1:
000904           	.BYTE 0x27
                 _PING_A4:
00092b           	.BYTE 0x27
                 _SEND_EVENT_:
000952           	.BYTE 0x29
                 _SEND_REPORT_:
00097b           	.BYTE 0x4C
                 __voltage:
0009c7           	.BYTE 0x8
                 __amp:
0009cf           	.BYTE 0x8
                 __power:
0009d7           	.BYTE 0x8
                 __watt:
0009df           	.BYTE 0x8
                 _Vreferent:
0009e7           	.BYTE 0x1
                 __seed_G100:
0009e8           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00165e 93ba      	ST   -Y,R27
00165f 93aa      	ST   -Y,R26
001660 81e8      	LD   R30,Y
001661 81f9      	LDD  R31,Y+1
001662 9730      	SBIW R30,0
001663 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
001664 91e0 0065 	LDS  R30,101
001666 7feb      	ANDI R30,0xFB
001667 93e0 0065 	STS  101,R30
001669 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
00166a 91a0 089e 	LDS  R26,_Eaddress
00166c 27bb      	CLR  R27
00166d 940e 0dd5 	CALL _EEPROM_read
00166f 93e0 0892 	STS  _STATUS_DEVICE,R30
001671 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:47 WORDS
                 SUBOPT_0x3:
001672 91e0 089e 	LDS  R30,_Eaddress
001674 e0f0      	LDI  R31,0
001675 93fa      	ST   -Y,R31
001676 93ea      	ST   -Y,R30
001677 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x4:
                +
001678 e0e0     +LDI R30 , LOW ( 0x43390000 )
001679 e0f0     +LDI R31 , HIGH ( 0x43390000 )
00167a e369     +LDI R22 , BYTE3 ( 0x43390000 )
00167b e473     +LDI R23 , BYTE4 ( 0x43390000 )
                 	__GETD1N 0x43390000
00167c 93e0 0836 	STS  _SENSOR_SENSITIVE,R30
00167e 93f0 0837 	STS  _SENSOR_SENSITIVE+1,R31
001680 9360 0838 	STS  _SENSOR_SENSITIVE+2,R22
001682 9370 0839 	STS  _SENSOR_SENSITIVE+3,R23
001684 e0a0      	LDI  R26,LOW(_ADJ0_SENSOR5A)
001685 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR5A)
001686 940e 1d32 	CALL __EEPROMRDD
001688 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
001689 01df      	MOVW R26,R30
00168a 01cb      	MOVW R24,R22
00168b 940e 1d4e 	CALL __CPD02
00168d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
00168e 93e0 0836 	STS  _SENSOR_SENSITIVE,R30
001690 93f0 0837 	STS  _SENSOR_SENSITIVE+1,R31
001692 9360 0838 	STS  _SENSOR_SENSITIVE+2,R22
001694 9370 0839 	STS  _SENSOR_SENSITIVE+3,R23
001696 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x7:
001697 93fa      	ST   -Y,R31
001698 93ea      	ST   -Y,R30
001699 e080      	LDI  R24,0
00169a 940e 062e 	CALL _printDebug
00169c 9622      	ADIW R28,2
                +
00169d ece9     +LDI R30 , LOW ( 2 * _0x0 + ( 39 ) )
00169e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 39 ) )
                 	__POINTW1FN _0x0,39
00169f 93fa      	ST   -Y,R31
0016a0 93ea      	ST   -Y,R30
                +
0016a1 e0e0     +LDI R30 , LOW ( 0x3F800000 )
0016a2 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0016a3 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0016a4 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0016a5 940e 1d1b 	CALL __PUTPARD1
0016a7 e084      	LDI  R24,4
0016a8 940e 062e 	CALL _printDebug
0016aa 9626      	ADIW R28,6
0016ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 28 TIMES, CODE SIZE REDUCTION:105 WORDS
                 SUBOPT_0x8:
0016ac 93fa      	ST   -Y,R31
0016ad 93ea      	ST   -Y,R30
0016ae e080      	LDI  R24,0
0016af 940e 062e 	CALL _printDebug
0016b1 9622      	ADIW R28,2
0016b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
                +
0016b3 e0e0     +LDI R30 , LOW ( 0x3F800000 )
0016b4 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0016b5 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0016b6 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0016b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:69 WORDS
                 SUBOPT_0xA:
0016b8 940e 1d1b 	CALL __PUTPARD1
0016ba e084      	LDI  R24,4
0016bb 940e 062e 	CALL _printDebug
0016bd 9626      	ADIW R28,6
0016be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
0016bf 91e0 0836 	LDS  R30,_SENSOR_SENSITIVE
0016c1 91f0 0837 	LDS  R31,_SENSOR_SENSITIVE+1
0016c3 9160 0838 	LDS  R22,_SENSOR_SENSITIVE+2
0016c5 9170 0839 	LDS  R23,_SENSOR_SENSITIVE+3
0016c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
0016c8 91e0 0832 	LDS  R30,_AMP_ADJ_ZERO
0016ca 91f0 0833 	LDS  R31,_AMP_ADJ_ZERO+1
0016cc 9160 0834 	LDS  R22,_AMP_ADJ_ZERO+2
0016ce 9170 0835 	LDS  R23,_AMP_ADJ_ZERO+3
0016d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xD:
0016d1 e0a0      	LDI  R26,LOW(0)
0016d2 e0b0      	LDI  R27,0
0016d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xE:
0016d4 940e 08b8 	CALL _xbee_sendATCommand
0016d6 e6a4      	LDI  R26,LOW(100)
0016d7 e0b0      	LDI  R27,0
0016d8 940c 1a49 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xF:
0016da e6a4      	LDI  R26,LOW(100)
0016db e0b0      	LDI  R27,0
0016dc 940c 1a49 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x10:
0016de e0a1      	LDI  R26,LOW(1)
0016df e0b0      	LDI  R27,0
0016e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x11:
0016e1 940e 044e 	CALL _device_state
0016e3 cf8e      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x12:
0016e4 91a0 0892 	LDS  R26,_STATUS_DEVICE
0016e6 940c 0dc8 	JMP  _EEPROM_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x13:
0016e8 e0a2      	LDI  R26,LOW(2)
0016e9 e0b0      	LDI  R27,0
0016ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x14:
0016eb 01f4      	MOVW R30,R8
0016ec 9631      	ADIW R30,1
0016ed 014f      	MOVW R8,R30
0016ee 01d4      	MOVW R26,R8
0016ef e0ea      	LDI  R30,LOW(10)
0016f0 e0f0      	LDI  R31,HIGH(10)
0016f1 940e 1cc7 	CALL __MODW21
0016f3 9730      	SBIW R30,0
0016f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
0016f5 eca8      	LDI  R26,LOW(200)
0016f6 e0b0      	LDI  R27,0
0016f7 940c 1a49 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x16:
0016f9 e0e5      	LDI  R30,LOW(5)
0016fa e0f0      	LDI  R31,HIGH(5)
0016fb 93e0 062a 	STS  _flag_state,R30
0016fd 93f0 062b 	STS  _flag_state+1,R31
0016ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
001700 e0e4      	LDI  R30,LOW(4)
001701 e0f0      	LDI  R31,HIGH(4)
001702 93e0 062a 	STS  _flag_state,R30
001704 93f0 062b 	STS  _flag_state+1,R31
001706 eeac      	LDI  R26,LOW(5100)
001707 e1b3      	LDI  R27,HIGH(5100)
001708 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
001709 01fe      	MOVW R30,R28
00170a 9632      	ADIW R30,2
00170b 93fa      	ST   -Y,R31
00170c 93ea      	ST   -Y,R30
00170d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
00170e 93ba      	ST   -Y,R27
00170f 93aa      	ST   -Y,R26
001710 9724      	SBIW R28,4
001711 e0e0      	LDI  R30,LOW(0)
001712 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1A:
001713 81ee      	LDD  R30,Y+6
001714 81ff      	LDD  R31,Y+6+1
001715 93fa      	ST   -Y,R31
001716 93ea      	ST   -Y,R30
001717 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
001718 85ac      	LDD  R26,Y+12
001719 85bd      	LDD  R27,Y+12+1
00171a 940c 069b 	JMP  _print_hex_ascii_line
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
00171c 85a8      	LDD  R26,Y+8
00171d 85b9      	LDD  R27,Y+8+1
00171e 0fea      	ADD  R30,R26
00171f 1ffb      	ADC  R31,R27
001720 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
001721 940e 1c66 	CALL __CWD1
001723 cf94      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1E:
001724 93fa      	ST   -Y,R31
001725 93ea      	ST   -Y,R30
001726 01da      	MOVW R26,R20
001727 91ec      	LD   R30,X
001728 27ff      	CLR  R31
001729 2766      	CLR  R22
00172a 2777      	CLR  R23
00172b cf8c      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
00172c eaeb      	LDI  R30,LOW(171)
00172d 93e0 0089 	STS  137,R30
00172f eae0      	LDI  R30,LOW(160)
001730 93e0 0088 	STS  136,R30
001732 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x20:
001733 920a      	ST   -Y,R0
001734 921a      	ST   -Y,R1
001735 92fa      	ST   -Y,R15
001736 936a      	ST   -Y,R22
001737 937a      	ST   -Y,R23
001738 938a      	ST   -Y,R24
001739 939a      	ST   -Y,R25
00173a 93aa      	ST   -Y,R26
00173b 93ba      	ST   -Y,R27
00173c 93ea      	ST   -Y,R30
00173d 93fa      	ST   -Y,R31
00173e b7ef      	IN   R30,SREG
00173f 93ea      	ST   -Y,R30
001740 931a      	ST   -Y,R17
001741 930a      	ST   -Y,R16
001742 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x21:
001743 91ed      	LD   R30,X+
001744 91fd      	LD   R31,X+
001745 9631      	ADIW R30,1
001746 93fe      	ST   -X,R31
001747 93ee      	ST   -X,R30
001748 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
001749 2766      	CLR  R22
00174a 2777      	CLR  R23
00174b cf6c      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x23:
00174c 81a9      	LDD  R26,Y+1
00174d 81ba      	LDD  R27,Y+1+1
00174e 27ee      	CLR  R30
00174f 0fa1      	ADD  R26,R17
001750 1fbe      	ADC  R27,R30
001751 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x24:
001752 940e 1d0c 	CALL __GETD1S0
                +
001754 36e0     +CPI R30 , LOW ( 0x960 )
001755 e0a9     +LDI R26 , HIGH ( 0x960 )
001756 07fa     +CPC R31 , R26
001757 e0a0     +LDI R26 , BYTE3 ( 0x960 )
001758 076a     +CPC R22 , R26
001759 e0a0     +LDI R26 , BYTE4 ( 0x960 )
00175a 077a     +CPC R23 , R26
                 	__CPD1N 0x960
00175b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x25:
                +
00175c 38e0     +CPI R30 , LOW ( 0x2580 )
00175d e2a5     +LDI R26 , HIGH ( 0x2580 )
00175e 07fa     +CPC R31 , R26
00175f e0a0     +LDI R26 , BYTE3 ( 0x2580 )
001760 076a     +CPC R22 , R26
001761 e0a0     +LDI R26 , BYTE4 ( 0x2580 )
001762 077a     +CPC R23 , R26
                 	__CPD1N 0x2580
001763 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x26:
                +
001764 34e0     +CPI R30 , LOW ( 0x3840 )
001765 e3a8     +LDI R26 , HIGH ( 0x3840 )
001766 07fa     +CPC R31 , R26
001767 e0a0     +LDI R26 , BYTE3 ( 0x3840 )
001768 076a     +CPC R22 , R26
001769 e0a0     +LDI R26 , BYTE4 ( 0x3840 )
00176a 077a     +CPC R23 , R26
                 	__CPD1N 0x3840
00176b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x27:
                +
00176c 30e0     +CPI R30 , LOW ( 0x4B00 )
00176d e4ab     +LDI R26 , HIGH ( 0x4B00 )
00176e 07fa     +CPC R31 , R26
00176f e0a0     +LDI R26 , BYTE3 ( 0x4B00 )
001770 076a     +CPC R22 , R26
001771 e0a0     +LDI R26 , BYTE4 ( 0x4B00 )
001772 077a     +CPC R23 , R26
                 	__CPD1N 0x4B00
001773 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x28:
                +
001774 30e0     +CPI R30 , LOW ( 0x9600 )
001775 e9a6     +LDI R26 , HIGH ( 0x9600 )
001776 07fa     +CPC R31 , R26
001777 e0a0     +LDI R26 , BYTE3 ( 0x9600 )
001778 076a     +CPC R22 , R26
001779 e0a0     +LDI R26 , BYTE4 ( 0x9600 )
00177a 077a     +CPC R23 , R26
                 	__CPD1N 0x9600
00177b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x29:
                +
00177c 30e0     +CPI R30 , LOW ( 0xE100 )
00177d eea1     +LDI R26 , HIGH ( 0xE100 )
00177e 07fa     +CPC R31 , R26
00177f e0a0     +LDI R26 , BYTE3 ( 0xE100 )
001780 076a     +CPC R22 , R26
001781 e0a0     +LDI R26 , BYTE4 ( 0xE100 )
001782 077a     +CPC R23 , R26
                 	__CPD1N 0xE100
001783 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2A:
                +
001784 30e0     +CPI R30 , LOW ( 0x1C200 )
001785 eca2     +LDI R26 , HIGH ( 0x1C200 )
001786 07fa     +CPC R31 , R26
001787 e0a1     +LDI R26 , BYTE3 ( 0x1C200 )
001788 076a     +CPC R22 , R26
001789 e0a0     +LDI R26 , BYTE4 ( 0x1C200 )
00178a 077a     +CPC R23 , R26
                 	__CPD1N 0x1C200
00178b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2B:
00178c 93fa      	ST   -Y,R31
00178d 93ea      	ST   -Y,R30
00178e e0a8      	LDI  R26,LOW(8)
00178f e0b0      	LDI  R27,0
001790 940c 0653 	JMP  _print_payload
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x2C:
001792 e0a8      	LDI  R26,LOW(8)
001793 e0b0      	LDI  R27,0
001794 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2D:
001795 93ba      	ST   -Y,R27
001796 93aa      	ST   -Y,R26
001797 931a      	ST   -Y,R17
001798 930a      	ST   -Y,R16
001799 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2E:
00179a 01f8      	MOVW R30,R16
00179b 81ac      	LDD  R26,Y+4
00179c 81bd      	LDD  R27,Y+4+1
00179d 0fae      	ADD  R26,R30
00179e 1fbf      	ADC  R27,R31
00179f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
0017a0 81a9      	LDD  R26,Y+1
0017a1 81ba      	LDD  R27,Y+1+1
0017a2 9612      	ADIW R26,2
0017a3 91ac      	LD   R26,X
0017a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x30:
0017a5 81a9      	LDD  R26,Y+1
0017a6 81ba      	LDD  R27,Y+1+1
0017a7 9613      	ADIW R26,3
0017a8 91ac      	LD   R26,X
0017a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x31:
0017aa e8e2      	LDI  R30,LOW(_EndDevice_MacAddress)
0017ab e0f8      	LDI  R31,HIGH(_EndDevice_MacAddress)
0017ac 93fa      	ST   -Y,R31
0017ad 93ea      	ST   -Y,R30
0017ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x32:
0017af 81eb      	LDD  R30,Y+3
0017b0 81fc      	LDD  R31,Y+3+1
0017b1 9635      	ADIW R30,5
0017b2 93fa      	ST   -Y,R31
0017b3 93ea      	ST   -Y,R30
0017b4 e0a4      	LDI  R26,LOW(4)
0017b5 e0b0      	LDI  R27,0
0017b6 940c 1475 	JMP  _memcpy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x33:
0017b8 81a9      	LDD  R26,Y+1
0017b9 81ba      	LDD  R27,Y+1+1
0017ba 9690      	ADIW R26,32
0017bb 91ac      	LD   R26,X
0017bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x34:
0017bd e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
0017be e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
0017bf 93fa      	ST   -Y,R31
0017c0 93ea      	ST   -Y,R30
0017c1 81eb      	LDD  R30,Y+3
0017c2 81fc      	LDD  R31,Y+3+1
0017c3 9631      	ADIW R30,1
0017c4 93fa      	ST   -Y,R31
0017c5 93ea      	ST   -Y,R30
0017c6 cfcb      	RJMP SUBOPT_0x2C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x35:
0017c7 e0e4      	LDI  R30,LOW(4)
0017c8 e0f0      	LDI  R31,HIGH(4)
0017c9 93e0 062a 	STS  _flag_state,R30
0017cb 93f0 062b 	STS  _flag_state+1,R31
0017cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x36:
0017ce 940e 1475 	CALL _memcpy
0017d0 91e0 08db 	LDS  R30,_count_input
0017d2 91f0 08dc 	LDS  R31,_count_input+1
0017d4 e9af      	LDI  R26,LOW(_input)
0017d5 e0b8      	LDI  R27,HIGH(_input)
0017d6 0fee      	LSL  R30
0017d7 1fff      	ROL  R31
0017d8 0fae      	ADD  R26,R30
0017d9 1fbf      	ADC  R27,R31
0017da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x37:
0017db 91e0 08db 	LDS  R30,_count_input
0017dd 91f0 08dc 	LDS  R31,_count_input+1
0017df e9af      	LDI  R26,LOW(_input)
0017e0 e0b8      	LDI  R27,HIGH(_input)
0017e1 0fee      	LSL  R30
0017e2 1fff      	ROL  R31
0017e3 0fae      	ADD  R26,R30
0017e4 1fbf      	ADC  R27,R31
0017e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x38:
0017e6 e9af      	LDI  R26,LOW(_input)
0017e7 e0b8      	LDI  R27,HIGH(_input)
0017e8 0fee      	LSL  R30
0017e9 1fff      	ROL  R31
0017ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x39:
0017eb 93ea      	ST   -Y,R30
                +
0017ec e0a0     +LDI R26 , LOW ( 0x9600 )
0017ed e9b6     +LDI R27 , HIGH ( 0x9600 )
0017ee e080     +LDI R24 , BYTE3 ( 0x9600 )
0017ef e090     +LDI R25 , BYTE4 ( 0x9600 )
                 	__GETD2N 0x9600
0017f0 940c 084e 	JMP  _init_uart
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:20 WORDS
                 SUBOPT_0x3A:
0017f2 e0e0      	LDI  R30,0
0017f3 99cf      	SBIC 0x19,7
0017f4 e0e1      	LDI  R30,1
0017f5 2e0e      	MOV  R0,R30
0017f6 e0a0      	LDI  R26,0
0017f7 99ce      	SBIC 0x19,6
0017f8 e0a1      	LDI  R26,1
0017f9 2fea      	MOV  R30,R26
0017fa 0fee      	LSL  R30
0017fb 2a0e      	OR   R0,R30
0017fc e0a0      	LDI  R26,0
0017fd 99cd      	SBIC 0x19,5
0017fe e0a1      	LDI  R26,1
0017ff 2fea      	MOV  R30,R26
001800 0fee      	LSL  R30
001801 0fee      	LSL  R30
001802 2a0e      	OR   R0,R30
001803 e0a0      	LDI  R26,0
001804 99cc      	SBIC 0x19,4
001805 e0a1      	LDI  R26,1
001806 2fea      	MOV  R30,R26
001807 0fee      	LSL  R30
001808 0fee      	LSL  R30
001809 0fee      	LSL  R30
00180a 29e0      	OR   R30,R0
00180b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3B:
                +
00180c 85ec     +LDD R30 , Y + 12
00180d 85fd     +LDD R31 , Y + 12 + 1
00180e 856e     +LDD R22 , Y + 12 + 2
00180f 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
001810 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3C:
001811 940e 1c66 	CALL __CWD1
001813 940e 1adc 	CALL __CDF1
001815 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x3D:
                +
001816 85ac     +LDD R26 , Y + 12
001817 85bd     +LDD R27 , Y + 12 + 1
001818 858e     +LDD R24 , Y + 12 + 2
001819 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
00181a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3E:
00181b 940e 1d25 	CALL __SWAPD12
00181d 940e 1b0f 	CALL __SUBF12
00181f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3F:
                +
001820 83ec     +STD Y + 4 , R30
001821 83fd     +STD Y + 4 + 1 , R31
001822 836e     +STD Y + 4 + 2 , R22
001823 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
001824 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x40:
                +
001825 e0e0     +LDI R30 , LOW ( 0x41200000 )
001826 e0f0     +LDI R31 , HIGH ( 0x41200000 )
001827 e260     +LDI R22 , BYTE3 ( 0x41200000 )
001828 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
001829 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x41:
                +
00182a 81ac     +LDD R26 , Y + 4
00182b 81bd     +LDD R27 , Y + 4 + 1
00182c 818e     +LDD R24 , Y + 4 + 2
00182d 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00182e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x42:
00182f 940e 1b66 	CALL __MULF12
001831 cfee      	RJMP SUBOPT_0x3F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x43:
                +
001832 81ec     +LDD R30 , Y + 4
001833 81fd     +LDD R31 , Y + 4 + 1
001834 816e     +LDD R22 , Y + 4 + 2
001835 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
001836 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x44:
001837 93aa      	ST   -Y,R26
                +
001838 e5e7     +LDI R30 , LOW ( _SEND_EVENT_ + ( 5 ) )
001839 e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 5 ) )
                 	__POINTW1MN _SEND_EVENT_,5
00183a 93fa      	ST   -Y,R31
00183b 93ea      	ST   -Y,R30
00183c e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
00183d e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
00183e 93fa      	ST   -Y,R31
00183f 93ea      	ST   -Y,R30
001840 cf51      	RJMP SUBOPT_0x2C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x45:
001841 940e 1475 	CALL _memcpy
                +
001843 e6e4     +LDI R30 , LOW ( _SEND_EVENT_ + ( 18 ) )
001844 e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 18 ) )
                 	__POINTW1MN _SEND_EVENT_,18
001845 93fa      	ST   -Y,R31
001846 93ea      	ST   -Y,R30
001847 cf62      	RJMP SUBOPT_0x31
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x46:
001848 940e 1475 	CALL _memcpy
                +
00184a e6ec     +LDI R30 , LOW ( _SEND_EVENT_ + ( 26 ) )
00184b e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 26 ) )
                 	__POINTW1MN _SEND_EVENT_,26
00184c 93fa      	ST   -Y,R31
00184d 93ea      	ST   -Y,R30
00184e e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
00184f e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
001850 93fa      	ST   -Y,R31
001851 93ea      	ST   -Y,R30
001852 cf3f      	RJMP SUBOPT_0x2C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x47:
001853 940e 1475 	CALL _memcpy
                +
001855 e7e9     +LDI R30 , LOW ( _SEND_EVENT_ + ( 39 ) )
001856 e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 39 ) )
                 	__POINTW1MN _SEND_EVENT_,39
001857 93fa      	ST   -Y,R31
001858 93ea      	ST   -Y,R30
001859 ceaf      	RJMP SUBOPT_0x18
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x48:
                +
00185a 93e0 0977+STS _SEND_EVENT_ + ( 37 ) , R30
                 	__PUTB1MN _SEND_EVENT_,37
00185c 81e9      	LDD  R30,Y+1
                +
00185d 93e0 0978+STS _SEND_EVENT_ + ( 38 ) , R30
                 	__PUTB1MN _SEND_EVENT_,38
                +
00185f e5e5     +LDI R30 , LOW ( _SEND_EVENT_ + ( 3 ) )
001860 e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 3 ) )
                 	__POINTW1MN _SEND_EVENT_,3
001861 93fa      	ST   -Y,R31
001862 93ea      	ST   -Y,R30
                +
001863 91a0 0954+LDS R26 , _SEND_EVENT_ + ( 2 )
                 	__GETB2MN _SEND_EVENT_,2
001865 e0b0      	LDI  R27,0
001866 940e 08ea 	CALL _xbee_checksum
                +
001868 93e0 097a+STS _SEND_EVENT_ + ( 40 ) , R30
                 	__PUTB1MN _SEND_EVENT_,40
00186a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x49:
00186b e5e2      	LDI  R30,LOW(_SEND_EVENT_)
00186c e0f9      	LDI  R31,HIGH(_SEND_EVENT_)
00186d 93fa      	ST   -Y,R31
00186e 93ea      	ST   -Y,R30
00186f e2a9      	LDI  R26,LOW(41)
001870 e0b0      	LDI  R27,0
001871 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4A:
001872 93fa      	ST   -Y,R31
001873 93ea      	ST   -Y,R30
001874 cf35      	RJMP SUBOPT_0x31
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4B:
001875 e0b0      	LDI  R27,0
001876 940c 08ea 	JMP  _xbee_checksum
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4C:
001878 93fa      	ST   -Y,R31
001879 93ea      	ST   -Y,R30
00187a e2a7      	LDI  R26,LOW(39)
00187b e0b0      	LDI  R27,0
00187c 940c 0653 	JMP  _print_payload
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x4D:
00187e 93fa      	ST   -Y,R31
00187f 93ea      	ST   -Y,R30
001880 e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
001881 e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
001882 93fa      	ST   -Y,R31
001883 93ea      	ST   -Y,R30
001884 cf0d      	RJMP SUBOPT_0x2C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4E:
001885 93fa      	ST   -Y,R31
001886 93ea      	ST   -Y,R30
001887 ce60      	RJMP SUBOPT_0x13
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4F:
                +
001888 85e8     +LDD R30 , Y + 8
001889 85f9     +LDD R31 , Y + 8 + 1
00188a 856a     +LDD R22 , Y + 8 + 2
00188b 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
00188c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x50:
00188d 940e 1d0c 	CALL __GETD1S0
00188f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x51:
001890 93fa      	ST   -Y,R31
001891 93ea      	ST   -Y,R30
001892 ceff      	RJMP SUBOPT_0x2C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x52:
001893 e7eb      	LDI  R30,LOW(_SEND_REPORT_)
001894 e0f9      	LDI  R31,HIGH(_SEND_REPORT_)
001895 93fa      	ST   -Y,R31
001896 93ea      	ST   -Y,R30
001897 e4ac      	LDI  R26,LOW(76)
001898 e0b0      	LDI  R27,0
001899 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x53:
00189a 91e0 0830 	LDS  R30,_number
00189c 91f0 0831 	LDS  R31,_number+1
00189e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x54:
00189f 91a0 0864 	LDS  R26,_Vsum
0018a1 91b0 0865 	LDS  R27,_Vsum+1
0018a3 9180 0866 	LDS  R24,_Vsum+2
0018a5 9190 0867 	LDS  R25,_Vsum+3
0018a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x55:
0018a8 2766      	CLR  R22
0018a9 2777      	CLR  R23
0018aa 940e 1adc 	CALL __CDF1
0018ac 940e 1bb4 	CALL __DIVF21
0018ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x56:
0018af 91a0 0868 	LDS  R26,_Isum
0018b1 91b0 0869 	LDS  R27,_Isum+1
0018b3 9180 086a 	LDS  R24,_Isum+2
0018b5 9190 086b 	LDS  R25,_Isum+3
0018b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x57:
0018b8 93e0 0878 	STS  _Iavg,R30
0018ba 93f0 0879 	STS  _Iavg+1,R31
0018bc 9360 087a 	STS  _Iavg+2,R22
0018be 9370 087b 	STS  _Iavg+3,R23
0018c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x58:
0018c1 91a0 086c 	LDS  R26,_Psum
0018c3 91b0 086d 	LDS  R27,_Psum+1
0018c5 9180 086e 	LDS  R24,_Psum+2
0018c7 9190 086f 	LDS  R25,_Psum+3
0018c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x59:
0018ca 91e0 0874 	LDS  R30,_Vavg
0018cc 91f0 0875 	LDS  R31,_Vavg+1
0018ce 9160 0876 	LDS  R22,_Vavg+2
0018d0 9170 0877 	LDS  R23,_Vavg+3
0018d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5A:
0018d3 91e0 0878 	LDS  R30,_Iavg
0018d5 91f0 0879 	LDS  R31,_Iavg+1
0018d7 9160 087a 	LDS  R22,_Iavg+2
0018d9 9170 087b 	LDS  R23,_Iavg+3
0018db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5B:
0018dc 91e0 087c 	LDS  R30,_Pavg
0018de 91f0 087d 	LDS  R31,_Pavg+1
0018e0 9160 087e 	LDS  R22,_Pavg+2
0018e2 9170 087f 	LDS  R23,_Pavg+3
0018e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5C:
0018e5 91a0 0878 	LDS  R26,_Iavg
0018e7 91b0 0879 	LDS  R27,_Iavg+1
0018e9 9180 087a 	LDS  R24,_Iavg+2
0018eb 9190 087b 	LDS  R25,_Iavg+3
                +
0018ed e0e0     +LDI R30 , LOW ( 0x447A0000 )
0018ee e0f0     +LDI R31 , HIGH ( 0x447A0000 )
0018ef e76a     +LDI R22 , BYTE3 ( 0x447A0000 )
0018f0 e474     +LDI R23 , BYTE4 ( 0x447A0000 )
                 	__GETD1N 0x447A0000
0018f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5D:
0018f2 91a0 0870 	LDS  R26,_WHsum
0018f4 91b0 0871 	LDS  R27,_WHsum+1
0018f6 9180 0872 	LDS  R24,_WHsum+2
0018f8 9190 0873 	LDS  R25,_WHsum+3
0018fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5E:
0018fb 91a0 0836 	LDS  R26,_SENSOR_SENSITIVE
0018fd 91b0 0837 	LDS  R27,_SENSOR_SENSITIVE+1
0018ff 9180 0838 	LDS  R24,_SENSOR_SENSITIVE+2
001901 9190 0839 	LDS  R25,_SENSOR_SENSITIVE+3
001903 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5F:
001904 91a0 0878 	LDS  R26,_Iavg
001906 91b0 0879 	LDS  R27,_Iavg+1
001908 9180 087a 	LDS  R24,_Iavg+2
00190a 9190 087b 	LDS  R25,_Iavg+3
00190c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x60:
00190d 940e 0dab 	CALL _read_adc
00190f 93e0 083a 	STS  _adcValue,R30
001911 93f0 083b 	STS  _adcValue+1,R31
001913 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x61:
001914 91e0 083a 	LDS  R30,_adcValue
001916 91f0 083b 	LDS  R31,_adcValue+1
001918 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x62:
001919 dffa      	RCALL SUBOPT_0x61
00191a 2766      	CLR  R22
00191b 2777      	CLR  R23
00191c 940e 1adc 	CALL __CDF1
00191e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x63:
00191f 91e0 0840 	LDS  R30,_avg
001921 91f0 0841 	LDS  R31,_avg+1
001923 9160 0842 	LDS  R22,_avg+2
001925 9170 0843 	LDS  R23,_avg+3
001927 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x64:
001928 91a0 0844 	LDS  R26,_value
00192a 91b0 0845 	LDS  R27,_value+1
00192c 9180 0846 	LDS  R24,_value+2
00192e 9190 0847 	LDS  R25,_value+3
001930 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x65:
001931 940e 1b16 	CALL __ADDF12
001933 01df      	MOVW R26,R30
001934 01cb      	MOVW R24,R22
001935 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x66:
001936 dfe8      	RCALL SUBOPT_0x63
001937 dff0      	RCALL SUBOPT_0x64
001938 940e 1bf9 	CALL __CMPF12
00193a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x67:
00193b 91a0 083c 	LDS  R26,_total
00193d 91b0 083d 	LDS  R27,_total+1
00193f 9180 083e 	LDS  R24,_total+2
001941 9190 083f 	LDS  R25,_total+3
001943 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x68:
001944 940e 1b66 	CALL __MULF12
001946 01df      	MOVW R26,R30
001947 01cb      	MOVW R24,R22
001948 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x69:
001949 91a0 0854 	LDS  R26,_volt
00194b 91b0 0855 	LDS  R27,_volt+1
00194d 9180 0856 	LDS  R24,_volt+2
00194f 9190 0857 	LDS  R25,_volt+3
001951 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x6A:
001952 91e0 0854 	LDS  R30,_volt
001954 91f0 0855 	LDS  R31,_volt+1
001956 9160 0856 	LDS  R22,_volt+2
001958 9170 0857 	LDS  R23,_volt+3
00195a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6B:
00195b 91e0 0858 	LDS  R30,_amp
00195d 91f0 0859 	LDS  R31,_amp+1
00195f 9160 085a 	LDS  R22,_amp+2
001961 9170 085b 	LDS  R23,_amp+3
001963 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6C:
001964 93e0 0892 	STS  _STATUS_DEVICE,R30
001966 cd0b      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6D:
                +
001967 87e9     +STD Y + 9 , R30
001968 87fa     +STD Y + 9 + 1 , R31
001969 876b     +STD Y + 9 + 2 , R22
00196a 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
00196b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6E:
00196c 81ae      	LDD  R26,Y+6
00196d 81bf      	LDD  R27,Y+6+1
00196e 9611      	ADIW R26,1
00196f 83ae      	STD  Y+6,R26
001970 83bf      	STD  Y+6+1,R27
001971 9711      	SBIW R26,1
001972 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6F:
                +
001973 81aa     +LDD R26 , Y + 2
001974 81bb     +LDD R27 , Y + 2 + 1
001975 818c     +LDD R24 , Y + 2 + 2
001976 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
001977 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x70:
                +
001978 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
001979 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
00197a ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
00197b e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
00197c 940e 1b66 	CALL __MULF12
00197e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x71:
                +
00197f 83ea     +STD Y + 2 , R30
001980 83fb     +STD Y + 2 + 1 , R31
001981 836c     +STD Y + 2 + 2 , R22
001982 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
001983 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x72:
                +
001984 81ea     +LDD R30 , Y + 2
001985 81fb     +LDD R31 , Y + 2 + 1
001986 816c     +LDD R22 , Y + 2 + 2
001987 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
001988 85a9     +LDD R26 , Y + 9
001989 85ba     +LDD R27 , Y + 9 + 1
00198a 858b     +LDD R24 , Y + 9 + 2
00198b 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
00198c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x73:
00198d de97      	RCALL SUBOPT_0x40
00198e 940e 1b66 	CALL __MULF12
001990 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x74:
                +
001991 e0a0     +LDI R26 , LOW ( 0x3F000000 )
001992 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
001993 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
001994 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
001995 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x75:
001996 2fe0      	MOV  R30,R16
001997 5de0      	SUBI R30,-LOW(48)
001998 93ec      	ST   X,R30
001999 2fe0      	MOV  R30,R16
00199a e0f0      	LDI  R31,0
00199b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x76:
                +
00199c 85a9     +LDD R26 , Y + 9
00199d 85ba     +LDD R27 , Y + 9 + 1
00199e 858b     +LDD R24 , Y + 9 + 2
00199f 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
0019a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x77:
0019a1 de88      	RCALL SUBOPT_0x41
0019a2 de82      	RCALL SUBOPT_0x40
0019a3 ce8b      	RJMP SUBOPT_0x42
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x78:
0019a4 de8d      	RCALL SUBOPT_0x43
0019a5 de70      	RCALL SUBOPT_0x3D
0019a6 940e 1bf9 	CALL __CMPF12
0019a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x79:
                +
0019a9 87ec     +STD Y + 12 , R30
0019aa 87fd     +STD Y + 12 + 1 , R31
0019ab 876e     +STD Y + 12 + 2 , R22
0019ac 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
0019ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7A:
0019ae 85a8      	LDD  R26,Y+8
0019af 85b9      	LDD  R27,Y+8+1
0019b0 9611      	ADIW R26,1
0019b1 87a8      	STD  Y+8,R26
0019b2 87b9      	STD  Y+8+1,R27
0019b3 9711      	SBIW R26,1
0019b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7B:
0019b5 85e8      	LDD  R30,Y+8
0019b6 85f9      	LDD  R31,Y+8+1
0019b7 9631      	ADIW R30,1
0019b8 87e8      	STD  Y+8,R30
0019b9 87f9      	STD  Y+8+1,R31
0019ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x7C:
0019bb 932a      	ST   -Y,R18
0019bc 81af      	LDD  R26,Y+7
0019bd 85b8      	LDD  R27,Y+7+1
0019be 85e9      	LDD  R30,Y+9
0019bf 85fa      	LDD  R31,Y+9+1
0019c0 9509      	ICALL
0019c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x7D:
                +
0019c2 01fe     +MOVW R30 , R28
0019c3 5ae6     +SUBI R30 , LOW ( - 90 )
0019c4 4fff     +SBCI R31 , HIGH ( - 90 )
0019c5 9001     +LD R0 , Z +
0019c6 81f0     +LD R31 , Z
0019c7 2de0     +MOV R30 , R0
                 	__GETW1SX 90
0019c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x7E:
0019c9 9734      	SBIW R30,4
                +
0019ca 01de     +MOVW R26 , R28
0019cb 5aa6     +SUBI R26 , LOW ( - 90 )
0019cc 4fbf     +SBCI R27 , HIGH ( - 90 )
0019cd 93ed     +ST X + , R30
0019ce 93fc     +ST X , R31
                 	__PUTW1SX 90
0019cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7F:
0019d0 81af      	LDD  R26,Y+7
0019d1 85b8      	LDD  R27,Y+7+1
0019d2 85e9      	LDD  R30,Y+9
0019d3 85fa      	LDD  R31,Y+9+1
0019d4 9509      	ICALL
0019d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x80:
                +
0019d6 01de     +MOVW R26 , R28
0019d7 5aa6     +SUBI R26 , LOW ( - 90 )
0019d8 4fbf     +SBCI R27 , HIGH ( - 90 )
0019d9 900d     +LD R0 , X +
0019da 91bc     +LD R27 , X
0019db 2da0     +MOV R26 , R0
                 	__GETW2SX 90
0019dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x81:
                +
0019dd 87ea     +STD Y + 10 , R30
0019de 87fb     +STD Y + 10 + 1 , R31
0019df 876c     +STD Y + 10 + 2 , R22
0019e0 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
0019e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x82:
0019e2 dfdf      	RCALL SUBOPT_0x7D
0019e3 cfe5      	RJMP SUBOPT_0x7E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x83:
                +
0019e4 85ea     +LDD R30 , Y + 10
0019e5 85fb     +LDD R31 , Y + 10 + 1
0019e6 856c     +LDD R22 , Y + 10 + 2
0019e7 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
0019e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x84:
0019e9 87ee      	STD  Y+14,R30
0019ea 87ff      	STD  Y+14+1,R31
0019eb 85ae      	LDD  R26,Y+14
0019ec 85bf      	LDD  R27,Y+14+1
0019ed 940e 1494 	CALL _strlen
0019ef 2f1e      	MOV  R17,R30
0019f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x85:
0019f1 dfe4      	RCALL SUBOPT_0x80
0019f2 9614      	ADIW R26,4
0019f3 940e 1cf3 	CALL __GETW1P
0019f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x86:
                +
0019f6 8be8     +STD Y + 16 , R30
0019f7 8bf9     +STD Y + 16 + 1 , R31
0019f8 8b6a     +STD Y + 16 + 2 , R22
0019f9 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
0019fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x87:
0019fb 7f0b      	ANDI R16,LOW(251)
0019fc 89ed      	LDD  R30,Y+21
0019fd 93ea      	ST   -Y,R30
                +
0019fe 01de     +MOVW R26 , R28
0019ff 5aa9     +SUBI R26 , LOW ( - 87 )
001a00 4fbf     +SBCI R27 , HIGH ( - 87 )
001a01 900d     +LD R0 , X +
001a02 91bc     +LD R27 , X
001a03 2da0     +MOV R26 , R0
                 	__GETW2SX 87
                +
001a04 01fe     +MOVW R30 , R28
001a05 5ae7     +SUBI R30 , LOW ( - 89 )
001a06 4fff     +SBCI R31 , HIGH ( - 89 )
001a07 9001     +LD R0 , Z +
001a08 81f0     +LD R31 , Z
001a09 2de0     +MOV R30 , R0
                 	__GETW1SX 89
001a0a 9509      	ICALL
001a0b 3050      	CPI  R21,0
001a0c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x88:
                +
001a0d 89e8     +LDD R30 , Y + 16
001a0e 89f9     +LDD R31 , Y + 16 + 1
001a0f 896a     +LDD R22 , Y + 16 + 2
001a10 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
001a11 85aa     +LDD R26 , Y + 10
001a12 85bb     +LDD R27 , Y + 10 + 1
001a13 858c     +LDD R24 , Y + 10 + 2
001a14 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
001a15 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x89:
                +
001a16 e0a0     +LDI R26 , LOW ( 0x3F800000 )
001a17 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
001a18 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
001a19 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
001a1a 940e 1b0f 	CALL __SUBF12
001a1c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8A:
                +
001a1d 81ae     +LDD R26 , Y + 6
001a1e 81bf     +LDD R27 , Y + 6 + 1
001a1f 8588     +LDD R24 , Y + 6 + 2
001a20 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
001a21 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8B:
                +
001a22 81ee     +LDD R30 , Y + 6
001a23 81ff     +LDD R31 , Y + 6 + 1
001a24 8568     +LDD R22 , Y + 6 + 2
001a25 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
001a26 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8C:
                +
001a27 83ee     +STD Y + 6 , R30
001a28 83ff     +STD Y + 6 + 1 , R31
001a29 8768     +STD Y + 6 + 2 , R22
001a2a 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
001a2b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8D:
001a2c dff5      	RCALL SUBOPT_0x8B
001a2d cfef      	RJMP SUBOPT_0x8A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8E:
001a2e 940e 1b66 	CALL __MULF12
001a30 df4e      	RCALL SUBOPT_0x71
                +
001a31 81ea     +LDD R30 , Y + 2
001a32 81fb     +LDD R31 , Y + 2 + 1
001a33 816c     +LDD R22 , Y + 2 + 2
001a34 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
001a35 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8F:
                +
001a36 81ea     +LDD R30 , Y + 2
001a37 81fb     +LDD R31 , Y + 2 + 1
001a38 816c     +LDD R22 , Y + 2 + 2
001a39 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
001a3a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x90:
                +
001a3b 85aa     +LDD R26 , Y + 10
001a3c 85bb     +LDD R27 , Y + 10 + 1
001a3d 858c     +LDD R24 , Y + 10 + 2
001a3e 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
001a3f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x91:
                +
001a40 e0e0     +LDI R30 , LOW ( 0x0 )
001a41 e0f0     +LDI R31 , HIGH ( 0x0 )
001a42 e060     +LDI R22 , BYTE3 ( 0x0 )
001a43 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
001a44 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x92:
001a45 940e 14f1 	CALL _log
001a47 dde2      	RCALL SUBOPT_0x41
001a48 cefb      	RJMP SUBOPT_0x68
                 
                 
                 	.CSEG
                 _delay_ms:
001a49 9610      	adiw r26,0
001a4a f039      	breq __delay_ms1
                 __delay_ms0:
                +
001a4b ec8d     +LDI R24 , LOW ( 0xACD )
001a4c e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
001a4d 9701     +SBIW R24 , 1
001a4e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
001a4f 95a8      	wdr
001a50 9711      	sbiw r26,1
001a51 f7c9      	brne __delay_ms0
                 __delay_ms1:
001a52 9508      	ret
                 
                 _frexp:
001a53 91e9      	LD   R30,Y+
001a54 91f9      	LD   R31,Y+
001a55 9169      	LD   R22,Y+
001a56 9179      	LD   R23,Y+
001a57 fb77      	BST  R23,7
001a58 0f66      	LSL  R22
001a59 1f77      	ROL  R23
001a5a 2788      	CLR  R24
001a5b 577e      	SUBI R23,0x7E
001a5c 0b88      	SBC  R24,R24
001a5d 937d      	ST   X+,R23
001a5e 938c      	ST   X,R24
001a5f e77e      	LDI  R23,0x7E
001a60 9576      	LSR  R23
001a61 9567      	ROR  R22
001a62 f06e      	BRTS __ANEGF1
001a63 9508      	RET
                 
                 _ldexp:
001a64 91e9      	LD   R30,Y+
001a65 91f9      	LD   R31,Y+
001a66 9169      	LD   R22,Y+
001a67 9179      	LD   R23,Y+
001a68 fb77      	BST  R23,7
001a69 0f66      	LSL  R22
001a6a 1f77      	ROL  R23
001a6b 0f7a      	ADD  R23,R26
001a6c 9576      	LSR  R23
001a6d 9567      	ROR  R22
001a6e f00e      	BRTS __ANEGF1
001a6f 9508      	RET
                 
                 __ANEGF1:
001a70 9730      	SBIW R30,0
001a71 4060      	SBCI R22,0
001a72 4070      	SBCI R23,0
001a73 f009      	BREQ __ANEGF10
001a74 5870      	SUBI R23,0x80
                 __ANEGF10:
001a75 9508      	RET
                 
                 __ROUND_REPACK:
001a76 2355      	TST  R21
001a77 f442      	BRPL __REPACK
001a78 3850      	CPI  R21,0x80
001a79 f411      	BRNE __ROUND_REPACK0
001a7a ffe0      	SBRS R30,0
001a7b c004      	RJMP __REPACK
                 __ROUND_REPACK0:
001a7c 9631      	ADIW R30,1
001a7d 1f69      	ADC  R22,R25
001a7e 1f79      	ADC  R23,R25
001a7f f06b      	BRVS __REPACK1
                 
                 __REPACK:
001a80 e850      	LDI  R21,0x80
001a81 2757      	EOR  R21,R23
001a82 f411      	BRNE __REPACK0
001a83 935f      	PUSH R21
001a84 c0cf      	RJMP __ZERORES
                 __REPACK0:
001a85 3f5f      	CPI  R21,0xFF
001a86 f031      	BREQ __REPACK1
001a87 0f66      	LSL  R22
001a88 0c00      	LSL  R0
001a89 9557      	ROR  R21
001a8a 9567      	ROR  R22
001a8b 2f75      	MOV  R23,R21
001a8c 9508      	RET
                 __REPACK1:
001a8d 935f      	PUSH R21
001a8e 2000      	TST  R0
001a8f f00a      	BRMI __REPACK2
001a90 c0cf      	RJMP __MAXRES
                 __REPACK2:
001a91 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
001a92 e850      	LDI  R21,0x80
001a93 2e19      	MOV  R1,R25
001a94 2215      	AND  R1,R21
001a95 0f88      	LSL  R24
001a96 1f99      	ROL  R25
001a97 2795      	EOR  R25,R21
001a98 0f55      	LSL  R21
001a99 9587      	ROR  R24
                 
                 __UNPACK1:
001a9a e850      	LDI  R21,0x80
001a9b 2e07      	MOV  R0,R23
001a9c 2205      	AND  R0,R21
001a9d 0f66      	LSL  R22
001a9e 1f77      	ROL  R23
001a9f 2775      	EOR  R23,R21
001aa0 0f55      	LSL  R21
001aa1 9567      	ROR  R22
001aa2 9508      	RET
                 
                 __CFD1U:
001aa3 9468      	SET
001aa4 c001      	RJMP __CFD1U0
                 __CFD1:
001aa5 94e8      	CLT
                 __CFD1U0:
001aa6 935f      	PUSH R21
001aa7 dff2      	RCALL __UNPACK1
001aa8 3870      	CPI  R23,0x80
001aa9 f018      	BRLO __CFD10
001aaa 3f7f      	CPI  R23,0xFF
001aab f408      	BRCC __CFD10
001aac c0a7      	RJMP __ZERORES
                 __CFD10:
001aad e156      	LDI  R21,22
001aae 1b57      	SUB  R21,R23
001aaf f4aa      	BRPL __CFD11
001ab0 9551      	NEG  R21
001ab1 3058      	CPI  R21,8
001ab2 f40e      	BRTC __CFD19
001ab3 3059      	CPI  R21,9
                 __CFD19:
001ab4 f030      	BRLO __CFD17
001ab5 efef      	SER  R30
001ab6 efff      	SER  R31
001ab7 ef6f      	SER  R22
001ab8 e77f      	LDI  R23,0x7F
001ab9 f977      	BLD  R23,7
001aba c01a      	RJMP __CFD15
                 __CFD17:
001abb 2777      	CLR  R23
001abc 2355      	TST  R21
001abd f0b9      	BREQ __CFD15
                 __CFD18:
001abe 0fee      	LSL  R30
001abf 1fff      	ROL  R31
001ac0 1f66      	ROL  R22
001ac1 1f77      	ROL  R23
001ac2 955a      	DEC  R21
001ac3 f7d1      	BRNE __CFD18
001ac4 c010      	RJMP __CFD15
                 __CFD11:
001ac5 2777      	CLR  R23
                 __CFD12:
001ac6 3058      	CPI  R21,8
001ac7 f028      	BRLO __CFD13
001ac8 2fef      	MOV  R30,R31
001ac9 2ff6      	MOV  R31,R22
001aca 2f67      	MOV  R22,R23
001acb 5058      	SUBI R21,8
001acc cff9      	RJMP __CFD12
                 __CFD13:
001acd 2355      	TST  R21
001ace f031      	BREQ __CFD15
                 __CFD14:
001acf 9576      	LSR  R23
001ad0 9567      	ROR  R22
001ad1 95f7      	ROR  R31
001ad2 95e7      	ROR  R30
001ad3 955a      	DEC  R21
001ad4 f7d1      	BRNE __CFD14
                 __CFD15:
001ad5 2000      	TST  R0
001ad6 f40a      	BRPL __CFD16
001ad7 d180      	RCALL __ANEGD1
                 __CFD16:
001ad8 915f      	POP  R21
001ad9 9508      	RET
                 
                 __CDF1U:
001ada 9468      	SET
001adb c001      	RJMP __CDF1U0
                 __CDF1:
001adc 94e8      	CLT
                 __CDF1U0:
001add 9730      	SBIW R30,0
001ade 4060      	SBCI R22,0
001adf 4070      	SBCI R23,0
001ae0 f0b1      	BREQ __CDF10
001ae1 2400      	CLR  R0
001ae2 f026      	BRTS __CDF11
001ae3 2377      	TST  R23
001ae4 f412      	BRPL __CDF11
001ae5 9400      	COM  R0
001ae6 d171      	RCALL __ANEGD1
                 __CDF11:
001ae7 2e17      	MOV  R1,R23
001ae8 e17e      	LDI  R23,30
001ae9 2011      	TST  R1
                 __CDF12:
001aea f032      	BRMI __CDF13
001aeb 957a      	DEC  R23
001aec 0fee      	LSL  R30
001aed 1fff      	ROL  R31
001aee 1f66      	ROL  R22
001aef 1c11      	ROL  R1
001af0 cff9      	RJMP __CDF12
                 __CDF13:
001af1 2fef      	MOV  R30,R31
001af2 2ff6      	MOV  R31,R22
001af3 2d61      	MOV  R22,R1
001af4 935f      	PUSH R21
001af5 df8a      	RCALL __REPACK
001af6 915f      	POP  R21
                 __CDF10:
001af7 9508      	RET
                 
                 __SWAPACC:
001af8 934f      	PUSH R20
001af9 01af      	MOVW R20,R30
001afa 01fd      	MOVW R30,R26
001afb 01da      	MOVW R26,R20
001afc 01ab      	MOVW R20,R22
001afd 01bc      	MOVW R22,R24
001afe 01ca      	MOVW R24,R20
001aff 2d40      	MOV  R20,R0
001b00 2c01      	MOV  R0,R1
001b01 2e14      	MOV  R1,R20
001b02 914f      	POP  R20
001b03 9508      	RET
                 
                 __UADD12:
001b04 0fea      	ADD  R30,R26
001b05 1ffb      	ADC  R31,R27
001b06 1f68      	ADC  R22,R24
001b07 9508      	RET
                 
                 __NEGMAN1:
001b08 95e0      	COM  R30
001b09 95f0      	COM  R31
001b0a 9560      	COM  R22
001b0b 5fef      	SUBI R30,-1
001b0c 4fff      	SBCI R31,-1
001b0d 4f6f      	SBCI R22,-1
001b0e 9508      	RET
                 
                 __SUBF12:
001b0f 935f      	PUSH R21
001b10 df81      	RCALL __UNPACK
001b11 3890      	CPI  R25,0x80
001b12 f171      	BREQ __ADDF129
001b13 e850      	LDI  R21,0x80
001b14 2615      	EOR  R1,R21
                 
001b15 c004      	RJMP __ADDF120
                 
                 __ADDF12:
001b16 935f      	PUSH R21
001b17 df7a      	RCALL __UNPACK
001b18 3890      	CPI  R25,0x80
001b19 f139      	BREQ __ADDF129
                 
                 __ADDF120:
001b1a 3870      	CPI  R23,0x80
001b1b f121      	BREQ __ADDF128
                 __ADDF121:
001b1c 2f57      	MOV  R21,R23
001b1d 1b59      	SUB  R21,R25
001b1e f12b      	BRVS __ADDF1211
001b1f f412      	BRPL __ADDF122
001b20 dfd7      	RCALL __SWAPACC
001b21 cffa      	RJMP __ADDF121
                 __ADDF122:
001b22 3158      	CPI  R21,24
001b23 f018      	BRLO __ADDF123
001b24 27aa      	CLR  R26
001b25 27bb      	CLR  R27
001b26 2788      	CLR  R24
                 __ADDF123:
001b27 3058      	CPI  R21,8
001b28 f028      	BRLO __ADDF124
001b29 2fab      	MOV  R26,R27
001b2a 2fb8      	MOV  R27,R24
001b2b 2788      	CLR  R24
001b2c 5058      	SUBI R21,8
001b2d cff9      	RJMP __ADDF123
                 __ADDF124:
001b2e 2355      	TST  R21
001b2f f029      	BREQ __ADDF126
                 __ADDF125:
001b30 9586      	LSR  R24
001b31 95b7      	ROR  R27
001b32 95a7      	ROR  R26
001b33 955a      	DEC  R21
001b34 f7d9      	BRNE __ADDF125
                 __ADDF126:
001b35 2d50      	MOV  R21,R0
001b36 2551      	EOR  R21,R1
001b37 f072      	BRMI __ADDF127
001b38 dfcb      	RCALL __UADD12
001b39 f438      	BRCC __ADDF129
001b3a 9567      	ROR  R22
001b3b 95f7      	ROR  R31
001b3c 95e7      	ROR  R30
001b3d 9573      	INC  R23
001b3e f413      	BRVC __ADDF129
001b3f c020      	RJMP __MAXRES
                 __ADDF128:
001b40 dfb7      	RCALL __SWAPACC
                 __ADDF129:
001b41 df3e      	RCALL __REPACK
001b42 915f      	POP  R21
001b43 9508      	RET
                 __ADDF1211:
001b44 f7d8      	BRCC __ADDF128
001b45 cffb      	RJMP __ADDF129
                 __ADDF127:
001b46 1bea      	SUB  R30,R26
001b47 0bfb      	SBC  R31,R27
001b48 0b68      	SBC  R22,R24
001b49 f051      	BREQ __ZERORES
001b4a f410      	BRCC __ADDF1210
001b4b 9400      	COM  R0
001b4c dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
001b4d 2366      	TST  R22
001b4e f392      	BRMI __ADDF129
001b4f 0fee      	LSL  R30
001b50 1fff      	ROL  R31
001b51 1f66      	ROL  R22
001b52 957a      	DEC  R23
001b53 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
001b54 27ee      	CLR  R30
001b55 27ff      	CLR  R31
001b56 2766      	CLR  R22
001b57 2777      	CLR  R23
001b58 915f      	POP  R21
001b59 9508      	RET
                 
                 __MINRES:
001b5a efef      	SER  R30
001b5b efff      	SER  R31
001b5c e76f      	LDI  R22,0x7F
001b5d ef7f      	SER  R23
001b5e 915f      	POP  R21
001b5f 9508      	RET
                 
                 __MAXRES:
001b60 efef      	SER  R30
001b61 efff      	SER  R31
001b62 e76f      	LDI  R22,0x7F
001b63 e77f      	LDI  R23,0x7F
001b64 915f      	POP  R21
001b65 9508      	RET
                 
                 __MULF12:
001b66 935f      	PUSH R21
001b67 df2a      	RCALL __UNPACK
001b68 3870      	CPI  R23,0x80
001b69 f351      	BREQ __ZERORES
001b6a 3890      	CPI  R25,0x80
001b6b f341      	BREQ __ZERORES
001b6c 2401      	EOR  R0,R1
001b6d 9408      	SEC
001b6e 1f79      	ADC  R23,R25
001b6f f423      	BRVC __MULF124
001b70 f31c      	BRLT __ZERORES
                 __MULF125:
001b71 2000      	TST  R0
001b72 f33a      	BRMI __MINRES
001b73 cfec      	RJMP __MAXRES
                 __MULF124:
001b74 920f      	PUSH R0
001b75 931f      	PUSH R17
001b76 932f      	PUSH R18
001b77 933f      	PUSH R19
001b78 934f      	PUSH R20
001b79 2711      	CLR  R17
001b7a 2722      	CLR  R18
001b7b 2799      	CLR  R25
001b7c 9f68      	MUL  R22,R24
001b7d 01a0      	MOVW R20,R0
001b7e 9f8f      	MUL  R24,R31
001b7f 2d30      	MOV  R19,R0
001b80 0d41      	ADD  R20,R1
001b81 1f59      	ADC  R21,R25
001b82 9f6b      	MUL  R22,R27
001b83 0d30      	ADD  R19,R0
001b84 1d41      	ADC  R20,R1
001b85 1f59      	ADC  R21,R25
001b86 9f8e      	MUL  R24,R30
001b87 d027      	RCALL __MULF126
001b88 9fbf      	MUL  R27,R31
001b89 d025      	RCALL __MULF126
001b8a 9f6a      	MUL  R22,R26
001b8b d023      	RCALL __MULF126
001b8c 9fbe      	MUL  R27,R30
001b8d d01d      	RCALL __MULF127
001b8e 9faf      	MUL  R26,R31
001b8f d01b      	RCALL __MULF127
001b90 9fae      	MUL  R26,R30
001b91 0d11      	ADD  R17,R1
001b92 1f29      	ADC  R18,R25
001b93 1f39      	ADC  R19,R25
001b94 1f49      	ADC  R20,R25
001b95 1f59      	ADC  R21,R25
001b96 2fe3      	MOV  R30,R19
001b97 2ff4      	MOV  R31,R20
001b98 2f65      	MOV  R22,R21
001b99 2f52      	MOV  R21,R18
001b9a 914f      	POP  R20
001b9b 913f      	POP  R19
001b9c 912f      	POP  R18
001b9d 911f      	POP  R17
001b9e 900f      	POP  R0
001b9f 2366      	TST  R22
001ba0 f02a      	BRMI __MULF122
001ba1 0f55      	LSL  R21
001ba2 1fee      	ROL  R30
001ba3 1fff      	ROL  R31
001ba4 1f66      	ROL  R22
001ba5 c002      	RJMP __MULF123
                 __MULF122:
001ba6 9573      	INC  R23
001ba7 f24b      	BRVS __MULF125
                 __MULF123:
001ba8 decd      	RCALL __ROUND_REPACK
001ba9 915f      	POP  R21
001baa 9508      	RET
                 
                 __MULF127:
001bab 0d10      	ADD  R17,R0
001bac 1d21      	ADC  R18,R1
001bad 1f39      	ADC  R19,R25
001bae c002      	RJMP __MULF128
                 __MULF126:
001baf 0d20      	ADD  R18,R0
001bb0 1d31      	ADC  R19,R1
                 __MULF128:
001bb1 1f49      	ADC  R20,R25
001bb2 1f59      	ADC  R21,R25
001bb3 9508      	RET
                 
                 __DIVF21:
001bb4 935f      	PUSH R21
001bb5 dedc      	RCALL __UNPACK
001bb6 3870      	CPI  R23,0x80
001bb7 f421      	BRNE __DIVF210
001bb8 2011      	TST  R1
                 __DIVF211:
001bb9 f40a      	BRPL __DIVF219
001bba cf9f      	RJMP __MINRES
                 __DIVF219:
001bbb cfa4      	RJMP __MAXRES
                 __DIVF210:
001bbc 3890      	CPI  R25,0x80
001bbd f409      	BRNE __DIVF218
                 __DIVF217:
001bbe cf95      	RJMP __ZERORES
                 __DIVF218:
001bbf 2401      	EOR  R0,R1
001bc0 9408      	SEC
001bc1 0b97      	SBC  R25,R23
001bc2 f41b      	BRVC __DIVF216
001bc3 f3d4      	BRLT __DIVF217
001bc4 2000      	TST  R0
001bc5 cff3      	RJMP __DIVF211
                 __DIVF216:
001bc6 2f79      	MOV  R23,R25
001bc7 931f      	PUSH R17
001bc8 932f      	PUSH R18
001bc9 933f      	PUSH R19
001bca 934f      	PUSH R20
001bcb 2411      	CLR  R1
001bcc 2711      	CLR  R17
001bcd 2722      	CLR  R18
001bce 2733      	CLR  R19
001bcf 2744      	CLR  R20
001bd0 2755      	CLR  R21
001bd1 e290      	LDI  R25,32
                 __DIVF212:
001bd2 17ae      	CP   R26,R30
001bd3 07bf      	CPC  R27,R31
001bd4 0786      	CPC  R24,R22
001bd5 0741      	CPC  R20,R17
001bd6 f030      	BRLO __DIVF213
001bd7 1bae      	SUB  R26,R30
001bd8 0bbf      	SBC  R27,R31
001bd9 0b86      	SBC  R24,R22
001bda 0b41      	SBC  R20,R17
001bdb 9408      	SEC
001bdc c001      	RJMP __DIVF214
                 __DIVF213:
001bdd 9488      	CLC
                 __DIVF214:
001bde 1f55      	ROL  R21
001bdf 1f22      	ROL  R18
001be0 1f33      	ROL  R19
001be1 1c11      	ROL  R1
001be2 1faa      	ROL  R26
001be3 1fbb      	ROL  R27
001be4 1f88      	ROL  R24
001be5 1f44      	ROL  R20
001be6 959a      	DEC  R25
001be7 f751      	BRNE __DIVF212
001be8 01f9      	MOVW R30,R18
001be9 2d61      	MOV  R22,R1
001bea 914f      	POP  R20
001beb 913f      	POP  R19
001bec 912f      	POP  R18
001bed 911f      	POP  R17
001bee 2366      	TST  R22
001bef f032      	BRMI __DIVF215
001bf0 0f55      	LSL  R21
001bf1 1fee      	ROL  R30
001bf2 1fff      	ROL  R31
001bf3 1f66      	ROL  R22
001bf4 957a      	DEC  R23
001bf5 f243      	BRVS __DIVF217
                 __DIVF215:
001bf6 de7f      	RCALL __ROUND_REPACK
001bf7 915f      	POP  R21
001bf8 9508      	RET
                 
                 __CMPF12:
001bf9 2399      	TST  R25
001bfa f09a      	BRMI __CMPF120
001bfb 2377      	TST  R23
001bfc f042      	BRMI __CMPF121
001bfd 1797      	CP   R25,R23
001bfe f048      	BRLO __CMPF122
001bff f429      	BRNE __CMPF121
001c00 17ae      	CP   R26,R30
001c01 07bf      	CPC  R27,R31
001c02 0786      	CPC  R24,R22
001c03 f020      	BRLO __CMPF122
001c04 f031      	BREQ __CMPF123
                 __CMPF121:
001c05 9498      	CLZ
001c06 9488      	CLC
001c07 9508      	RET
                 __CMPF122:
001c08 9498      	CLZ
001c09 9408      	SEC
001c0a 9508      	RET
                 __CMPF123:
001c0b 9418      	SEZ
001c0c 9488      	CLC
001c0d 9508      	RET
                 __CMPF120:
001c0e 2377      	TST  R23
001c0f f7c2      	BRPL __CMPF122
001c10 1797      	CP   R25,R23
001c11 f398      	BRLO __CMPF121
001c12 f7a9      	BRNE __CMPF122
001c13 17ea      	CP   R30,R26
001c14 07fb      	CPC  R31,R27
001c15 0768      	CPC  R22,R24
001c16 f388      	BRLO __CMPF122
001c17 f399      	BREQ __CMPF123
001c18 cfec      	RJMP __CMPF121
                 
                 _sqrt:
001c19 d106      	rcall __PUTPARD2
001c1a 9724      	sbiw r28,4
001c1b 935f      	push r21
001c1c 819f      	ldd  r25,y+7
001c1d 2399      	tst  r25
001c1e f411      	brne __sqrt0
001c1f 9628      	adiw r28,8
001c20 cf33      	rjmp __zerores
                 __sqrt0:
001c21 f412      	brpl __sqrt1
001c22 9628      	adiw r28,8
001c23 cf3c      	rjmp __maxres
                 __sqrt1:
001c24 934f      	push r20
001c25 e442      	ldi  r20,66
001c26 818e      	ldd  r24,y+6
001c27 81bd      	ldd  r27,y+5
001c28 81ac      	ldd  r26,y+4
                 __sqrt2:
001c29 8388      	st   y,r24
001c2a 8399      	std  y+1,r25
001c2b 83aa      	std  y+2,r26
001c2c 83bb      	std  y+3,r27
001c2d 01fd      	movw r30,r26
001c2e 01bc      	movw r22,r24
001c2f 81ac      	ldd  r26,y+4
001c30 81bd      	ldd  r27,y+5
001c31 818e      	ldd  r24,y+6
001c32 819f      	ldd  r25,y+7
001c33 df80      	rcall __divf21
001c34 8188      	ld   r24,y
001c35 8199      	ldd  r25,y+1
001c36 81aa      	ldd  r26,y+2
001c37 81bb      	ldd  r27,y+3
001c38 dedd      	rcall __addf12
001c39 de60      	rcall __unpack1
001c3a 957a      	dec  r23
001c3b de44      	rcall __repack
001c3c 8188      	ld   r24,y
001c3d 8199      	ldd  r25,y+1
001c3e 81aa      	ldd  r26,y+2
001c3f 81bb      	ldd  r27,y+3
001c40 27ae      	eor  r26,r30
001c41 7fa8      	andi r26,0xf8
001c42 f421      	brne __sqrt4
001c43 17bf      	cp   r27,r31
001c44 0786      	cpc  r24,r22
001c45 0797      	cpc  r25,r23
001c46 f029      	breq __sqrt3
                 __sqrt4:
001c47 954a      	dec  r20
001c48 f019      	breq __sqrt3
001c49 01df      	movw r26,r30
001c4a 01cb      	movw r24,r22
001c4b cfdd      	rjmp __sqrt2
                 __sqrt3:
001c4c 914f      	pop  r20
001c4d 915f      	pop  r21
001c4e 9628      	adiw r28,8
001c4f 9508      	ret
                 
                 __ADDW2R15:
001c50 2400      	CLR  R0
001c51 0daf      	ADD  R26,R15
001c52 1db0      	ADC  R27,R0
001c53 9508      	RET
                 
                 __ANEGW1:
001c54 95f1      	NEG  R31
001c55 95e1      	NEG  R30
001c56 40f0      	SBCI R31,0
001c57 9508      	RET
                 
                 __ANEGD1:
001c58 95f0      	COM  R31
001c59 9560      	COM  R22
001c5a 9570      	COM  R23
001c5b 95e1      	NEG  R30
001c5c 4fff      	SBCI R31,-1
001c5d 4f6f      	SBCI R22,-1
001c5e 4f7f      	SBCI R23,-1
001c5f 9508      	RET
                 
                 __CBD1:
001c60 2ffe      	MOV  R31,R30
001c61 0fff      	ADD  R31,R31
001c62 0bff      	SBC  R31,R31
001c63 2f6f      	MOV  R22,R31
001c64 2f7f      	MOV  R23,R31
001c65 9508      	RET
                 
                 __CWD1:
001c66 2f6f      	MOV  R22,R31
001c67 0f66      	ADD  R22,R22
001c68 0b66      	SBC  R22,R22
001c69 2f76      	MOV  R23,R22
001c6a 9508      	RET
                 
                 __DIVB21U:
001c6b 2400      	CLR  R0
001c6c e098      	LDI  R25,8
                 __DIVB21U1:
001c6d 0faa      	LSL  R26
001c6e 1c00      	ROL  R0
001c6f 1a0e      	SUB  R0,R30
001c70 f410      	BRCC __DIVB21U2
001c71 0e0e      	ADD  R0,R30
001c72 c001      	RJMP __DIVB21U3
                 __DIVB21U2:
001c73 60a1      	SBR  R26,1
                 __DIVB21U3:
001c74 959a      	DEC  R25
001c75 f7b9      	BRNE __DIVB21U1
001c76 2fea      	MOV  R30,R26
001c77 2da0      	MOV  R26,R0
001c78 9508      	RET
                 
                 __DIVB21:
001c79 d05f      	RCALL __CHKSIGNB
001c7a dff0      	RCALL __DIVB21U
001c7b f40e      	BRTC __DIVB211
001c7c 95e1      	NEG  R30
                 __DIVB211:
001c7d 9508      	RET
                 
                 __DIVW21U:
001c7e 2400      	CLR  R0
001c7f 2411      	CLR  R1
001c80 e190      	LDI  R25,16
                 __DIVW21U1:
001c81 0faa      	LSL  R26
001c82 1fbb      	ROL  R27
001c83 1c00      	ROL  R0
001c84 1c11      	ROL  R1
001c85 1a0e      	SUB  R0,R30
001c86 0a1f      	SBC  R1,R31
001c87 f418      	BRCC __DIVW21U2
001c88 0e0e      	ADD  R0,R30
001c89 1e1f      	ADC  R1,R31
001c8a c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001c8b 60a1      	SBR  R26,1
                 __DIVW21U3:
001c8c 959a      	DEC  R25
001c8d f799      	BRNE __DIVW21U1
001c8e 01fd      	MOVW R30,R26
001c8f 01d0      	MOVW R26,R0
001c90 9508      	RET
                 
                 __DIVW21:
001c91 d053      	RCALL __CHKSIGNW
001c92 dfeb      	RCALL __DIVW21U
001c93 f40e      	BRTC __DIVW211
001c94 dfbf      	RCALL __ANEGW1
                 __DIVW211:
001c95 9508      	RET
                 
                 __DIVD21U:
001c96 933f      	PUSH R19
001c97 934f      	PUSH R20
001c98 935f      	PUSH R21
001c99 2400      	CLR  R0
001c9a 2411      	CLR  R1
001c9b 2744      	CLR  R20
001c9c 2755      	CLR  R21
001c9d e230      	LDI  R19,32
                 __DIVD21U1:
001c9e 0faa      	LSL  R26
001c9f 1fbb      	ROL  R27
001ca0 1f88      	ROL  R24
001ca1 1f99      	ROL  R25
001ca2 1c00      	ROL  R0
001ca3 1c11      	ROL  R1
001ca4 1f44      	ROL  R20
001ca5 1f55      	ROL  R21
001ca6 1a0e      	SUB  R0,R30
001ca7 0a1f      	SBC  R1,R31
001ca8 0b46      	SBC  R20,R22
001ca9 0b57      	SBC  R21,R23
001caa f428      	BRCC __DIVD21U2
001cab 0e0e      	ADD  R0,R30
001cac 1e1f      	ADC  R1,R31
001cad 1f46      	ADC  R20,R22
001cae 1f57      	ADC  R21,R23
001caf c001      	RJMP __DIVD21U3
                 __DIVD21U2:
001cb0 60a1      	SBR  R26,1
                 __DIVD21U3:
001cb1 953a      	DEC  R19
001cb2 f759      	BRNE __DIVD21U1
001cb3 01fd      	MOVW R30,R26
001cb4 01bc      	MOVW R22,R24
001cb5 01d0      	MOVW R26,R0
001cb6 01ca      	MOVW R24,R20
001cb7 915f      	POP  R21
001cb8 914f      	POP  R20
001cb9 913f      	POP  R19
001cba 9508      	RET
                 
                 __MODB21:
001cbb 94e8      	CLT
001cbc ffa7      	SBRS R26,7
001cbd c002      	RJMP __MODB211
001cbe 95a1      	NEG  R26
001cbf 9468      	SET
                 __MODB211:
001cc0 fde7      	SBRC R30,7
001cc1 95e1      	NEG  R30
001cc2 dfa8      	RCALL __DIVB21U
001cc3 2fea      	MOV  R30,R26
001cc4 f40e      	BRTC __MODB212
001cc5 95e1      	NEG  R30
                 __MODB212:
001cc6 9508      	RET
                 
                 __MODW21:
001cc7 94e8      	CLT
001cc8 ffb7      	SBRS R27,7
001cc9 c004      	RJMP __MODW211
001cca 95a0      	COM  R26
001ccb 95b0      	COM  R27
001ccc 9611      	ADIW R26,1
001ccd 9468      	SET
                 __MODW211:
001cce fdf7      	SBRC R31,7
001ccf df84      	RCALL __ANEGW1
001cd0 dfad      	RCALL __DIVW21U
001cd1 01fd      	MOVW R30,R26
001cd2 f40e      	BRTC __MODW212
001cd3 df80      	RCALL __ANEGW1
                 __MODW212:
001cd4 9508      	RET
                 
                 __MODD21U:
001cd5 dfc0      	RCALL __DIVD21U
001cd6 01fd      	MOVW R30,R26
001cd7 01bc      	MOVW R22,R24
001cd8 9508      	RET
                 
                 __CHKSIGNB:
001cd9 94e8      	CLT
001cda ffe7      	SBRS R30,7
001cdb c002      	RJMP __CHKSB1
001cdc 95e1      	NEG  R30
001cdd 9468      	SET
                 __CHKSB1:
001cde ffa7      	SBRS R26,7
001cdf c004      	RJMP __CHKSB2
001ce0 95a1      	NEG  R26
001ce1 f800      	BLD  R0,0
001ce2 9403      	INC  R0
001ce3 fa00      	BST  R0,0
                 __CHKSB2:
001ce4 9508      	RET
                 
                 __CHKSIGNW:
001ce5 94e8      	CLT
001ce6 fff7      	SBRS R31,7
001ce7 c002      	RJMP __CHKSW1
001ce8 df6b      	RCALL __ANEGW1
001ce9 9468      	SET
                 __CHKSW1:
001cea ffb7      	SBRS R27,7
001ceb c006      	RJMP __CHKSW2
001cec 95a0      	COM  R26
001ced 95b0      	COM  R27
001cee 9611      	ADIW R26,1
001cef f800      	BLD  R0,0
001cf0 9403      	INC  R0
001cf1 fa00      	BST  R0,0
                 __CHKSW2:
001cf2 9508      	RET
                 
                 __GETW1P:
001cf3 91ed      	LD   R30,X+
001cf4 91fc      	LD   R31,X
001cf5 9711      	SBIW R26,1
001cf6 9508      	RET
                 
                 __GETD1P:
001cf7 91ed      	LD   R30,X+
001cf8 91fd      	LD   R31,X+
001cf9 916d      	LD   R22,X+
001cfa 917c      	LD   R23,X
001cfb 9713      	SBIW R26,3
001cfc 9508      	RET
                 
                 __GETD1P_INC:
001cfd 91ed      	LD   R30,X+
001cfe 91fd      	LD   R31,X+
001cff 916d      	LD   R22,X+
001d00 917d      	LD   R23,X+
001d01 9508      	RET
                 
                 __PUTDP1:
001d02 93ed      	ST   X+,R30
001d03 93fd      	ST   X+,R31
001d04 936d      	ST   X+,R22
001d05 937c      	ST   X,R23
001d06 9508      	RET
                 
                 __PUTDP1_DEC:
001d07 937e      	ST   -X,R23
001d08 936e      	ST   -X,R22
001d09 93fe      	ST   -X,R31
001d0a 93ee      	ST   -X,R30
001d0b 9508      	RET
                 
                 __GETD1S0:
001d0c 81e8      	LD   R30,Y
001d0d 81f9      	LDD  R31,Y+1
001d0e 816a      	LDD  R22,Y+2
001d0f 817b      	LDD  R23,Y+3
001d10 9508      	RET
                 
                 __GETD2S0:
001d11 81a8      	LD   R26,Y
001d12 81b9      	LDD  R27,Y+1
001d13 818a      	LDD  R24,Y+2
001d14 819b      	LDD  R25,Y+3
001d15 9508      	RET
                 
                 __PUTD1S0:
001d16 83e8      	ST   Y,R30
001d17 83f9      	STD  Y+1,R31
001d18 836a      	STD  Y+2,R22
001d19 837b      	STD  Y+3,R23
001d1a 9508      	RET
                 
                 __PUTPARD1:
001d1b 937a      	ST   -Y,R23
001d1c 936a      	ST   -Y,R22
001d1d 93fa      	ST   -Y,R31
001d1e 93ea      	ST   -Y,R30
001d1f 9508      	RET
                 
                 __PUTPARD2:
001d20 939a      	ST   -Y,R25
001d21 938a      	ST   -Y,R24
001d22 93ba      	ST   -Y,R27
001d23 93aa      	ST   -Y,R26
001d24 9508      	RET
                 
                 __SWAPD12:
001d25 2e18      	MOV  R1,R24
001d26 2f86      	MOV  R24,R22
001d27 2d61      	MOV  R22,R1
001d28 2e19      	MOV  R1,R25
001d29 2f97      	MOV  R25,R23
001d2a 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
001d2b 2e1b      	MOV  R1,R27
001d2c 2fbf      	MOV  R27,R31
001d2d 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
001d2e 2e1a      	MOV  R1,R26
001d2f 2fae      	MOV  R26,R30
001d30 2de1      	MOV  R30,R1
001d31 9508      	RET
                 
                 __EEPROMRDD:
001d32 9612      	ADIW R26,2
001d33 d002      	RCALL __EEPROMRDW
001d34 01bf      	MOVW R22,R30
001d35 9712      	SBIW R26,2
                 
                 __EEPROMRDW:
001d36 9611      	ADIW R26,1
001d37 d002      	RCALL __EEPROMRDB
001d38 2ffe      	MOV  R31,R30
001d39 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
001d3a 99e1      	SBIC EECR,EEWE
001d3b cffe      	RJMP __EEPROMRDB
001d3c 93ff      	PUSH R31
001d3d b7ff      	IN   R31,SREG
001d3e 94f8      	CLI
001d3f bbae      	OUT  EEARL,R26
001d40 bbbf      	OUT  EEARH,R27
001d41 9ae0      	SBI  EECR,EERE
001d42 b3ed      	IN   R30,EEDR
001d43 bfff      	OUT  SREG,R31
001d44 91ff      	POP  R31
001d45 9508      	RET
                 
                 __CPD10:
001d46 9730      	SBIW R30,0
001d47 4060      	SBCI R22,0
001d48 4070      	SBCI R23,0
001d49 9508      	RET
                 
                 __CPW02:
001d4a 2400      	CLR  R0
001d4b 160a      	CP   R0,R26
001d4c 060b      	CPC  R0,R27
001d4d 9508      	RET
                 
                 __CPD02:
001d4e 2400      	CLR  R0
001d4f 160a      	CP   R0,R26
001d50 060b      	CPC  R0,R27
001d51 0608      	CPC  R0,R24
001d52 0609      	CPC  R0,R25
001d53 9508      	RET
                 
                 __CPD12:
001d54 17ea      	CP   R30,R26
001d55 07fb      	CPC  R31,R27
001d56 0768      	CPC  R22,R24
001d57 0779      	CPC  R23,R25
001d58 9508      	RET
                 
                 __SAVELOCR6:
001d59 935a      	ST   -Y,R21
                 __SAVELOCR5:
001d5a 934a      	ST   -Y,R20
                 __SAVELOCR4:
001d5b 933a      	ST   -Y,R19
                 __SAVELOCR3:
001d5c 932a      	ST   -Y,R18
                 __SAVELOCR2:
001d5d 931a      	ST   -Y,R17
001d5e 930a      	ST   -Y,R16
001d5f 9508      	RET
                 
                 __LOADLOCR6:
001d60 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
001d61 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
001d62 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
001d63 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
001d64 8119      	LDD  R17,Y+1
001d65 8108      	LD   R16,Y
001d66 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  88 r1 :  40 r2 :   1 r3 :   0 r4 :   6 r5 :   2 r6 :   4 r7 :   3 
r8 :   3 r9 :   0 r10:   4 r11:   2 r12:   1 r13:   7 r14:   0 r15:   6 
r16: 137 r17: 130 r18:  66 r19:  48 r20:  69 r21: 101 r22: 223 r23: 200 
r24: 134 r25: 111 r26: 550 r27: 281 r28:  64 r29:   5 r30:1192 r31: 548 
x  :  90 y  : 808 z  :  34 
Registers used: 32 out of 35 (91.4%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  40 add   :  34 
adiw  :  73 and   :   5 andi  :  14 asr   :   0 bclr  :   0 bld   :   5 
brbc  :   0 brbs  :   0 brcc  :  15 brcs  :   1 break :   0 breq  :  74 
brge  :  16 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  32 
brlt  :   5 brmi  :  11 brne  : 144 brpl  :  10 brsh  :  14 brtc  :   6 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   6 call  : 754 
cbi   :   9 cbr   :   1 clc   :   3 clh   :   0 cli   :   3 cln   :   0 
clr   :  75 cls   :   0 clt   :   7 clv   :   0 clz   :   2 com   :  12 
cp    :  36 cpc   :  94 cpi   : 144 cpse  :   0 dec   :  15 des   :   0 
elpm  :   0 eor   :   8 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 
ijmp  :   0 in    :  15 inc   :   5 jmp   :  67 ld    : 124 ldd   : 371 
ldi   : 858 lds   : 182 lpm   :  12 lsl   :  26 lsr   :   5 mov   :  99 
movw  : 124 mul   :  11 muls  :   0 mulsu :   0 neg   :  11 nop   :   0 
or    :   8 ori   :  16 out   :  52 pop   :  43 push  :  43 rcall :  75 
ret   : 212 reti  :   3 rjmp  : 259 rol   :  40 ror   :  17 sbc   :  16 
sbci  :  43 sbi   :  17 sbic  :  10 sbis  :   3 sbiw  :  59 sbr   :   5 
sbrc  :   5 sbrs  :  23 sec   :   5 seh   :   0 sei   :   3 sen   :   0 
ser   :   8 ses   :   0 set   :   7 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    : 326 std   : 100 sts   : 219 sub   :  10 subi  :  78 
swap  :   0 tst   :  26 wdr   :   1 
Instructions used: 82 out of 117 (70.1%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x003ace  13092   1962  15054  131072  11.5%
[.dseg] 0x000100 0x0009ec      0   1004   1004    4351  23.1%
[.eseg] 0x000000 0x00000c      0     12     12    4096   0.3%

Assembly complete, 0 errors, 17 warnings
