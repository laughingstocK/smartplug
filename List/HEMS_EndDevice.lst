
AVRASM ver. 2.1.30  C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm Fri Oct 27 17:14:09 2017

C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1074): warning: Register r5 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1075): warning: Register r4 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1076): warning: Register r6 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1077): warning: Register r8 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1078): warning: Register r10 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1079): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128A
                 ;Program type             : Application
                 ;Clock frequency          : 11.059200 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : float, width, precision
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1280 byte(s)
                 ;Heap size                : 1024 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0500
                 	.EQU __HEAP_SIZE=0x0400
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _error=R5
                 	.DEF _read_D_SW=R4
                 	.DEF _start_event=R6
                 	.DEF _counter=R8
                 	.DEF _e=R10
                 	.DEF _rx_wr_index1=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 040d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0734 	JMP  _timer1_ovf_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0726 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 07d8 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0753 	JMP  _timer3_ovf_isr
00003c 940c 080b 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000046 0000      	.DW  0x0000
                 
                 ;HEAP START MARKER INITIALIZATION
                 __HEAP_START_MARKER:
000047 0000
000048 0000      	.DW  0,0
                 
                 _0x3:
000049 0000
00004a 0000
00004b 0000
00004c 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004d ff00
00004e ffff
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1134): warning: .cseg .db misalignment - padding zero byte
00004f 00ff      	.DB  0x0,0xFF,0xFF,0xFF,0xFF
                 _0x4F:
000050 0000
000051 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x0:
000052 5645
000053 4e45
000054 2054
000055 203d      	.DB  0x45,0x56,0x45,0x4E,0x54,0x20,0x3D,0x20
000056 6425
000057 0a0d
000058 6300
000059 756f      	.DB  0x25,0x64,0xD,0xA,0x0,0x63,0x6F,0x75
00005a 746e
00005b 655f
00005c 6576
00005d 746e      	.DB  0x6E,0x74,0x5F,0x65,0x76,0x65,0x6E,0x74
00005e 3d20
00005f 2520
000060 0d64
000061 000a      	.DB  0x20,0x3D,0x20,0x25,0x64,0xD,0xA,0x0
000062 0a0d
000063 2b2b
000064 2b2b
000065 2b2b      	.DB  0xD,0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000066 2b2b
000067 2b2b
000068 5320
000069 616d      	.DB  0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x6D,0x61
00006a 7472
00006b 5320
00006c 6977
00006d 6374      	.DB  0x72,0x74,0x20,0x53,0x77,0x69,0x74,0x63
00006e 2068
00006f 2b2b
000070 2b2b
000071 2b2b      	.DB  0x68,0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000072 2b2b
000073 2b2b
000074 0a0d
000075 0d00      	.DB  0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0,0xD
000076 460a
000077 7269
000078 776d
000079 7261      	.DB  0xA,0x46,0x69,0x72,0x6D,0x77,0x61,0x72
00007a 2065
00007b 6556
00007c 7372
00007d 6f69      	.DB  0x65,0x20,0x56,0x65,0x72,0x73,0x69,0x6F
00007e 206e
00007f 203a
000080 3025
000081 312e      	.DB  0x6E,0x20,0x3A,0x20,0x25,0x30,0x2E,0x31
000082 0d66
000083 000a
000084 7543
000085 7272      	.DB  0x66,0xD,0xA,0x0,0x43,0x75,0x72,0x72
000086 6e65
000087 2074
000088 6553
000089 736e      	.DB  0x65,0x6E,0x74,0x20,0x53,0x65,0x6E,0x73
00008a 726f
00008b 2020
00008c 3a20
00008d 4120      	.DB  0x6F,0x72,0x20,0x20,0x20,0x3A,0x20,0x41
00008e 5343
00008f 3137
000090 4532
000091 434c      	.DB  0x43,0x53,0x37,0x31,0x32,0x45,0x4C,0x43
000092 5254
000093 302d
000094 4235
000095 542d      	.DB  0x54,0x52,0x2D,0x30,0x35,0x42,0x2D,0x54
000096 2820
000097 3025
000098 312e
000099 2066      	.DB  0x20,0x28,0x25,0x30,0x2E,0x31,0x66,0x20
00009a 566d
00009b 412f
00009c 706d
00009d 292e      	.DB  0x6D,0x56,0x2F,0x41,0x6D,0x70,0x2E,0x29
00009e 0a0d
00009f 0d00
0000a0 2b0a
0000a1 2b2b      	.DB  0xD,0xA,0x0,0xD,0xA,0x2B,0x2B,0x2B
0000a2 2b2b
0000a3 2b2b
0000a4 2b2b
0000a5 202b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
0000a6 6d53
0000a7 7261
0000a8 2074
0000a9 6c50      	.DB  0x53,0x6D,0x61,0x72,0x74,0x20,0x50,0x6C
0000aa 6775
0000ab 2b20
0000ac 2b2b
0000ad 2b2b      	.DB  0x75,0x67,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
0000ae 2b2b
0000af 2b2b
0000b0 0d2b
0000b1 000a      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0
0000b2 7543
0000b3 7272
0000b4 6e65
0000b5 2074      	.DB  0x43,0x75,0x72,0x72,0x65,0x6E,0x74,0x20
0000b6 6553
0000b7 736e
0000b8 726f
0000b9 2020      	.DB  0x53,0x65,0x6E,0x73,0x6F,0x72,0x20,0x20
0000ba 3a20
0000bb 4120
0000bc 5343
0000bd 3137      	.DB  0x20,0x3A,0x20,0x41,0x43,0x53,0x37,0x31
0000be 4532
0000bf 434c
0000c0 5254
0000c1 322d      	.DB  0x32,0x45,0x4C,0x43,0x54,0x52,0x2D,0x32
0000c2 4130
0000c3 542d
0000c4 2820
0000c5 3025      	.DB  0x30,0x41,0x2D,0x54,0x20,0x28,0x25,0x30
0000c6 312e
0000c7 2066
0000c8 566d
0000c9 412f      	.DB  0x2E,0x31,0x66,0x20,0x6D,0x56,0x2F,0x41
0000ca 706d
0000cb 292e
0000cc 0a0d
0000cd 0d00      	.DB  0x6D,0x70,0x2E,0x29,0xD,0xA,0x0,0xD
0000ce 2b0a
0000cf 2b2b
0000d0 2b2b
0000d1 2b2b      	.DB  0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000d2 2b2b
0000d3 202b
0000d4 6d53
0000d5 7261      	.DB  0x2B,0x2B,0x2B,0x20,0x53,0x6D,0x61,0x72
0000d6 2074
0000d7 7242
0000d8 6165
0000d9 656b      	.DB  0x74,0x20,0x42,0x72,0x65,0x61,0x6B,0x65
0000da 2072
0000db 2b2b
0000dc 2b2b
0000dd 2b2b      	.DB  0x72,0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000de 2b2b
0000df 2b2b
0000e0 0a0d
0000e1 4300      	.DB  0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0,0x43
0000e2 7275
0000e3 6572
0000e4 746e
0000e5 5320      	.DB  0x75,0x72,0x72,0x65,0x6E,0x74,0x20,0x53
0000e6 6e65
0000e7 6f73
0000e8 2072
0000e9 2020      	.DB  0x65,0x6E,0x73,0x6F,0x72,0x20,0x20,0x20
0000ea 203a
0000eb 4341
0000ec 3753
0000ed 3231      	.DB  0x3A,0x20,0x41,0x43,0x53,0x37,0x31,0x32
0000ee 4c45
0000ef 5443
0000f0 2d52
0000f1 3033      	.DB  0x45,0x4C,0x43,0x54,0x52,0x2D,0x33,0x30
0000f2 2d41
0000f3 2054
0000f4 2528
0000f5 2e30      	.DB  0x41,0x2D,0x54,0x20,0x28,0x25,0x30,0x2E
0000f6 6631
0000f7 6d20
0000f8 2f56
0000f9 6d41      	.DB  0x31,0x66,0x20,0x6D,0x56,0x2F,0x41,0x6D
0000fa 2e70
0000fb 0d29
0000fc 000a
0000fd 6552      	.DB  0x70,0x2E,0x29,0xD,0xA,0x0,0x52,0x65
0000fe 6461
0000ff 4420
000100 7069
000101 532d      	.DB  0x61,0x64,0x20,0x44,0x69,0x70,0x2D,0x53
000102 6977
000103 6374
000104 2068
000105 5245      	.DB  0x77,0x69,0x74,0x63,0x68,0x20,0x45,0x52
000106 4f52
000107 2152
000108 0a0d
000109 0d00      	.DB  0x52,0x4F,0x52,0x21,0xD,0xA,0x0,0xD
00010a 2b0a
00010b 2b2b
00010c 2b2b
00010d 2b2b      	.DB  0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
00010e 2b2b
00010f 202b
000110 6544
000111 6166      	.DB  0x2B,0x2B,0x2B,0x20,0x44,0x65,0x66,0x61
000112 6c75
000113 2074
000114 7954
000115 6570      	.DB  0x75,0x6C,0x74,0x20,0x54,0x79,0x70,0x65
000116 3a20
000117 5320
000118 616d
000119 7472      	.DB  0x20,0x3A,0x20,0x53,0x6D,0x61,0x72,0x74
00011a 5320
00011b 6977
00011c 6374
00011d 2068      	.DB  0x20,0x53,0x77,0x69,0x74,0x63,0x68,0x20
00011e 2b2b
00011f 2b2b
000120 2b2b
000121 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000122 2b2b
000123 0a0d
000124 4300
000125 7275      	.DB  0x2B,0x2B,0xD,0xA,0x0,0x43,0x75,0x72
000126 6572
000127 746e
000128 4d20
000129 6165      	.DB  0x72,0x65,0x6E,0x74,0x20,0x4D,0x65,0x61
00012a 7573
00012b 6572
00012c 2020
00012d 203a      	.DB  0x73,0x75,0x72,0x65,0x20,0x20,0x3A,0x20
00012e 203e
00012f 3025
000130 322e
000131 2066      	.DB  0x3E,0x20,0x25,0x30,0x2E,0x32,0x66,0x20
000132 6d41
000133 2e70
000134 0a0d
000135 0d00      	.DB  0x41,0x6D,0x70,0x2E,0xD,0xA,0x0,0xD
000136 2d0a
000137 2d2d
000138 2d2d
000139 2d2d      	.DB  0xA,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00013a 202d
00013b 6e49
00013c 7469
00013d 6169      	.DB  0x2D,0x20,0x49,0x6E,0x69,0x74,0x69,0x61
00013e 206c
00013f 6f43
000140 706d
000141 656c      	.DB  0x6C,0x20,0x43,0x6F,0x6D,0x70,0x6C,0x65
000142 6574
000143 2d20
000144 2d2d
000145 2d2d      	.DB  0x74,0x65,0x20,0x2D,0x2D,0x2D,0x2D,0x2D
000146 2d2d
000147 0d2d
000148 000a
000149 0a0d      	.DB  0x2D,0x2D,0x2D,0xD,0xA,0x0,0xD,0xA
00014a 2d2d
00014b 2d2d
00014c 2d2d
00014d 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00014e 5320
00014f 6174
000150 7472
000151 5020      	.DB  0x20,0x53,0x74,0x61,0x72,0x74,0x20,0x50
000152 6f72
000153 7267
000154 6d61
000155 2d20      	.DB  0x72,0x6F,0x67,0x72,0x61,0x6D,0x20,0x2D
000156 2d2d
000157 2d2d
000158 2d2d
000159 0d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD
00015a 000a
00015b 0a0d
00015c 2d2d
00015d 2d2d      	.DB  0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D,0x2D
00015e 2d2d
00015f 2d2d
000160 4920
000161 6c64      	.DB  0x2D,0x2D,0x2D,0x2D,0x20,0x49,0x64,0x6C
000162 2065
000163 2d2d
000164 2d2d
000165 2d2d      	.DB  0x65,0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000166 2d2d
000167 0a0d
000168 0d00
000169 2d0a      	.DB  0x2D,0x2D,0xD,0xA,0x0,0xD,0xA,0x2D
00016a 2d2d
00016b 2d2d
00016c 2d2d
00016d 202d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x20
00016e 4547
00016f 2054
000170 5645
000171 4e45      	.DB  0x47,0x45,0x54,0x20,0x45,0x56,0x45,0x4E
000172 2054
000173 2d2d
000174 2d2d
000175 2d2d      	.DB  0x54,0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000176 2d2d
000177 0a0d
000178 6300
000179 756f      	.DB  0x2D,0x2D,0xD,0xA,0x0,0x63,0x6F,0x75
00017a 746e
00017b 695f
00017c 706e
00017d 7475      	.DB  0x6E,0x74,0x5F,0x69,0x6E,0x70,0x75,0x74
00017e 3d20
00017f 2520
000180 0d64
000181 000a      	.DB  0x20,0x3D,0x20,0x25,0x64,0xD,0xA,0x0
000182 0a0d
000183 2d2d
000184 2d2d
000185 2d2d      	.DB  0xD,0xA,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000186 2d2d
000187 4120
000188 7463
000189 7669      	.DB  0x2D,0x2D,0x20,0x41,0x63,0x74,0x69,0x76
00018a 2065
00018b 2d2d
00018c 2d2d
00018d 2d2d      	.DB  0x65,0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00018e 2d2d
00018f 0a0d
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1217): warning: .cseg .db misalignment - padding zero byte
000190 0000      	.DB  0x2D,0x2D,0xD,0xA,0x0
                 _0x20000:
000191 3025
000192 6435
000193 2020
000194 0020      	.DB  0x25,0x30,0x35,0x64,0x20,0x20,0x20,0x0
000195 3025
000196 5832
000197 0020
000198 6325      	.DB  0x25,0x30,0x32,0x58,0x20,0x0,0x25,0x63
000199 2e00
00019a 0d00
00019b 000a      	.DB  0x0,0x2E,0x0,0xD,0xA,0x0
                 _0x60000:
00019c 4157
00019d 4e52
00019e 4e49
00019f 2047      	.DB  0x57,0x41,0x52,0x4E,0x49,0x4E,0x47,0x20
0001a0 203a
0001a1 4155
0001a2 5452
0001a3 2030      	.DB  0x3A,0x20,0x55,0x41,0x52,0x54,0x30,0x20
0001a4 5542
0001a5 4646
0001a6 5245
0001a7 4f20      	.DB  0x42,0x55,0x46,0x46,0x45,0x52,0x20,0x4F
0001a8 4556
0001a9 4652
0001aa 4f4c
0001ab 2057      	.DB  0x56,0x45,0x52,0x46,0x4C,0x4F,0x57,0x20
0001ac 6425
0001ad 0a0d
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1227): warning: .cseg .db misalignment - padding zero byte
0001ae 0000      	.DB  0x25,0x64,0xD,0xA,0x0
                 _0x80003:
0001af 007e
0001b0 0804
0001b1 4101
0001b2 6c49      	.DB  0x7E,0x0,0x4,0x8,0x1,0x41,0x49,0x6C
                 _0x80004:
0001b3 007e
0001b4 0804
0001b5 5301
0001b6 574c      	.DB  0x7E,0x0,0x4,0x8,0x1,0x53,0x4C,0x57
                 _0x80005:
0001b7 007e
0001b8 0804
0001b9 5301
0001ba 5b48      	.DB  0x7E,0x0,0x4,0x8,0x1,0x53,0x48,0x5B
                 _0x80006:
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1235): warning: .cseg .db misalignment - padding zero byte
0001bb 0003      	.DB  0x3
                 _0x80000:
0001bc 0a0d
0001bd 2b20
0001be 2b2b
0001bf 2b2b      	.DB  0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
0001c0 2b2b
0001c1 2b2b
0001c2 202b
0001c3 6553      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x65
0001c4 646e
0001c5 4120
0001c6 2049
0001c7 2b2b      	.DB  0x6E,0x64,0x20,0x41,0x49,0x20,0x2B,0x2B
0001c8 2b2b
0001c9 2b2b
0001ca 2b2b
0001cb 0a0d      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA
0001cc 0d00
0001cd 200a
0001ce 2b2b
0001cf 2b2b      	.DB  0x0,0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B
0001d0 2b2b
0001d1 2b2b
0001d2 2b2b
0001d3 5320      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53
0001d4 6e65
0001d5 2064
0001d6 4853
0001d7 2b20      	.DB  0x65,0x6E,0x64,0x20,0x53,0x48,0x20,0x2B
0001d8 2b2b
0001d9 2b2b
0001da 2b2b
0001db 0d2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD
0001dc 000a
0001dd 0a0d
0001de 2b20
0001df 2b2b      	.DB  0xA,0x0,0xD,0xA,0x20,0x2B,0x2B,0x2B
0001e0 2b2b
0001e1 2b2b
0001e2 2b2b
0001e3 202b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
0001e4 6553
0001e5 646e
0001e6 5320
0001e7 204c      	.DB  0x53,0x65,0x6E,0x64,0x20,0x53,0x4C,0x20
0001e8 2b2b
0001e9 2b2b
0001ea 2b2b
0001eb 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0001ec 0a0d
0001ed 0d00
0001ee 200a
0001ef 2b2b      	.DB  0xD,0xA,0x0,0xD,0xA,0x20,0x2B,0x2B
0001f0 2b2b
0001f1 2b2b
0001f2 2b2b
0001f3 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0001f4 5220
0001f5 6365
0001f6 6572
0001f7 7669      	.DB  0x20,0x52,0x65,0x63,0x72,0x65,0x69,0x76
0001f8 2065
0001f9 6144
0001fa 6174
0001fb 2b20      	.DB  0x65,0x20,0x44,0x61,0x74,0x61,0x20,0x2B
0001fc 2b2b
0001fd 2b2b
0001fe 2b2b
0001ff 0d2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD
000200 000a
000201 0a0d
000202 2d2d
000203 2d2d      	.DB  0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D,0x2D
000204 2d2d
000205 2d2d
000206 4a20
000207 494f      	.DB  0x2D,0x2D,0x2D,0x2D,0x20,0x4A,0x4F,0x49
000208 544e
000209 5320
00020a 4355
00020b 4543      	.DB  0x4E,0x54,0x20,0x53,0x55,0x43,0x43,0x45
00020c 5353
00020d 2d20
00020e 2d2d
00020f 2d2d      	.DB  0x53,0x53,0x20,0x2D,0x2D,0x2D,0x2D,0x2D
000210 2d2d
000211 0d2d
000212 000a
000213 0a0d      	.DB  0x2D,0x2D,0x2D,0xD,0xA,0x0,0xD,0xA
000214 2d2d
000215 2d2d
000216 2d2d
000217 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000218 5220
000219 4345
00021a 5649
00021b 2045      	.DB  0x20,0x52,0x45,0x43,0x49,0x56,0x45,0x20
00021c 4950
00021d 474e
00021e 2d20
00021f 2d2d      	.DB  0x50,0x49,0x4E,0x47,0x20,0x2D,0x2D,0x2D
000220 2d2d
000221 2d2d
000222 0d2d
000223 000a      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0xD,0xA,0x0
000224 0a0d
000225 2b20
000226 2b2b
000227 2b2b      	.DB  0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
000228 2b2b
000229 2b2b
00022a 202b
00022b 655f      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x5F,0x65
00022c 6576
00022d 746e
00022e 3d20
00022f 203d      	.DB  0x76,0x65,0x6E,0x74,0x20,0x3D,0x3D,0x20
000230 3135
000231 2030
000232 7c7c
000233 5f20      	.DB  0x35,0x31,0x30,0x20,0x7C,0x7C,0x20,0x5F
000234 7665
000235 6e65
000236 2074
000237 3d3d      	.DB  0x65,0x76,0x65,0x6E,0x74,0x20,0x3D,0x3D
000238 3520
000239 3131
00023a 2b20
00023b 2b2b      	.DB  0x20,0x35,0x31,0x31,0x20,0x2B,0x2B,0x2B
00023c 2b2b
00023d 2b2b
00023e 0d2b
00023f 000a      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0
000240 0a0d
000241 2d2d
000242 2d2d
000243 2d2d      	.DB  0xD,0xA,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000244 2d2d
000245 5220
000246 4345
000247 5649      	.DB  0x2D,0x2D,0x20,0x52,0x45,0x43,0x49,0x56
000248 2045
000249 5645
00024a 4e45
00024b 2054      	.DB  0x45,0x20,0x45,0x56,0x45,0x4E,0x54,0x20
00024c 2d2d
00024d 2d2d
00024e 2d2d
00024f 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000250 0a0d
000251 0d00
000252 2d0a
000253 2d2d      	.DB  0xD,0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D
000254 2d2d
000255 2d2d
000256 202d
000257 4553      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x20,0x53,0x45
000258 444e
000259 4520
00025a 4556
00025b 544e      	.DB  0x4E,0x44,0x20,0x45,0x56,0x45,0x4E,0x54
00025c 5320
00025d 4355
00025e 4543
00025f 5353      	.DB  0x20,0x53,0x55,0x43,0x43,0x45,0x53,0x53
000260 2d20
000261 2d2d
000262 2d2d
000263 2d2d      	.DB  0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000264 0d2d
000265 000a
000266 0a0d
000267 2d2d      	.DB  0x2D,0xD,0xA,0x0,0xD,0xA,0x2D,0x2D
000268 2d2d
000269 2d2d
00026a 2d2d
00026b 5320      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x20,0x53
00026c 4e45
00026d 2044
00026e 4552
00026f 4f50      	.DB  0x45,0x4E,0x44,0x20,0x52,0x45,0x50,0x4F
000270 5452
000271 5320
000272 4355
000273 4543      	.DB  0x52,0x54,0x20,0x53,0x55,0x43,0x43,0x45
000274 5353
000275 2d20
000276 2d2d
000277 2d2d      	.DB  0x53,0x53,0x20,0x2D,0x2D,0x2D,0x2D,0x2D
000278 2d2d
000279 0d2d
00027a 000a      	.DB  0x2D,0x2D,0x2D,0xD,0xA,0x0
                 _0xC0003:
00027b 007e
00027c 1023
00027d 0001
00027e 0000      	.DB  0x7E,0x0,0x23,0x10,0x1,0x0,0x0,0x0
00027f 0000
000280 0000
000281 ff00
000282 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
000283 3000
000284 0000
000285 0000
000286 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
000287 0000
000288 0000
000289 0000
00028a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00028b 0000
00028c 007e
00028d a101      	.DB  0x0,0x0,0x7E,0x0,0x1,0xA1
                 _0xC0004:
00028e 007e
00028f 1023
000290 0001
000291 0000      	.DB  0x7E,0x0,0x23,0x10,0x1,0x0,0x0,0x0
000292 0000
000293 0000
000294 ff00
000295 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
000296 3000
000297 0000
000298 0000
000299 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
00029a 0000
00029b 0000
00029c 0000
00029d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00029e 0000
00029f 007e
0002a0 a401      	.DB  0x0,0x0,0x7E,0x0,0x1,0xA4
                 _0xC0005:
0002a1 007e
0002a2 1025
0002a3 0001
0002a4 0000      	.DB  0x7E,0x0,0x25,0x10,0x1,0x0,0x0,0x0
0002a5 0000
0002a6 0000
0002a7 ff00
0002a8 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
0002a9 3000
0002aa 0000
0002ab 0000
0002ac 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
0002ad 0000
0002ae 0000
0002af 0000
0002b0 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0002b1 0000
0002b2 007e
0002b3 a501
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1302): warning: .cseg .db misalignment - padding zero byte
0002b4 0001      	.DB  0x0,0x0,0x7E,0x0,0x1,0xA5,0x1
                 _0xC0006:
0002b5 007e
0002b6 1048
0002b7 0001
0002b8 0000      	.DB  0x7E,0x0,0x48,0x10,0x1,0x0,0x0,0x0
0002b9 0000
0002ba 0000
0002bb ff00
0002bc 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
0002bd 3000
0002be 0000
0002bf 0000
0002c0 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
0002c1 0000
0002c2 0000
0002c3 0000
0002c4 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0002c5 0000
0002c6 007e
0002c7 a726
0002c8 0101      	.DB  0x0,0x0,0x7E,0x0,0x26,0xA7,0x1,0x1
0002c9 0000
0002ca 0000
0002cb 0000
0002cc 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0002cd 0002
0002ce 0000
0002cf 0000
0002d0 0000      	.DB  0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0002d1 0300
0002d2 0000
0002d3 0000
0002d4 0000      	.DB  0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0
0002d5 0000
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1312): warning: .cseg .db misalignment - padding zero byte
0002d6 0004      	.DB  0x0,0x0,0x4
                 _0xC0000:
0002d7 0a0d
0002d8 2b20
0002d9 2b2b
0002da 2b2b      	.DB  0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
0002db 2b2b
0002dc 2b2b
0002dd 202b
0002de 6553      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x65
0002df 646e
0002e0 4c20
0002e1 4445
0002e2 2b20      	.DB  0x6E,0x64,0x20,0x4C,0x45,0x44,0x20,0x2B
0002e3 2b2b
0002e4 2b2b
0002e5 2b2b
0002e6 0d2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD
0002e7 000a
0002e8 0a0d
0002e9 2b20
0002ea 2b2b      	.DB  0xA,0x0,0xD,0xA,0x20,0x2B,0x2B,0x2B
0002eb 2b2b
0002ec 2b2b
0002ed 2b2b
0002ee 202b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
0002ef 6553
0002f0 646e
0002f1 4a20
0002f2 696f      	.DB  0x53,0x65,0x6E,0x64,0x20,0x4A,0x6F,0x69
0002f3 206e
0002f4 2b2b
0002f5 2b2b
0002f6 2b2b      	.DB  0x6E,0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0002f7 2b2b
0002f8 0a0d
0002f9 0d00
0002fa 200a      	.DB  0x2B,0x2B,0xD,0xA,0x0,0xD,0xA,0x20
0002fb 2b2b
0002fc 2b2b
0002fd 2b2b
0002fe 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0002ff 2b2b
000300 5320
000301 6e65
000302 2064      	.DB  0x2B,0x2B,0x20,0x53,0x65,0x6E,0x64,0x20
000303 6950
000304 676e
000305 2b20
000306 2b2b      	.DB  0x50,0x69,0x6E,0x67,0x20,0x2B,0x2B,0x2B
000307 2b2b
000308 2b2b
000309 0d2b
00030a 000a      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0
00030b 0a0d
00030c 2b20
00030d 2b2b
00030e 2b2b      	.DB  0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
00030f 2b2b
000310 2b2b
000311 202b
000312 6553      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x65
000313 646e
000314 4520
000315 4556
000316 544e      	.DB  0x6E,0x64,0x20,0x45,0x56,0x45,0x4E,0x54
000317 5220
000318 4345
000319 5649
00031a 2045      	.DB  0x20,0x52,0x45,0x43,0x49,0x56,0x45,0x20
00031b 2b2b
00031c 2b2b
00031d 2b2b
00031e 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
00031f 0a0d
000320 0d00
000321 200a
000322 2b2b      	.DB  0xD,0xA,0x0,0xD,0xA,0x20,0x2B,0x2B
000323 2b2b
000324 2b2b
000325 2b2b
000326 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000327 5320
000328 6e65
000329 2064
00032a 4552      	.DB  0x20,0x53,0x65,0x6E,0x64,0x20,0x52,0x45
00032b 4f50
00032c 5452
00032d 2b20
00032e 2b2b      	.DB  0x50,0x4F,0x52,0x54,0x20,0x2B,0x2B,0x2B
00032f 2b2b
000330 2b2b
000331 0d2b
000332 000a      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0
000333 0a0d
000334 3d3d
000335 3d3d
000336 3d3d      	.DB  0xD,0xA,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000337 3d3d
000338 3d3d
000339 3d3d
00033a 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00033b 3d3d
00033c 3d3d
00033d 3d3d
00033e 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00033f 3d3d
000340 3d3d
000341 3d3d
000342 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000343 3d3d
000344 3d3d
000345 3d3d
000346 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000347 3d3d
000348 3d3d
000349 3d3d
00034a 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00034b 3d3d
00034c 3d3d
00034d 3d3d
00034e 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00034f 0a0d
000350 5600
000351 7573
000352 206d      	.DB  0xD,0xA,0x0,0x56,0x73,0x75,0x6D,0x20
000353 203d
000354 3025
000355 342e
000356 2066      	.DB  0x3D,0x20,0x25,0x30,0x2E,0x34,0x66,0x20
000357 0020
000358 7349
000359 6d75
00035a 3d20      	.DB  0x20,0x0,0x49,0x73,0x75,0x6D,0x20,0x3D
00035b 2520
00035c 2e30
00035d 6634
00035e 2020      	.DB  0x20,0x25,0x30,0x2E,0x34,0x66,0x20,0x20
00035f 5000
000360 7573
000361 206d
000362 203d      	.DB  0x0,0x50,0x73,0x75,0x6D,0x20,0x3D,0x20
000363 3025
000364 342e
000365 0d66
000366 000a      	.DB  0x25,0x30,0x2E,0x34,0x66,0xD,0xA,0x0
000367 6156
000368 6776
000369 3d20
00036a 2520      	.DB  0x56,0x61,0x76,0x67,0x20,0x3D,0x20,0x25
00036b 2e30
00036c 6634
00036d 2020
00036e 0020      	.DB  0x30,0x2E,0x34,0x66,0x20,0x20,0x20,0x0
00036f 6149
000370 6776
000371 3d20
000372 2520      	.DB  0x49,0x61,0x76,0x67,0x20,0x3D,0x20,0x25
000373 2e30
000374 6634
000375 2020
000376 0020      	.DB  0x30,0x2E,0x34,0x66,0x20,0x20,0x20,0x0
000377 6150
000378 6776
000379 3d20
00037a 2520      	.DB  0x50,0x61,0x76,0x67,0x20,0x3D,0x20,0x25
00037b 2e30
00037c 6634
00037d 0a0d
00037e 5700      	.DB  0x30,0x2E,0x34,0x66,0xD,0xA,0x0,0x57
00037f 7461
000380 2d74
000381 6f48
000382 7275      	.DB  0x61,0x74,0x74,0x2D,0x48,0x6F,0x75,0x72
000383 5320
000384 6d75
000385 3d20
000386 2520      	.DB  0x20,0x53,0x75,0x6D,0x20,0x3D,0x20,0x25
000387 2e30
000388 6634
000389 0a0d
00038a 4e00      	.DB  0x30,0x2E,0x34,0x66,0xD,0xA,0x0,0x4E
00038b 6d75
00038c 6562
00038d 2072
00038e 6153      	.DB  0x75,0x6D,0x62,0x65,0x72,0x20,0x53,0x61
00038f 706d
000390 696c
000391 676e
000392 3d20      	.DB  0x6D,0x70,0x6C,0x69,0x6E,0x67,0x20,0x3D
000393 2520
000394 0d64
000395 000a
000396 3d3d      	.DB  0x20,0x25,0x64,0xD,0xA,0x0,0x3D,0x3D
000397 3d3d
000398 3d3d
000399 3d3d
00039a 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00039b 3d3d
00039c 3d3d
00039d 3d3d
00039e 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00039f 3d3d
0003a0 3d3d
0003a1 3d3d
0003a2 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0003a3 3d3d
0003a4 3d3d
0003a5 3d3d
0003a6 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0003a7 3d3d
0003a8 3d3d
0003a9 3d3d
0003aa 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0003ab 3d3d
0003ac 3d3d
0003ad 3d3d
0003ae 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0003af 3d3d
0003b0 3d3d
0003b1 0a0d
0003b2 0a0d      	.DB  0x3D,0x3D,0x3D,0x3D,0xD,0xA,0xD,0xA
0003b3 4300
0003b4 7275
0003b5 6572
0003b6 746e      	.DB  0x0,0x43,0x75,0x72,0x72,0x65,0x6E,0x74
0003b7 4520
0003b8 6378
0003b9 6565
0003ba 2064      	.DB  0x20,0x45,0x78,0x63,0x65,0x65,0x64,0x20
0003bb 2d2d
0003bc 5753
0003bd 5449
0003be 4843      	.DB  0x2D,0x2D,0x53,0x57,0x49,0x54,0x43,0x48
0003bf 4f20
0003c0 4646
0003c1 0d21
0003c2 000a      	.DB  0x20,0x4F,0x46,0x46,0x21,0xD,0xA,0x0
                 _0xE0003:
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1374): warning: .cseg .db misalignment - padding zero byte
0003c3 0040      	.DB  0x40
                 _0x100003:
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1376): warning: .cseg .db misalignment - padding zero byte
0003c4 0005      	.DB  0x5
                 _0x120003:
0003c5 4000
0003c6 451c      	.DB  0x0,0x40,0x1C,0x45
                 _0x120000:
0003c7 4441
0003c8 2043
0003c9 203d
0003ca 6425      	.DB  0x41,0x44,0x43,0x20,0x3D,0x20,0x25,0x64
0003cb 0a0d
0003cc 5600
0003cd 6c6f
0003ce 2074      	.DB  0xD,0xA,0x0,0x56,0x6F,0x6C,0x74,0x20
0003cf 203d
0003d0 6625
0003d1 0a0d
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1382): warning: .cseg .db misalignment - padding zero byte
0003d2 0000      	.DB  0x3D,0x20,0x25,0x66,0xD,0xA,0x0
                 _0x2000060:
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1384): warning: .cseg .db misalignment - padding zero byte
0003d3 0001      	.DB  0x1
                 _0x2000000:
0003d4 4e2d
0003d5 4e41
0003d6 4900
0003d7 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1387): warning: .cseg .db misalignment - padding zero byte
0003d8 0000      	.DB  0x0
                 _0x2020000:
0003d9 4e2d
0003da 4e41
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1389): warning: .cseg .db misalignment - padding zero byte
0003db 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 
                 __GLOBAL_INI_TBL:
0003dc 0001      	.DW  0x01
0003dd 0002      	.DW  0x02
0003de 008c      	.DW  __REG_BIT_VARS*2
                 
0003df 0004      	.DW  0x04
0003e0 0d00      	.DW  0xD00
0003e1 008e      	.DW  __HEAP_START_MARKER*2
                 
0003e2 000d      	.DW  0x0D
0003e3 08df      	.DW  _specData
0003e4 0092      	.DW  _0x3*2
                 
0003e5 0004      	.DW  0x04
0003e6 0008      	.DW  0x08
0003e7 00a0      	.DW  _0x4F*2
                 
0003e8 0008      	.DW  0x08
0003e9 0914      	.DW  _AI_COMMAND
0003ea 035e      	.DW  _0x80003*2
                 
0003eb 0008      	.DW  0x08
0003ec 091c      	.DW  _SL_COMMAND
0003ed 0366      	.DW  _0x80004*2
                 
0003ee 0008      	.DW  0x08
0003ef 0924      	.DW  _SH_COMMAND
0003f0 036e      	.DW  _0x80005*2
                 
0003f1 0001      	.DW  0x01
0003f2 0893      	.DW  _event_state
0003f3 0376      	.DW  _0x80006*2
                 
0003f4 0026      	.DW  0x26
0003f5 092e      	.DW  _JOIN_A1
0003f6 04f6      	.DW  _0xC0003*2
                 
0003f7 0026      	.DW  0x26
0003f8 0955      	.DW  _PING_A4
0003f9 051c      	.DW  _0xC0004*2
                 
0003fa 0027      	.DW  0x27
0003fb 097c      	.DW  _SEND_EVENT_
0003fc 0542      	.DW  _0xC0005*2
                 
0003fd 0043      	.DW  0x43
0003fe 09a5      	.DW  _SEND_REPORT_
0003ff 056a      	.DW  _0xC0006*2
                 
000400 0001      	.DW  0x01
000401 0a11      	.DW  _Vreferent
000402 0786      	.DW  _0xE0003*2
                 
000403 0001      	.DW  0x01
000404 08de      	.DW  _Eaddress
000405 0788      	.DW  _0x100003*2
                 
000406 0004      	.DW  0x04
000407 0840      	.DW  _avg
000408 078a      	.DW  _0x120003*2
                 
000409 0001      	.DW  0x01
00040a 0a12      	.DW  __seed_G100
00040b 07a6      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
00040c 0000      	.DW  0
                 
                 __RESET:
00040d 94f8      	CLI
00040e 27ee      	CLR  R30
00040f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000410 e0f1      	LDI  R31,1
000411 bff5      	OUT  MCUCR,R31
000412 bfe5      	OUT  MCUCR,R30
000413 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000415 e1f8      	LDI  R31,0x18
000416 bdf1      	OUT  WDTCR,R31
000417 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000418 e08d      	LDI  R24,(14-2)+1
000419 e0a2      	LDI  R26,2
00041a 27bb      	CLR  R27
                 __CLEAR_REG:
00041b 93ed      	ST   X+,R30
00041c 958a      	DEC  R24
00041d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00041e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00041f e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000420 e0a0      	LDI  R26,LOW(__SRAM_START)
000421 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000422 93ed      	ST   X+,R30
000423 9701      	SBIW R24,1
000424 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000425 ebe8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000426 e0f7      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000427 9185      	LPM  R24,Z+
000428 9195      	LPM  R25,Z+
000429 9700      	SBIW R24,0
00042a f061      	BREQ __GLOBAL_INI_END
00042b 91a5      	LPM  R26,Z+
00042c 91b5      	LPM  R27,Z+
00042d 9005      	LPM  R0,Z+
00042e 9015      	LPM  R1,Z+
00042f 01bf      	MOVW R22,R30
000430 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000431 9005      	LPM  R0,Z+
000432 920d      	ST   X+,R0
000433 9701      	SBIW R24,1
000434 f7e1      	BRNE __GLOBAL_INI_LOOP
000435 01fb      	MOVW R30,R22
000436 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000437 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000438 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000439 bfed      	OUT  SPL,R30
00043a e0ec      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00043b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00043c e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00043d e0d6      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00043e 940c 0487 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x600
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Project         : HEMS - Smart_Plug
                 ;Date            : 13/06/2013
                 ;Author          : Tawan Srisang, Sirichakorn
                 ;Company         : Intelenics Co.,Ltd.
                 ;Comments        :
                 ;Version Format  :
                 ;Chip type       : ATmega128
                 ;Program type    : Application
                 ;Frequency       : 11.059200 MHz
                 ;*****************************************************/
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <sleep.h>
                 ;#include <io.h>
                 ;#include <math.h>
                 ;#include <initial_system.h>
                 ;#include <int_protocol.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <timer.h>
                 ;#include <adc.h>
                 ;#include <eeprom.h>
                 ;#include <meansure.h>
                 ;#define SWITCH_PRESSED !(PINC & (1<<PINC0))
                 ;
                 ;uint8_t SWITCH          = TURN_OFF;
                 ;uint8_t specData[]      = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF};   // Specific Stucture of Join Req packet
                 
                 	.DSEG
                 ;uint8_t error;
                 ;int8_t read_D_SW;
                 ;int start_event;
                 ;int counter = 0;
                 ;int e = 0;
                 ;uint8_t SEND_EVENT_TEST[38];
                 ;
                 ;void get_event(){
                 ; 0000 0029 void get_event(){
                 
                 	.CSEG
                 _get_event:
                 ; 0000 002A     int event = 0;
                 ; 0000 002B     event = input[count_event];
000440 940e 1609 	CALL SUBOPT_0x0
                 ;	event -> R16,R17
000442 91e0 08d3 	LDS  R30,_count_event
000444 91f0 08d4 	LDS  R31,_count_event+1
000446 940e 160e 	CALL SUBOPT_0x1
000448 0fae      	ADD  R26,R30
000449 1fbf      	ADC  R27,R31
00044a 910d      	LD   R16,X+
00044b 911c      	LD   R17,X
                 ; 0000 002C     printDebug("EVENT = %d\r\n", event);
                +
00044c eae4     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00044d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00044e 93fa      	ST   -Y,R31
00044f 93ea      	ST   -Y,R30
000450 01f8      	MOVW R30,R16
000451 940e 1613 	CALL SUBOPT_0x2
                 ; 0000 002D     if (event != 0) count_event++;
000453 2e00      	MOV  R0,R16
000454 2a01      	OR   R0,R17
000455 f021      	BREQ _0x4
000456 eda3      	LDI  R26,LOW(_count_event)
000457 e0b8      	LDI  R27,HIGH(_count_event)
000458 940e 161c 	CALL SUBOPT_0x3
                 ; 0000 002E     printDebug("count_event = %d\r\n", count_event);
                 _0x4:
                +
00045a ebe1     +LDI R30 , LOW ( 2 * _0x0 + ( 13 ) )
00045b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 13 ) )
                 	__POINTW1FN _0x0,13
00045c 93fa      	ST   -Y,R31
00045d 93ea      	ST   -Y,R30
00045e 91e0 08d3 	LDS  R30,_count_event
000460 91f0 08d4 	LDS  R31,_count_event+1
000462 940e 1613 	CALL SUBOPT_0x2
                 ; 0000 002F     if(count_event == 30 ) count_event = 0;
000464 91a0 08d3 	LDS  R26,_count_event
000466 91b0 08d4 	LDS  R27,_count_event+1
000468 975e      	SBIW R26,30
000469 f429      	BRNE _0x5
00046a e0e0      	LDI  R30,LOW(0)
00046b 93e0 08d3 	STS  _count_event,R30
00046d 93e0 08d4 	STS  _count_event+1,R30
                 ; 0000 0030     do_something(event);
                 _0x5:
00046f 01d8      	MOVW R26,R16
000470 940e 0a88 	CALL _do_something
                 ; 0000 0031 }
000472 9109      	LD   R16,Y+
000473 9119      	LD   R17,Y+
000474 9508      	RET
                 ;
                 ;void put_event(int event){
                 ; 0000 0033 void put_event(int event){
                 _put_event:
                 ; 0000 0034     input[count_input] = event;
000475 93ba      	ST   -Y,R27
000476 93aa      	ST   -Y,R26
                 ;	event -> Y+0
000477 940e 1622 	CALL SUBOPT_0x4
000479 940e 160e 	CALL SUBOPT_0x1
00047b 0fea      	ADD  R30,R26
00047c 1ffb      	ADC  R31,R27
00047d 81a8      	LD   R26,Y
00047e 81b9      	LDD  R27,Y+1
00047f 83a0      	STD  Z+0,R26
000480 83b1      	STD  Z+1,R27
                 ; 0000 0035     count_input++;
000481 eda1      	LDI  R26,LOW(_count_input)
000482 e0b8      	LDI  R27,HIGH(_count_input)
000483 940e 161c 	CALL SUBOPT_0x3
                 ; 0000 0036 }
000485 940c 0917 	JMP  _0x20C000F
                 ;
                 ;void main(void) {
                 ; 0000 0038 void main(void) {
                 _main:
                 ; 0000 0039 
                 ; 0000 003A     start_event = 0;
000487 2466      	CLR  R6
000488 2477      	CLR  R7
                 ; 0000 003B     STATUS_DEVICE = EEPROM_read(Eaddress);
000489 940e 1627 	CALL SUBOPT_0x5
                 ; 0000 003C     if(STATUS_DEVICE == 0xFF){
00048b 91a0 0892 	LDS  R26,_STATUS_DEVICE
00048d 3faf      	CPI  R26,LOW(0xFF)
00048e f439      	BRNE _0x6
                 ; 0000 003D         EEPROM_write(Eaddress,0);
00048f 940e 162f 	CALL SUBOPT_0x6
000491 e0a0      	LDI  R26,LOW(0)
000492 940e 0e68 	CALL _EEPROM_write
                 ; 0000 003E         STATUS_DEVICE = EEPROM_read(Eaddress);
000494 940e 1627 	CALL SUBOPT_0x5
                 ; 0000 003F     }
                 ; 0000 0040 
                 ; 0000 0041     /*=============== System Initialize ===============*/
                 ; 0000 0042     do{ error = initial_system(); }while(error);
                 _0x6:
                 _0x8:
000496 940e 0b05 	CALL _initial_system
000498 2e5e      	MOV  R5,R30
000499 2055      	TST  R5
00049a f7d9      	BRNE _0x8
                 ; 0000 0043 
                 ; 0000 0044     /*=============== Select Device Type ===============*/
                 ; 0000 0045 
                 ; 0000 0046     do {
                 _0xB:
                 ; 0000 0047         read_D_SW = read_dSwitch();
00049b 940e 0b3b 	CALL _read_dSwitch
00049d 2e4e      	MOV  R4,R30
                 ; 0000 0048         if(read_D_SW == 0x0F) {
00049e e0ef      	LDI  R30,LOW(15)
00049f 15e4      	CP   R30,R4
0004a0 f531      	BRNE _0xD
                 ; 0000 0049             SENSOR_SENSITIVE = SENSOR5A;
0004a1 940e 1635 	CALL SUBOPT_0x7
                 ; 0000 004A             if((ADJ0_SENSOR5A > 0.0) && (ADJ0_SENSOR5A < 0.12)) {
0004a3 940e 1646 	CALL SUBOPT_0x8
0004a5 f44c      	BRGE _0xF
0004a6 01df      	MOVW R26,R30
0004a7 01cb      	MOVW R24,R22
                +
0004a8 e8ef     +LDI R30 , LOW ( 0x3DF5C28F )
0004a9 ecf2     +LDI R31 , HIGH ( 0x3DF5C28F )
0004aa ef65     +LDI R22 , BYTE3 ( 0x3DF5C28F )
0004ab e37d     +LDI R23 , BYTE4 ( 0x3DF5C28F )
                 	__GETD1N 0x3DF5C28F
0004ac 940e 1ba8 	CALL __CMPF12
0004ae f008      	BRLO _0x10
                 _0xF:
0004af c005      	RJMP _0xE
                 _0x10:
                 ; 0000 004B                 AMP_ADJ_ZERO = ADJ0_SENSOR5A;
0004b0 e0a0      	LDI  R26,LOW(_ADJ0_SENSOR5A)
0004b1 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR5A)
0004b2 940e 1ce1 	CALL __EEPROMRDD
0004b4 c004      	RJMP _0x47
                 ; 0000 004C             }else {AMP_ADJ_ZERO = 0.09;}
                 _0xE:
                +
0004b5 eeec     +LDI R30 , LOW ( 0x3DB851EC )
0004b6 e5f1     +LDI R31 , HIGH ( 0x3DB851EC )
0004b7 eb68     +LDI R22 , BYTE3 ( 0x3DB851EC )
0004b8 e37d     +LDI R23 , BYTE4 ( 0x3DB851EC )
                 	__GETD1N 0x3DB851EC
                 _0x47:
0004b9 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
0004bb 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
0004bd 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
0004bf 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 004D             specData[8] = TYPE_SMART_SWITCH;                             // Device Type
0004c1 e1e2      	LDI  R30,LOW(18)
                +
0004c2 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 004E             printDebug("\r\n++++++++++ Smart Switch ++++++++++\r\n");
                +
0004c4 ece4     +LDI R30 , LOW ( 2 * _0x0 + ( 32 ) )
0004c5 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 32 ) )
                 	__POINTW1FN _0x0,32
0004c6 c081      	RJMP _0x48
                 ; 0000 004F             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                 ; 0000 0050             printDebug("Current Sensor   : ACS712ELCTR-05B-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                 ; 0000 0051         }else if(read_D_SW == 0x0E) {
                 _0xD:
0004c7 e0ee      	LDI  R30,LOW(14)
0004c8 15e4      	CP   R30,R4
0004c9 f591      	BRNE _0x13
                 ; 0000 0052             SENSOR_SENSITIVE = SENSOR20A;
                +
0004ca e0e0     +LDI R30 , LOW ( 0x42C80000 )
0004cb e0f0     +LDI R31 , HIGH ( 0x42C80000 )
0004cc ec68     +LDI R22 , BYTE3 ( 0x42C80000 )
0004cd e472     +LDI R23 , BYTE4 ( 0x42C80000 )
                 	__GETD1N 0x42C80000
0004ce 940e 164b 	CALL SUBOPT_0x9
                 ; 0000 0053             if((ADJ0_SENSOR20A > 0.0) && (ADJ0_SENSOR20A < 0.14)) {
0004d0 e0a4      	LDI  R26,LOW(_ADJ0_SENSOR20A)
0004d1 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR20A)
0004d2 940e 1ce1 	CALL __EEPROMRDD
0004d4 940e 1646 	CALL SUBOPT_0x8
0004d6 f44c      	BRGE _0x15
0004d7 01df      	MOVW R26,R30
0004d8 01cb      	MOVW R24,R22
                +
0004d9 e2e9     +LDI R30 , LOW ( 0x3E0F5C29 )
0004da e5fc     +LDI R31 , HIGH ( 0x3E0F5C29 )
0004db e06f     +LDI R22 , BYTE3 ( 0x3E0F5C29 )
0004dc e37e     +LDI R23 , BYTE4 ( 0x3E0F5C29 )
                 	__GETD1N 0x3E0F5C29
0004dd 940e 1ba8 	CALL __CMPF12
0004df f008      	BRLO _0x16
                 _0x15:
0004e0 c005      	RJMP _0x14
                 _0x16:
                 ; 0000 0054                 AMP_ADJ_ZERO = ADJ0_SENSOR20A;
0004e1 e0a4      	LDI  R26,LOW(_ADJ0_SENSOR20A)
0004e2 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR20A)
0004e3 940e 1ce1 	CALL __EEPROMRDD
0004e5 c004      	RJMP _0x49
                 ; 0000 0055             }else {AMP_ADJ_ZERO = 0.11;}
                 _0x14:
                +
0004e6 eaee     +LDI R30 , LOW ( 0x3DE147AE )
0004e7 e4f7     +LDI R31 , HIGH ( 0x3DE147AE )
0004e8 ee61     +LDI R22 , BYTE3 ( 0x3DE147AE )
0004e9 e37d     +LDI R23 , BYTE4 ( 0x3DE147AE )
                 	__GETD1N 0x3DE147AE
                 _0x49:
0004ea 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
0004ec 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
0004ee 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
0004f0 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 0056             specData[8] = TYPE_SMART_PLUG;                               // Device Type
0004f2 e1e1      	LDI  R30,LOW(17)
                +
0004f3 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 0057             printDebug("\r\n++++++++++ Smart Plug ++++++++++\r\n");
                +
0004f5 e3ef     +LDI R30 , LOW ( 2 * _0x0 + ( 155 ) )
0004f6 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 155 ) )
                 	__POINTW1FN _0x0,155
0004f7 940e 1654 	CALL SUBOPT_0xA
                 ; 0000 0058             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                 ; 0000 0059             printDebug("Current Sensor   : ACS712ELCTR-20A-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
0004f9 e6e4     +LDI R30 , LOW ( 2 * _0x0 + ( 192 ) )
0004fa e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 192 ) )
                 	__POINTW1FN _0x0,192
0004fb c05b      	RJMP _0x4A
                 ; 0000 005A         }else if(read_D_SW == 0x0D) {
                 _0x13:
0004fc e0ed      	LDI  R30,LOW(13)
0004fd 15e4      	CP   R30,R4
0004fe f591      	BRNE _0x19
                 ; 0000 005B             SENSOR_SENSITIVE = SENSOR30A;
                +
0004ff e0e0     +LDI R30 , LOW ( 0x42840000 )
000500 e0f0     +LDI R31 , HIGH ( 0x42840000 )
000501 e864     +LDI R22 , BYTE3 ( 0x42840000 )
000502 e472     +LDI R23 , BYTE4 ( 0x42840000 )
                 	__GETD1N 0x42840000
000503 940e 164b 	CALL SUBOPT_0x9
                 ; 0000 005C             if((ADJ0_SENSOR30A > 0.0) && (ADJ0_SENSOR30A < 0.15)) {
000505 e0a8      	LDI  R26,LOW(_ADJ0_SENSOR30A)
000506 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR30A)
000507 940e 1ce1 	CALL __EEPROMRDD
000509 940e 1646 	CALL SUBOPT_0x8
00050b f44c      	BRGE _0x1B
00050c 01df      	MOVW R26,R30
00050d 01cb      	MOVW R24,R22
                +
00050e e9ea     +LDI R30 , LOW ( 0x3E19999A )
00050f e9f9     +LDI R31 , HIGH ( 0x3E19999A )
000510 e169     +LDI R22 , BYTE3 ( 0x3E19999A )
000511 e37e     +LDI R23 , BYTE4 ( 0x3E19999A )
                 	__GETD1N 0x3E19999A
000512 940e 1ba8 	CALL __CMPF12
000514 f008      	BRLO _0x1C
                 _0x1B:
000515 c005      	RJMP _0x1A
                 _0x1C:
                 ; 0000 005D                 AMP_ADJ_ZERO = ADJ0_SENSOR30A;
000516 e0a8      	LDI  R26,LOW(_ADJ0_SENSOR30A)
000517 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR30A)
000518 940e 1ce1 	CALL __EEPROMRDD
00051a c004      	RJMP _0x4B
                 ; 0000 005E             }else {AMP_ADJ_ZERO = 0.12;}
                 _0x1A:
                +
00051b e8ef     +LDI R30 , LOW ( 0x3DF5C28F )
00051c ecf2     +LDI R31 , HIGH ( 0x3DF5C28F )
00051d ef65     +LDI R22 , BYTE3 ( 0x3DF5C28F )
00051e e37d     +LDI R23 , BYTE4 ( 0x3DF5C28F )
                 	__GETD1N 0x3DF5C28F
                 _0x4B:
00051f 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
000521 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
000523 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
000525 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 005F             specData[8] = TYPE_SMART_BREAKER;                            // Device Type
000527 e1e3      	LDI  R30,LOW(19)
                +
000528 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 0060             printDebug("\r\n++++++++++ Smart Breaker ++++++++++\r\n");
                +
00052a e9eb     +LDI R30 , LOW ( 2 * _0x0 + ( 247 ) )
00052b e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 247 ) )
                 	__POINTW1FN _0x0,247
00052c 940e 1654 	CALL SUBOPT_0xA
                 ; 0000 0061             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                 ; 0000 0062             printDebug("Current Sensor   : ACS712ELCTR-30A-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
00052e ece3     +LDI R30 , LOW ( 2 * _0x0 + ( 287 ) )
00052f e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 287 ) )
                 	__POINTW1FN _0x0,287
000530 c026      	RJMP _0x4A
                 ; 0000 0063         }else if(read_D_SW < 0) {
                 _0x19:
000531 e0e0      	LDI  R30,LOW(0)
000532 164e      	CP   R4,R30
000533 f42c      	BRGE _0x1F
                 ; 0000 0064             printDebug("Read Dip-Switch ERROR!\r\n");
                +
000534 efea     +LDI R30 , LOW ( 2 * _0x0 + ( 342 ) )
000535 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 342 ) )
                 	__POINTW1FN _0x0,342
000536 940e 1669 	CALL SUBOPT_0xB
                 ; 0000 0065         }else {
000538 c024      	RJMP _0x20
                 _0x1F:
                 ; 0000 0066             SENSOR_SENSITIVE = SENSOR5A;
000539 940e 1635 	CALL SUBOPT_0x7
                 ; 0000 0067             AMP_ADJ_ZERO = ADJ0_SENSOR5A;
00053b 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
00053d 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
00053f 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
000541 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 0068             specData[8] = TYPE_SMART_SWITCH;
000543 e1e2      	LDI  R30,LOW(18)
                +
000544 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 0069             printDebug("\r\n++++++++++ Default Type : Smart Switch ++++++++++\r\n");
                +
000546 e1e3     +LDI R30 , LOW ( 2 * _0x0 + ( 367 ) )
000547 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 367 ) )
                 	__POINTW1FN _0x0,367
                 _0x48:
000548 93fa      	ST   -Y,R31
000549 93ea      	ST   -Y,R30
00054a e080      	LDI  R24,0
00054b d0fe      	RCALL _printDebug
00054c 9622      	ADIW R28,2
                 ; 0000 006A             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                +
00054d eeeb     +LDI R30 , LOW ( 2 * _0x0 + ( 71 ) )
00054e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 71 ) )
                 	__POINTW1FN _0x0,71
00054f 93fa      	ST   -Y,R31
000550 93ea      	ST   -Y,R30
000551 940e 1670 	CALL SUBOPT_0xC
000553 940e 1675 	CALL SUBOPT_0xD
                 ; 0000 006B             printDebug("Current Sensor   : ACS712ELCTR-05B-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
000555 e0e8     +LDI R30 , LOW ( 2 * _0x0 + ( 100 ) )
000556 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW1FN _0x0,100
                 _0x4A:
000557 93fa      	ST   -Y,R31
000558 93ea      	ST   -Y,R30
000559 940e 167c 	CALL SUBOPT_0xE
00055b 940e 1675 	CALL SUBOPT_0xD
                 ; 0000 006C         }
                 _0x20:
                 ; 0000 006D     }while(read_D_SW < 0);
00055d e0e0      	LDI  R30,LOW(0)
00055e 164e      	CP   R4,R30
00055f f40c      	BRGE _0xC
000560 cf3a      	RJMP _0xB
                 _0xC:
                 ; 0000 006E 
                 ; 0000 006F     /*=============== Current Measurement ===============*/
                 ; 0000 0070     printDebug("Current Measure  : > %0.2f Amp.\r\n", AMP_ADJ_ZERO);
                +
000561 e4e9     +LDI R30 , LOW ( 2 * _0x0 + ( 421 ) )
000562 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 421 ) )
                 	__POINTW1FN _0x0,421
000563 93fa      	ST   -Y,R31
000564 93ea      	ST   -Y,R30
000565 940e 1685 	CALL SUBOPT_0xF
000567 940e 1675 	CALL SUBOPT_0xD
                 ; 0000 0071 
                 ; 0000 0072 
                 ; 0000 0073     #asm("sei")    // Global enable interrupts
000569 9478      	sei
                 ; 0000 0074 
                 ; 0000 0075     printDebug("\r\n-------- Initial Complete --------\r\n");
                +
00056a e6eb     +LDI R30 , LOW ( 2 * _0x0 + ( 455 ) )
00056b e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 455 ) )
                 	__POINTW1FN _0x0,455
00056c 940e 1669 	CALL SUBOPT_0xB
                 ; 0000 0076     delay_ms(5000);
00056e e8a8      	LDI  R26,LOW(5000)
00056f e1b3      	LDI  R27,HIGH(5000)
000570 940e 19f8 	CALL _delay_ms
                 ; 0000 0077 
                 ; 0000 0078     printDebug("\r\n-------- Start Program --------\r\n");
                +
000572 e9e2     +LDI R30 , LOW ( 2 * _0x0 + ( 494 ) )
000573 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 494 ) )
                 	__POINTW1FN _0x0,494
000574 940e 1669 	CALL SUBOPT_0xB
                 ; 0000 0079     while(1) {
                 _0x21:
                 ; 0000 007A         xbee_read();
000576 940e 0a44 	CALL _xbee_read
                 ; 0000 007B 
                 ; 0000 007C         if(counter%111 == 0 && counter >= 111){
000578 01d4      	MOVW R26,R8
000579 e6ef      	LDI  R30,LOW(111)
00057a e0f0      	LDI  R31,HIGH(111)
00057b 940e 1c76 	CALL __MODW21
00057d 9730      	SBIW R30,0
00057e f429      	BRNE _0x25
00057f e6ef      	LDI  R30,LOW(111)
000580 e0f0      	LDI  R31,HIGH(111)
000581 168e      	CP   R8,R30
000582 069f      	CPC  R9,R31
000583 f40c      	BRGE _0x26
                 _0x25:
000584 c01b      	RJMP _0x24
                 _0x26:
                 ; 0000 007D         if(e%2 == 0){
000585 01d5      	MOVW R26,R10
000586 e0e2      	LDI  R30,LOW(2)
000587 e0f0      	LDI  R31,HIGH(2)
000588 940e 1c76 	CALL __MODW21
00058a 9730      	SBIW R30,0
00058b f421      	BRNE _0x27
                 ; 0000 007E             SEND_EVENT_TEST[2] = 0x90;
00058c 940e 168e 	CALL SUBOPT_0x10
                 ; 0000 007F             SEND_EVENT_TEST[3] = 0x90;
                 ; 0000 0080             SEND_EVENT_TEST[35] = 0xA5;
                 ; 0000 0081             SEND_EVENT_TEST[36] = 0x01;
                 ; 0000 0082             SEND_EVENT_TEST[37] = 0x01;
00058e e0e1      	LDI  R30,LOW(1)
00058f c003      	RJMP _0x4C
                 ; 0000 0083             xbee_receivePacket(SEND_EVENT_TEST,38);
                 ; 0000 0084         }else{
                 _0x27:
                 ; 0000 0085             SEND_EVENT_TEST[2] = 0x90;
000590 940e 168e 	CALL SUBOPT_0x10
                 ; 0000 0086             SEND_EVENT_TEST[3] = 0x90;
                 ; 0000 0087             SEND_EVENT_TEST[35] = 0xA5;
                 ; 0000 0088             SEND_EVENT_TEST[36] = 0x01;
                 ; 0000 0089             SEND_EVENT_TEST[37] = 0x00;
000592 e0e0      	LDI  R30,LOW(0)
                 _0x4C:
                +
000593 93e0 0911+STS _SEND_EVENT_TEST + ( 37 ) , R30
                 	__PUTB1MN _SEND_EVENT_TEST,37
                 ; 0000 008A             xbee_receivePacket(SEND_EVENT_TEST,38);
000595 eeec      	LDI  R30,LOW(_SEND_EVENT_TEST)
000596 e0f8      	LDI  R31,HIGH(_SEND_EVENT_TEST)
000597 93fa      	ST   -Y,R31
000598 93ea      	ST   -Y,R30
000599 e2a6      	LDI  R26,LOW(38)
00059a e0b0      	LDI  R27,0
00059b 940e 0947 	CALL _xbee_receivePacket
                 ; 0000 008B        }
                 ; 0000 008C        e++;
00059d 01f5      	MOVW R30,R10
00059e 9631      	ADIW R30,1
00059f 015f      	MOVW R10,R30
                 ; 0000 008D }
                 ; 0000 008E         switch (flag_state) {
                 _0x24:
0005a0 91e0 062a 	LDS  R30,_flag_state
0005a2 91f0 062b 	LDS  R31,_flag_state+1
                 ; 0000 008F 
                 ; 0000 0090             /*=============== Send AI ===============*/
                 ; 0000 0091             case 0 :
0005a4 9730      	SBIW R30,0
0005a5 f4b9      	BRNE _0x2C
                 ; 0000 0092                 xbee_sendATCommand(AI);
0005a6 940e 169a 	CALL SUBOPT_0x11
0005a8 940e 169d 	CALL SUBOPT_0x12
                 ; 0000 0093                 delay_ms(100);
                 ; 0000 0094 
                 ; 0000 0095                 /*=============== Check last state from eeprom ===============*/
                 ; 0000 0096 
                 ; 0000 0097                 if(STATUS_DEVICE == 1){
0005aa 91a0 0892 	LDS  R26,_STATUS_DEVICE
0005ac 30a1      	CPI  R26,LOW(0x1)
0005ad f471      	BRNE _0x2D
                 ; 0000 0098                     delay_ms(100);
0005ae 940e 16a3 	CALL SUBOPT_0x13
                 ; 0000 0099                     POWER_RELAY_ON;
0005b0 940e 16a7 	CALL SUBOPT_0x14
                 ; 0000 009A                     LED_STAT_ON;
                 ; 0000 009B                     EEPROM_write(Eaddress,STATUS_DEVICE);
0005b2 940e 162f 	CALL SUBOPT_0x6
0005b4 940e 16ae 	CALL SUBOPT_0x15
                 ; 0000 009C                     start_event = 1;
0005b6 e0e1      	LDI  R30,LOW(1)
0005b7 e0f0      	LDI  R31,HIGH(1)
0005b8 013f      	MOVW R6,R30
                 ; 0000 009D                     put_event(511);
0005b9 efaf      	LDI  R26,LOW(511)
0005ba e0b1      	LDI  R27,HIGH(511)
0005bb deb9      	RCALL _put_event
                 ; 0000 009E                 }
                 ; 0000 009F             break;
                 _0x2D:
0005bc c08b      	RJMP _0x2B
                 ; 0000 00A0 
                 ; 0000 00A1             /*=============== Send SH( High Bits MacAddress) ===============*/
                 ; 0000 00A2             case 1 :
                 _0x2C:
0005bd 30e1      	CPI  R30,LOW(0x1)
0005be e0a0      	LDI  R26,HIGH(0x1)
0005bf 07fa      	CPC  R31,R26
0005c0 f429      	BRNE _0x30
                 ; 0000 00A3                 xbee_sendATCommand(SH);
0005c1 940e 16b2 	CALL SUBOPT_0x16
0005c3 940e 169d 	CALL SUBOPT_0x12
                 ; 0000 00A4                 delay_ms(100);
                 ; 0000 00A5             break;
0005c5 c082      	RJMP _0x2B
                 ; 0000 00A6 
                 ; 0000 00A7             /*=============== Send SL( LOW Bits MacAddress) ===============*/
                 ; 0000 00A8             case 2 :
                 _0x30:
0005c6 30e2      	CPI  R30,LOW(0x2)
0005c7 e0a0      	LDI  R26,HIGH(0x2)
0005c8 07fa      	CPC  R31,R26
0005c9 f429      	BRNE _0x31
                 ; 0000 00A9                 xbee_sendATCommand(SL);
0005ca 940e 16b5 	CALL SUBOPT_0x17
0005cc 940e 169d 	CALL SUBOPT_0x12
                 ; 0000 00AA                 delay_ms(100);
                 ; 0000 00AB             break;
0005ce c079      	RJMP _0x2B
                 ; 0000 00AC 
                 ; 0000 00AD             /*=============== Send Join ===============*/
                 ; 0000 00AE //            case 3 :
                 ; 0000 00AF //                delay_ms(2000);
                 ; 0000 00B0 //                send_join();
                 ; 0000 00B1 //                delay_ms(100);
                 ; 0000 00B2 //
                 ; 0000 00B3 //                if(SWITCH_PRESSED){
                 ; 0000 00B4 //                    delay_ms(100);
                 ; 0000 00B5 //                    if(STATUS_DEVICE == 0){
                 ; 0000 00B6 //                        POWER_RELAY_ON;
                 ; 0000 00B7 //                        LED_STAT_ON;
                 ; 0000 00B8 //                        STATUS_DEVICE = 1;
                 ; 0000 00B9 //                        EEPROM_write(Eaddress,STATUS_DEVICE);
                 ; 0000 00BA //                        event_state = 1;
                 ; 0000 00BB //                        put_event(511);
                 ; 0000 00BC 
                 ; 0000 00BD //                    }else if(STATUS_DEVICE == 1){
                 ; 0000 00BE //                        LED_STAT_OFF;
                 ; 0000 00BF //                        POWER_RELAY_OFF;
                 ; 0000 00C0 //                        STATUS_DEVICE = 0;
                 ; 0000 00C1 //                        EEPROM_write(Eaddress,STATUS_DEVICE);
                 ; 0000 00C2 //                        event_state = 1;
                 ; 0000 00C3 //                        put_event(510);
                 ; 0000 00C4 
                 ; 0000 00C5 //                    }
                 ; 0000 00C6 //                }
                 ; 0000 00C7 //            break;
                 ; 0000 00C8 
                 ; 0000 00C9             /*=============== Idle State ===============*/
                 ; 0000 00CA             case 3 :
                 _0x31:
0005cf 30e3      	CPI  R30,LOW(0x3)
0005d0 e0a0      	LDI  R26,HIGH(0x3)
0005d1 07fa      	CPC  R31,R26
0005d2 f011      	BREQ PC+3
0005d3 940c 061d 	JMP _0x32
                 ; 0000 00CB                 printDebug("\r\n-------- Idle --------\r\n");
                +
0005d5 ebe6     +LDI R30 , LOW ( 2 * _0x0 + ( 530 ) )
0005d6 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 530 ) )
                 	__POINTW1FN _0x0,530
0005d7 940e 1669 	CALL SUBOPT_0xB
                 ; 0000 00CC                 counter++;
0005d9 940e 16b8 	CALL SUBOPT_0x18
                 ; 0000 00CD                 if(counter%10 == 0 ){
0005db f429      	BRNE _0x33
                 ; 0000 00CE                     get_event();
0005dc de63      	RCALL _get_event
                 ; 0000 00CF                     printDebug("\r\n-------- GET EVENT --------\r\n");
                +
0005dd ede1     +LDI R30 , LOW ( 2 * _0x0 + ( 557 ) )
0005de e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 557 ) )
                 	__POINTW1FN _0x0,557
0005df 940e 1669 	CALL SUBOPT_0xB
                 ; 0000 00D0                 }
                 ; 0000 00D1 
                 ; 0000 00D2                 if(start_event == 1){
                 _0x33:
0005e1 e0e1      	LDI  R30,LOW(1)
0005e2 e0f0      	LDI  R31,HIGH(1)
0005e3 15e6      	CP   R30,R6
0005e4 05f7      	CPC  R31,R7
0005e5 f499      	BRNE _0x34
                 ; 0000 00D3                     if(STATUS_DEVICE == 1){
0005e6 91a0 0892 	LDS  R26,_STATUS_DEVICE
0005e8 30a1      	CPI  R26,LOW(0x1)
0005e9 f419      	BRNE _0x35
                 ; 0000 00D4                         flag_state = 4;
0005ea e0e4      	LDI  R30,LOW(4)
0005eb e0f0      	LDI  R31,HIGH(4)
0005ec c006      	RJMP _0x4D
                 ; 0000 00D5                     }else if(STATUS_DEVICE == 0){
                 _0x35:
0005ed 91e0 0892 	LDS  R30,_STATUS_DEVICE
0005ef 30e0      	CPI  R30,0
0005f0 f431      	BRNE _0x37
                 ; 0000 00D6                         flag_state = 3;
0005f1 e0e3      	LDI  R30,LOW(3)
0005f2 e0f0      	LDI  R31,HIGH(3)
                 _0x4D:
0005f3 93e0 062a 	STS  _flag_state,R30
0005f5 93f0 062b 	STS  _flag_state+1,R31
                 ; 0000 00D7                     }
                 ; 0000 00D8                     start_event = 0;
                 _0x37:
0005f7 2466      	CLR  R6
0005f8 2477      	CLR  R7
                 ; 0000 00D9                 }
                 ; 0000 00DA 
                 ; 0000 00DB 
                 ; 0000 00DC                 if(SWITCH_PRESSED){
                 _0x34:
0005f9 9998      	SBIC 0x13,0
0005fa c021      	RJMP _0x38
                 ; 0000 00DD                     delay_ms(200);
0005fb 940e 16c2 	CALL SUBOPT_0x19
                 ; 0000 00DE                        if(STATUS_DEVICE == 0){
0005fd 91e0 0892 	LDS  R30,_STATUS_DEVICE
0005ff 30e0      	CPI  R30,0
000600 f471      	BRNE _0x39
                 ; 0000 00DF                             POWER_RELAY_ON;
000601 940e 16a7 	CALL SUBOPT_0x14
                 ; 0000 00E0                             LED_STAT_ON;
                 ; 0000 00E1                             STATUS_DEVICE = 1;
000603 e0e1      	LDI  R30,LOW(1)
000604 940e 16c6 	CALL SUBOPT_0x1A
                 ; 0000 00E2                             EEPROM_write(Eaddress,STATUS_DEVICE);
000606 940e 16ae 	CALL SUBOPT_0x15
                 ; 0000 00E3                             flag_state = 4;
000608 940e 16c9 	CALL SUBOPT_0x1B
                 ; 0000 00E4                             printDebug("count_input = %d\r\n", count_input);
00060a 940e 16d0 	CALL SUBOPT_0x1C
                 ; 0000 00E5                             put_event(511);
00060c efaf      	LDI  R26,LOW(511)
00060d e0b1      	LDI  R27,HIGH(511)
00060e c00c      	RJMP _0x4E
                 ; 0000 00E6                        }else if(STATUS_DEVICE == 1){
                 _0x39:
00060f 91a0 0892 	LDS  R26,_STATUS_DEVICE
000611 30a1      	CPI  R26,LOW(0x1)
000612 f449      	BRNE _0x3D
                 ; 0000 00E7                             POWER_RELAY_OFF;
000613 940e 16d6 	CALL SUBOPT_0x1D
                 ; 0000 00E8                             LED_STAT_OFF;
                 ; 0000 00E9                             STATUS_DEVICE = 0;
                 ; 0000 00EA                             EEPROM_write(Eaddress,STATUS_DEVICE);
000615 940e 16ae 	CALL SUBOPT_0x15
                 ; 0000 00EB                             flag_state = 3;
000617 940e 16de 	CALL SUBOPT_0x1E
                 ; 0000 00EC                             printDebug("count_input = %d\r\n", count_input);
                 ; 0000 00ED                             put_event(510);
000619 efae      	LDI  R26,LOW(510)
00061a e0b1      	LDI  R27,HIGH(510)
                 _0x4E:
00061b de59      	RCALL _put_event
                 ; 0000 00EE                        }
                 ; 0000 00EF                 }
                 _0x3D:
                 ; 0000 00F0             break;
                 _0x38:
00061c c02b      	RJMP _0x2B
                 ; 0000 00F1 
                 ; 0000 00F2             /*=============== Active State ===============*/
                 ; 0000 00F3             case 4 :
                 _0x32:
00061d 30e4      	CPI  R30,LOW(0x4)
00061e e0a0      	LDI  R26,HIGH(0x4)
00061f 07fa      	CPC  R31,R26
000620 f539      	BRNE _0x2B
                 ; 0000 00F4             printDebug("\r\n-------- Active --------\r\n");
                +
000621 e0e4     +LDI R30 , LOW ( 2 * _0x0 + ( 608 ) )
000622 e0f3     +LDI R31 , HIGH ( 2 * _0x0 + ( 608 ) )
                 	__POINTW1FN _0x0,608
000623 940e 1669 	CALL SUBOPT_0xB
                 ; 0000 00F5                 ReadCurrent();
000625 940e 0e81 	CALL _ReadCurrent
                 ; 0000 00F6                 ReadVoltage();
000627 940e 0ef7 	CALL _ReadVoltage
                 ; 0000 00F7 
                 ; 0000 00F8                 counter++;
000629 940e 16b8 	CALL SUBOPT_0x18
                 ; 0000 00F9                 if(counter%10 == 0 ){
00062b f429      	BRNE _0x41
                 ; 0000 00FA                     printDebug("\r\n-------- GET EVENT --------\r\n");
                +
00062c ede1     +LDI R30 , LOW ( 2 * _0x0 + ( 557 ) )
00062d e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 557 ) )
                 	__POINTW1FN _0x0,557
00062e 940e 1669 	CALL SUBOPT_0xB
                 ; 0000 00FB                     get_event();
000630 de0f      	RCALL _get_event
                 ; 0000 00FC                 }
                 ; 0000 00FD 
                 ; 0000 00FE 
                 ; 0000 00FF                 if(number == 1000){
                 _0x41:
000631 91a0 0830 	LDS  R26,_number
000633 91b0 0831 	LDS  R27,_number+1
000635 3ea8      	CPI  R26,LOW(0x3E8)
000636 e0e3      	LDI  R30,HIGH(0x3E8)
000637 07be      	CPC  R27,R30
000638 f411      	BRNE _0x42
                 ; 0000 0100                     SendStatusReport();
000639 940e 0d01 	CALL _SendStatusReport
                 ; 0000 0101                 }
                 ; 0000 0102 
                 ; 0000 0103                 if(SWITCH_PRESSED){
                 _0x42:
00063b 9998      	SBIC 0x13,0
00063c c00b      	RJMP _0x43
                 ; 0000 0104                     delay_ms(200);
00063d 940e 16c2 	CALL SUBOPT_0x19
                 ; 0000 0105                     POWER_RELAY_OFF;
00063f 940e 16d6 	CALL SUBOPT_0x1D
                 ; 0000 0106                     LED_STAT_OFF;
                 ; 0000 0107                     STATUS_DEVICE = 0;
                 ; 0000 0108                     EEPROM_write(Eaddress,STATUS_DEVICE);
000641 940e 16ae 	CALL SUBOPT_0x15
                 ; 0000 0109                     flag_state = 3;
000643 940e 16de 	CALL SUBOPT_0x1E
                 ; 0000 010A                     printDebug("count_input = %d\r\n", count_input);
                 ; 0000 010B                     put_event(510);
000645 efae      	LDI  R26,LOW(510)
000646 e0b1      	LDI  R27,HIGH(510)
000647 de2d      	RCALL _put_event
                 ; 0000 010C                 }
                 ; 0000 010D             break;
                 _0x43:
                 ; 0000 010E         }
                 _0x2B:
                 ; 0000 010F     }
000648 cf2d      	RJMP _0x21
                 ; 0000 0110 }
                 _0x46:
000649 cfff      	RJMP _0x46
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <stdarg.h>
                 ;#include <ctype.h>
                 ;#include <stdint.h>
                 ;#include <debug.h>
                 ;#include <uart.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <adc.h>
                 ;#include <initial_system.h>
                 ;
                 ;/* ================================================================================= */
                 ;void printDebug(flash char *fmtstr, ...)
                 ; 0001 000E {
                 
                 	.CSEG
                 _printDebug:
00064a 92ff      	PUSH R15
00064b 2ef8      	MOV  R15,R24
                 ; 0001 000F     char textBuffer[256];
                 ; 0001 0010     va_list argptr;
                 ; 0001 0011 
                 ; 0001 0012     va_start(argptr, fmtstr);
00064c 50d1      	SUBI R29,1
00064d 931a      	ST   -Y,R17
00064e 930a      	ST   -Y,R16
                 ;	*fmtstr -> Y+258
                 ;	textBuffer -> Y+2
                 ;	*argptr -> R16,R17
00064f 01de      	MOVW R26,R28
000650 50a2      	SUBI R26,LOW(-(254))
000651 4fbf      	SBCI R27,HIGH(-(254))
000652 940e 1bff 	CALL __ADDW2R15
000654 018d      	MOVW R16,R26
                 ; 0001 0013     vsprintf(textBuffer,fmtstr,argptr);
000655 940e 16e5 	CALL SUBOPT_0x1F
000657 01de      	MOVW R26,R28
000658 5fac      	SUBI R26,LOW(-(260))
000659 4fbe      	SBCI R27,HIGH(-(260))
00065a 940e 1bff 	CALL __ADDW2R15
00065c 940e 1ca2 	CALL __GETW1P
00065e 93fa      	ST   -Y,R31
00065f 93ea      	ST   -Y,R30
000660 01d8      	MOVW R26,R16
000661 940e 13f5 	CALL _vsprintf
                 ; 0001 0014     send_uart(0, textBuffer);
000663 e0e0      	LDI  R30,LOW(0)
000664 93ea      	ST   -Y,R30
000665 01de      	MOVW R26,R28
000666 9613      	ADIW R26,3
000667 940e 0855 	CALL _send_uart
                 ; 0001 0015     va_end(argptr);
                 ; 0001 0016 
                 ; 0001 0017     return;
000669 8119      	LDD  R17,Y+1
00066a 8108      	LDD  R16,Y+0
00066b 9622      	ADIW R28,2
00066c 5fdf      	SUBI R29,-1
00066d 90ff      	POP  R15
00066e 9508      	RET
                 ; 0001 0018 }
                 ;/* ================================================================================= */
                 ; void print_payload(const unsigned char *payload, int len) {
                 ; 0001 001A void print_payload(const unsigned char *payload, int len) {
                 _print_payload:
                 ; 0001 001B 
                 ; 0001 001C     int len_rem = len;
                 ; 0001 001D     int line_width = 16;            // number of bytes per line //
                 ; 0001 001E     int line_len;
                 ; 0001 001F     int offset = 0;                  // zero-based offset counter //
                 ; 0001 0020     const unsigned char *ch = payload;
                 ; 0001 0021 
                 ; 0001 0022     if (len <= 0)
00066f 940e 16ea 	CALL SUBOPT_0x20
000671 83ea      	STD  Y+2,R30
000672 e0e0      	LDI  R30,LOW(0)
000673 83eb      	STD  Y+3,R30
000674 940e 1d08 	CALL __SAVELOCR6
                 ;	*payload -> Y+12
                 ;	len -> Y+10
                 ;	len_rem -> R16,R17
                 ;	line_width -> R18,R19
                 ;	line_len -> R20,R21
                 ;	offset -> Y+8
                 ;	*ch -> Y+6
                +
000676 850a     +LDD R16 , Y + 10
000677 851b     +LDD R17 , Y + 10 + 1
                 	__GETWRS 16,17,10
                +
000678 e120     +LDI R18 , LOW ( 16 )
000679 e030     +LDI R19 , HIGH ( 16 )
                 	__GETWRN 18,19,16
00067a 85ec      	LDD  R30,Y+12
00067b 85fd      	LDD  R31,Y+12+1
00067c 83ee      	STD  Y+6,R30
00067d 83ff      	STD  Y+6+1,R31
00067e 85aa      	LDD  R26,Y+10
00067f 85bb      	LDD  R27,Y+10+1
000680 940e 1cf9 	CALL __CPW02
000682 f584      	BRGE _0x20C0011
                 ; 0001 0023         return;
                 ; 0001 0024 
                 ; 0001 0025     // data fits on one line //
                 ; 0001 0026     if (len <= line_width) {
000683 172a      	CP   R18,R26
000684 073b      	CPC  R19,R27
000685 f04c      	BRLT _0x20004
                 ; 0001 0027         print_hex_ascii_line(ch, len, offset);
000686 940e 16ef 	CALL SUBOPT_0x21
000688 85ec      	LDD  R30,Y+12
000689 85fd      	LDD  R31,Y+12+1
00068a 93fa      	ST   -Y,R31
00068b 93ea      	ST   -Y,R30
00068c 940e 16f4 	CALL SUBOPT_0x22
                 ; 0001 0028         return;
00068e c024      	RJMP _0x20C0011
                 ; 0001 0029     }
                 ; 0001 002A     // data spans multiple lines //
                 ; 0001 002B     for ( ;; ) {
                 _0x20004:
                 _0x20006:
                 ; 0001 002C         // compute current line length //
                 ; 0001 002D         line_len = line_width % len_rem;
00068f 01f8      	MOVW R30,R16
000690 01d9      	MOVW R26,R18
000691 940e 1c76 	CALL __MODW21
000693 01af      	MOVW R20,R30
                 ; 0001 002E         // print line //
                 ; 0001 002F         print_hex_ascii_line(ch, line_len, offset);
000694 940e 16ef 	CALL SUBOPT_0x21
000696 935a      	ST   -Y,R21
000697 934a      	ST   -Y,R20
000698 940e 16f4 	CALL SUBOPT_0x22
                 ; 0001 0030         // compute total remaining //
                 ; 0001 0031         len_rem = len_rem - line_len;
                +
00069a 1b04     +SUB R16 , R20
00069b 0b15     +SBC R17 , R21
                 	__SUBWRR 16,17,20,21
                 ; 0001 0032         // shift pointer to remaining bytes to print //
                 ; 0001 0033         ch = ch + line_len;
00069c 01fa      	MOVW R30,R20
00069d 81ae      	LDD  R26,Y+6
00069e 81bf      	LDD  R27,Y+6+1
00069f 0fea      	ADD  R30,R26
0006a0 1ffb      	ADC  R31,R27
0006a1 83ee      	STD  Y+6,R30
0006a2 83ff      	STD  Y+6+1,R31
                 ; 0001 0034         // add offset //
                 ; 0001 0035         offset = offset + line_width;
0006a3 01f9      	MOVW R30,R18
0006a4 940e 16f8 	CALL SUBOPT_0x23
0006a6 87e8      	STD  Y+8,R30
0006a7 87f9      	STD  Y+8+1,R31
                 ; 0001 0036         // check if we have line width chars or less //
                 ; 0001 0037         if (len_rem <= line_width) {
                +
0006a8 1720     +CP R18 , R16
0006a9 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
0006aa f03c      	BRLT _0x20008
                 ; 0001 0038             // print last line and get out //
                 ; 0001 0039             print_hex_ascii_line(ch, len_rem, offset);
0006ab 940e 16ef 	CALL SUBOPT_0x21
0006ad 931a      	ST   -Y,R17
0006ae 930a      	ST   -Y,R16
0006af 940e 16f4 	CALL SUBOPT_0x22
                 ; 0001 003A             break;
0006b1 c001      	RJMP _0x20007
                 ; 0001 003B         }
                 ; 0001 003C     }
                 _0x20008:
0006b2 cfdc      	RJMP _0x20006
                 _0x20007:
                 ; 0001 003D     return;
                 _0x20C0011:
0006b3 940e 1d0f 	CALL __LOADLOCR6
0006b5 962e      	ADIW R28,14
0006b6 9508      	RET
                 ; 0001 003E 
                 ; 0001 003F }
                 ;/* ================================================================================= */
                 ;void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
                 ; 0001 0041 void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
                 _print_hex_ascii_line:
                 ; 0001 0042 
                 ; 0001 0043     int i;
                 ; 0001 0044     int gap;
                 ; 0001 0045     const unsigned char *ch;
                 ; 0001 0046 
                 ; 0001 0047     // offset //
                 ; 0001 0048     printDebug("%05d   ", offset);
0006b7 93ba      	ST   -Y,R27
0006b8 93aa      	ST   -Y,R26
0006b9 940e 1d08 	CALL __SAVELOCR6
                 ;	*payload -> Y+10
                 ;	len -> Y+8
                 ;	offset -> Y+6
                 ;	i -> R16,R17
                 ;	gap -> R18,R19
                 ;	*ch -> R20,R21
                +
0006bb e2e2     +LDI R30 , LOW ( 2 * _0x20000 + ( 0 ) )
0006bc e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 0 ) )
                 	__POINTW1FN _0x20000,0
0006bd 93fa      	ST   -Y,R31
0006be 93ea      	ST   -Y,R30
0006bf 85e8      	LDD  R30,Y+8
0006c0 85f9      	LDD  R31,Y+8+1
0006c1 940e 1613 	CALL SUBOPT_0x2
                 ; 0001 0049 
                 ; 0001 004A     // hex //
                 ; 0001 004B     ch = payload;
                +
0006c3 854a     +LDD R20 , Y + 10
0006c4 855b     +LDD R21 , Y + 10 + 1
                 	__GETWRS 20,21,10
                 ; 0001 004C     for(i = 0; i < len; i++) {
                +
0006c5 e000     +LDI R16 , LOW ( 0 )
0006c6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2000A:
0006c7 85e8      	LDD  R30,Y+8
0006c8 85f9      	LDD  R31,Y+8+1
0006c9 170e      	CP   R16,R30
0006ca 071f      	CPC  R17,R31
0006cb f494      	BRGE _0x2000B
                 ; 0001 004D         printDebug("%02X ", *ch);
                +
0006cc e2ea     +LDI R30 , LOW ( 2 * _0x20000 + ( 8 ) )
0006cd e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 8 ) )
                 	__POINTW1FN _0x20000,8
0006ce 940e 16fd 	CALL SUBOPT_0x24
                 ; 0001 004E 
                 ; 0001 004F         ch++;
                +
0006d0 5f4f     +SUBI R20 , LOW ( - 1 )
0006d1 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0001 0050         // print extra space after 8th byte for visual aid //
                 ; 0001 0051         if (i == 7){
0006d2 e0e7      	LDI  R30,LOW(7)
0006d3 e0f0      	LDI  R31,HIGH(7)
0006d4 17e0      	CP   R30,R16
0006d5 07f1      	CPC  R31,R17
0006d6 f421      	BRNE _0x2000C
                 ; 0001 0052             printDebug(" ");
                +
0006d7 e2e8     +LDI R30 , LOW ( 2 * _0x20000 + ( 6 ) )
0006d8 e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 6 ) )
                 	__POINTW1FN _0x20000,6
0006d9 940e 1669 	CALL SUBOPT_0xB
                 ; 0001 0053 
                 ; 0001 0054         }
                 ; 0001 0055     }
                 _0x2000C:
                +
0006db 5f0f     +SUBI R16 , LOW ( - 1 )
0006dc 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0006dd cfe9      	RJMP _0x2000A
                 _0x2000B:
                 ; 0001 0056     // print space to handle line less than 8 bytes //
                 ; 0001 0057     if (len < 8){
0006de 85a8      	LDD  R26,Y+8
0006df 85b9      	LDD  R27,Y+8+1
0006e0 9718      	SBIW R26,8
0006e1 f424      	BRGE _0x2000D
                 ; 0001 0058         printDebug(" ");
                +
0006e2 e2e8     +LDI R30 , LOW ( 2 * _0x20000 + ( 6 ) )
0006e3 e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 6 ) )
                 	__POINTW1FN _0x20000,6
0006e4 940e 1669 	CALL SUBOPT_0xB
                 ; 0001 0059 
                 ; 0001 005A     }
                 ; 0001 005B 
                 ; 0001 005C     // fill hex gap with spaces if not full line //
                 ; 0001 005D     if (len < 16) {
                 _0x2000D:
0006e6 85a8      	LDD  R26,Y+8
0006e7 85b9      	LDD  R27,Y+8+1
0006e8 9750      	SBIW R26,16
0006e9 f49c      	BRGE _0x2000E
                 ; 0001 005E         gap = 16 - len;
0006ea 85a8      	LDD  R26,Y+8
0006eb 85b9      	LDD  R27,Y+8+1
0006ec e1e0      	LDI  R30,LOW(16)
0006ed e0f0      	LDI  R31,HIGH(16)
0006ee 1bea      	SUB  R30,R26
0006ef 0bfb      	SBC  R31,R27
0006f0 019f      	MOVW R18,R30
                 ; 0001 005F         for (i = 0; i < gap; i++) {
                +
0006f1 e000     +LDI R16 , LOW ( 0 )
0006f2 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20010:
                +
0006f3 1702     +CP R16 , R18
0006f4 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
0006f5 f43c      	BRGE _0x20011
                 ; 0001 0060             printDebug("   ");
                +
0006f6 e2e6     +LDI R30 , LOW ( 2 * _0x20000 + ( 4 ) )
0006f7 e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 4 ) )
                 	__POINTW1FN _0x20000,4
0006f8 940e 1669 	CALL SUBOPT_0xB
                 ; 0001 0061 
                 ; 0001 0062         }
                +
0006fa 5f0f     +SUBI R16 , LOW ( - 1 )
0006fb 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0006fc cff6      	RJMP _0x20010
                 _0x20011:
                 ; 0001 0063     }
                 ; 0001 0064     printDebug("   ");
                 _0x2000E:
                +
0006fd e2e6     +LDI R30 , LOW ( 2 * _0x20000 + ( 4 ) )
0006fe e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 4 ) )
                 	__POINTW1FN _0x20000,4
0006ff 940e 1669 	CALL SUBOPT_0xB
                 ; 0001 0065 
                 ; 0001 0066 
                 ; 0001 0067     // ascii (if printable) //
                 ; 0001 0068     ch = payload;
                +
000701 854a     +LDD R20 , Y + 10
000702 855b     +LDD R21 , Y + 10 + 1
                 	__GETWRS 20,21,10
                 ; 0001 0069     for(i = 0; i < len; i++) {
                +
000703 e000     +LDI R16 , LOW ( 0 )
000704 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20013:
000705 85e8      	LDD  R30,Y+8
000706 85f9      	LDD  R31,Y+8+1
000707 170e      	CP   R16,R30
000708 071f      	CPC  R17,R31
000709 f4a4      	BRGE _0x20014
                 ; 0001 006A         if (isprint(*ch)){
00070a 01da      	MOVW R26,R20
00070b 91ac      	LD   R26,X
00070c 940e 1600 	CALL _isprint
00070e 30e0      	CPI  R30,0
00070f f029      	BREQ _0x20015
                 ; 0001 006B             printDebug("%c", *ch);
                +
000710 e3e0     +LDI R30 , LOW ( 2 * _0x20000 + ( 14 ) )
000711 e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 14 ) )
                 	__POINTW1FN _0x20000,14
000712 940e 16fd 	CALL SUBOPT_0x24
                 ; 0001 006C 
                 ; 0001 006D         }
                 ; 0001 006E         else{
000714 c004      	RJMP _0x20016
                 _0x20015:
                 ; 0001 006F             printDebug(".");
                +
000715 e3e3     +LDI R30 , LOW ( 2 * _0x20000 + ( 17 ) )
000716 e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 17 ) )
                 	__POINTW1FN _0x20000,17
000717 940e 1669 	CALL SUBOPT_0xB
                 ; 0001 0070 
                 ; 0001 0071         }
                 _0x20016:
                 ; 0001 0072         ch++;
                +
000719 5f4f     +SUBI R20 , LOW ( - 1 )
00071a 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0001 0073     }
                +
00071b 5f0f     +SUBI R16 , LOW ( - 1 )
00071c 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00071d cfe7      	RJMP _0x20013
                 _0x20014:
                 ; 0001 0074 
                 ; 0001 0075     printDebug("\r\n");
                +
00071e e3e5     +LDI R30 , LOW ( 2 * _0x20000 + ( 19 ) )
00071f e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 19 ) )
                 	__POINTW1FN _0x20000,19
000720 940e 1669 	CALL SUBOPT_0xB
                 ; 0001 0076     return;
000722 940e 1d0f 	CALL __LOADLOCR6
000724 962c      	ADIW R28,12
000725 9508      	RET
                 ; 0001 0077 }
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <timer.h>
                 ;#include <debug.h>
                 ;#include <int_protocol.h>
                 ;#include <initial_system.h>
                 ;
                 ;TIMER baseCounter = 0;    // -- increase continually by 1 second timer. use for timer comparison -- //
                 ;uint8_t pressedBTCounter = 0;
                 ;uint8_t _FlagBT = 0;
                 ;uint8_t _Flag05INT = 0;
                 ;uint8_t _Flag0001INT = 0;
                 ;uint8_t _BlinkLED_1Hz = 0;
                 ;
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/******************************* Software Timer Support ******************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;
                 ;/* ================================================================================= */
                 ;
                 ;/* ================================================================================= */
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/********************************* Hardware Support **********************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;// Timer 0 overflow interrupt service routine (1 ms.)
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0002 0021 interrupt [17] void timer0_ovf_isr(void) {
                 
                 	.CSEG
                 _timer0_ovf_isr:
000726 93aa      	ST   -Y,R26
000727 93ea      	ST   -Y,R30
000728 b7ef      	IN   R30,SREG
000729 93ea      	ST   -Y,R30
                 ; 0002 0022 
                 ; 0002 0023     // Reinitialize Timer 0 value
                 ; 0002 0024     TCNT0 = 0xD7;
00072a ede7      	LDI  R30,LOW(215)
00072b bfe2      	OUT  0x32,R30
                 ; 0002 0025     // Place your code here
                 ; 0002 0026     if(SWITCH == TURN_ON /*&& _pired*/) {
00072c 91a0 0600 	LDS  R26,_SWITCH
00072e 30a1      	CPI  R26,LOW(0x1)
00072f f419      	BRNE _0x40003
                 ; 0002 0027         _Flag0001INT = 1;
000730 e0e1      	LDI  R30,LOW(1)
000731 93e0 08dc 	STS  __Flag0001INT,R30
                 ; 0002 0028     }
                 ; 0002 0029 
                 ; 0002 002A }
                 _0x40003:
000733 c03e      	RJMP _0x40015
                 ;/* ================================================================================= */
                 ;// Timer1 overflow interrupt service routine (1 sec.)
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void) {
                 ; 0002 002D interrupt [15] void timer1_ovf_isr(void) {
                 _timer1_ovf_isr:
000734 936a      	ST   -Y,R22
000735 937a      	ST   -Y,R23
000736 93aa      	ST   -Y,R26
000737 93ba      	ST   -Y,R27
000738 93ea      	ST   -Y,R30
000739 93fa      	ST   -Y,R31
00073a b7ef      	IN   R30,SREG
00073b 93ea      	ST   -Y,R30
                 ; 0002 002E 
                 ; 0002 002F     //char i;
                 ; 0002 0030 
                 ; 0002 0031     // Reinitialize Timer1 value
                 ; 0002 0032     TCNT1H = 0x57;
00073c e5e7      	LDI  R30,LOW(87)
00073d bded      	OUT  0x2D,R30
                 ; 0002 0033     TCNT1L = 0x40;
00073e e4e0      	LDI  R30,LOW(64)
00073f bdec      	OUT  0x2C,R30
                 ; 0002 0034 
                 ; 0002 0035     baseCounter++;
000740 eda5      	LDI  R26,LOW(_baseCounter)
000741 e0b8      	LDI  R27,HIGH(_baseCounter)
000742 940e 1cac 	CALL __GETD1P_INC
                +
000744 5fef     +SUBI R30 , LOW ( - 1 )
000745 4fff     +SBCI R31 , HIGH ( - 1 )
000746 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000747 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
000748 940e 1cb6 	CALL __PUTDP1_DEC
                 ; 0002 0036 }
00074a 91e9      	LD   R30,Y+
00074b bfef      	OUT  SREG,R30
00074c 91f9      	LD   R31,Y+
00074d 91e9      	LD   R30,Y+
00074e 91b9      	LD   R27,Y+
00074f 91a9      	LD   R26,Y+
000750 9179      	LD   R23,Y+
000751 9169      	LD   R22,Y+
000752 9518      	RETI
                 ;/* ================================================================================= */
                 ;// Timer3 overflow interrupt service routine (0.5 sec.)
                 ;interrupt [TIM3_OVF] void timer3_ovf_isr(void) {
                 ; 0002 0039 interrupt [30] void timer3_ovf_isr(void) {
                 _timer3_ovf_isr:
000753 93aa      	ST   -Y,R26
000754 93ea      	ST   -Y,R30
000755 b7ef      	IN   R30,SREG
000756 93ea      	ST   -Y,R30
                 ; 0002 003A 
                 ; 0002 003B     // Reinitialize Timer3 value
                 ; 0002 003C     TCNT3H = 0xAB;
000757 940e 1705 	CALL SUBOPT_0x25
                 ; 0002 003D     TCNT3L = 0xA0;
                 ; 0002 003E 
                 ; 0002 003F     /*----- Count time pressed button -----*/
                 ; 0002 0040     if(_FlagBT) {
000759 91e0 08da 	LDS  R30,__FlagBT
00075b 30e0      	CPI  R30,0
00075c f029      	BREQ _0x40004
                 ; 0002 0041         pressedBTCounter++;
00075d 91e0 08d9 	LDS  R30,_pressedBTCounter
00075f 5fef      	SUBI R30,-LOW(1)
000760 93e0 08d9 	STS  _pressedBTCounter,R30
                 ; 0002 0042     }
                 ; 0002 0043 
                 ; 0002 0044     /*----- 0.5 millisecond flag -----*/
                 ; 0002 0045     if(SWITCH == TURN_ON /*&& _pired*/) {
                 _0x40004:
000762 91a0 0600 	LDS  R26,_SWITCH
000764 30a1      	CPI  R26,LOW(0x1)
000765 f419      	BRNE _0x40005
                 ; 0002 0046         _Flag05INT = 1;
000766 e0e1      	LDI  R30,LOW(1)
000767 93e0 08db 	STS  __Flag05INT,R30
                 ; 0002 0047     }
                 ; 0002 0048 
                 ; 0002 0049     /*----- Blink Power LED 1 Hz -----*/
                 ; 0002 004A     if(_BlinkLED_1Hz) {
                 _0x40005:
000769 91e0 08dd 	LDS  R30,__BlinkLED_1Hz
00076b 30e0      	CPI  R30,0
00076c f029      	BREQ _0x40006
                 ; 0002 004B         if(LED_STAT_PIN == 1) {
00076d 9b9f      	SBIS 0x13,7
00076e c002      	RJMP _0x40007
                 ; 0002 004C             LED_STAT_ON;
00076f 98af      	CBI  0x15,7
                 ; 0002 004D         }else {
000770 c001      	RJMP _0x4000A
                 _0x40007:
                 ; 0002 004E             LED_STAT_OFF;
000771 9aaf      	SBI  0x15,7
                 ; 0002 004F         }
                 _0x4000A:
                 ; 0002 0050     }
                 ; 0002 0051 
                 ; 0002 0052 }
                 _0x40006:
                 _0x40015:
000772 91e9      	LD   R30,Y+
000773 bfef      	OUT  SREG,R30
000774 91e9      	LD   R30,Y+
000775 91a9      	LD   R26,Y+
000776 9518      	RETI
                 ;/* ================================================================================= */
                 ;void init_timer(void) {
                 ; 0002 0054 void init_timer(void) {
                 _init_timer:
                 ; 0002 0055 
                 ; 0002 0056     // Timer/Counter 0 initialization (1 ms.)
                 ; 0002 0057     // Clock source: System Clock
                 ; 0002 0058     // Clock value: 43.200 kHz
                 ; 0002 0059     // Mode: Normal top=0xFF
                 ; 0002 005A     // OC0 output: Disconnected
                 ; 0002 005B     ASSR=0x00;
000777 e0e0      	LDI  R30,LOW(0)
000778 bfe0      	OUT  0x30,R30
                 ; 0002 005C     TCCR0=0x06;
000779 e0e6      	LDI  R30,LOW(6)
00077a bfe3      	OUT  0x33,R30
                 ; 0002 005D     TCNT0=0xD7;
00077b ede7      	LDI  R30,LOW(215)
00077c bfe2      	OUT  0x32,R30
                 ; 0002 005E     OCR0=0x00;
00077d e0e0      	LDI  R30,LOW(0)
00077e bfe1      	OUT  0x31,R30
                 ; 0002 005F 
                 ; 0002 0060     // Timer/Counter 1 initialization (1 sec.)
                 ; 0002 0061     // Clock source: System Clock
                 ; 0002 0062     // Clock value: 43.200 kHz
                 ; 0002 0063     // Mode: Normal top=0xFFFF
                 ; 0002 0064     // OC1A output: Discon.
                 ; 0002 0065     // OC1B output: Discon.
                 ; 0002 0066     // OC1C output: Discon.
                 ; 0002 0067     // Noise Canceler: Off
                 ; 0002 0068     // Input Capture on Falling Edge
                 ; 0002 0069     // Timer1 Overflow Interrupt: On
                 ; 0002 006A     // Input Capture Interrupt: Off
                 ; 0002 006B     // Compare A Match Interrupt: Off
                 ; 0002 006C     // Compare B Match Interrupt: Off
                 ; 0002 006D     // Compare C Match Interrupt: Off
                 ; 0002 006E     TCCR1A=0x00;
00077f bdef      	OUT  0x2F,R30
                 ; 0002 006F     TCCR1B=0x04;
000780 e0e4      	LDI  R30,LOW(4)
000781 bdee      	OUT  0x2E,R30
                 ; 0002 0070     TCNT1H=0x57;
000782 e5e7      	LDI  R30,LOW(87)
000783 bded      	OUT  0x2D,R30
                 ; 0002 0071     TCNT1L=0x40;
000784 e4e0      	LDI  R30,LOW(64)
000785 bdec      	OUT  0x2C,R30
                 ; 0002 0072     ICR1H=0x00;
000786 e0e0      	LDI  R30,LOW(0)
000787 bde7      	OUT  0x27,R30
                 ; 0002 0073     ICR1L=0x00;
000788 bde6      	OUT  0x26,R30
                 ; 0002 0074     OCR1AH=0x00;
000789 bdeb      	OUT  0x2B,R30
                 ; 0002 0075     OCR1AL=0x00;
00078a bdea      	OUT  0x2A,R30
                 ; 0002 0076     OCR1BH=0x00;
00078b bde9      	OUT  0x29,R30
                 ; 0002 0077     OCR1BL=0x00;
00078c bde8      	OUT  0x28,R30
                 ; 0002 0078     OCR1CH=0x00;
00078d 93e0 0079 	STS  121,R30
                 ; 0002 0079     OCR1CL=0x00;
00078f 93e0 0078 	STS  120,R30
                 ; 0002 007A 
                 ; 0002 007B     // Timer/Counter 2 initialization
                 ; 0002 007C     // Clock source: System Clock
                 ; 0002 007D     // Clock value: Timer2 Stopped
                 ; 0002 007E     // Mode: Normal top=0xFF
                 ; 0002 007F     // OC2 output: Disconnected
                 ; 0002 0080     TCCR2=0x00;
000791 bde5      	OUT  0x25,R30
                 ; 0002 0081     TCNT2=0x00;
000792 bde4      	OUT  0x24,R30
                 ; 0002 0082     OCR2=0x00;
000793 bde3      	OUT  0x23,R30
                 ; 0002 0083 
                 ; 0002 0084     // Timer/Counter 3 initialization (0.5 sec.)
                 ; 0002 0085     // Clock source: System Clock
                 ; 0002 0086     // Clock value: 43.200 kHz
                 ; 0002 0087     // Mode: Normal top=0xFFFF
                 ; 0002 0088     // OC3A output: Discon.
                 ; 0002 0089     // OC3B output: Discon.
                 ; 0002 008A     // OC3C output: Discon.
                 ; 0002 008B     // Noise Canceler: Off
                 ; 0002 008C     // Input Capture on Falling Edge
                 ; 0002 008D     // Timer3 Overflow Interrupt: On
                 ; 0002 008E     // Input Capture Interrupt: Off
                 ; 0002 008F     // Compare A Match Interrupt: Off
                 ; 0002 0090     // Compare B Match Interrupt: Off
                 ; 0002 0091     // Compare C Match Interrupt: Off
                 ; 0002 0092     TCCR3A=0x00;
000794 93e0 008b 	STS  139,R30
                 ; 0002 0093     TCCR3B=0x04;
000796 e0e4      	LDI  R30,LOW(4)
000797 93e0 008a 	STS  138,R30
                 ; 0002 0094     TCNT3H=0xAB;
000799 940e 1705 	CALL SUBOPT_0x25
                 ; 0002 0095     TCNT3L=0xA0;
                 ; 0002 0096     ICR3H=0x00;
00079b e0e0      	LDI  R30,LOW(0)
00079c 93e0 0081 	STS  129,R30
                 ; 0002 0097     ICR3L=0x00;
00079e 93e0 0080 	STS  128,R30
                 ; 0002 0098     OCR3AH=0x00;
0007a0 93e0 0087 	STS  135,R30
                 ; 0002 0099     OCR3AL=0x00;
0007a2 93e0 0086 	STS  134,R30
                 ; 0002 009A     OCR3BH=0x00;
0007a4 93e0 0085 	STS  133,R30
                 ; 0002 009B     OCR3BL=0x00;
0007a6 93e0 0084 	STS  132,R30
                 ; 0002 009C     OCR3CH=0x00;
0007a8 93e0 0083 	STS  131,R30
                 ; 0002 009D     OCR3CL=0x00;
0007aa 93e0 0082 	STS  130,R30
                 ; 0002 009E 
                 ; 0002 009F     // Watchdog Timer initialization
                 ; 0002 00A0     // Watchdog Timer Prescaler: OSC/2048k
                 ; 0002 00A1     #pragma optsize-
                 ; 0002 00A2     WDTCR=0x1F;
0007ac e1ef      	LDI  R30,LOW(31)
0007ad bde1      	OUT  0x21,R30
                 ; 0002 00A3     WDTCR=0x0F;
0007ae e0ef      	LDI  R30,LOW(15)
0007af bde1      	OUT  0x21,R30
                 ; 0002 00A4     #ifdef _OPTIMIZE_SIZE_
                 ; 0002 00A5     #pragma optsize+
                 ; 0002 00A6     #endif
                 ; 0002 00A7 
                 ; 0002 00A8     // Timer/Counter 0 Interrupt(s) initialization
                 ; 0002 00A9     TIMSK = 0x00;
0007b0 e0e0      	LDI  R30,LOW(0)
0007b1 bfe7      	OUT  0x37,R30
                 ; 0002 00AA 
                 ; 0002 00AB     // Timer/Counter 1 Interrupt(s) initialization
                 ; 0002 00AC     TIMSK = 0x00;
0007b2 bfe7      	OUT  0x37,R30
                 ; 0002 00AD 
                 ; 0002 00AE     // Timer/Counter 3 Interrupt(s) initialization
                 ; 0002 00AF     ETIMSK = 0x00;
0007b3 93e0 007d 	STS  125,R30
                 ; 0002 00B0 
                 ; 0002 00B1 }
0007b5 9508      	RET
                 ;/* ================================================================================= */
                 ;void enable_timerOverflow(int ch) {
                 ; 0002 00B3 void enable_timerOverflow(int ch) {
                 _enable_timerOverflow:
                 ; 0002 00B4 
                 ; 0002 00B5     /*-------------- enable timer ---------------*/
                 ; 0002 00B6     switch(ch){
0007b6 93ba      	ST   -Y,R27
0007b7 93aa      	ST   -Y,R26
                 ;	ch -> Y+0
0007b8 81e8      	LD   R30,Y
0007b9 81f9      	LDD  R31,Y+1
                 ; 0002 00B7         case 0: // Timer/Counter 0 Interrupt(s) initialization
0007ba 9730      	SBIW R30,0
0007bb f421      	BRNE _0x40010
                 ; 0002 00B8                 TIMSK |= 0x01;
0007bc b7e7      	IN   R30,0x37
0007bd 60e1      	ORI  R30,1
0007be bfe7      	OUT  0x37,R30
                 ; 0002 00B9                 break;
0007bf c015      	RJMP _0x4000F
                 ; 0002 00BA         case 1: // Timer/Counter 1 Interrupt(s) initialization
                 _0x40010:
0007c0 30e1      	CPI  R30,LOW(0x1)
0007c1 e0a0      	LDI  R26,HIGH(0x1)
0007c2 07fa      	CPC  R31,R26
0007c3 f421      	BRNE _0x40011
                 ; 0002 00BB                 TIMSK |= 0x04;
0007c4 b7e7      	IN   R30,0x37
0007c5 60e4      	ORI  R30,4
0007c6 bfe7      	OUT  0x37,R30
                 ; 0002 00BC                 break;
0007c7 c00d      	RJMP _0x4000F
                 ; 0002 00BD         case 2: // Timer/Counter 2 Interrupt(s) initialization
                 _0x40011:
0007c8 30e2      	CPI  R30,LOW(0x2)
0007c9 e0a0      	LDI  R26,HIGH(0x2)
0007ca 07fa      	CPC  R31,R26
0007cb f049      	BREQ _0x4000F
                 ; 0002 00BE                 //TIMSK2=0x01;
                 ; 0002 00BF                 break;
                 ; 0002 00C0         case 3: // Timer/Counter 3 Interrupt(s) initialization
0007cc 30e3      	CPI  R30,LOW(0x3)
0007cd e0a0      	LDI  R26,HIGH(0x3)
0007ce 07fa      	CPC  R31,R26
0007cf f429      	BRNE _0x40013
                 ; 0002 00C1                 ETIMSK |= 0x04;
0007d0 91e0 007d 	LDS  R30,125
0007d2 60e4      	ORI  R30,4
0007d3 93e0 007d 	STS  125,R30
                 ; 0002 00C2                 break;
                 ; 0002 00C3         case 4: // Timer/Counter 4 Interrupt(s) initialization
                 _0x40013:
                 ; 0002 00C4                 //TIMSK4=0x01;
                 ; 0002 00C5                 break;
                 ; 0002 00C6     }
                 _0x4000F:
                 ; 0002 00C7     // Global enable interrupts
                 ; 0002 00C8     #asm("sei")
0007d5 9478      	sei
                 ; 0002 00C9 }
0007d6 940c 0917 	JMP  _0x20C000F
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;
                 ;// UART 1
                 ;uint8_t rx_buffer1[RX_BUFFER_SIZE1];                                       // USART0 Receiver buffer
                 ;uint16_t rx_wr_index1, rx_rd_index1, rx_counter1;
                 ;bit rx_buffer_overflow1;                                                // This flag is set on USART0 Receiver buffer overflow
                 ;
                 ;// UART 0
                 ;flash uint8_t charHeader            = '$';
                 ;flash uint8_t charTerminate         = '#';
                 ;uint8_t _FlagPackageTerminate0      = 0;
                 ;uint8_t rxPackageIndex0;
                 ;uint8_t rxPackage0[RX_BUFFER_SIZE0];
                 ;uint8_t rxPackageIndexCount0;
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;#else
                 ;#endif
                 ;
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void) {
                 ; 0003 001B interrupt [19] void usart0_rx_isr(void) {
                 
                 	.CSEG
                 _usart0_rx_isr:
0007d8 940e 170c 	CALL SUBOPT_0x26
                 ; 0003 001C 
                 ; 0003 001D     uint8_t status, data;
                 ; 0003 001E     status  = UCSR0A;
                 ;	status -> R17
                 ;	data -> R16
0007da b11b      	IN   R17,11
                 ; 0003 001F     data    = UDR0;
0007db b10c      	IN   R16,12
                 ; 0003 0020 
                 ; 0003 0021     if((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
0007dc 2fe1      	MOV  R30,R17
0007dd 71ec      	ANDI R30,LOW(0x1C)
0007de f529      	BRNE _0x60003
                 ; 0003 0022 
                 ; 0003 0023         putchar0(data);
0007df 2fa0      	MOV  R26,R16
0007e0 d024      	RCALL _putchar0
                 ; 0003 0024         // Detect Package Header
                 ; 0003 0025         if(data == charHeader) {
0007e1 3204      	CPI  R16,36
0007e2 f419      	BRNE _0x60004
                 ; 0003 0026             rxPackageIndex0 = 0;
0007e3 e0e0      	LDI  R30,LOW(0)
0007e4 93e0 0912 	STS  _rxPackageIndex0,R30
                 ; 0003 0027         }
                 ; 0003 0028 
                 ; 0003 0029         rxPackage0[rxPackageIndex0++] = data;
                 _0x60004:
0007e6 91e0 0912 	LDS  R30,_rxPackageIndex0
0007e8 5fef      	SUBI R30,-LOW(1)
0007e9 93e0 0912 	STS  _rxPackageIndex0,R30
0007eb 50e1      	SUBI R30,LOW(1)
0007ec e0f0      	LDI  R31,0
0007ed 5fe6      	SUBI R30,LOW(-_rxPackage0)
0007ee 4ff9      	SBCI R31,HIGH(-_rxPackage0)
0007ef 8300      	ST   Z,R16
                 ; 0003 002A 
                 ; 0003 002B         if(rxPackageIndex0 >= RX_BUFFER_SIZE0) {
0007f0 91a0 0912 	LDS  R26,_rxPackageIndex0
0007f2 32a0      	CPI  R26,LOW(0x20)
0007f3 f018      	BRLO _0x60005
                 ; 0003 002C             rxPackageIndex0 = 0;
0007f4 e0e0      	LDI  R30,LOW(0)
0007f5 93e0 0912 	STS  _rxPackageIndex0,R30
                 ; 0003 002D         }
                 ; 0003 002E 
                 ; 0003 002F         if(data == charTerminate) {
                 _0x60005:
0007f7 3203      	CPI  R16,35
0007f8 f459      	BRNE _0x60006
                 ; 0003 0030             rxPackageIndexCount0 = (rxPackageIndex0 - 1);
0007f9 91e0 0912 	LDS  R30,_rxPackageIndex0
0007fb 50e1      	SUBI R30,LOW(1)
0007fc 93e0 0913 	STS  _rxPackageIndexCount0,R30
                 ; 0003 0031             rxPackageIndex0 = 0;
0007fe e0e0      	LDI  R30,LOW(0)
0007ff 93e0 0912 	STS  _rxPackageIndex0,R30
                 ; 0003 0032             _FlagPackageTerminate0 = 1;
000801 e0e1      	LDI  R30,LOW(1)
000802 93e0 0609 	STS  __FlagPackageTerminate0,R30
                 ; 0003 0033         }
                 ; 0003 0034     }
                 _0x60006:
                 ; 0003 0035 }
                 _0x60003:
000804 c036      	RJMP _0x6003E
                 ;/* ================================================================================= */
                 ;// Write a character to the USART0 Transmitter
                 ;#pragma used+
                 ;void putchar0(uint8_t c) {
                 ; 0003 0039 void putchar0(uint8_t c) {
                 _putchar0:
                 ; 0003 003A     while((UCSR0A & DATA_REGISTER_EMPTY) == 0);
000805 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x60007:
000806 9b5d      	SBIS 0xB,5
000807 cffe      	RJMP _0x60007
                 ; 0003 003B     UDR0 = c;
000808 81e8      	LD   R30,Y
000809 b9ec      	OUT  0xC,R30
                 ; 0003 003C }
00080a c048      	RJMP _0x20C0010
                 ;#pragma used-
                 ;
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void) {
                 ; 0003 003F interrupt [31] void usart1_rx_isr(void) {
                 _usart1_rx_isr:
00080b 940e 170c 	CALL SUBOPT_0x26
                 ; 0003 0040 
                 ; 0003 0041     uint8_t status, data;
                 ; 0003 0042     status  = UCSR1A;
                 ;	status -> R17
                 ;	data -> R16
00080d 9110 009b 	LDS  R17,155
                 ; 0003 0043     data    = UDR1;
00080f 9100 009c 	LDS  R16,156
                 ; 0003 0044 
                 ; 0003 0045     if((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
000811 2fe1      	MOV  R30,R17
000812 71ec      	ANDI R30,LOW(0x1C)
000813 f539      	BRNE _0x6000A
                 ; 0003 0046         rx_buffer1[rx_wr_index1++] = data;
000814 01f6      	MOVW R30,R12
000815 9631      	ADIW R30,1
000816 016f      	MOVW R12,R30
000817 9731      	SBIW R30,1
000818 5de0      	SUBI R30,LOW(-_rx_buffer1)
000819 4ff9      	SBCI R31,HIGH(-_rx_buffer1)
00081a 8300      	ST   Z,R16
                 ; 0003 0047          //printDebug("%02X ",data);
                 ; 0003 0048         if (rx_wr_index1 == RX_BUFFER_SIZE1)
00081b e0e0      	LDI  R30,LOW(512)
00081c e0f2      	LDI  R31,HIGH(512)
00081d 15ec      	CP   R30,R12
00081e 05fd      	CPC  R31,R13
00081f f411      	BRNE _0x6000B
                 ; 0003 0049             rx_wr_index1 = 0;
000820 24cc      	CLR  R12
000821 24dd      	CLR  R13
                 ; 0003 004A         if (++rx_counter1 == RX_BUFFER_SIZE1) {
                 _0x6000B:
000822 e2ae      	LDI  R26,LOW(_rx_counter1)
000823 e0b6      	LDI  R27,HIGH(_rx_counter1)
000824 940e 161c 	CALL SUBOPT_0x3
000826 30e0      	CPI  R30,LOW(0x200)
000827 e0a2      	LDI  R26,HIGH(0x200)
000828 07fa      	CPC  R31,R26
000829 f489      	BRNE _0x6000C
                 ; 0003 004B             printDebug("WARNING : UART0 BUFFER OVERFLOW %d\r\n", rx_counter1);
                +
00082a e3e8     +LDI R30 , LOW ( 2 * _0x60000 + ( 0 ) )
00082b e0f3     +LDI R31 , HIGH ( 2 * _0x60000 + ( 0 ) )
                 	__POINTW1FN _0x60000,0
00082c 93fa      	ST   -Y,R31
00082d 93ea      	ST   -Y,R30
00082e 91e0 062e 	LDS  R30,_rx_counter1
000830 91f0 062f 	LDS  R31,_rx_counter1+1
000832 940e 171c 	CALL SUBOPT_0x27
                 ; 0003 004C             rx_counter1 = 0;
000834 e0e0      	LDI  R30,LOW(0)
000835 93e0 062e 	STS  _rx_counter1,R30
000837 93e0 062f 	STS  _rx_counter1+1,R30
                 ; 0003 004D             rx_buffer_overflow1 = 1;
000839 9468      	SET
00083a f820      	BLD  R2,0
                 ; 0003 004E         }
                 ; 0003 004F     }
                 _0x6000C:
                 ; 0003 0050 }
                 _0x6000A:
                 _0x6003E:
00083b 9109      	LD   R16,Y+
00083c 9119      	LD   R17,Y+
00083d 91e9      	LD   R30,Y+
00083e bfef      	OUT  SREG,R30
00083f 91f9      	LD   R31,Y+
000840 91e9      	LD   R30,Y+
000841 91b9      	LD   R27,Y+
000842 91a9      	LD   R26,Y+
000843 9199      	LD   R25,Y+
000844 9189      	LD   R24,Y+
000845 9179      	LD   R23,Y+
000846 9169      	LD   R22,Y+
000847 90f9      	LD   R15,Y+
000848 9019      	LD   R1,Y+
000849 9009      	LD   R0,Y+
00084a 9518      	RETI
                 ;
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART1 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void) {
                 ; 0003 0057 char getchar(void) {
                 ; 0003 0058 
                 ; 0003 0059     uint8_t data;
                 ; 0003 005A 
                 ; 0003 005B     while (rx_counter1 == 0);
                 ;	data -> R17
                 ; 0003 005C     data = rx_buffer1[rx_rd_index1++];
                 ; 0003 005D     if(rx_rd_index1 == RX_BUFFER_SIZE1)
                 ; 0003 005E         rx_rd_index1 = 0;
                 ; 0003 005F     #asm("cli")
                 ; 0003 0060     --rx_counter1;
                 ; 0003 0061     #asm("sei")
                 ; 0003 0062     return data;
                 ; 0003 0063 }
                 ;
                 ;
                 ;#pragma used-
                 ;// Write a character to the USART1 Transmitter
                 ;#pragma used+
                 ;void putchar1(uint8_t c) {
                 ; 0003 0069 void putchar1(uint8_t c) {
                 _putchar1:
                 ; 0003 006A 
                 ; 0003 006B     while((UCSR1A & DATA_REGISTER_EMPTY) == 0);
00084b 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x60011:
00084c 91e0 009b 	LDS  R30,155
00084e 72e0      	ANDI R30,LOW(0x20)
00084f f3e1      	BREQ _0x60011
                 ; 0003 006C     UDR1 = c;
000850 81e8      	LD   R30,Y
000851 93e0 009c 	STS  156,R30
                 ; 0003 006D }
                 _0x20C0010:
000853 9621      	ADIW R28,1
000854 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;
                 ;void send_uart(uint8_t port, uint8_t *buffer) {
                 ; 0003 0071 void send_uart(uint8_t port, uint8_t *buffer) {
                 _send_uart:
                 ; 0003 0072 
                 ; 0003 0073     uint8_t i = 0;
                 ; 0003 0074 
                 ; 0003 0075     switch(port) {
000855 93ba      	ST   -Y,R27
000856 93aa      	ST   -Y,R26
000857 931a      	ST   -Y,R17
                 ;	port -> Y+3
                 ;	*buffer -> Y+1
                 ;	i -> R17
000858 e010      	LDI  R17,0
000859 81eb      	LDD  R30,Y+3
00085a e0f0      	LDI  R31,0
                 ; 0003 0076         case 0:
00085b 9730      	SBIW R30,0
00085c f461      	BRNE _0x60017
                 ; 0003 0077             while(buffer[i] != 0) {
                 _0x60018:
00085d 940e 171f 	CALL SUBOPT_0x28
00085f 91ec      	LD   R30,X
000860 30e0      	CPI  R30,0
000861 f031      	BREQ _0x6001A
                 ; 0003 0078                 putchar0(buffer[i]);
000862 940e 171f 	CALL SUBOPT_0x28
000864 91ac      	LD   R26,X
000865 df9f      	RCALL _putchar0
                 ; 0003 0079                 i++;
000866 5f1f      	SUBI R17,-1
                 ; 0003 007A             }
000867 cff5      	RJMP _0x60018
                 _0x6001A:
                 ; 0003 007B             break;
000868 c00f      	RJMP _0x60016
                 ; 0003 007C         case 1:
                 _0x60017:
000869 30e1      	CPI  R30,LOW(0x1)
00086a e0a0      	LDI  R26,HIGH(0x1)
00086b 07fa      	CPC  R31,R26
00086c f459      	BRNE _0x60016
                 ; 0003 007D             while(buffer[i] != 0) {
                 _0x6001C:
00086d 940e 171f 	CALL SUBOPT_0x28
00086f 91ec      	LD   R30,X
000870 30e0      	CPI  R30,0
000871 f031      	BREQ _0x6001E
                 ; 0003 007E                 putchar1(buffer[i]);
000872 940e 171f 	CALL SUBOPT_0x28
000874 91ac      	LD   R26,X
000875 dfd5      	RCALL _putchar1
                 ; 0003 007F                 i++;
000876 5f1f      	SUBI R17,-1
                 ; 0003 0080             }
000877 cff5      	RJMP _0x6001C
                 _0x6001E:
                 ; 0003 0081             break;
                 ; 0003 0082     }
                 _0x60016:
                 ; 0003 0083 }
000878 8118      	LDD  R17,Y+0
000879 c0cb      	RJMP _0x20C000E
                 ;
                 ;
                 ;void init_uart(uint8_t channel, uint32_t baud) {
                 ; 0003 0086 void init_uart(uint8_t channel, uint32_t baud) {
                 _init_uart:
                 ; 0003 0087 
                 ; 0003 0088     switch(channel) {
00087a 940e 1ccf 	CALL __PUTPARD2
                 ;	channel -> Y+4
                 ;	baud -> Y+0
00087c 81ec      	LDD  R30,Y+4
00087d e0f0      	LDI  R31,0
                 ; 0003 0089     case 0:
00087e 9730      	SBIW R30,0
00087f f571      	BRNE _0x60022
                 ; 0003 008A         // USART0 initialization
                 ; 0003 008B         // FOSC = 11.0592 MHz
                 ; 0003 008C         // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0003 008D         // USART0 Receiver: On
                 ; 0003 008E         // USART0 Transmitter: On
                 ; 0003 008F         // USART0 Mode: Asynchronous
                 ; 0003 0090         // USART0 Baud Rate: 9600
                 ; 0003 0091         UCSR0A=0x00;
000880 e0e0      	LDI  R30,LOW(0)
000881 b9eb      	OUT  0xB,R30
                 ; 0003 0092         UCSR0B=0x98;
000882 e9e8      	LDI  R30,LOW(152)
000883 b9ea      	OUT  0xA,R30
                 ; 0003 0093         UCSR0C=0x06;
000884 e0e6      	LDI  R30,LOW(6)
000885 93e0 0095 	STS  149,R30
                 ; 0003 0094         UBRR0H=0x00;
000887 e0e0      	LDI  R30,LOW(0)
000888 93e0 0090 	STS  144,R30
                 ; 0003 0095         switch (baud) {
00088a 940e 1725 	CALL SUBOPT_0x29
                 ; 0003 0096         case 2400:
00088c f411      	BRNE _0x60026
                 ; 0003 0097             UBRR0L = 0x1F;
00088d e1ef      	LDI  R30,LOW(31)
00088e c01d      	RJMP _0x6003A
                 ; 0003 0098             break;
                 ; 0003 0099         case 9600:
                 _0x60026:
00088f 940e 172f 	CALL SUBOPT_0x2A
000891 f0c9      	BREQ _0x6003B
                 ; 0003 009A             UBRR0L = 0x47;
                 ; 0003 009B             break;
                 ; 0003 009C         case 14400:
000892 940e 1737 	CALL SUBOPT_0x2B
000894 f411      	BRNE _0x60028
                 ; 0003 009D             UBRR0L = 0x2F;
000895 e2ef      	LDI  R30,LOW(47)
000896 c015      	RJMP _0x6003A
                 ; 0003 009E             break;
                 ; 0003 009F         case 19200:
                 _0x60028:
000897 940e 173f 	CALL SUBOPT_0x2C
000899 f411      	BRNE _0x60029
                 ; 0003 00A0             UBRR0L = 0x23;
00089a e2e3      	LDI  R30,LOW(35)
00089b c010      	RJMP _0x6003A
                 ; 0003 00A1             break;
                 ; 0003 00A2         case 38400:
                 _0x60029:
00089c 940e 1747 	CALL SUBOPT_0x2D
00089e f411      	BRNE _0x6002A
                 ; 0003 00A3             UBRR0L = 0x11;
00089f e1e1      	LDI  R30,LOW(17)
0008a0 c00b      	RJMP _0x6003A
                 ; 0003 00A4             break;
                 ; 0003 00A5         case 57600:
                 _0x6002A:
0008a1 940e 174f 	CALL SUBOPT_0x2E
0008a3 f411      	BRNE _0x6002B
                 ; 0003 00A6             UBRR0L = 0x0B;
0008a4 e0eb      	LDI  R30,LOW(11)
0008a5 c006      	RJMP _0x6003A
                 ; 0003 00A7             break;
                 ; 0003 00A8         case 115200:
                 _0x6002B:
0008a6 940e 1757 	CALL SUBOPT_0x2F
0008a8 f411      	BRNE _0x6002D
                 ; 0003 00A9             UBRR0L = 0x05;
0008a9 e0e5      	LDI  R30,LOW(5)
0008aa c001      	RJMP _0x6003A
                 ; 0003 00AA             break;
                 ; 0003 00AB         default:
                 _0x6002D:
                 ; 0003 00AC             UBRR0L = 0x47;       // default baudrate is 9600
                 _0x6003B:
0008ab e4e7      	LDI  R30,LOW(71)
                 _0x6003A:
0008ac b9e9      	OUT  0x9,R30
                 ; 0003 00AD         }
                 ; 0003 00AE         break;
0008ad c034      	RJMP _0x60021
                 ; 0003 00AF     case 1:
                 _0x60022:
0008ae 30e1      	CPI  R30,LOW(0x1)
0008af e0a0      	LDI  R26,HIGH(0x1)
0008b0 07fa      	CPC  R31,R26
0008b1 f581      	BRNE _0x60021
                 ; 0003 00B0         // USART1 initialization
                 ; 0003 00B1         // FOSC = 11.0592 MHz
                 ; 0003 00B2         // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0003 00B3         // USART1 Receiver: On
                 ; 0003 00B4         // USART1 Transmitter: On
                 ; 0003 00B5         // USART1 Mode: Asynchronous
                 ; 0003 00B6         // USART1 Baud Rate: 9600
                 ; 0003 00B7         UCSR1A=0x00;
0008b2 e0e0      	LDI  R30,LOW(0)
0008b3 93e0 009b 	STS  155,R30
                 ; 0003 00B8         UCSR1B=0x98;
0008b5 e9e8      	LDI  R30,LOW(152)
0008b6 93e0 009a 	STS  154,R30
                 ; 0003 00B9         UCSR1C=0x06;
0008b8 e0e6      	LDI  R30,LOW(6)
0008b9 93e0 009d 	STS  157,R30
                 ; 0003 00BA         UBRR1H=0x00;
0008bb e0e0      	LDI  R30,LOW(0)
0008bc 93e0 0098 	STS  152,R30
                 ; 0003 00BB         switch ( baud ) {
0008be 940e 1725 	CALL SUBOPT_0x29
                 ; 0003 00BC         case 2400:
0008c0 f411      	BRNE _0x60032
                 ; 0003 00BD             UBRR1L = 0x1F;
0008c1 e1ef      	LDI  R30,LOW(31)
0008c2 c01d      	RJMP _0x6003C
                 ; 0003 00BE             break;
                 ; 0003 00BF         case 9600:
                 _0x60032:
0008c3 940e 172f 	CALL SUBOPT_0x2A
0008c5 f0c9      	BREQ _0x6003D
                 ; 0003 00C0             UBRR1L = 0x47;
                 ; 0003 00C1             break;
                 ; 0003 00C2         case 14400:
0008c6 940e 1737 	CALL SUBOPT_0x2B
0008c8 f411      	BRNE _0x60034
                 ; 0003 00C3             UBRR1L = 0x2F;
0008c9 e2ef      	LDI  R30,LOW(47)
0008ca c015      	RJMP _0x6003C
                 ; 0003 00C4             break;
                 ; 0003 00C5         case 19200:
                 _0x60034:
0008cb 940e 173f 	CALL SUBOPT_0x2C
0008cd f411      	BRNE _0x60035
                 ; 0003 00C6             UBRR1L = 0x23;
0008ce e2e3      	LDI  R30,LOW(35)
0008cf c010      	RJMP _0x6003C
                 ; 0003 00C7             break;
                 ; 0003 00C8         case 38400:
                 _0x60035:
0008d0 940e 1747 	CALL SUBOPT_0x2D
0008d2 f411      	BRNE _0x60036
                 ; 0003 00C9             UBRR1L = 0x11;
0008d3 e1e1      	LDI  R30,LOW(17)
0008d4 c00b      	RJMP _0x6003C
                 ; 0003 00CA             break;
                 ; 0003 00CB         case 57600:
                 _0x60036:
0008d5 940e 174f 	CALL SUBOPT_0x2E
0008d7 f411      	BRNE _0x60037
                 ; 0003 00CC             UBRR1L = 0x0B;
0008d8 e0eb      	LDI  R30,LOW(11)
0008d9 c006      	RJMP _0x6003C
                 ; 0003 00CD             break;
                 ; 0003 00CE         case 115200:
                 _0x60037:
0008da 940e 1757 	CALL SUBOPT_0x2F
0008dc f411      	BRNE _0x60039
                 ; 0003 00CF             UBRR1L = 0x05;
0008dd e0e5      	LDI  R30,LOW(5)
0008de c001      	RJMP _0x6003C
                 ; 0003 00D0             break;
                 ; 0003 00D1         default:
                 _0x60039:
                 ; 0003 00D2             UBRR1L = 0x47;       // default baudrate is 9600
                 _0x6003D:
0008df e4e7      	LDI  R30,LOW(71)
                 _0x6003C:
0008e0 93e0 0099 	STS  153,R30
                 ; 0003 00D3         }
                 ; 0003 00D4         break;
                 ; 0003 00D5 
                 ; 0003 00D6     }
                 _0x60021:
                 ; 0003 00D7 
                 ; 0003 00D8 }
0008e2 9625      	ADIW R28,5
0008e3 9508      	RET
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <uart.h>
                 ;#include <xbee.h>
                 ;#include <debug.h>
                 ;#include <int_protocol.h>
                 ;#include <eeprom.h>
                 ;
                 ;
                 ;#define XBEE_RESET PORTE.2
                 ;
                 ;char EndDevice_MacAddress[8];
                 ;char Gateway_MacAddress[8];
                 ;int input[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                 ;int count_input = 0;
                 ;//int *ptr[30] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                 ;int count_event = 0;
                 ;
                 ;uint8_t AI_COMMAND[]            = {0x7E,0x00,0x04,0x08,0x01,0x41,0x49,0x6C};
                 
                 	.DSEG
                 ;uint8_t SL_COMMAND[]            = {0x7E,0x00,0x04,0x08,0x01,0x53,0x4C,0x57};
                 ;uint8_t SH_COMMAND[]            = {0x7E,0x00,0x04,0x08,0x01,0x53,0x48,0x5B};
                 ;uint8_t EVENT[2]                = {0x00,0x00};
                 ;uint8_t STATUS_DEVICE           = 0;
                 ;int flag_state                  = 0;
                 ;int event_state                 = 3;
                 ;
                 ;
                 ;
                 ;void xbee_sendATCommand(int param){
                 ; 0004 0020 void xbee_sendATCommand(int param){
                 
                 	.CSEG
                 _xbee_sendATCommand:
                 ; 0004 0021      switch(param) {
0008e4 93ba      	ST   -Y,R27
0008e5 93aa      	ST   -Y,R26
                 ;	param -> Y+0
0008e6 81e8      	LD   R30,Y
0008e7 81f9      	LDD  R31,Y+1
                 ; 0004 0022         case 0  :
0008e8 9730      	SBIW R30,0
0008e9 f459      	BRNE _0x8000A
                 ; 0004 0023             printDebug("\r\n ++++++++++ Send AI ++++++++\r\n");
                +
0008ea e7e8     +LDI R30 , LOW ( 2 * _0x80000 + ( 0 ) )
0008eb e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 0 ) )
                 	__POINTW1FN _0x80000,0
0008ec 940e 1669 	CALL SUBOPT_0xB
                 ; 0004 0024             print_payload(AI_COMMAND,8);
0008ee e1e4      	LDI  R30,LOW(_AI_COMMAND)
0008ef e0f9      	LDI  R31,HIGH(_AI_COMMAND)
0008f0 940e 175f 	CALL SUBOPT_0x30
                 ; 0004 0025             xbee_send(AI_COMMAND,8);
0008f2 e1e4      	LDI  R30,LOW(_AI_COMMAND)
0008f3 e0f9      	LDI  R31,HIGH(_AI_COMMAND)
0008f4 c01d      	RJMP _0x80048
                 ; 0004 0026 
                 ; 0004 0027         break;
                 ; 0004 0028 
                 ; 0004 0029         case 1  :
                 _0x8000A:
0008f5 30e1      	CPI  R30,LOW(0x1)
0008f6 e0a0      	LDI  R26,HIGH(0x1)
0008f7 07fa      	CPC  R31,R26
0008f8 f459      	BRNE _0x8000B
                 ; 0004 002A             printDebug("\r\n ++++++++++ Send SH ++++++++\r\n");
                +
0008f9 e9e9     +LDI R30 , LOW ( 2 * _0x80000 + ( 33 ) )
0008fa e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 33 ) )
                 	__POINTW1FN _0x80000,33
0008fb 940e 1669 	CALL SUBOPT_0xB
                 ; 0004 002B             print_payload(SH_COMMAND,8);
0008fd e2e4      	LDI  R30,LOW(_SH_COMMAND)
0008fe e0f9      	LDI  R31,HIGH(_SH_COMMAND)
0008ff 940e 175f 	CALL SUBOPT_0x30
                 ; 0004 002C             xbee_send(SH_COMMAND,8);
000901 e2e4      	LDI  R30,LOW(_SH_COMMAND)
000902 e0f9      	LDI  R31,HIGH(_SH_COMMAND)
000903 c00e      	RJMP _0x80048
                 ; 0004 002D 
                 ; 0004 002E         break;
                 ; 0004 002F 
                 ; 0004 0030         case 2  :
                 _0x8000B:
000904 30e2      	CPI  R30,LOW(0x2)
000905 e0a0      	LDI  R26,HIGH(0x2)
000906 07fa      	CPC  R31,R26
000907 f479      	BRNE _0x80009
                 ; 0004 0031             printDebug("\r\n ++++++++++ Send SL ++++++++\r\n");
                +
000908 ebea     +LDI R30 , LOW ( 2 * _0x80000 + ( 66 ) )
000909 e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 66 ) )
                 	__POINTW1FN _0x80000,66
00090a 940e 1669 	CALL SUBOPT_0xB
                 ; 0004 0032             print_payload(SL_COMMAND,8);
00090c e1ec      	LDI  R30,LOW(_SL_COMMAND)
00090d e0f9      	LDI  R31,HIGH(_SL_COMMAND)
00090e 940e 175f 	CALL SUBOPT_0x30
                 ; 0004 0033             xbee_send(SL_COMMAND,8);
000910 e1ec      	LDI  R30,LOW(_SL_COMMAND)
000911 e0f9      	LDI  R31,HIGH(_SL_COMMAND)
                 _0x80048:
000912 93fa      	ST   -Y,R31
000913 93ea      	ST   -Y,R30
000914 940e 1765 	CALL SUBOPT_0x31
000916 d118      	RCALL _xbee_send
                 ; 0004 0034 
                 ; 0004 0035         break;
                 ; 0004 0036      }
                 _0x80009:
                 ; 0004 0037 }
                 _0x20C000F:
000917 9622      	ADIW R28,2
000918 9508      	RET
                 ;
                 ;int xbee_checksum(char buf[],int len) {
                 ; 0004 0039 int xbee_checksum(char buf[],int len) {
                 _xbee_checksum:
                 ; 0004 003A 
                 ; 0004 003B     int i;
                 ; 0004 003C     char sum = 0;
                 ; 0004 003D     for (i = 0; i < len; i++) {
000919 93ba      	ST   -Y,R27
00091a 93aa      	ST   -Y,R26
00091b 940e 1d0a 	CALL __SAVELOCR4
                 ;	buf -> Y+6
                 ;	len -> Y+4
                 ;	i -> R16,R17
                 ;	sum -> R19
00091d e030      	LDI  R19,0
                +
00091e e000     +LDI R16 , LOW ( 0 )
00091f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x8000E:
000920 81ec      	LDD  R30,Y+4
000921 81fd      	LDD  R31,Y+4+1
000922 170e      	CP   R16,R30
000923 071f      	CPC  R17,R31
000924 f454      	BRGE _0x8000F
                 ; 0004 003E         sum += buf[i];
000925 01f8      	MOVW R30,R16
000926 81ae      	LDD  R26,Y+6
000927 81bf      	LDD  R27,Y+6+1
000928 0fae      	ADD  R26,R30
000929 1fbf      	ADC  R27,R31
00092a 91ec      	LD   R30,X
00092b 0f3e      	ADD  R19,R30
                 ; 0004 003F     }
                +
00092c 5f0f     +SUBI R16 , LOW ( - 1 )
00092d 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00092e cff1      	RJMP _0x8000E
                 _0x8000F:
                 ; 0004 0040     return (0xFF - (sum & 0xFF));
00092f 2fe3      	MOV  R30,R19
000930 e0f0      	LDI  R31,0
000931 70f0      	ANDI R31,HIGH(0xFF)
000932 efaf      	LDI  R26,LOW(255)
000933 e0b0      	LDI  R27,HIGH(255)
000934 940e 1cda 	CALL __SWAPW12
000936 1bea      	SUB  R30,R26
000937 0bfb      	SBC  R31,R27
000938 940e 1d11 	CALL __LOADLOCR4
00093a 940c 0bb7 	JMP  _0x20C000B
                 ; 0004 0041 }
                 ;
                 ;
                 ;void xbee_sendAPI(uint8_t buff[],uint16_t len){
                 ; 0004 0044 void xbee_sendAPI(uint8_t buff[],uint16_t len){
                 _xbee_sendAPI:
                 ; 0004 0045     xbee_send(buff,len);
00093c 93ba      	ST   -Y,R27
00093d 93aa      	ST   -Y,R26
                 ;	buff -> Y+2
                 ;	len -> Y+0
00093e 81ea      	LDD  R30,Y+2
00093f 81fb      	LDD  R31,Y+2+1
000940 93fa      	ST   -Y,R31
000941 93ea      	ST   -Y,R30
000942 81aa      	LDD  R26,Y+2
000943 81bb      	LDD  R27,Y+2+1
000944 d0ea      	RCALL _xbee_send
                 ; 0004 0046 }
                 _0x20C000E:
000945 9624      	ADIW R28,4
000946 9508      	RET
                 ;
                 ;
                 ;void xbee_receivePacket( uint8_t recvPacket[],uint16_t size){
                 ; 0004 0049 void xbee_receivePacket( uint8_t recvPacket[],uint16_t size){
                 _xbee_receivePacket:
                 ; 0004 004A 
                 ; 0004 004B     int start = 3;
                 ; 0004 004C     if(size <= 5)
000947 93ba      	ST   -Y,R27
000948 93aa      	ST   -Y,R26
000949 931a      	ST   -Y,R17
00094a 930a      	ST   -Y,R16
                 ;	recvPacket -> Y+4
                 ;	size -> Y+2
                 ;	start -> R16,R17
                +
00094b e003     +LDI R16 , LOW ( 3 )
00094c e010     +LDI R17 , HIGH ( 3 )
                 	__GETWRN 16,17,3
00094d 81aa      	LDD  R26,Y+2
00094e 81bb      	LDD  R27,Y+2+1
00094f 9716      	SBIW R26,6
000950 f408      	BRSH _0x80010
                 ; 0004 004D         return;
000951 c0ee      	RJMP _0x20C000D
                 ; 0004 004E     printDebug("\r\n ++++++++++ Recreive Data ++++++++\r\n");
                 _0x80010:
                +
000952 edeb     +LDI R30 , LOW ( 2 * _0x80000 + ( 99 ) )
000953 e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 99 ) )
                 	__POINTW1FN _0x80000,99
000954 940e 1669 	CALL SUBOPT_0xB
                 ; 0004 004F     print_payload(recvPacket, size);
000956 81ec      	LDD  R30,Y+4
000957 81fd      	LDD  R31,Y+4+1
000958 93fa      	ST   -Y,R31
000959 93ea      	ST   -Y,R30
00095a 81ac      	LDD  R26,Y+4
00095b 81bd      	LDD  R27,Y+4+1
00095c 940e 066f 	CALL _print_payload
                 ; 0004 0050     xbee_processPacket(&recvPacket[start]);
00095e 940e 1768 	CALL SUBOPT_0x32
000960 d001      	RCALL _xbee_processPacket
                 ; 0004 0051 
                 ; 0004 0052 }
000961 c0de      	RJMP _0x20C000D
                 ;
                 ;void xbee_processPacket(char *buf) {
                 ; 0004 0054 void xbee_processPacket(char *buf) {
                 _xbee_processPacket:
                 ; 0004 0055       uint8_t frameType;
                 ; 0004 0056       frameType = buf[0];
000962 93ba      	ST   -Y,R27
000963 93aa      	ST   -Y,R26
000964 931a      	ST   -Y,R17
                 ;	*buf -> Y+1
                 ;	frameType -> R17
000965 81a9      	LDD  R26,Y+1
000966 81ba      	LDD  R27,Y+1+1
000967 911c      	LD   R17,X
                 ; 0004 0057       switch(frameType) {
000968 2fe1      	MOV  R30,R17
000969 e0f0      	LDI  R31,0
                 ; 0004 0058 
                 ; 0004 0059         /*=============== Recive AI ===============*/
                 ; 0004 005A         case 0x88  :
00096a 38e8      	CPI  R30,LOW(0x88)
00096b e0a0      	LDI  R26,HIGH(0x88)
00096c 07fa      	CPC  R31,R26
00096d f591      	BRNE _0x80014
                 ; 0004 005B             if(buf[2] == 0x41 && buf[3] == 0x49){
00096e 940e 176e 	CALL SUBOPT_0x33
000970 34a1      	CPI  R26,LOW(0x41)
000971 f421      	BRNE _0x80016
000972 940e 1773 	CALL SUBOPT_0x34
000974 34a9      	CPI  R26,LOW(0x49)
000975 f009      	BREQ _0x80017
                 _0x80016:
000976 c003      	RJMP _0x80015
                 _0x80017:
                 ; 0004 005C                 flag_state = 1;
000977 e0e1      	LDI  R30,LOW(1)
000978 e0f0      	LDI  R31,HIGH(1)
000979 c021      	RJMP _0x80049
                 ; 0004 005D             }
                 ; 0004 005E 
                 ; 0004 005F         /*=============== Recive SH ===============*/
                 ; 0004 0060 
                 ; 0004 0061             else if (buf[2] == 0x53 && buf[3] == 0x48){
                 _0x80015:
00097a 940e 176e 	CALL SUBOPT_0x33
00097c 35a3      	CPI  R26,LOW(0x53)
00097d f421      	BRNE _0x8001A
00097e 940e 1773 	CALL SUBOPT_0x34
000980 34a8      	CPI  R26,LOW(0x48)
000981 f009      	BREQ _0x8001B
                 _0x8001A:
000982 c007      	RJMP _0x80019
                 _0x8001B:
                 ; 0004 0062                 memcpy(EndDevice_MacAddress,&buf[5],4);
000983 940e 1778 	CALL SUBOPT_0x35
000985 940e 177d 	CALL SUBOPT_0x36
                 ; 0004 0063                 flag_state = 2;
000987 e0e2      	LDI  R30,LOW(2)
000988 e0f0      	LDI  R31,HIGH(2)
000989 c011      	RJMP _0x80049
                 ; 0004 0064             }
                 ; 0004 0065 
                 ; 0004 0066         /*=============== Recive SL ===============*/
                 ; 0004 0067 
                 ; 0004 0068             else if( buf[2] == 0x53 && buf[3] == 0x4C){
                 _0x80019:
00098a 940e 176e 	CALL SUBOPT_0x33
00098c 35a3      	CPI  R26,LOW(0x53)
00098d f421      	BRNE _0x8001E
00098e 940e 1773 	CALL SUBOPT_0x34
000990 34ac      	CPI  R26,LOW(0x4C)
000991 f009      	BREQ _0x8001F
                 _0x8001E:
000992 c00c      	RJMP _0x8001D
                 _0x8001F:
                 ; 0004 0069                 memcpy(&EndDevice_MacAddress[4],&buf[5],4);
                +
000993 e8e6     +LDI R30 , LOW ( _EndDevice_MacAddress + ( 4 ) )
000994 e0f8     +LDI R31 , HIGH ( _EndDevice_MacAddress + ( 4 ) )
                 	__POINTW1MN _EndDevice_MacAddress,4
000995 93fa      	ST   -Y,R31
000996 93ea      	ST   -Y,R30
000997 940e 177d 	CALL SUBOPT_0x36
                 ; 0004 006A                 flag_state = 3;
000999 e0e3      	LDI  R30,LOW(3)
00099a e0f0      	LDI  R31,HIGH(3)
                 _0x80049:
00099b 93e0 062a 	STS  _flag_state,R30
00099d 93f0 062b 	STS  _flag_state+1,R31
                 ; 0004 006B             }
                 ; 0004 006C 
                 ; 0004 006D         break;
                 _0x8001D:
00099f c06e      	RJMP _0x80013
                 ; 0004 006E 
                 ; 0004 006F         /*=============== Recive ACK ===============*/
                 ; 0004 0070         case 0x90  :
                 _0x80014:
0009a0 39e0      	CPI  R30,LOW(0x90)
0009a1 e0a0      	LDI  R26,HIGH(0x90)
0009a2 07fa      	CPC  R31,R26
0009a3 f011      	BREQ PC+3
0009a4 940c 0a0e 	JMP _0x80013
                 ; 0004 0071 
                 ; 0004 0072         if(buf[32] == 0xA2){
0009a6 940e 1786 	CALL SUBOPT_0x37
0009a8 3aa2      	CPI  R26,LOW(0xA2)
0009a9 f459      	BRNE _0x80021
                 ; 0004 0073             memcpy(Gateway_MacAddress,&buf[1],8);
0009aa 940e 178b 	CALL SUBOPT_0x38
0009ac 940e 1795 	CALL SUBOPT_0x39
                 ; 0004 0074             input[count_input] = 2;
0009ae 0fae      	ADD  R26,R30
0009af 1fbf      	ADC  R27,R31
0009b0 e0e2      	LDI  R30,LOW(2)
0009b1 e0f0      	LDI  R31,HIGH(2)
0009b2 93ed      	ST   X+,R30
0009b3 93fc      	ST   X,R31
                 ; 0004 0075         }
                 ; 0004 0076         else if(buf[32] == 0xA3){
0009b4 c059      	RJMP _0x80022
                 _0x80021:
0009b5 940e 1786 	CALL SUBOPT_0x37
0009b7 3aa3      	CPI  R26,LOW(0xA3)
0009b8 f449      	BRNE _0x80023
                 ; 0004 0077             memcpy(Gateway_MacAddress,&buf[1],8);
0009b9 940e 178b 	CALL SUBOPT_0x38
0009bb 940e 1795 	CALL SUBOPT_0x39
                 ; 0004 0078             input[count_input] = 3;
0009bd 0fae      	ADD  R26,R30
0009be 1fbf      	ADC  R27,R31
0009bf e0e3      	LDI  R30,LOW(3)
0009c0 e0f0      	LDI  R31,HIGH(3)
0009c1 c046      	RJMP _0x8004A
                 ; 0004 0079             count_input++;
                 ; 0004 007A         }
                 ; 0004 007B         else if(buf[32] == 0xA5){
                 _0x80023:
0009c2 940e 1786 	CALL SUBOPT_0x37
0009c4 3aa5      	CPI  R26,LOW(0xA5)
0009c5 f4f9      	BRNE _0x80025
                 ; 0004 007C             memcpy(Gateway_MacAddress,&buf[1],8);
0009c6 940e 178b 	CALL SUBOPT_0x38
0009c8 940e 1420 	CALL _memcpy
                 ; 0004 007D             if(buf[34] == 0x01)
0009ca 81a9      	LDD  R26,Y+1
0009cb 81ba      	LDD  R27,Y+1+1
0009cc 9692      	ADIW R26,34
0009cd 91ac      	LD   R26,X
0009ce 30a1      	CPI  R26,LOW(0x1)
0009cf f439      	BRNE _0x80026
                 ; 0004 007E                 input[count_input] = 511;
0009d0 940e 1799 	CALL SUBOPT_0x3A
0009d2 0fae      	ADD  R26,R30
0009d3 1fbf      	ADC  R27,R31
0009d4 efef      	LDI  R30,LOW(511)
0009d5 e0f1      	LDI  R31,HIGH(511)
0009d6 c00b      	RJMP _0x8004B
                 ; 0004 007F             else if(buf[34] == 0x00)
                 _0x80026:
0009d7 81e9      	LDD  R30,Y+1
0009d8 81fa      	LDD  R31,Y+1+1
0009d9 a1e2      	LDD  R30,Z+34
0009da 30e0      	CPI  R30,0
0009db f441      	BRNE _0x80028
                 ; 0004 0080                 input[count_input] = 510;
0009dc 940e 1799 	CALL SUBOPT_0x3A
0009de 0fae      	ADD  R26,R30
0009df 1fbf      	ADC  R27,R31
0009e0 efee      	LDI  R30,LOW(510)
0009e1 e0f1      	LDI  R31,HIGH(510)
                 _0x8004B:
0009e2 93ed      	ST   X+,R30
0009e3 93fc      	ST   X,R31
                 ; 0004 0081             count_input++;
                 _0x80028:
0009e4 c025      	RJMP _0x8004C
                 ; 0004 0082         }
                 ; 0004 0083         else if(buf[32] == 0xA6){
                 _0x80025:
0009e5 940e 1786 	CALL SUBOPT_0x37
0009e7 3aa6      	CPI  R26,LOW(0xA6)
0009e8 f499      	BRNE _0x8002A
                 ; 0004 0084             EVENT[0] = buf[33];
0009e9 81e9      	LDD  R30,Y+1
0009ea 81fa      	LDD  R31,Y+1+1
0009eb a1e1      	LDD  R30,Z+33
0009ec 93e0 092c 	STS  _EVENT,R30
                 ; 0004 0085             EVENT[1] = buf[34];
0009ee 81e9      	LDD  R30,Y+1
0009ef 81fa      	LDD  R31,Y+1+1
0009f0 a1e2      	LDD  R30,Z+34
                +
0009f1 93e0 092d+STS _EVENT + ( 1 ) , R30
                 	__PUTB1MN _EVENT,1
                 ; 0004 0086             memcpy(Gateway_MacAddress,&buf[1],8);
0009f3 940e 178b 	CALL SUBOPT_0x38
0009f5 940e 1795 	CALL SUBOPT_0x39
                 ; 0004 0087             input[count_input] = 6;
0009f7 0fae      	ADD  R26,R30
0009f8 1fbf      	ADC  R27,R31
0009f9 e0e6      	LDI  R30,LOW(6)
0009fa e0f0      	LDI  R31,HIGH(6)
0009fb c00c      	RJMP _0x8004A
                 ; 0004 0088             count_input++;
                 ; 0004 0089         }
                 ; 0004 008A         else if(buf[32] == 0xA8){
                 _0x8002A:
0009fc 940e 1786 	CALL SUBOPT_0x37
0009fe 3aa8      	CPI  R26,LOW(0xA8)
0009ff f471      	BRNE _0x8002C
                 ; 0004 008B             memcpy(Gateway_MacAddress,&buf[1],8);
000a00 940e 178b 	CALL SUBOPT_0x38
000a02 940e 1795 	CALL SUBOPT_0x39
                 ; 0004 008C             input[count_input] = 8;
000a04 0fae      	ADD  R26,R30
000a05 1fbf      	ADC  R27,R31
000a06 e0e8      	LDI  R30,LOW(8)
000a07 e0f0      	LDI  R31,HIGH(8)
                 _0x8004A:
000a08 93ed      	ST   X+,R30
000a09 93fc      	ST   X,R31
                 ; 0004 008D             count_input++;
                 _0x8004C:
000a0a eda1      	LDI  R26,LOW(_count_input)
000a0b e0b8      	LDI  R27,HIGH(_count_input)
000a0c 940e 161c 	CALL SUBOPT_0x3
                 ; 0004 008E         }
                 ; 0004 008F 
                 ; 0004 0090         break;
                 _0x8002C:
                 _0x80022:
                 ; 0004 0091       }
                 _0x80013:
                 ; 0004 0092       if(input[count_input-1] != 0) do_something(input[count_input]);
000a0e 940e 1622 	CALL SUBOPT_0x4
000a10 9731      	SBIW R30,1
000a11 940e 160e 	CALL SUBOPT_0x1
000a13 0fae      	ADD  R26,R30
000a14 1fbf      	ADC  R27,R31
000a15 940e 1ca2 	CALL __GETW1P
000a17 9730      	SBIW R30,0
000a18 f041      	BREQ _0x8002D
000a19 940e 1799 	CALL SUBOPT_0x3A
000a1b 0fae      	ADD  R26,R30
000a1c 1fbf      	ADC  R27,R31
000a1d 940e 1ca2 	CALL __GETW1P
000a1f 01df      	MOVW R26,R30
000a20 d067      	RCALL _do_something
                 ; 0004 0093       if(count_input == 30)  count_input = 0;
                 _0x8002D:
000a21 91a0 08d1 	LDS  R26,_count_input
000a23 91b0 08d2 	LDS  R27,_count_input+1
000a25 975e      	SBIW R26,30
000a26 f429      	BRNE _0x8002E
000a27 e0e0      	LDI  R30,LOW(0)
000a28 93e0 08d1 	STS  _count_input,R30
000a2a 93e0 08d2 	STS  _count_input+1,R30
                 ; 0004 0094 }
                 _0x8002E:
000a2c 8118      	LDD  R17,Y+0
000a2d 940c 0e73 	JMP  _0x20C000A
                 ;
                 ;uint16_t xbee_send(uint8_t buff[],uint16_t len){
                 ; 0004 0096 uint16_t xbee_send(uint8_t buff[],uint16_t len){
                 _xbee_send:
                 ; 0004 0097     uint16_t i;
                 ; 0004 0098     for(i = 0; i < len; i++) {
000a2f 93ba      	ST   -Y,R27
000a30 93aa      	ST   -Y,R26
000a31 940e 1609 	CALL SUBOPT_0x0
                 ;	buff -> Y+4
                 ;	len -> Y+2
                 ;	i -> R16,R17
                 _0x80030:
000a33 81ea      	LDD  R30,Y+2
000a34 81fb      	LDD  R31,Y+2+1
000a35 170e      	CP   R16,R30
000a36 071f      	CPC  R17,R31
000a37 f438      	BRSH _0x80031
                 ; 0004 0099         putchar1(buff[i]);
000a38 940e 1768 	CALL SUBOPT_0x32
000a3a 91ac      	LD   R26,X
000a3b de0f      	RCALL _putchar1
                 ; 0004 009A     }
                +
000a3c 5f0f     +SUBI R16 , LOW ( - 1 )
000a3d 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000a3e cff4      	RJMP _0x80030
                 _0x80031:
                 ; 0004 009B     return i;
000a3f 01f8      	MOVW R30,R16
                 _0x20C000D:
000a40 8119      	LDD  R17,Y+1
000a41 8108      	LDD  R16,Y+0
000a42 9626      	ADIW R28,6
000a43 9508      	RET
                 ; 0004 009C }
                 ;
                 ;void xbee_read() {
                 ; 0004 009E void xbee_read() {
                 _xbee_read:
                 ; 0004 009F 
                 ; 0004 00A0     uint8_t readbuf[256];
                 ; 0004 00A1     uint8_t data;
                 ; 0004 00A2     uint16_t len = 0;
                 ; 0004 00A3     int i = 0;
                 ; 0004 00A4     delay_ms(100);
000a44 50d1      	SUBI R29,1
000a45 940e 1d08 	CALL __SAVELOCR6
                 ;	readbuf -> Y+6
                 ;	data -> R17
                 ;	len -> R18,R19
                 ;	i -> R20,R21
                +
000a47 e020     +LDI R18 , LOW ( 0 )
000a48 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000a49 e040     +LDI R20 , LOW ( 0 )
000a4a e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000a4b 940e 16a3 	CALL SUBOPT_0x13
                 ; 0004 00A5 
                 ; 0004 00A6     while (rx_counter1>0){
                 _0x80032:
000a4d 91a0 062e 	LDS  R26,_rx_counter1
000a4f 91b0 062f 	LDS  R27,_rx_counter1+1
000a51 940e 1cf9 	CALL __CPW02
000a53 f548      	BRSH _0x80034
                 ; 0004 00A7         data=rx_buffer1[rx_rd_index1++];
000a54 e2ac      	LDI  R26,LOW(_rx_rd_index1)
000a55 e0b6      	LDI  R27,HIGH(_rx_rd_index1)
000a56 940e 161c 	CALL SUBOPT_0x3
000a58 9731      	SBIW R30,1
000a59 5de0      	SUBI R30,LOW(-_rx_buffer1)
000a5a 4ff9      	SBCI R31,HIGH(-_rx_buffer1)
000a5b 8110      	LD   R17,Z
                 ; 0004 00A8         readbuf[i++] = data;
000a5c 01fa      	MOVW R30,R20
                +
000a5d 5f4f     +SUBI R20 , LOW ( - 1 )
000a5e 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000a5f 01de      	MOVW R26,R28
000a60 9616      	ADIW R26,6
000a61 0fea      	ADD  R30,R26
000a62 1ffb      	ADC  R31,R27
000a63 8310      	ST   Z,R17
                 ; 0004 00A9         len++;
                +
000a64 5f2f     +SUBI R18 , LOW ( - 1 )
000a65 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0004 00AA         #if RX_BUFFER_SIZE1 != 256
                 ; 0004 00AB         if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
000a66 91a0 062c 	LDS  R26,_rx_rd_index1
000a68 91b0 062d 	LDS  R27,_rx_rd_index1+1
000a6a 30a0      	CPI  R26,LOW(0x200)
000a6b e0e2      	LDI  R30,HIGH(0x200)
000a6c 07be      	CPC  R27,R30
000a6d f429      	BRNE _0x80035
000a6e e0e0      	LDI  R30,LOW(0)
000a6f 93e0 062c 	STS  _rx_rd_index1,R30
000a71 93e0 062d 	STS  _rx_rd_index1+1,R30
                 ; 0004 00AC         #endif
                 ; 0004 00AD         #asm("cli")
                 _0x80035:
000a73 94f8      	cli
                 ; 0004 00AE         --rx_counter1;
000a74 e2ae      	LDI  R26,LOW(_rx_counter1)
000a75 e0b6      	LDI  R27,HIGH(_rx_counter1)
000a76 91ed      	LD   R30,X+
000a77 91fd      	LD   R31,X+
000a78 9731      	SBIW R30,1
000a79 93fe      	ST   -X,R31
000a7a 93ee      	ST   -X,R30
                 ; 0004 00AF         #asm("sei")
000a7b 9478      	sei
                 ; 0004 00B0     }
000a7c cfd0      	RJMP _0x80032
                 _0x80034:
                 ; 0004 00B1 
                 ; 0004 00B2     xbee_receivePacket(readbuf, len);
000a7d 01fe      	MOVW R30,R28
000a7e 9636      	ADIW R30,6
000a7f 93fa      	ST   -Y,R31
000a80 93ea      	ST   -Y,R30
000a81 01d9      	MOVW R26,R18
000a82 dec4      	RCALL _xbee_receivePacket
                 ; 0004 00B3 }
000a83 940e 1d0f 	CALL __LOADLOCR6
000a85 9626      	ADIW R28,6
000a86 5fdf      	SUBI R29,-1
000a87 9508      	RET
                 ;
                 ;void do_something(int _event){
                 ; 0004 00B5 void do_something(int _event){
                 _do_something:
                 ; 0004 00B6 
                 ; 0004 00B7             if(_event == 2){
000a88 93ba      	ST   -Y,R27
000a89 93aa      	ST   -Y,R26
                 ;	_event -> Y+0
000a8a 81a8      	LD   R26,Y
000a8b 81b9      	LDD  R27,Y+1
000a8c 9712      	SBIW R26,2
000a8d f429      	BRNE _0x80036
                 ; 0004 00B8                 flag_state = 4;
000a8e 940e 16c9 	CALL SUBOPT_0x1B
                 ; 0004 00B9                 printDebug("\r\n-------- JOINT SUCCESS --------\r\n");
                +
000a90 e0e2     +LDI R30 , LOW ( 2 * _0x80000 + ( 138 ) )
000a91 e0f4     +LDI R31 , HIGH ( 2 * _0x80000 + ( 138 ) )
                 	__POINTW1FN _0x80000,138
000a92 c06a      	RJMP _0x8004D
                 ; 0004 00BA             }
                 ; 0004 00BB 
                 ; 0004 00BC         /*=============== Recive ACK ===============*/
                 ; 0004 00BD             else if(_event == 3){
                 _0x80036:
000a93 81a8      	LD   R26,Y
000a94 81b9      	LDD  R27,Y+1
000a95 9713      	SBIW R26,3
000a96 f439      	BRNE _0x80038
                 ; 0004 00BE                 printDebug("\r\n-------- RECIVE PING --------\r\n");
                +
000a97 e2e6     +LDI R30 , LOW ( 2 * _0x80000 + ( 174 ) )
000a98 e0f4     +LDI R31 , HIGH ( 2 * _0x80000 + ( 174 ) )
                 	__POINTW1FN _0x80000,174
000a99 940e 1669 	CALL SUBOPT_0xB
                 ; 0004 00BF                 send_ping();
000a9b 940e 0c31 	CALL _send_ping
                 ; 0004 00C0             }
                 ; 0004 00C1 
                 ; 0004 00C2         /*=============== Recive EVENT ===============*/
                 ; 0004 00C3             else if(_event == 510 || _event == 511){
000a9d c065      	RJMP _0x80039
                 _0x80038:
000a9e 81a8      	LD   R26,Y
000a9f 81b9      	LDD  R27,Y+1
000aa0 3fae      	CPI  R26,LOW(0x1FE)
000aa1 e0e1      	LDI  R30,HIGH(0x1FE)
000aa2 07be      	CPC  R27,R30
000aa3 f029      	BREQ _0x8003B
000aa4 3faf      	CPI  R26,LOW(0x1FF)
000aa5 e0e1      	LDI  R30,HIGH(0x1FF)
000aa6 07be      	CPC  R27,R30
000aa7 f009      	BREQ _0x8003B
000aa8 c042      	RJMP _0x8003A
                 _0x8003B:
                 ; 0004 00C4             printDebug("\r\n ++++++++++ _event == 510 || _event == 511 ++++++++\r\n");
                +
000aa9 e4e8     +LDI R30 , LOW ( 2 * _0x80000 + ( 208 ) )
000aaa e0f4     +LDI R31 , HIGH ( 2 * _0x80000 + ( 208 ) )
                 	__POINTW1FN _0x80000,208
000aab 940e 1669 	CALL SUBOPT_0xB
                 ; 0004 00C5                 if(_event == 511){
000aad 81a8      	LD   R26,Y
000aae 81b9      	LDD  R27,Y+1
000aaf 3faf      	CPI  R26,LOW(0x1FF)
000ab0 e0e1      	LDI  R30,HIGH(0x1FF)
000ab1 07be      	CPC  R27,R30
000ab2 f4a1      	BRNE _0x8003D
                 ; 0004 00C6                     EVENT[1] = 1;
000ab3 e0e1      	LDI  R30,LOW(1)
                +
000ab4 93e0 092d+STS _EVENT + ( 1 ) , R30
                 	__PUTB1MN _EVENT,1
                 ; 0004 00C7                     //flag_state = 5;
                 ; 0004 00C8                     flag_state = 4;
000ab6 940e 16c9 	CALL SUBOPT_0x1B
                 ; 0004 00C9                     STATUS_DEVICE = 1;
000ab8 e0e1      	LDI  R30,LOW(1)
000ab9 940e 16c6 	CALL SUBOPT_0x1A
                 ; 0004 00CA                     EEPROM_write(Eaddress,STATUS_DEVICE);
000abb 940e 16ae 	CALL SUBOPT_0x15
                 ; 0004 00CB                     LED_STAT_ON;
000abd 98af      	CBI  0x15,7
                 ; 0004 00CC                     POWER_RELAY_ON;
000abe 91e0 0065 	LDS  R30,101
000ac0 60e4      	ORI  R30,4
000ac1 93e0 0065 	STS  101,R30
                 ; 0004 00CD                     send_event(1,1);
000ac3 e0e1      	LDI  R30,LOW(1)
000ac4 93ea      	ST   -Y,R30
000ac5 e0a1      	LDI  R26,LOW(1)
000ac6 c019      	RJMP _0x8004E
                 ; 0004 00CE                 }else if(_event == 510){
                 _0x8003D:
000ac7 81a8      	LD   R26,Y
000ac8 81b9      	LDD  R27,Y+1
000ac9 3fae      	CPI  R26,LOW(0x1FE)
000aca e0e1      	LDI  R30,HIGH(0x1FE)
000acb 07be      	CPC  R27,R30
000acc f4a9      	BRNE _0x80041
                 ; 0004 00CF                     EVENT[1] = 0;
000acd e0e0      	LDI  R30,LOW(0)
                +
000ace 93e0 092d+STS _EVENT + ( 1 ) , R30
                 	__PUTB1MN _EVENT,1
                 ; 0004 00D0                     //flag_state = 4;
                 ; 0004 00D1                     flag_state = 3;
000ad0 e0e3      	LDI  R30,LOW(3)
000ad1 e0f0      	LDI  R31,HIGH(3)
000ad2 93e0 062a 	STS  _flag_state,R30
000ad4 93f0 062b 	STS  _flag_state+1,R31
                 ; 0004 00D2                     STATUS_DEVICE = 0;
000ad6 e0e0      	LDI  R30,LOW(0)
000ad7 940e 16c6 	CALL SUBOPT_0x1A
                 ; 0004 00D3                     EEPROM_write(Eaddress,STATUS_DEVICE);
000ad9 940e 16ae 	CALL SUBOPT_0x15
                 ; 0004 00D4                     LED_STAT_OFF;
000adb 940e 179b 	CALL SUBOPT_0x3B
                 ; 0004 00D5                     POWER_RELAY_OFF;
                 ; 0004 00D6                     send_event(1,0);
000add e0e1      	LDI  R30,LOW(1)
000ade 93ea      	ST   -Y,R30
000adf e0a0      	LDI  R26,LOW(0)
                 _0x8004E:
000ae0 940e 0c12 	CALL _send_event
                 ; 0004 00D7                 }
                 ; 0004 00D8                 recive_event(1,EVENT[1]);
                 _0x80041:
000ae2 e0e1      	LDI  R30,LOW(1)
000ae3 93ea      	ST   -Y,R30
                +
000ae4 91a0 092d+LDS R26 , _EVENT + ( 1 )
                 	__GETB2MN _EVENT,1
000ae6 940e 0c5f 	CALL _recive_event
                 ; 0004 00D9                 printDebug("\r\n-------- RECIVE EVENT --------\r\n");
                +
000ae8 e8e0     +LDI R30 , LOW ( 2 * _0x80000 + ( 264 ) )
000ae9 e0f4     +LDI R31 , HIGH ( 2 * _0x80000 + ( 264 ) )
                 	__POINTW1FN _0x80000,264
000aea c012      	RJMP _0x8004D
                 ; 0004 00DA             }
                 ; 0004 00DB 
                 ; 0004 00DC             /*=============== Send EVENT Success ===============*/
                 ; 0004 00DD             else if(_event == 6){
                 _0x8003A:
000aeb 81a8      	LD   R26,Y
000aec 81b9      	LDD  R27,Y+1
000aed 9716      	SBIW R26,6
000aee f441      	BRNE _0x80045
                 ; 0004 00DE                 event_state = 0;
000aef e0e0      	LDI  R30,LOW(0)
000af0 93e0 0893 	STS  _event_state,R30
000af2 93e0 0894 	STS  _event_state+1,R30
                 ; 0004 00DF                 printDebug("\r\n-------- SEND EVENT SUCCESS --------\r\n");
                +
000af4 eae3     +LDI R30 , LOW ( 2 * _0x80000 + ( 299 ) )
000af5 e0f4     +LDI R31 , HIGH ( 2 * _0x80000 + ( 299 ) )
                 	__POINTW1FN _0x80000,299
000af6 c006      	RJMP _0x8004D
                 ; 0004 00E0             }
                 ; 0004 00E1 
                 ; 0004 00E2             /*=============== Send REPPORT Success ===============*/
                 ; 0004 00E3             else if(_event == 8){
                 _0x80045:
000af7 81a8      	LD   R26,Y
000af8 81b9      	LDD  R27,Y+1
000af9 9718      	SBIW R26,8
000afa f441      	BRNE _0x80047
                 ; 0004 00E4                 printDebug("\r\n-------- SEND REPORT SUCCESS --------\r\n");
                +
000afb ecec     +LDI R30 , LOW ( 2 * _0x80000 + ( 340 ) )
000afc e0f4     +LDI R31 , HIGH ( 2 * _0x80000 + ( 340 ) )
                 	__POINTW1FN _0x80000,340
                 _0x8004D:
000afd 93fa      	ST   -Y,R31
000afe 93ea      	ST   -Y,R30
000aff e080      	LDI  R24,0
000b00 940e 064a 	CALL _printDebug
000b02 9622      	ADIW R28,2
                 ; 0004 00E5             }
                 ; 0004 00E6 
                 ; 0004 00E7 }
                 _0x80047:
                 _0x80039:
000b03 940c 0e7f 	JMP  _0x20C0009
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;#include <io.h>
                 ;#include <initial_system.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <timer.h>
                 ;#include <int_protocol.h>
                 ;#include <adc.h>
                 ;
                 ;/* ================================================================================= */
                 ;int initial_system(void) {
                 ; 0005 000F int initial_system(void) {
                 
                 	.CSEG
                 _initial_system:
                 ; 0005 0010 
                 ; 0005 0011     init_IO();
000b05 d01a      	RCALL _init_IO
                 ; 0005 0012 
                 ; 0005 0013     //============ Uart Initial ============//
                 ; 0005 0014     init_uart(0, 38400);     // uart0 for printDebug
000b06 e0e0      	LDI  R30,LOW(0)
000b07 940e 17a2 	CALL SUBOPT_0x3C
                 ; 0005 0015     init_uart(1, 38400);    // uart1 for xbee
000b09 e0e1      	LDI  R30,LOW(1)
000b0a 940e 17a2 	CALL SUBOPT_0x3C
                 ; 0005 0016 
                 ; 0005 0017     //============ Timer Initial ============//
                 ; 0005 0018     init_timer();
000b0c 940e 0777 	CALL _init_timer
                 ; 0005 0019     enable_timerOverflow(0);      // interrupt every 0.021 sec.
000b0e 940e 169a 	CALL SUBOPT_0x11
000b10 940e 07b6 	CALL _enable_timerOverflow
                 ; 0005 001A     enable_timerOverflow(1);      // interrupt every 1 sec.
000b12 940e 16b2 	CALL SUBOPT_0x16
000b14 940e 07b6 	CALL _enable_timerOverflow
                 ; 0005 001B     enable_timerOverflow(3);      // interrupt every 0.5 sec.
000b16 e0a3      	LDI  R26,LOW(3)
000b17 e0b0      	LDI  R27,0
000b18 940e 07b6 	CALL _enable_timerOverflow
                 ; 0005 001C 
                 ; 0005 001D     //============ Module Initial ============//
                 ; 0005 001E     init_adc(VREF_AVCC);
000b1a e4a0      	LDI  R26,LOW(64)
000b1b 940e 0e44 	CALL _init_adc
                 ; 0005 001F 
                 ; 0005 0020     return 0;
000b1d e0e0      	LDI  R30,LOW(0)
000b1e e0f0      	LDI  R31,HIGH(0)
000b1f 9508      	RET
                 ; 0005 0021 }
                 ;
                 ;/* ================================================================================= */
                 ;void init_IO(void) {
                 ; 0005 0024 void init_IO(void) {
                 _init_IO:
                 ; 0005 0025 
                 ; 0005 0026     /*----- Digital Input -----*/
                 ; 0005 0027     // Initial Direction
                 ; 0005 0028     SW_BUTTON_DDR;           // Switch Button, Join Button
000b20 98a0      	CBI  0x14,0
                 ; 0005 0029     // pull up
                 ; 0005 002A     SW_BUTTON_PORT = 1;
000b21 9aa8      	SBI  0x15,0
                 ; 0005 002B 
                 ; 0005 002C     D_SW1_DDR;
000b22 98d7      	CBI  0x1A,7
                 ; 0005 002D     D_SW2_DDR;
000b23 98d6      	CBI  0x1A,6
                 ; 0005 002E     D_SW3_DDR;
000b24 98d5      	CBI  0x1A,5
                 ; 0005 002F     D_SW4_DDR;
000b25 98d4      	CBI  0x1A,4
                 ; 0005 0030 
                 ; 0005 0031     /*----- Digital Output -----*/
                 ; 0005 0032     // Initial Direction
                 ; 0005 0033     LED_STAT_DDR;                   // LED Status
000b26 9aa7      	SBI  0x14,7
                 ; 0005 0034     POWER_RELAY_DDR;                // Drive relay
000b27 91e0 0064 	LDS  R30,100
000b29 60e4      	ORI  R30,4
000b2a 93e0 0064 	STS  100,R30
                 ; 0005 0035     XBEE_RESET_DDR;
000b2c 9a12      	SBI  0x2,2
                 ; 0005 0036     XBEE_SLEEP_DDR;
000b2d 91e0 0064 	LDS  R30,100
000b2f 60e8      	ORI  R30,8
000b30 93e0 0064 	STS  100,R30
                 ; 0005 0037 
                 ; 0005 0038     LED_STAT_OFF;
000b32 940e 179b 	CALL SUBOPT_0x3B
                 ; 0005 0039     POWER_RELAY_OFF;
                 ; 0005 003A     XBEE_RESET_HIGH;      // XBee Reset active low
000b34 9a1a      	SBI  0x3,2
                 ; 0005 003B     XBEE_SLEEP_LOW;
000b35 91e0 0065 	LDS  R30,101
000b37 7fe7      	ANDI R30,0XF7
000b38 93e0 0065 	STS  101,R30
                 ; 0005 003C 
                 ; 0005 003D }
000b3a 9508      	RET
                 ;/* ================================================================================= */
                 ;int8_t read_dSwitch() {
                 ; 0005 003F int8_t read_dSwitch() {
                 _read_dSwitch:
                 ; 0005 0040     int8_t read1, read2;
                 ; 0005 0041     read1 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
000b3b 931a      	ST   -Y,R17
000b3c 930a      	ST   -Y,R16
                 ;	read1 -> R17
                 ;	read2 -> R16
000b3d 940e 17a9 	CALL SUBOPT_0x3D
000b3f 2f1e      	MOV  R17,R30
                 ; 0005 0042     delay_ms(100);
000b40 940e 16a3 	CALL SUBOPT_0x13
                 ; 0005 0043     read2 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
000b42 940e 17a9 	CALL SUBOPT_0x3D
000b44 2f0e      	MOV  R16,R30
                 ; 0005 0044     if(read1 == read2) {
000b45 1701      	CP   R16,R17
000b46 f411      	BRNE _0xA0017
                 ; 0005 0045         return read1;
000b47 2fe1      	MOV  R30,R17
000b48 c001      	RJMP _0x20C000C
                 ; 0005 0046     }else {
                 _0xA0017:
                 ; 0005 0047         return -1;
000b49 efef      	LDI  R30,LOW(255)
                 ; 0005 0048     }
                 ; 0005 0049 }
                 _0x20C000C:
000b4a 9109      	LD   R16,Y+
000b4b 9119      	LD   R17,Y+
000b4c 9508      	RET
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdint.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <math.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <meansure.h>
                 ;
                 ;uint8_t JOIN_A1[]           = {0x7E,0x00,0x23,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x01,0xA1,0x00};
                 
                 	.DSEG
                 ;uint8_t PING_A4[]           = {0x7E,0x00,0x23,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x01,0xA4,0x00};
                 ;uint8_t SEND_EVENT_[]       = {0x7E,0x00,0x25,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x01,0xA5,0x01,0x00,0x00};
                 ;uint8_t SEND_REPORT_[]      = {0x7E,0x00,0x48,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x26,0xA7,0x01,0x01,0x00,0x00,0x00,0x00,0x0                 0,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _voltage[8]         = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _amp[8]             = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _power[8]           = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _watt[8]            = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;
                 ;void reverse(char *str, int len){
                 ; 0006 0016 void reverse(char *str, int len){
                 
                 	.CSEG
                 _reverse:
                 ; 0006 0017     int i=0,j=len-1,temp;
                 ; 0006 0018 
000b4d 93ba      ; 0006 0019     while (i<j){
000b4e 93aa      	ST   -Y,R27
000b4f 940e 1d08 	ST   -Y,R26
                 	CALL __SAVELOCR6
                 ;	*str -> Y+8
                 ;	len -> Y+6
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                +
000b51 e000     +LDI R16 , LOW ( 0 )
000b52 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000b53 81ee      	LDD  R30,Y+6
000b54 81ff      	LDD  R31,Y+6+1
000b55 9731      	SBIW R30,1
000b56 019f      	MOVW R18,R30
                 _0xC0007:
                +
000b57 1702     +CP R16 , R18
000b58 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
000b59 f4dc      	BRGE _0xC0009
                 ; 0006 001A         temp = str[i];
000b5a 01f8      	MOVW R30,R16
000b5b 85a8      	LDD  R26,Y+8
000b5c 85b9      	LDD  R27,Y+8+1
000b5d 0fae      	ADD  R26,R30
000b5e 1fbf      	ADC  R27,R31
000b5f 914c      	LD   R20,X
000b60 2755      	CLR  R21
                 ; 0006 001B         str[i] = str[j];
000b61 940e 16f8 	CALL SUBOPT_0x23
000b63 010f      	MOVW R0,R30
000b64 01f9      	MOVW R30,R18
000b65 85a8      	LDD  R26,Y+8
000b66 85b9      	LDD  R27,Y+8+1
000b67 0fae      	ADD  R26,R30
000b68 1fbf      	ADC  R27,R31
000b69 91ec      	LD   R30,X
000b6a 01d0      	MOVW R26,R0
000b6b 93ec      	ST   X,R30
                 ; 0006 001C         str[j] = temp;
000b6c 01f9      	MOVW R30,R18
000b6d 940e 16f8 	CALL SUBOPT_0x23
000b6f 8340      	ST   Z,R20
                 ; 0006 001D         i++; j--;
                +
000b70 5f0f     +SUBI R16 , LOW ( - 1 )
000b71 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                +
000b72 5021     +SUBI R18 , LOW ( 1 )
000b73 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0006 001E     }
000b74 cfe2      	RJMP _0xC0007
                 _0xC0009:
                 ; 0006 001F }
000b75 940e 1d0f 	CALL __LOADLOCR6
000b77 962a      	ADIW R28,10
000b78 9508      	RET
                 ;
                 ;// Converts a given integer x to string str[]. d is the number
                 ;// of digits required in output. If d is more than the number
                 ;// of digits in x, then 0s are added at the beginning.
                 ;
                 ;int intToStr(int x, char str[], int d){
                 ; 0006 0025 int intToStr(int x, char str[], int d){
                 _intToStr:
                 ; 0006 0026     int i = 0;
                 ; 0006 0027     while (x){
000b79 93ba      	ST   -Y,R27
000b7a 93aa      	ST   -Y,R26
000b7b 940e 1609 	CALL SUBOPT_0x0
                 ;	x -> Y+6
                 ;	str -> Y+4
                 ;	d -> Y+2
                 ;	i -> R16,R17
                 _0xC000A:
000b7d 81ee      	LDD  R30,Y+6
000b7e 81ff      	LDD  R31,Y+6+1
000b7f 9730      	SBIW R30,0
000b80 f0d1      	BREQ _0xC000C
                 ; 0006 0028         str[i++] = (x%10) + '0';
000b81 01f8      	MOVW R30,R16
                +
000b82 5f0f     +SUBI R16 , LOW ( - 1 )
000b83 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000b84 81ac      	LDD  R26,Y+4
000b85 81bd      	LDD  R27,Y+4+1
000b86 0fea      	ADD  R30,R26
000b87 1ffb      	ADC  R31,R27
000b88 01bf      	MOVW R22,R30
000b89 81ae      	LDD  R26,Y+6
000b8a 81bf      	LDD  R27,Y+6+1
000b8b e0ea      	LDI  R30,LOW(10)
000b8c e0f0      	LDI  R31,HIGH(10)
000b8d 940e 1c76 	CALL __MODW21
000b8f 5de0      	SUBI R30,-LOW(48)
000b90 01db      	MOVW R26,R22
000b91 93ec      	ST   X,R30
                 ; 0006 0029         x = x/10;
000b92 81ae      	LDD  R26,Y+6
000b93 81bf      	LDD  R27,Y+6+1
000b94 e0ea      	LDI  R30,LOW(10)
000b95 e0f0      	LDI  R31,HIGH(10)
000b96 940e 1c40 	CALL __DIVW21
000b98 83ee      	STD  Y+6,R30
000b99 83ff      	STD  Y+6+1,R31
                 ; 0006 002A     }
000b9a cfe2      	RJMP _0xC000A
                 _0xC000C:
                 ; 0006 002B 
                 ; 0006 002C     // If number of digits required is more, then
                 ; 0006 002D     // add 0s at the beginning
                 ; 0006 002E     while (i < d)
                 _0xC000D:
000b9b 81ea      	LDD  R30,Y+2
000b9c 81fb      	LDD  R31,Y+2+1
000b9d 170e      	CP   R16,R30
000b9e 071f      	CPC  R17,R31
000b9f f454      	BRGE _0xC000F
                 ; 0006 002F         str[i++] = '0';
000ba0 01f8      	MOVW R30,R16
                +
000ba1 5f0f     +SUBI R16 , LOW ( - 1 )
000ba2 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000ba3 81ac      	LDD  R26,Y+4
000ba4 81bd      	LDD  R27,Y+4+1
000ba5 0fae      	ADD  R26,R30
000ba6 1fbf      	ADC  R27,R31
000ba7 e3e0      	LDI  R30,LOW(48)
000ba8 93ec      	ST   X,R30
000ba9 cff1      	RJMP _0xC000D
                 _0xC000F:
                 ; 0006 0031 reverse(str, i);
000baa 81ec      	LDD  R30,Y+4
000bab 81fd      	LDD  R31,Y+4+1
000bac 93fa      	ST   -Y,R31
000bad 93ea      	ST   -Y,R30
000bae 01d8      	MOVW R26,R16
000baf df9d      	RCALL _reverse
                 ; 0006 0032     str[i] = '\0';
000bb0 940e 1768 	CALL SUBOPT_0x32
000bb2 e0e0      	LDI  R30,LOW(0)
000bb3 93ec      	ST   X,R30
                 ; 0006 0033     return i;
000bb4 01f8      	MOVW R30,R16
000bb5 8119      	LDD  R17,Y+1
000bb6 8108      	LDD  R16,Y+0
                 _0x20C000B:
000bb7 9628      	ADIW R28,8
000bb8 9508      	RET
                 ; 0006 0034 }
                 ;
                 ;void _ftoa(float n, char *res, int afterpoint){
                 ; 0006 0036 void _ftoa(float n, char *res, int afterpoint){
                 __ftoa:
                 ; 0006 0037     // Extract integer part
                 ; 0006 0038     int ipart = (int)n;
                 ; 0006 0039 
                 ; 0006 003A     // Extract floating part
                 ; 0006 003B     float fpart = n - (float)ipart;
                 ; 0006 003C 
                 ; 0006 003D     // convert integer part to string
                 ; 0006 003E     int i = intToStr(ipart, res, 0);
                 ; 0006 003F     if(ipart == 0){
000bb9 93ba      	ST   -Y,R27
000bba 93aa      	ST   -Y,R26
000bbb 9724      	SBIW R28,4
000bbc 940e 1d0a 	CALL __SAVELOCR4
                 ;	n -> Y+12
                 ;	*res -> Y+10
                 ;	afterpoint -> Y+8
                 ;	ipart -> R16,R17
                 ;	fpart -> Y+4
                 ;	i -> R18,R19
000bbe 940e 17c3 	CALL SUBOPT_0x3E
000bc0 940e 1a54 	CALL __CFD1
000bc2 018f      	MOVW R16,R30
000bc3 01f8      	MOVW R30,R16
000bc4 940e 17c8 	CALL SUBOPT_0x3F
000bc6 940e 17cd 	CALL SUBOPT_0x40
000bc8 940e 17d2 	CALL SUBOPT_0x41
000bca 940e 17d7 	CALL SUBOPT_0x42
000bcc 931a      	ST   -Y,R17
000bcd 930a      	ST   -Y,R16
000bce 85ec      	LDD  R30,Y+12
000bcf 85fd      	LDD  R31,Y+12+1
000bd0 93fa      	ST   -Y,R31
000bd1 93ea      	ST   -Y,R30
000bd2 940e 169a 	CALL SUBOPT_0x11
000bd4 dfa4      	RCALL _intToStr
000bd5 019f      	MOVW R18,R30
000bd6 2e00      	MOV  R0,R16
000bd7 2a01      	OR   R0,R17
000bd8 f449      	BRNE _0xC0010
                 ; 0006 0040        res[i] = '0';
000bd9 01f9      	MOVW R30,R18
000bda 85aa      	LDD  R26,Y+10
000bdb 85bb      	LDD  R27,Y+10+1
000bdc 0fae      	ADD  R26,R30
000bdd 1fbf      	ADC  R27,R31
000bde e3e0      	LDI  R30,LOW(48)
000bdf 93ec      	ST   X,R30
                 ; 0006 0041        i++;
                +
000be0 5f2f     +SUBI R18 , LOW ( - 1 )
000be1 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0006 0042     }
                 ; 0006 0043     // check for display option after point
                 ; 0006 0044     if (afterpoint != 0){
                 _0xC0010:
000be2 85e8      	LDD  R30,Y+8
000be3 85f9      	LDD  R31,Y+8+1
000be4 9730      	SBIW R30,0
000be5 f141      	BREQ _0xC0011
                 ; 0006 0045         res[i] = '.'; // add dot
000be6 01f9      	MOVW R30,R18
000be7 85aa      	LDD  R26,Y+10
000be8 85bb      	LDD  R27,Y+10+1
000be9 0fae      	ADD  R26,R30
000bea 1fbf      	ADC  R27,R31
000beb e2ee      	LDI  R30,LOW(46)
000bec 93ec      	ST   X,R30
                 ; 0006 0046 
                 ; 0006 0047         // Get the value of fraction part upto given no.
                 ; 0006 0048         // of points after dot. The third parameter is needed
                 ; 0006 0049         // to handle cases like 233.007
                 ; 0006 004A         fpart = fpart * pow(10, afterpoint);
000bed 940e 17dc 	CALL SUBOPT_0x43
000bef 940e 1cca 	CALL __PUTPARD1
000bf1 85ec      	LDD  R30,Y+12
000bf2 85fd      	LDD  R31,Y+12+1
000bf3 940e 17c8 	CALL SUBOPT_0x3F
000bf5 01df      	MOVW R26,R30
000bf6 01cb      	MOVW R24,R22
000bf7 940e 15b0 	CALL _pow
000bf9 940e 17e1 	CALL SUBOPT_0x44
000bfb 940e 17e6 	CALL SUBOPT_0x45
                 ; 0006 004B 
                 ; 0006 004C         intToStr((int)fpart, res + i + 1, afterpoint);
000bfd 940e 17e9 	CALL SUBOPT_0x46
000bff 940e 1a54 	CALL __CFD1
000c01 93fa      	ST   -Y,R31
000c02 93ea      	ST   -Y,R30
000c03 01f9      	MOVW R30,R18
000c04 85ac      	LDD  R26,Y+12
000c05 85bd      	LDD  R27,Y+12+1
000c06 0fea      	ADD  R30,R26
000c07 1ffb      	ADC  R31,R27
000c08 9631      	ADIW R30,1
000c09 93fa      	ST   -Y,R31
000c0a 93ea      	ST   -Y,R30
000c0b 85ac      	LDD  R26,Y+12
000c0c 85bd      	LDD  R27,Y+12+1
000c0d df6b      	RCALL _intToStr
                 ; 0006 004D     }
                 ; 0006 004E }
                 _0xC0011:
000c0e 940e 1d11 	CALL __LOADLOCR4
000c10 9660      	ADIW R28,16
000c11 9508      	RET
                 ;
                 ;
                 ;void send_event(uint8_t led,uint8_t state){
                 ; 0006 0051 void send_event(uint8_t led,uint8_t state){
                 _send_event:
                 ; 0006 0052 
                 ; 0006 0053     memcpy(&SEND_EVENT_[5],Gateway_MacAddress,8);
000c12 940e 17ee 	CALL SUBOPT_0x47
                 ;	led -> Y+1
                 ;	state -> Y+0
000c14 940e 17f8 	CALL SUBOPT_0x48
                 ; 0006 0054     memcpy(&SEND_EVENT_[18],EndDevice_MacAddress,8);
000c16 940e 1765 	CALL SUBOPT_0x31
000c18 940e 17ff 	CALL SUBOPT_0x49
                 ; 0006 0055     memcpy(&SEND_EVENT_[26],Gateway_MacAddress,8);
000c1a 940e 180a 	CALL SUBOPT_0x4A
                 ; 0006 0056     memcpy(&SEND_EVENT_[39],&state,1);
000c1c 940e 16b2 	CALL SUBOPT_0x16
000c1e 940e 1420 	CALL _memcpy
                 ; 0006 0057     SEND_EVENT_[37] = 0xA5;
000c20 eae5      	LDI  R30,LOW(165)
000c21 940e 1811 	CALL SUBOPT_0x4B
                 ; 0006 0058     SEND_EVENT_[38] = led;
                 ; 0006 0059     SEND_EVENT_[40] = xbee_checksum(&SEND_EVENT_[3],SEND_EVENT_[2]);
                 ; 0006 005A     printDebug("\r\n ++++++++++ Send LED ++++++++\r\n");
                +
000c23 eaee     +LDI R30 , LOW ( 2 * _0xC0000 + ( 0 ) )
000c24 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 0 ) )
                 	__POINTW1FN _0xC0000,0
000c25 940e 1669 	CALL SUBOPT_0xB
                 ; 0006 005B     print_payload(SEND_EVENT_,41);
000c27 940e 1822 	CALL SUBOPT_0x4C
000c29 940e 066f 	CALL _print_payload
                 ; 0006 005C     xbee_sendAPI(SEND_EVENT_,41);
000c2b 940e 1822 	CALL SUBOPT_0x4C
000c2d 940e 093c 	CALL _xbee_sendAPI
                 ; 0006 005D 
                 ; 0006 005E }
000c2f 940c 0e7f 	JMP  _0x20C0009
                 ;
                 ;void send_join(){
                 ; 0006 0060 void send_join(){
                 ; 0006 0061 
                 ; 0006 0062     memcpy(&JOIN_A1[18],EndDevice_MacAddress,8);
                 ; 0006 0063     JOIN_A1[38] = xbee_checksum(&JOIN_A1[3],JOIN_A1[2]);
                 ; 0006 0064     printDebug("\r\n ++++++++++ Send Join ++++++++\r\n");
                 ; 0006 0065     print_payload(JOIN_A1, 39);
                 ; 0006 0066     xbee_sendAPI(JOIN_A1,39);
                 ; 0006 0067 
                 ; 0006 0068 }
                 ;
                 ;void send_ping(){
                 ; 0006 006A void send_ping(){
                 _send_ping:
                 ; 0006 006B 
                 ; 0006 006C     memcpy(&PING_A4[5],Gateway_MacAddress,8);
                +
000c31 e5ea     +LDI R30 , LOW ( _PING_A4 + ( 5 ) )
000c32 e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 5 ) )
                 	__POINTW1MN _PING_A4,5
000c33 940e 1829 	CALL SUBOPT_0x4D
000c35 940e 1420 	CALL _memcpy
                 ; 0006 006D     memcpy(&PING_A4[18],EndDevice_MacAddress,8);
                +
000c37 e6e7     +LDI R30 , LOW ( _PING_A4 + ( 18 ) )
000c38 e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 18 ) )
                 	__POINTW1MN _PING_A4,18
000c39 93fa      	ST   -Y,R31
000c3a 93ea      	ST   -Y,R30
000c3b 940e 1778 	CALL SUBOPT_0x35
000c3d 940e 1765 	CALL SUBOPT_0x31
000c3f 940e 1420 	CALL _memcpy
                 ; 0006 006E     memcpy(&PING_A4[26],Gateway_MacAddress,8);
                +
000c41 e6ef     +LDI R30 , LOW ( _PING_A4 + ( 26 ) )
000c42 e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 26 ) )
                 	__POINTW1MN _PING_A4,26
000c43 940e 1829 	CALL SUBOPT_0x4D
000c45 940e 1420 	CALL _memcpy
                 ; 0006 006F     PING_A4[38] = xbee_checksum(&PING_A4[3],PING_A4[2]);
                +
000c47 e5e8     +LDI R30 , LOW ( _PING_A4 + ( 3 ) )
000c48 e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 3 ) )
                 	__POINTW1MN _PING_A4,3
000c49 93fa      	ST   -Y,R31
000c4a 93ea      	ST   -Y,R30
                +
000c4b 91a0 0957+LDS R26 , _PING_A4 + ( 2 )
                 	__GETB2MN _PING_A4,2
000c4d e0b0      	LDI  R27,0
000c4e 940e 0919 	CALL _xbee_checksum
                +
000c50 93e0 097b+STS _PING_A4 + ( 38 ) , R30
                 	__PUTB1MN _PING_A4,38
                 ; 0006 0070     printDebug("\r\n ++++++++++ Send Ping ++++++++\r\n");
                +
000c52 efe3     +LDI R30 , LOW ( 2 * _0xC0000 + ( 69 ) )
000c53 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 69 ) )
                 	__POINTW1FN _0xC0000,69
000c54 940e 1669 	CALL SUBOPT_0xB
                 ; 0006 0071     print_payload(PING_A4, 39);
000c56 940e 1830 	CALL SUBOPT_0x4E
000c58 940e 066f 	CALL _print_payload
                 ; 0006 0072     xbee_sendAPI(PING_A4,39);
000c5a 940e 1830 	CALL SUBOPT_0x4E
000c5c 940e 093c 	CALL _xbee_sendAPI
                 ; 0006 0073 
                 ; 0006 0074 }
000c5e 9508      	RET
                 ;
                 ;void recive_event(uint8_t led,uint8_t state){
                 ; 0006 0076 void recive_event(uint8_t led,uint8_t state){
                 _recive_event:
                 ; 0006 0077 
                 ; 0006 0078     memcpy(&SEND_EVENT_[5],Gateway_MacAddress,8);
000c5f 940e 17ee 	CALL SUBOPT_0x47
                 ;	led -> Y+1
                 ;	state -> Y+0
000c61 940e 17f8 	CALL SUBOPT_0x48
                 ; 0006 0079     memcpy(&SEND_EVENT_[18],EndDevice_MacAddress,8);
000c63 940e 1765 	CALL SUBOPT_0x31
000c65 940e 17ff 	CALL SUBOPT_0x49
                 ; 0006 007A     memcpy(&SEND_EVENT_[26],Gateway_MacAddress,8);
000c67 940e 180a 	CALL SUBOPT_0x4A
                 ; 0006 007B     memcpy(&SEND_EVENT_[39],&state,1);
000c69 940e 16b2 	CALL SUBOPT_0x16
000c6b 940e 1420 	CALL _memcpy
                 ; 0006 007C     SEND_EVENT_[37] = 0xA6;
000c6d eae6      	LDI  R30,LOW(166)
000c6e 940e 1811 	CALL SUBOPT_0x4B
                 ; 0006 007D     SEND_EVENT_[38] = led;
                 ; 0006 007E     SEND_EVENT_[40] = xbee_checksum(&SEND_EVENT_[3],SEND_EVENT_[2]);
                 ; 0006 007F     printDebug("\r\n ++++++++++ Send EVENT RECIVE ++++++++\r\n");
                +
000c70 e1e6     +LDI R30 , LOW ( 2 * _0xC0000 + ( 104 ) )
000c71 e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 104 ) )
                 	__POINTW1FN _0xC0000,104
000c72 940e 1669 	CALL SUBOPT_0xB
                 ; 0006 0080     print_payload(SEND_EVENT_,41);
000c74 940e 1822 	CALL SUBOPT_0x4C
000c76 940e 066f 	CALL _print_payload
                 ; 0006 0081     xbee_sendAPI(SEND_EVENT_,41);
000c78 940e 1822 	CALL SUBOPT_0x4C
000c7a 940e 093c 	CALL _xbee_sendAPI
                 ; 0006 0082 
                 ; 0006 0083 }
000c7c 940c 0e7f 	JMP  _0x20C0009
                 ;
                 ;void send_report(uint8_t data_id,float Vavg,float Iavg,float Pavg,float WHsum){
                 ; 0006 0085 void send_report(uint8_t data_id,float Vavg,float Iavg,float Pavg,float WHsum){
                 _send_report:
                 ; 0006 0086 
                 ; 0006 0087     memcpy(&SEND_REPORT_[5],Gateway_MacAddress,8);
000c7e 940e 1ccf 	CALL __PUTPARD2
                 ;	data_id -> Y+16
                 ;	Vavg -> Y+12
                 ;	Iavg -> Y+8
                 ;	Pavg -> Y+4
                 ;	WHsum -> Y+0
                +
000c80 eaea     +LDI R30 , LOW ( _SEND_REPORT_ + ( 5 ) )
000c81 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 5 ) )
                 	__POINTW1MN _SEND_REPORT_,5
000c82 940e 1829 	CALL SUBOPT_0x4D
000c84 940e 1420 	CALL _memcpy
                 ; 0006 0088     memcpy(&SEND_REPORT_[18],EndDevice_MacAddress,8);
                +
000c86 ebe7     +LDI R30 , LOW ( _SEND_REPORT_ + ( 18 ) )
000c87 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 18 ) )
                 	__POINTW1MN _SEND_REPORT_,18
000c88 93fa      	ST   -Y,R31
000c89 93ea      	ST   -Y,R30
000c8a 940e 1778 	CALL SUBOPT_0x35
000c8c 940e 1765 	CALL SUBOPT_0x31
000c8e 940e 1420 	CALL _memcpy
                 ; 0006 0089     memcpy(&SEND_REPORT_[26],Gateway_MacAddress,8);
                +
000c90 ebef     +LDI R30 , LOW ( _SEND_REPORT_ + ( 26 ) )
000c91 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 26 ) )
                 	__POINTW1MN _SEND_REPORT_,26
000c92 940e 1829 	CALL SUBOPT_0x4D
000c94 940e 1420 	CALL _memcpy
                 ; 0006 008A 
                 ; 0006 008B     /*=============== Convert Data from float to ASCII ===============*/
                 ; 0006 008C     _ftoa(Vavg, _voltage,2);
000c96 940e 17c3 	CALL SUBOPT_0x3E
000c98 940e 1cca 	CALL __PUTPARD1
000c9a efe1      	LDI  R30,LOW(__voltage)
000c9b e0f9      	LDI  R31,HIGH(__voltage)
000c9c 940e 1837 	CALL SUBOPT_0x4F
000c9e df1a      	RCALL __ftoa
                 ; 0006 008D     _ftoa(Iavg, _amp,2);
000c9f 940e 183a 	CALL SUBOPT_0x50
000ca1 940e 1cca 	CALL __PUTPARD1
000ca3 efe9      	LDI  R30,LOW(__amp)
000ca4 e0f9      	LDI  R31,HIGH(__amp)
000ca5 940e 1837 	CALL SUBOPT_0x4F
000ca7 df11      	RCALL __ftoa
                 ; 0006 008E     _ftoa(Pavg, _power,2);
000ca8 940e 17e9 	CALL SUBOPT_0x46
000caa 940e 1cca 	CALL __PUTPARD1
000cac e0e1      	LDI  R30,LOW(__power)
000cad e0fa      	LDI  R31,HIGH(__power)
000cae 940e 1837 	CALL SUBOPT_0x4F
000cb0 df08      	RCALL __ftoa
                 ; 0006 008F     _ftoa(WHsum, _watt,2);
000cb1 940e 183f 	CALL SUBOPT_0x51
000cb3 940e 1cca 	CALL __PUTPARD1
000cb5 e0e9      	LDI  R30,LOW(__watt)
000cb6 e0fa      	LDI  R31,HIGH(__watt)
000cb7 940e 1837 	CALL SUBOPT_0x4F
000cb9 deff      	RCALL __ftoa
                 ; 0006 0090 
                 ; 0006 0091     SEND_REPORT_[37] = 0xA7;
000cba eae7      	LDI  R30,LOW(167)
                +
000cbb 93e0 09ca+STS _SEND_REPORT_ + ( 37 ) , R30
                 	__PUTB1MN _SEND_REPORT_,37
                 ; 0006 0092     SEND_REPORT_[38] = data_id;
000cbd 89e8      	LDD  R30,Y+16
                +
000cbe 93e0 09cb+STS _SEND_REPORT_ + ( 38 ) , R30
                 	__PUTB1MN _SEND_REPORT_,38
                 ; 0006 0093     memcpy(&SEND_REPORT_[40],_voltage,8);
                +
000cc0 eced     +LDI R30 , LOW ( _SEND_REPORT_ + ( 40 ) )
000cc1 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 40 ) )
                 	__POINTW1MN _SEND_REPORT_,40
000cc2 93fa      	ST   -Y,R31
000cc3 93ea      	ST   -Y,R30
000cc4 efe1      	LDI  R30,LOW(__voltage)
000cc5 e0f9      	LDI  R31,HIGH(__voltage)
000cc6 940e 1842 	CALL SUBOPT_0x52
000cc8 940e 1420 	CALL _memcpy
                 ; 0006 0094     memcpy(&SEND_REPORT_[49],_amp,8);
                +
000cca ede6     +LDI R30 , LOW ( _SEND_REPORT_ + ( 49 ) )
000ccb e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 49 ) )
                 	__POINTW1MN _SEND_REPORT_,49
000ccc 93fa      	ST   -Y,R31
000ccd 93ea      	ST   -Y,R30
000cce efe9      	LDI  R30,LOW(__amp)
000ccf e0f9      	LDI  R31,HIGH(__amp)
000cd0 940e 1842 	CALL SUBOPT_0x52
000cd2 940e 1420 	CALL _memcpy
                 ; 0006 0095     memcpy(&SEND_REPORT_[58],_power,8);
                +
000cd4 edef     +LDI R30 , LOW ( _SEND_REPORT_ + ( 58 ) )
000cd5 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 58 ) )
                 	__POINTW1MN _SEND_REPORT_,58
000cd6 93fa      	ST   -Y,R31
000cd7 93ea      	ST   -Y,R30
000cd8 e0e1      	LDI  R30,LOW(__power)
000cd9 e0fa      	LDI  R31,HIGH(__power)
000cda 940e 1842 	CALL SUBOPT_0x52
000cdc 940e 1420 	CALL _memcpy
                 ; 0006 0096     memcpy(&SEND_REPORT_[67],_watt,8);
                +
000cde eee8     +LDI R30 , LOW ( _SEND_REPORT_ + ( 67 ) )
000cdf e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 67 ) )
                 	__POINTW1MN _SEND_REPORT_,67
000ce0 93fa      	ST   -Y,R31
000ce1 93ea      	ST   -Y,R30
000ce2 e0e9      	LDI  R30,LOW(__watt)
000ce3 e0fa      	LDI  R31,HIGH(__watt)
000ce4 940e 1842 	CALL SUBOPT_0x52
000ce6 940e 1420 	CALL _memcpy
                 ; 0006 0097 
                 ; 0006 0098     SEND_REPORT_[75] = xbee_checksum(&SEND_REPORT_[3],SEND_REPORT_[2]);
                +
000ce8 eae8     +LDI R30 , LOW ( _SEND_REPORT_ + ( 3 ) )
000ce9 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 3 ) )
                 	__POINTW1MN _SEND_REPORT_,3
000cea 93fa      	ST   -Y,R31
000ceb 93ea      	ST   -Y,R30
                +
000cec 91a0 09a7+LDS R26 , _SEND_REPORT_ + ( 2 )
                 	__GETB2MN _SEND_REPORT_,2
000cee e0b0      	LDI  R27,0
000cef 940e 0919 	CALL _xbee_checksum
                +
000cf1 93e0 09f0+STS _SEND_REPORT_ + ( 75 ) , R30
                 	__PUTB1MN _SEND_REPORT_,75
                 ; 0006 0099     printDebug("\r\n ++++++++++ Send REPORT ++++++++\r\n");
                +
000cf3 e4e1     +LDI R30 , LOW ( 2 * _0xC0000 + ( 147 ) )
000cf4 e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 147 ) )
                 	__POINTW1FN _0xC0000,147
000cf5 940e 1669 	CALL SUBOPT_0xB
                 ; 0006 009A     print_payload(SEND_REPORT_,76);
000cf7 940e 1845 	CALL SUBOPT_0x53
000cf9 940e 066f 	CALL _print_payload
                 ; 0006 009B     xbee_sendAPI(SEND_REPORT_,76);
000cfb 940e 1845 	CALL SUBOPT_0x53
000cfd 940e 093c 	CALL _xbee_sendAPI
                 ; 0006 009C 
                 ; 0006 009D }
000cff 9661      	ADIW R28,17
000d00 9508      	RET
                 ;
                 ;void SendStatusReport(void){
                 ; 0006 009F void SendStatusReport(void){
                 _SendStatusReport:
                 ; 0006 00A0 
                 ; 0006 00A1     Vavg = Vsum/number;      // Voltage
000d01 940e 184c 	CALL SUBOPT_0x54
000d03 940e 1851 	CALL SUBOPT_0x55
000d05 940e 185a 	CALL SUBOPT_0x56
000d07 93e0 0874 	STS  _Vavg,R30
000d09 93f0 0875 	STS  _Vavg+1,R31
000d0b 9360 0876 	STS  _Vavg+2,R22
000d0d 9370 0877 	STS  _Vavg+3,R23
                 ; 0006 00A2     Iavg = Isum/number;      // Current
000d0f 940e 184c 	CALL SUBOPT_0x54
000d11 940e 1861 	CALL SUBOPT_0x57
000d13 940e 185a 	CALL SUBOPT_0x56
000d15 940e 186a 	CALL SUBOPT_0x58
                 ; 0006 00A3     Pavg = Psum/number;      // Power
000d17 940e 184c 	CALL SUBOPT_0x54
000d19 940e 1873 	CALL SUBOPT_0x59
000d1b 940e 185a 	CALL SUBOPT_0x56
000d1d 93e0 087c 	STS  _Pavg,R30
000d1f 93f0 087d 	STS  _Pavg+1,R31
000d21 9360 087e 	STS  _Pavg+2,R22
000d23 9370 087f 	STS  _Pavg+3,R23
                 ; 0006 00A4 
                 ; 0006 00A5     CURRENT_VOLT = Vavg;
000d25 940e 187c 	CALL SUBOPT_0x5A
000d27 93e0 0601 	STS  _CURRENT_VOLT,R30
000d29 93f0 0602 	STS  _CURRENT_VOLT+1,R31
000d2b 9360 0603 	STS  _CURRENT_VOLT+2,R22
000d2d 9370 0604 	STS  _CURRENT_VOLT+3,R23
                 ; 0006 00A6     CURRENT_AMP = Iavg;
000d2f 940e 1885 	CALL SUBOPT_0x5B
000d31 93e0 0605 	STS  _CURRENT_AMP,R30
000d33 93f0 0606 	STS  _CURRENT_AMP+1,R31
000d35 9360 0607 	STS  _CURRENT_AMP+2,R22
000d37 9370 0608 	STS  _CURRENT_AMP+3,R23
                 ; 0006 00A7 
                 ; 0006 00A8     printDebug("\r\n======================================================\r\n");
                +
000d39 e6e6     +LDI R30 , LOW ( 2 * _0xC0000 + ( 184 ) )
000d3a e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 184 ) )
                 	__POINTW1FN _0xC0000,184
000d3b 940e 1669 	CALL SUBOPT_0xB
                 ; 0006 00A9     printDebug("Vsum = %0.4f  ", Vsum); printDebug("Isum = %0.4f  ", Isum); printDebug("Psum = %0.4f\r\n", Psum);
                +
000d3d eae1     +LDI R30 , LOW ( 2 * _0xC0000 + ( 243 ) )
000d3e e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 243 ) )
                 	__POINTW1FN _0xC0000,243
000d3f 93fa      	ST   -Y,R31
000d40 93ea      	ST   -Y,R30
000d41 91e0 0864 	LDS  R30,_Vsum
000d43 91f0 0865 	LDS  R31,_Vsum+1
000d45 9160 0866 	LDS  R22,_Vsum+2
000d47 9170 0867 	LDS  R23,_Vsum+3
000d49 940e 1675 	CALL SUBOPT_0xD
                +
000d4b ebe0     +LDI R30 , LOW ( 2 * _0xC0000 + ( 258 ) )
000d4c e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 258 ) )
                 	__POINTW1FN _0xC0000,258
000d4d 93fa      	ST   -Y,R31
000d4e 93ea      	ST   -Y,R30
000d4f 91e0 0868 	LDS  R30,_Isum
000d51 91f0 0869 	LDS  R31,_Isum+1
000d53 9160 086a 	LDS  R22,_Isum+2
000d55 9170 086b 	LDS  R23,_Isum+3
000d57 940e 1675 	CALL SUBOPT_0xD
                +
000d59 ebef     +LDI R30 , LOW ( 2 * _0xC0000 + ( 273 ) )
000d5a e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 273 ) )
                 	__POINTW1FN _0xC0000,273
000d5b 93fa      	ST   -Y,R31
000d5c 93ea      	ST   -Y,R30
000d5d 91e0 086c 	LDS  R30,_Psum
000d5f 91f0 086d 	LDS  R31,_Psum+1
000d61 9160 086e 	LDS  R22,_Psum+2
000d63 9170 086f 	LDS  R23,_Psum+3
000d65 940e 1675 	CALL SUBOPT_0xD
                 ; 0006 00AA     printDebug("Vavg = %0.4f   ", Vavg); printDebug("Iavg = %0.4f   ", Iavg); printDebug("Pavg = %0.4f\r\n", Pavg);
                +
000d67 ecee     +LDI R30 , LOW ( 2 * _0xC0000 + ( 288 ) )
000d68 e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 288 ) )
                 	__POINTW1FN _0xC0000,288
000d69 93fa      	ST   -Y,R31
000d6a 93ea      	ST   -Y,R30
000d6b 940e 187c 	CALL SUBOPT_0x5A
000d6d 940e 1675 	CALL SUBOPT_0xD
                +
000d6f edee     +LDI R30 , LOW ( 2 * _0xC0000 + ( 304 ) )
000d70 e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 304 ) )
                 	__POINTW1FN _0xC0000,304
000d71 93fa      	ST   -Y,R31
000d72 93ea      	ST   -Y,R30
000d73 940e 1885 	CALL SUBOPT_0x5B
000d75 940e 1675 	CALL SUBOPT_0xD
                +
000d77 eeee     +LDI R30 , LOW ( 2 * _0xC0000 + ( 320 ) )
000d78 e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 320 ) )
                 	__POINTW1FN _0xC0000,320
000d79 93fa      	ST   -Y,R31
000d7a 93ea      	ST   -Y,R30
000d7b 940e 188e 	CALL SUBOPT_0x5C
000d7d 940e 1675 	CALL SUBOPT_0xD
                 ; 0006 00AB     printDebug("Watt-Hour Sum = %0.4f\r\n", WHsum);
                +
000d7f efed     +LDI R30 , LOW ( 2 * _0xC0000 + ( 335 ) )
000d80 e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 335 ) )
                 	__POINTW1FN _0xC0000,335
000d81 93fa      	ST   -Y,R31
000d82 93ea      	ST   -Y,R30
000d83 91e0 0870 	LDS  R30,_WHsum
000d85 91f0 0871 	LDS  R31,_WHsum+1
000d87 9160 0872 	LDS  R22,_WHsum+2
000d89 9170 0873 	LDS  R23,_WHsum+3
000d8b 940e 1675 	CALL SUBOPT_0xD
                 ; 0006 00AC     printDebug("Number Sampling = %d\r\n", number);
                +
000d8d e1e5     +LDI R30 , LOW ( 2 * _0xC0000 + ( 359 ) )
000d8e e0f7     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 359 ) )
                 	__POINTW1FN _0xC0000,359
000d8f 93fa      	ST   -Y,R31
000d90 93ea      	ST   -Y,R30
000d91 940e 184c 	CALL SUBOPT_0x54
000d93 940e 171c 	CALL SUBOPT_0x27
                 ; 0006 00AD     printDebug("======================================================\r\n\r\n");
                +
000d95 e2ec     +LDI R30 , LOW ( 2 * _0xC0000 + ( 382 ) )
000d96 e0f7     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 382 ) )
                 	__POINTW1FN _0xC0000,382
000d97 940e 1669 	CALL SUBOPT_0xB
                 ; 0006 00AE 
                 ; 0006 00AF     Iavg *= 1000.0;
000d99 940e 1897 	CALL SUBOPT_0x5D
000d9b 940e 1b15 	CALL __MULF12
000d9d 940e 186a 	CALL SUBOPT_0x58
                 ; 0006 00B0     send_report(01,Vavg,Iavg,Pavg,WHsum);
000d9f e0e1      	LDI  R30,LOW(1)
000da0 93ea      	ST   -Y,R30
000da1 940e 187c 	CALL SUBOPT_0x5A
000da3 940e 1cca 	CALL __PUTPARD1
000da5 940e 1885 	CALL SUBOPT_0x5B
000da7 940e 1cca 	CALL __PUTPARD1
000da9 940e 188e 	CALL SUBOPT_0x5C
000dab 940e 1cca 	CALL __PUTPARD1
000dad 940e 18a4 	CALL SUBOPT_0x5E
000daf dece      	RCALL _send_report
                 ; 0006 00B1     Iavg /= 1000.0;
000db0 940e 1897 	CALL SUBOPT_0x5D
000db2 940e 1b63 	CALL __DIVF21
000db4 940e 186a 	CALL SUBOPT_0x58
                 ; 0006 00B2     /* Safety Current Sensor */
                 ; 0006 00B3     if((SENSOR_SENSITIVE == SENSOR5A) && (Iavg > 4.9)) {
000db6 940e 18ad 	CALL SUBOPT_0x5F
                +
000db8 30a0     +CPI R26 , LOW ( 0x43390000 )
000db9 e0e0     +LDI R30 , HIGH ( 0x43390000 )
000dba 07be     +CPC R27 , R30
000dbb e3e9     +LDI R30 , BYTE3 ( 0x43390000 )
000dbc 078e     +CPC R24 , R30
000dbd e4e3     +LDI R30 , BYTE4 ( 0x43390000 )
000dbe 079e     +CPC R25 , R30
                 	__CPD2N 0x43390000
000dbf f469      	BRNE _0xC0013
000dc0 940e 18b6 	CALL SUBOPT_0x60
                +
000dc2 eced     +LDI R30 , LOW ( 0x409CCCCD )
000dc3 ecfc     +LDI R31 , HIGH ( 0x409CCCCD )
000dc4 e96c     +LDI R22 , BYTE3 ( 0x409CCCCD )
000dc5 e470     +LDI R23 , BYTE4 ( 0x409CCCCD )
                 	__GETD1N 0x409CCCCD
000dc6 940e 1ba8 	CALL __CMPF12
000dc8 f009      	BREQ PC+2
000dc9 f410      	BRCC PC+3
000dca 940c 0dcd 	JMP  _0xC0013
000dcc c001      	RJMP _0xC0014
                 _0xC0013:
000dcd c001      	RJMP _0xC0012
                 _0xC0014:
                 ; 0006 00B4         SWITCH = TURN_OFF;
000dce c031      	RJMP _0xC0023
                 ; 0006 00B5         POWER_RELAY_OFF;
                 ; 0006 00B6         LED_STAT_OFF;
                 ; 0006 00B7         CURRENT_VOLT = 0.0;
                 ; 0006 00B8         CURRENT_AMP = 0.0;
                 ; 0006 00B9         printDebug("Current Exceed --SWITCH OFF!\r\n");
                 ; 0006 00BA     }else if((SENSOR_SENSITIVE == SENSOR20A) && (Iavg > 19.9)) {
                 _0xC0012:
000dcf 940e 18ad 	CALL SUBOPT_0x5F
                +
000dd1 30a0     +CPI R26 , LOW ( 0x42C80000 )
000dd2 e0e0     +LDI R30 , HIGH ( 0x42C80000 )
000dd3 07be     +CPC R27 , R30
000dd4 ece8     +LDI R30 , BYTE3 ( 0x42C80000 )
000dd5 078e     +CPC R24 , R30
000dd6 e4e2     +LDI R30 , BYTE4 ( 0x42C80000 )
000dd7 079e     +CPC R25 , R30
                 	__CPD2N 0x42C80000
000dd8 f469      	BRNE _0xC0019
000dd9 940e 18b6 	CALL SUBOPT_0x60
                +
000ddb e3e3     +LDI R30 , LOW ( 0x419F3333 )
000ddc e3f3     +LDI R31 , HIGH ( 0x419F3333 )
000ddd e96f     +LDI R22 , BYTE3 ( 0x419F3333 )
000dde e471     +LDI R23 , BYTE4 ( 0x419F3333 )
                 	__GETD1N 0x419F3333
000ddf 940e 1ba8 	CALL __CMPF12
000de1 f009      	BREQ PC+2
000de2 f410      	BRCC PC+3
000de3 940c 0de6 	JMP  _0xC0019
000de5 c001      	RJMP _0xC001A
                 _0xC0019:
000de6 c001      	RJMP _0xC0018
                 _0xC001A:
                 ; 0006 00BB         SWITCH = TURN_OFF;
000de7 c018      	RJMP _0xC0023
                 ; 0006 00BC         POWER_RELAY_OFF;
                 ; 0006 00BD         LED_STAT_OFF;
                 ; 0006 00BE         CURRENT_VOLT = 0.0;
                 ; 0006 00BF         CURRENT_AMP = 0.0;
                 ; 0006 00C0         printDebug("Current Exceed --SWITCH OFF!\r\n");
                 ; 0006 00C1     }else if((SENSOR_SENSITIVE == SENSOR30A) && (Iavg > 29.9)) {
                 _0xC0018:
000de8 940e 18ad 	CALL SUBOPT_0x5F
                +
000dea 30a0     +CPI R26 , LOW ( 0x42840000 )
000deb e0e0     +LDI R30 , HIGH ( 0x42840000 )
000dec 07be     +CPC R27 , R30
000ded e8e4     +LDI R30 , BYTE3 ( 0x42840000 )
000dee 078e     +CPC R24 , R30
000def e4e2     +LDI R30 , BYTE4 ( 0x42840000 )
000df0 079e     +CPC R25 , R30
                 	__CPD2N 0x42840000
000df1 f469      	BRNE _0xC001F
000df2 940e 18b6 	CALL SUBOPT_0x60
                +
000df4 e3e3     +LDI R30 , LOW ( 0x41EF3333 )
000df5 e3f3     +LDI R31 , HIGH ( 0x41EF3333 )
000df6 ee6f     +LDI R22 , BYTE3 ( 0x41EF3333 )
000df7 e471     +LDI R23 , BYTE4 ( 0x41EF3333 )
                 	__GETD1N 0x41EF3333
000df8 940e 1ba8 	CALL __CMPF12
000dfa f009      	BREQ PC+2
000dfb f410      	BRCC PC+3
000dfc 940c 0dff 	JMP  _0xC001F
000dfe c001      	RJMP _0xC0020
                 _0xC001F:
000dff c01e      	RJMP _0xC001E
                 _0xC0020:
                 ; 0006 00C2         SWITCH = TURN_OFF;
                 _0xC0023:
000e00 e0e0      	LDI  R30,LOW(0)
000e01 93e0 0600 	STS  _SWITCH,R30
                 ; 0006 00C3         POWER_RELAY_OFF;
000e03 91e0 0065 	LDS  R30,101
000e05 7feb      	ANDI R30,0xFB
000e06 93e0 0065 	STS  101,R30
                 ; 0006 00C4         LED_STAT_OFF;
000e08 9aaf      	SBI  0x15,7
                 ; 0006 00C5         CURRENT_VOLT = 0.0;
000e09 e0e0      	LDI  R30,LOW(0)
000e0a 93e0 0601 	STS  _CURRENT_VOLT,R30
000e0c 93e0 0602 	STS  _CURRENT_VOLT+1,R30
000e0e 93e0 0603 	STS  _CURRENT_VOLT+2,R30
000e10 93e0 0604 	STS  _CURRENT_VOLT+3,R30
                 ; 0006 00C6         CURRENT_AMP = 0.0;
000e12 93e0 0605 	STS  _CURRENT_AMP,R30
000e14 93e0 0606 	STS  _CURRENT_AMP+1,R30
000e16 93e0 0607 	STS  _CURRENT_AMP+2,R30
000e18 93e0 0608 	STS  _CURRENT_AMP+3,R30
                 ; 0006 00C7         printDebug("Current Exceed --SWITCH OFF!\r\n");
                +
000e1a e6e7     +LDI R30 , LOW ( 2 * _0xC0000 + ( 441 ) )
000e1b e0f7     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 441 ) )
                 	__POINTW1FN _0xC0000,441
000e1c 940e 1669 	CALL SUBOPT_0xB
                 ; 0006 00C8     }
                 ; 0006 00C9 
                 ; 0006 00CA     /* Reset value */
                 ; 0006 00CB     number = 0;
                 _0xC001E:
000e1e e0e0      	LDI  R30,LOW(0)
000e1f 93e0 0830 	STS  _number,R30
000e21 93e0 0831 	STS  _number+1,R30
                 ; 0006 00CC     Vsum = 0.0;
000e23 93e0 0864 	STS  _Vsum,R30
000e25 93e0 0865 	STS  _Vsum+1,R30
000e27 93e0 0866 	STS  _Vsum+2,R30
000e29 93e0 0867 	STS  _Vsum+3,R30
                 ; 0006 00CD     Isum = 0.0;
000e2b 93e0 0868 	STS  _Isum,R30
000e2d 93e0 0869 	STS  _Isum+1,R30
000e2f 93e0 086a 	STS  _Isum+2,R30
000e31 93e0 086b 	STS  _Isum+3,R30
                 ; 0006 00CE     Psum = 0.0;
000e33 93e0 086c 	STS  _Psum,R30
000e35 93e0 086d 	STS  _Psum+1,R30
000e37 93e0 086e 	STS  _Psum+2,R30
000e39 93e0 086f 	STS  _Psum+3,R30
                 ; 0006 00CF     WHsum = 0.0;
000e3b 93e0 0870 	STS  _WHsum,R30
000e3d 93e0 0871 	STS  _WHsum+1,R30
000e3f 93e0 0872 	STS  _WHsum+2,R30
000e41 93e0 0873 	STS  _WHsum+3,R30
                 ; 0006 00D0 
                 ; 0006 00D1 }
000e43 9508      	RET
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <adc.h>
                 ;#include <debug.h>
                 ;
                 ;char Vreferent = VREF_AVCC;
                 
                 	.DSEG
                 ;
                 ;
                 ;void init_adc(unsigned char vrff) {
                 ; 0007 000C void init_adc(unsigned char vrff) {
                 
                 	.CSEG
                 _init_adc:
                 ; 0007 000D 
                 ; 0007 000E     // ADC initialization
                 ; 0007 000F     // ADC Clock frequency: 691.200 kHz
                 ; 0007 0010     // ADC Voltage Reference: vrff
                 ; 0007 0011     Vreferent = vrff;
000e44 93aa      	ST   -Y,R26
                 ;	vrff -> Y+0
000e45 81e8      	LD   R30,Y
000e46 93e0 0a11 	STS  _Vreferent,R30
                 ; 0007 0012     ADMUX = Vreferent & 0xff;
000e48 b9e7      	OUT  0x7,R30
                 ; 0007 0013     ADCSRA = 0xA4;
000e49 eae4      	LDI  R30,LOW(164)
000e4a b9e6      	OUT  0x6,R30
                 ; 0007 0014     //printDebug("ADMUX = %02X\r\n", ADMUX);
                 ; 0007 0015 
                 ; 0007 0016 }
000e4b 9621      	ADIW R28,1
000e4c 9508      	RET
                 ;
                 ;// Read the AD conversion result
                 ;uint16_t read_adc(unsigned char adc_input) {
                 ; 0007 0019 uint16_t read_adc(unsigned char adc_input) {
                 _read_adc:
                 ; 0007 001A 
                 ; 0007 001B     unsigned int adc_data = 0x0000;
                 ; 0007 001C 
                 ; 0007 001D     ADMUX = (Vreferent | adc_input);
000e4d 93aa      	ST   -Y,R26
000e4e 940e 1609 	CALL SUBOPT_0x0
                 ;	adc_input -> Y+2
                 ;	adc_data -> R16,R17
000e50 81ea      	LDD  R30,Y+2
000e51 91a0 0a11 	LDS  R26,_Vreferent
000e53 2bea      	OR   R30,R26
000e54 b9e7      	OUT  0x7,R30
                 ; 0007 001E     //printDebug("ADMUX = %02X\r\n", ADMUX);
                 ; 0007 001F 
                 ; 0007 0020     // Delay needed for the stabilization of the ADC input voltage
                 ; 0007 0021     delay_us(50);
                +
000e55 eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
000e56 958a     +DEC R24
000e57 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
                 ; 0007 0022 
                 ; 0007 0023     // Start the AD conversion
                 ; 0007 0024     ADCSRA |= 0x80; // ENABLE ADC
000e58 9a37      	SBI  0x6,7
                 ; 0007 0025     ADCSRA |= 0x40;  // Start convert
000e59 9a36      	SBI  0x6,6
                 ; 0007 0026 
                 ; 0007 0027     // Wait for the AD conversion to complete
                 ; 0007 0028     while((ADCSRA & 0x10) == 0);
                 _0xE0004:
000e5a 9b34      	SBIS 0x6,4
000e5b cffe      	RJMP _0xE0004
                 ; 0007 0029     adc_data = ADCL;
000e5c b104      	IN   R16,4
000e5d 2711      	CLR  R17
                 ; 0007 002A     adc_data |= (ADCH & 0x00ff) << 8;
000e5e b1e5      	IN   R30,0x5
000e5f 2ffe      	MOV  R31,R30
000e60 e0e0      	LDI  R30,0
                +
000e61 2b0e     +OR R16 , R30
000e62 2b1f     +OR R17 , R31
                 	__ORWRR 16,17,30,31
                 ; 0007 002B 
                 ; 0007 002C     ADCSRA |= 0x10;
000e63 9a34      	SBI  0x6,4
                 ; 0007 002D 
                 ; 0007 002E     return adc_data;
000e64 01f8      	MOVW R30,R16
000e65 8119      	LDD  R17,Y+1
000e66 8108      	LDD  R16,Y+0
000e67 c00b      	RJMP _0x20C000A
                 ; 0007 002F }
                 ;
                 ;
                 ;
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <uart.h>
                 ;#include <int_protocol.h>
                 ;#include <debug.h>
                 ;
                 ;uint8_t Eaddress        = 5;
                 
                 	.DSEG
                 ;
                 ;void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
                 ; 0008 000C void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
                 
                 	.CSEG
                 _EEPROM_write:
                 ; 0008 000D     while(EECR & (1<<EEWE))
000e68 93aa      	ST   -Y,R26
                 ;	uiAddress -> Y+1
                 ;	ucData -> Y+0
                 _0x100004:
000e69 99e1      	SBIC 0x1C,1
                 ; 0008 000E     ;
000e6a cffe      	RJMP _0x100004
                 ; 0008 000F     EEAR = uiAddress;
000e6b 81e9      	LDD  R30,Y+1
000e6c 81fa      	LDD  R31,Y+1+1
000e6d bbff      	OUT  0x1E+1,R31
000e6e bbee      	OUT  0x1E,R30
                 ; 0008 0010     EEDR = ucData;
000e6f 81e8      	LD   R30,Y
000e70 bbed      	OUT  0x1D,R30
                 ; 0008 0011     EECR |= (1<<EEMWE);
000e71 9ae2      	SBI  0x1C,2
                 ; 0008 0012     EECR |= (1<<EEWE);
000e72 9ae1      	SBI  0x1C,1
                 ; 0008 0013 }
                 _0x20C000A:
000e73 9623      	ADIW R28,3
000e74 9508      	RET
                 ;
                 ;
                 ;unsigned char EEPROM_read(unsigned int uiAddress){
                 ; 0008 0016 unsigned char EEPROM_read(unsigned int uiAddress){
                 _EEPROM_read:
                 ; 0008 0017     while(EECR & (1<<EEWE))
000e75 93ba      	ST   -Y,R27
000e76 93aa      	ST   -Y,R26
                 ;	uiAddress -> Y+0
                 _0x100007:
000e77 99e1      	SBIC 0x1C,1
                 ; 0008 0018     ;
000e78 cffe      	RJMP _0x100007
                 ; 0008 0019     EEAR = uiAddress;
000e79 81e8      	LD   R30,Y
000e7a 81f9      	LDD  R31,Y+1
000e7b bbff      	OUT  0x1E+1,R31
000e7c bbee      	OUT  0x1E,R30
                 ; 0008 001A     EECR |= (1<<EERE);
000e7d 9ae0      	SBI  0x1C,0
                 ; 0008 001B     return EEDR;
000e7e b3ed      	IN   R30,0x1D
                 _0x20C0009:
000e7f 9622      	ADIW R28,2
000e80 9508      	RET
                 ; 0008 001C }
                 ;
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <uart.h>
                 ;#include <int_protocol.h>
                 ;#include <debug.h>
                 ;#include <adc.h>
                 ;#include <math.h>
                 ;#include <meansure.h>
                 ;
                 ;float SENSOR_SENSITIVE;
                 ;float AMP_ADJ_ZERO;
                 ;float total                 = 0.0;
                 ;float avg                   = 2500.0;
                 
                 	.DSEG
                 ;float value                 = 0.0;
                 ;float Viout                 = 0.0;
                 ;float Vdif                  = 0.0;
                 ;float Vsq_avg               = 0.0;
                 ;float volt                  = 0.0;
                 ;float amp                   = 0.0;
                 ;float power                 = 0.0;
                 ;float whour                 = 0.0;
                 ;float Vsum                  = 0.0;
                 ;float Isum                  = 0.0;
                 ;float Psum                  = 0.0;
                 ;float WHsum                 = 0.0;
                 ;float Vavg                  = 0.0;
                 ;float Iavg                  = 0.0;
                 ;float Pavg                  = 0.0;
                 ;float CURRENT_VOLT          = 0.0;
                 ;float CURRENT_AMP           = 0.0;
                 ;uint16_t number             = 0;
                 ;uint16_t adcValue           = 0;
                 ;uint16_t countSampling      = 0;
                 ;eeprom float ADJ0_SENSOR5A  = 0.090;
                 ;eeprom float ADJ0_SENSOR20A = 0.11;
                 ;eeprom float ADJ0_SENSOR30A = 0.11;
                 ;
                 ;void ReadCurrent(void){
                 ; 0009 0029 void ReadCurrent(void){
                 
                 	.CSEG
                 _ReadCurrent:
                 ; 0009 002A     adcValue = read_adc(ADC1);
000e81 e0a1      	LDI  R26,LOW(1)
000e82 940e 18bf 	CALL SUBOPT_0x61
                 ; 0009 002B     printDebug("ADC = %d\r\n", adcValue);
                +
000e84 e8ee     +LDI R30 , LOW ( 2 * _0x120000 + ( 0 ) )
000e85 e0f7     +LDI R31 , HIGH ( 2 * _0x120000 + ( 0 ) )
                 	__POINTW1FN _0x120000,0
000e86 93fa      	ST   -Y,R31
000e87 93ea      	ST   -Y,R30
000e88 940e 18c6 	CALL SUBOPT_0x62
000e8a 940e 171c 	CALL SUBOPT_0x27
                 ; 0009 002C     value = adcValue * (5000.0 / 1023.0);
000e8c 940e 18cb 	CALL SUBOPT_0x63
                +
000e8e e1aa     +LDI R26 , LOW ( 0x409C671A )
000e8f e6b7     +LDI R27 , HIGH ( 0x409C671A )
000e90 e98c     +LDI R24 , BYTE3 ( 0x409C671A )
000e91 e490     +LDI R25 , BYTE4 ( 0x409C671A )
                 	__GETD2N 0x409C671A
000e92 940e 1b15 	CALL __MULF12
000e94 93e0 0844 	STS  _value,R30
000e96 93f0 0845 	STS  _value+1,R31
000e98 9360 0846 	STS  _value+2,R22
000e9a 9370 0847 	STS  _value+3,R23
                 ; 0009 002D 
                 ; 0009 002E     // Keep track of the moving average
                 ; 0009 002F     // See more : http://jeelabs.org/2011/09/15/power-measurement-acs-code/
                 ; 0009 0030     avg = (499.0*avg + value) / 500.0;
000e9c 940e 18d1 	CALL SUBOPT_0x64
                +
000e9e e0a0     +LDI R26 , LOW ( 0x43F98000 )
000e9f e8b0     +LDI R27 , HIGH ( 0x43F98000 )
000ea0 ef89     +LDI R24 , BYTE3 ( 0x43F98000 )
000ea1 e493     +LDI R25 , BYTE4 ( 0x43F98000 )
                 	__GETD2N 0x43F98000
000ea2 940e 1b15 	CALL __MULF12
000ea4 940e 18da 	CALL SUBOPT_0x65
000ea6 940e 18e3 	CALL SUBOPT_0x66
                +
000ea8 e0e0     +LDI R30 , LOW ( 0x43FA0000 )
000ea9 e0f0     +LDI R31 , HIGH ( 0x43FA0000 )
000eaa ef6a     +LDI R22 , BYTE3 ( 0x43FA0000 )
000eab e473     +LDI R23 , BYTE4 ( 0x43FA0000 )
                 	__GETD1N 0x43FA0000
000eac 940e 1b63 	CALL __DIVF21
000eae 93e0 0840 	STS  _avg,R30
000eb0 93f0 0841 	STS  _avg+1,R31
000eb2 9360 0842 	STS  _avg+2,R22
000eb4 9370 0843 	STS  _avg+3,R23
                 ; 0009 0031 
                 ; 0009 0032     if(value > avg){
000eb6 940e 18e8 	CALL SUBOPT_0x67
000eb8 f009      	BREQ PC+2
000eb9 f410      	BRCC PC+3
000eba 940c 0ecd 	JMP  _0x120004
                 ; 0009 0033         Vdif = value - avg;
000ebc 91a0 0840 	LDS  R26,_avg
000ebe 91b0 0841 	LDS  R27,_avg+1
000ec0 9180 0842 	LDS  R24,_avg+2
000ec2 9190 0843 	LDS  R25,_avg+3
000ec4 91e0 0844 	LDS  R30,_value
000ec6 91f0 0845 	LDS  R31,_value+1
000ec8 9160 0846 	LDS  R22,_value+2
000eca 9170 0847 	LDS  R23,_value+3
000ecc c007      	RJMP _0x12000B
                 ; 0009 0034         total += (Vdif*Vdif);
                 ; 0009 0035     }else if(value < avg) {
                 _0x120004:
000ecd 940e 18e8 	CALL SUBOPT_0x67
000ecf f520      	BRSH _0x120006
                 ; 0009 0036         Vdif = avg - value;
000ed0 940e 18da 	CALL SUBOPT_0x65
000ed2 940e 18d1 	CALL SUBOPT_0x64
                 _0x12000B:
000ed4 940e 1abe 	CALL __SUBF12
000ed6 93e0 084c 	STS  _Vdif,R30
000ed8 93f0 084d 	STS  _Vdif+1,R31
000eda 9360 084e 	STS  _Vdif+2,R22
000edc 9370 084f 	STS  _Vdif+3,R23
                 ; 0009 0037         total += (Vdif*Vdif);
000ede 91a0 084c 	LDS  R26,_Vdif
000ee0 91b0 084d 	LDS  R27,_Vdif+1
000ee2 9180 084e 	LDS  R24,_Vdif+2
000ee4 9190 084f 	LDS  R25,_Vdif+3
000ee6 940e 1b15 	CALL __MULF12
000ee8 940e 18ed 	CALL SUBOPT_0x68
000eea 940e 1ac5 	CALL __ADDF12
000eec 93e0 083c 	STS  _total,R30
000eee 93f0 083d 	STS  _total+1,R31
000ef0 9360 083e 	STS  _total+2,R22
000ef2 9370 083f 	STS  _total+3,R23
                 ; 0009 0038     }
                 ; 0009 0039     countSampling++;
                 _0x120006:
000ef4 e8a0      	LDI  R26,LOW(_countSampling)
000ef5 e0b8      	LDI  R27,HIGH(_countSampling)
000ef6 c10a      	RJMP _0x20C0008
                 ; 0009 003A }
                 ;
                 ;void ReadVoltage(void){
                 ; 0009 003C void ReadVoltage(void){
                 _ReadVoltage:
                 ; 0009 003D    /*---------- Voltage ----------*/
                 ; 0009 003E     adcValue = read_adc(ADC0);
000ef7 e0a0      	LDI  R26,LOW(0)
000ef8 940e 18bf 	CALL SUBOPT_0x61
                 ; 0009 003F     volt = (((adcValue*5.0)/1023.0)/0.01);
000efa 940e 18cb 	CALL SUBOPT_0x63
                +
000efc e0a0     +LDI R26 , LOW ( 0x40A00000 )
000efd e0b0     +LDI R27 , HIGH ( 0x40A00000 )
000efe ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
000eff e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
000f00 940e 18f6 	CALL SUBOPT_0x69
                +
000f02 e0e0     +LDI R30 , LOW ( 0x447FC000 )
000f03 ecf0     +LDI R31 , HIGH ( 0x447FC000 )
000f04 e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
000f05 e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
000f06 940e 1b63 	CALL __DIVF21
000f08 01df      	MOVW R26,R30
000f09 01cb      	MOVW R24,R22
                +
000f0a e0ea     +LDI R30 , LOW ( 0x3C23D70A )
000f0b edf7     +LDI R31 , HIGH ( 0x3C23D70A )
000f0c e263     +LDI R22 , BYTE3 ( 0x3C23D70A )
000f0d e37c     +LDI R23 , BYTE4 ( 0x3C23D70A )
                 	__GETD1N 0x3C23D70A
000f0e 940e 1b63 	CALL __DIVF21
000f10 93e0 0854 	STS  _volt,R30
000f12 93f0 0855 	STS  _volt+1,R31
000f14 9360 0856 	STS  _volt+2,R22
000f16 9370 0857 	STS  _volt+3,R23
                 ; 0009 0040     if(volt < 223.0) {
000f18 940e 18fb 	CALL SUBOPT_0x6A
                +
000f1a e0e0     +LDI R30 , LOW ( 0x435F0000 )
000f1b e0f0     +LDI R31 , HIGH ( 0x435F0000 )
000f1c e56f     +LDI R22 , BYTE3 ( 0x435F0000 )
000f1d e473     +LDI R23 , BYTE4 ( 0x435F0000 )
                 	__GETD1N 0x435F0000
000f1e 940e 1ba8 	CALL __CMPF12
000f20 f448      	BRSH _0x120007
                 ; 0009 0041         volt += 9.0;
000f21 940e 1904 	CALL SUBOPT_0x6B
                +
000f23 e0a0     +LDI R26 , LOW ( 0x41100000 )
000f24 e0b0     +LDI R27 , HIGH ( 0x41100000 )
000f25 e180     +LDI R24 , BYTE3 ( 0x41100000 )
000f26 e491     +LDI R25 , BYTE4 ( 0x41100000 )
                 	__GETD2N 0x41100000
000f27 940e 1ac5 	CALL __ADDF12
000f29 c014      	RJMP _0x12000C
                 ; 0009 0042     }else if(volt > 233.0) {
                 _0x120007:
000f2a 940e 18fb 	CALL SUBOPT_0x6A
                +
000f2c e0e0     +LDI R30 , LOW ( 0x43690000 )
000f2d e0f0     +LDI R31 , HIGH ( 0x43690000 )
000f2e e669     +LDI R22 , BYTE3 ( 0x43690000 )
000f2f e473     +LDI R23 , BYTE4 ( 0x43690000 )
                 	__GETD1N 0x43690000
000f30 940e 1ba8 	CALL __CMPF12
000f32 f009      	BREQ PC+2
000f33 f410      	BRCC PC+3
000f34 940c 0f46 	JMP  _0x120009
                 ; 0009 0043         volt -= 4.0;
000f36 940e 1904 	CALL SUBOPT_0x6B
                +
000f38 e0a0     +LDI R26 , LOW ( 0x40800000 )
000f39 e0b0     +LDI R27 , HIGH ( 0x40800000 )
000f3a e880     +LDI R24 , BYTE3 ( 0x40800000 )
000f3b e490     +LDI R25 , BYTE4 ( 0x40800000 )
                 	__GETD2N 0x40800000
000f3c 940e 1abe 	CALL __SUBF12
                 _0x12000C:
000f3e 93e0 0854 	STS  _volt,R30
000f40 93f0 0855 	STS  _volt+1,R31
000f42 9360 0856 	STS  _volt+2,R22
000f44 9370 0857 	STS  _volt+3,R23
                 ; 0009 0044     }
                 ; 0009 0045     printDebug("Volt = %f\r\n", volt);
                 _0x120009:
                +
000f46 e9e9     +LDI R30 , LOW ( 2 * _0x120000 + ( 11 ) )
000f47 e0f7     +LDI R31 , HIGH ( 2 * _0x120000 + ( 11 ) )
                 	__POINTW1FN _0x120000,11
000f48 93fa      	ST   -Y,R31
000f49 93ea      	ST   -Y,R30
000f4a 940e 1904 	CALL SUBOPT_0x6B
000f4c 940e 1675 	CALL SUBOPT_0xD
                 ; 0009 0046     Vsum += volt;
000f4e 940e 1904 	CALL SUBOPT_0x6B
000f50 940e 1851 	CALL SUBOPT_0x55
000f52 940e 1ac5 	CALL __ADDF12
000f54 93e0 0864 	STS  _Vsum,R30
000f56 93f0 0865 	STS  _Vsum+1,R31
000f58 9360 0866 	STS  _Vsum+2,R22
000f5a 9370 0867 	STS  _Vsum+3,R23
                 ; 0009 0047 
                 ; 0009 0048     /*---------- Current ----------*/
                 ; 0009 0049     // V-rms
                 ; 0009 004A     // See more : http://www.electronics-tutorials.ws/blog/rms-voltage.html
                 ; 0009 004B     Vsq_avg = total / countSampling;
000f5c 91e0 0880 	LDS  R30,_countSampling
000f5e 91f0 0881 	LDS  R31,_countSampling+1
000f60 940e 18ed 	CALL SUBOPT_0x68
000f62 940e 185a 	CALL SUBOPT_0x56
000f64 93e0 0850 	STS  _Vsq_avg,R30
000f66 93f0 0851 	STS  _Vsq_avg+1,R31
000f68 9360 0852 	STS  _Vsq_avg+2,R22
000f6a 9370 0853 	STS  _Vsq_avg+3,R23
                 ; 0009 004C     Viout = sqrt(Vsq_avg);
000f6c 91a0 0850 	LDS  R26,_Vsq_avg
000f6e 91b0 0851 	LDS  R27,_Vsq_avg+1
000f70 9180 0852 	LDS  R24,_Vsq_avg+2
000f72 9190 0853 	LDS  R25,_Vsq_avg+3
000f74 940e 1bc8 	CALL _sqrt
000f76 93e0 0848 	STS  _Viout,R30
000f78 93f0 0849 	STS  _Viout+1,R31
000f7a 9360 084a 	STS  _Viout+2,R22
000f7c 9370 084b 	STS  _Viout+3,R23
                 ; 0009 004D     amp = Viout / SENSOR_SENSITIVE;                  // ACS712 +-5 or +-20 or +-30 Amp.
000f7e 940e 167c 	CALL SUBOPT_0xE
000f80 91a0 0848 	LDS  R26,_Viout
000f82 91b0 0849 	LDS  R27,_Viout+1
000f84 9180 084a 	LDS  R24,_Viout+2
000f86 9190 084b 	LDS  R25,_Viout+3
000f88 940e 1b63 	CALL __DIVF21
000f8a 93e0 0858 	STS  _amp,R30
000f8c 93f0 0859 	STS  _amp+1,R31
000f8e 9360 085a 	STS  _amp+2,R22
000f90 9370 085b 	STS  _amp+3,R23
                 ; 0009 004E 
                 ; 0009 004F     /* Adjust Current to 0 */
                 ; 0009 0050     if(amp < AMP_ADJ_ZERO) {
000f92 940e 1685 	CALL SUBOPT_0xF
000f94 91a0 0858 	LDS  R26,_amp
000f96 91b0 0859 	LDS  R27,_amp+1
000f98 9180 085a 	LDS  R24,_amp+2
000f9a 9190 085b 	LDS  R25,_amp+3
000f9c 940e 1ba8 	CALL __CMPF12
000f9e f448      	BRSH _0x12000A
                 ; 0009 0051         amp = 0.0;
000f9f e0e0      	LDI  R30,LOW(0)
000fa0 93e0 0858 	STS  _amp,R30
000fa2 93e0 0859 	STS  _amp+1,R30
000fa4 93e0 085a 	STS  _amp+2,R30
000fa6 93e0 085b 	STS  _amp+3,R30
                 ; 0009 0052     }
                 ; 0009 0053 
                 ; 0009 0054     total = 0.0;
                 _0x12000A:
000fa8 e0e0      	LDI  R30,LOW(0)
000fa9 93e0 083c 	STS  _total,R30
000fab 93e0 083d 	STS  _total+1,R30
000fad 93e0 083e 	STS  _total+2,R30
000faf 93e0 083f 	STS  _total+3,R30
                 ; 0009 0055     countSampling = 0;
000fb1 93e0 0880 	STS  _countSampling,R30
000fb3 93e0 0881 	STS  _countSampling+1,R30
                 ; 0009 0056     Isum += amp;
000fb5 940e 190d 	CALL SUBOPT_0x6C
000fb7 940e 1861 	CALL SUBOPT_0x57
000fb9 940e 1ac5 	CALL __ADDF12
000fbb 93e0 0868 	STS  _Isum,R30
000fbd 93f0 0869 	STS  _Isum+1,R31
000fbf 9360 086a 	STS  _Isum+2,R22
000fc1 9370 086b 	STS  _Isum+3,R23
                 ; 0009 0057 
                 ; 0009 0058     /*---------- Power ----------*/
                 ; 0009 0059     power = volt*amp;
000fc3 940e 190d 	CALL SUBOPT_0x6C
000fc5 940e 18fb 	CALL SUBOPT_0x6A
000fc7 940e 1b15 	CALL __MULF12
000fc9 93e0 085c 	STS  _power,R30
000fcb 93f0 085d 	STS  _power+1,R31
000fcd 9360 085e 	STS  _power+2,R22
000fcf 9370 085f 	STS  _power+3,R23
                 ; 0009 005A     Psum += power;
000fd1 940e 1873 	CALL SUBOPT_0x59
000fd3 940e 1ac5 	CALL __ADDF12
000fd5 93e0 086c 	STS  _Psum,R30
000fd7 93f0 086d 	STS  _Psum+1,R31
000fd9 9360 086e 	STS  _Psum+2,R22
000fdb 9370 086f 	STS  _Psum+3,R23
                 ; 0009 005B 
                 ; 0009 005C     /*----------  Watt-hour ----------*/
                 ; 0009 005D     whour = power*(0.5/3600.0);
000fdd 91a0 085c 	LDS  R26,_power
000fdf 91b0 085d 	LDS  R27,_power+1
000fe1 9180 085e 	LDS  R24,_power+2
000fe3 9190 085f 	LDS  R25,_power+3
                +
000fe5 ebe4     +LDI R30 , LOW ( 0x3911A2B4 )
000fe6 eaf2     +LDI R31 , HIGH ( 0x3911A2B4 )
000fe7 e161     +LDI R22 , BYTE3 ( 0x3911A2B4 )
000fe8 e379     +LDI R23 , BYTE4 ( 0x3911A2B4 )
                 	__GETD1N 0x3911A2B4
000fe9 940e 1b15 	CALL __MULF12
000feb 93e0 0860 	STS  _whour,R30
000fed 93f0 0861 	STS  _whour+1,R31
000fef 9360 0862 	STS  _whour+2,R22
000ff1 9370 0863 	STS  _whour+3,R23
                 ; 0009 005E     WHsum += whour;
000ff3 940e 18a4 	CALL SUBOPT_0x5E
000ff5 940e 1ac5 	CALL __ADDF12
000ff7 93e0 0870 	STS  _WHsum,R30
000ff9 93f0 0871 	STS  _WHsum+1,R31
000ffb 9360 0872 	STS  _WHsum+2,R22
000ffd 9370 0873 	STS  _WHsum+3,R23
                 ; 0009 005F     number++;
000fff e3a0      	LDI  R26,LOW(_number)
001000 e0b8      	LDI  R27,HIGH(_number)
                 _0x20C0008:
001001 91ed      	LD   R30,X+
001002 91fd      	LD   R31,X+
001003 9631      	ADIW R30,1
001004 93fe      	ST   -X,R31
001005 93ee      	ST   -X,R30
                 ; 0009 0060 }
001006 9508      	RET
                 
                 	.CSEG
                 _ftoa:
001007 940e 16ea 	CALL SUBOPT_0x20
001009 83e8      	ST   Y,R30
00100a e0e0      	LDI  R30,LOW(0)
00100b 83e9      	STD  Y+1,R30
00100c 83ea      	STD  Y+2,R30
00100d e3ef      	LDI  R30,LOW(63)
00100e 83eb      	STD  Y+3,R30
00100f 931a      	ST   -Y,R17
001010 930a      	ST   -Y,R16
001011 85eb      	LDD  R30,Y+11
001012 85fc      	LDD  R31,Y+11+1
001013 3fef      	CPI  R30,LOW(0xFFFF)
001014 efaf      	LDI  R26,HIGH(0xFFFF)
001015 07fa      	CPC  R31,R26
001016 f439      	BRNE _0x200000D
001017 940e 16ef 	CALL SUBOPT_0x21
                +
001019 eaa8     +LDI R26 , LOW ( 2 * _0x2000000 + ( 0 ) )
00101a e0b7     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 0 ) )
                 	__POINTW2FN _0x2000000,0
00101b 940e 1432 	CALL _strcpyf
00101d c0a5      	RJMP _0x20C0007
                 _0x200000D:
00101e 3fef      	CPI  R30,LOW(0x7FFF)
00101f e7af      	LDI  R26,HIGH(0x7FFF)
001020 07fa      	CPC  R31,R26
001021 f439      	BRNE _0x200000C
001022 940e 16ef 	CALL SUBOPT_0x21
                +
001024 eaa9     +LDI R26 , LOW ( 2 * _0x2000000 + ( 1 ) )
001025 e0b7     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 1 ) )
                 	__POINTW2FN _0x2000000,1
001026 940e 1432 	CALL _strcpyf
001028 c09a      	RJMP _0x20C0007
                 _0x200000C:
001029 85ac      	LDD  R26,Y+12
00102a 23aa      	TST  R26
00102b f462      	BRPL _0x200000F
                +
00102c 85e9     +LDD R30 , Y + 9
00102d 85fa     +LDD R31 , Y + 9 + 1
00102e 856b     +LDD R22 , Y + 9 + 2
00102f 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
001030 940e 1a1f 	CALL __ANEGF1
001032 940e 1916 	CALL SUBOPT_0x6D
001034 940e 191b 	CALL SUBOPT_0x6E
001036 e2ed      	LDI  R30,LOW(45)
001037 93ec      	ST   X,R30
                 _0x200000F:
001038 85a8      	LDD  R26,Y+8
001039 30a7      	CPI  R26,LOW(0x7)
00103a f010      	BRLO _0x2000010
00103b e0e6      	LDI  R30,LOW(6)
00103c 87e8      	STD  Y+8,R30
                 _0x2000010:
00103d 8518      	LDD  R17,Y+8
                 _0x2000011:
00103e 2fe1      	MOV  R30,R17
00103f 5011      	SUBI R17,1
001040 30e0      	CPI  R30,0
001041 f039      	BREQ _0x2000013
001042 940e 1922 	CALL SUBOPT_0x6F
001044 940e 1927 	CALL SUBOPT_0x70
001046 940e 192e 	CALL SUBOPT_0x71
001048 cff5      	RJMP _0x2000011
                 _0x2000013:
001049 940e 1933 	CALL SUBOPT_0x72
00104b 940e 1ac5 	CALL __ADDF12
00104d 940e 1916 	CALL SUBOPT_0x6D
00104f e010      	LDI  R17,LOW(0)
001050 940e 1670 	CALL SUBOPT_0xC
001052 940e 192e 	CALL SUBOPT_0x71
                 _0x2000014:
001054 940e 1933 	CALL SUBOPT_0x72
001056 940e 1ba8 	CALL __CMPF12
001058 f088      	BRLO _0x2000016
001059 940e 1922 	CALL SUBOPT_0x6F
00105b 940e 193c 	CALL SUBOPT_0x73
00105d 940e 192e 	CALL SUBOPT_0x71
00105f 5f1f      	SUBI R17,-LOW(1)
001060 3217      	CPI  R17,39
001061 f038      	BRLO _0x2000017
001062 940e 16ef 	CALL SUBOPT_0x21
                +
001064 eaad     +LDI R26 , LOW ( 2 * _0x2000000 + ( 5 ) )
001065 e0b7     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 5 ) )
                 	__POINTW2FN _0x2000000,5
001066 940e 1432 	CALL _strcpyf
001068 c05a      	RJMP _0x20C0007
                 _0x2000017:
001069 cfea      	RJMP _0x2000014
                 _0x2000016:
00106a 3010      	CPI  R17,0
00106b f429      	BRNE _0x2000018
00106c 940e 191b 	CALL SUBOPT_0x6E
00106e e3e0      	LDI  R30,LOW(48)
00106f 93ec      	ST   X,R30
001070 c028      	RJMP _0x2000019
                 _0x2000018:
                 _0x200001A:
001071 2fe1      	MOV  R30,R17
001072 5011      	SUBI R17,1
001073 30e0      	CPI  R30,0
001074 f121      	BREQ _0x200001C
001075 940e 1922 	CALL SUBOPT_0x6F
001077 940e 1927 	CALL SUBOPT_0x70
001079 940e 1940 	CALL SUBOPT_0x74
00107b 940e 18e3 	CALL SUBOPT_0x66
00107d 940e 1489 	CALL _floor
00107f 940e 192e 	CALL SUBOPT_0x71
001081 940e 1933 	CALL SUBOPT_0x72
001083 940e 1b63 	CALL __DIVF21
001085 940e 1a52 	CALL __CFD1U
001087 2f0e      	MOV  R16,R30
001088 940e 191b 	CALL SUBOPT_0x6E
00108a 940e 1945 	CALL SUBOPT_0x75
00108c 940e 1922 	CALL SUBOPT_0x6F
00108e 940e 17c8 	CALL SUBOPT_0x3F
001090 940e 1b15 	CALL __MULF12
001092 940e 194b 	CALL SUBOPT_0x76
001094 940e 17d2 	CALL SUBOPT_0x41
001096 940e 1916 	CALL SUBOPT_0x6D
001098 cfd8      	RJMP _0x200001A
                 _0x200001C:
                 _0x2000019:
001099 85e8      	LDD  R30,Y+8
00109a 30e0      	CPI  R30,0
00109b f119      	BREQ _0x20C0006
00109c 940e 191b 	CALL SUBOPT_0x6E
00109e e2ee      	LDI  R30,LOW(46)
00109f 93ec      	ST   X,R30
                 _0x200001E:
0010a0 85e8      	LDD  R30,Y+8
0010a1 50e1      	SUBI R30,LOW(1)
0010a2 87e8      	STD  Y+8,R30
0010a3 5fef      	SUBI R30,-LOW(1)
0010a4 f0d1      	BREQ _0x2000020
0010a5 940e 194b 	CALL SUBOPT_0x76
0010a7 940e 193c 	CALL SUBOPT_0x73
0010a9 940e 1916 	CALL SUBOPT_0x6D
                +
0010ab 85e9     +LDD R30 , Y + 9
0010ac 85fa     +LDD R31 , Y + 9 + 1
0010ad 856b     +LDD R22 , Y + 9 + 2
0010ae 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0010af 940e 1a52 	CALL __CFD1U
0010b1 2f0e      	MOV  R16,R30
0010b2 940e 191b 	CALL SUBOPT_0x6E
0010b4 940e 1945 	CALL SUBOPT_0x75
0010b6 940e 194b 	CALL SUBOPT_0x76
0010b8 940e 17c8 	CALL SUBOPT_0x3F
0010ba 940e 17d2 	CALL SUBOPT_0x41
0010bc 940e 1916 	CALL SUBOPT_0x6D
0010be cfe1      	RJMP _0x200001E
                 _0x2000020:
                 _0x20C0006:
0010bf 81ae      	LDD  R26,Y+6
0010c0 81bf      	LDD  R27,Y+6+1
0010c1 e0e0      	LDI  R30,LOW(0)
0010c2 93ec      	ST   X,R30
                 _0x20C0007:
0010c3 8119      	LDD  R17,Y+1
0010c4 8108      	LDD  R16,Y+0
0010c5 962d      	ADIW R28,13
0010c6 9508      	RET
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
0010c7 93ba      	ST   -Y,R27
0010c8 93aa      	ST   -Y,R26
0010c9 931a      	ST   -Y,R17
0010ca 930a      	ST   -Y,R16
0010cb 81aa      	LDD  R26,Y+2
0010cc 81bb      	LDD  R27,Y+2+1
0010cd 9612      	ADIW R26,2
0010ce 940e 1ca2 	CALL __GETW1P
0010d0 9730      	SBIW R30,0
0010d1 f129      	BREQ _0x2020010
0010d2 81aa      	LDD  R26,Y+2
0010d3 81bb      	LDD  R27,Y+2+1
0010d4 9614      	ADIW R26,4
0010d5 940e 1ca2 	CALL __GETW1P
0010d7 018f      	MOVW R16,R30
0010d8 9730      	SBIW R30,0
0010d9 f061      	BREQ _0x2020012
                +
0010da 3002     +CPI R16 , LOW ( 2 )
0010db e0e0     +LDI R30 , HIGH ( 2 )
0010dc 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0010dd f0c0      	BRLO _0x2020013
0010de 01f8      	MOVW R30,R16
0010df 9731      	SBIW R30,1
0010e0 018f      	MOVW R16,R30
                +
0010e1 81aa     +LDD R26 , Y + 2
0010e2 81bb     +LDD R27 , Y + 2 + 1
0010e3 9614     +ADIW R26 , 4
0010e4 93ed     +ST X + , R30
0010e5 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0010e6 81aa      	LDD  R26,Y+2
0010e7 81bb      	LDD  R27,Y+2+1
0010e8 9612      	ADIW R26,2
0010e9 940e 161c 	CALL SUBOPT_0x3
0010eb 9731      	SBIW R30,1
0010ec 81ac      	LDD  R26,Y+4
0010ed 83a0      	STD  Z+0,R26
0010ee 81aa      	LDD  R26,Y+2
0010ef 81bb      	LDD  R27,Y+2+1
0010f0 940e 1ca2 	CALL __GETW1P
0010f2 23ff      	TST  R31
0010f3 f012      	BRMI _0x2020014
0010f4 940e 161c 	CALL SUBOPT_0x3
                 _0x2020014:
                 _0x2020013:
0010f6 c006      	RJMP _0x2020015
                 _0x2020010:
0010f7 81aa      	LDD  R26,Y+2
0010f8 81bb      	LDD  R27,Y+2+1
0010f9 efef      	LDI  R30,LOW(65535)
0010fa efff      	LDI  R31,HIGH(65535)
0010fb 93ed      	ST   X+,R30
0010fc 93fc      	ST   X,R31
                 _0x2020015:
0010fd 8119      	LDD  R17,Y+1
0010fe 8108      	LDD  R16,Y+0
0010ff 9625      	ADIW R28,5
001100 9508      	RET
                 __ftoe_G101:
001101 940e 16ea 	CALL SUBOPT_0x20
001103 83e8      	ST   Y,R30
001104 e0e0      	LDI  R30,LOW(0)
001105 83e9      	STD  Y+1,R30
001106 e8e0      	LDI  R30,LOW(128)
001107 83ea      	STD  Y+2,R30
001108 e3ef      	LDI  R30,LOW(63)
001109 83eb      	STD  Y+3,R30
00110a 940e 1d0a 	CALL __SAVELOCR4
00110c 85ee      	LDD  R30,Y+14
00110d 85ff      	LDD  R31,Y+14+1
00110e 3fef      	CPI  R30,LOW(0xFFFF)
00110f efaf      	LDI  R26,HIGH(0xFFFF)
001110 07fa      	CPC  R31,R26
001111 f449      	BRNE _0x2020019
001112 85e8      	LDD  R30,Y+8
001113 85f9      	LDD  R31,Y+8+1
001114 93fa      	ST   -Y,R31
001115 93ea      	ST   -Y,R30
                +
001116 eba2     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
001117 e0b7     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
001118 940e 1432 	CALL _strcpyf
00111a c0ba      	RJMP _0x20C0005
                 _0x2020019:
00111b 3fef      	CPI  R30,LOW(0x7FFF)
00111c e7af      	LDI  R26,HIGH(0x7FFF)
00111d 07fa      	CPC  R31,R26
00111e f449      	BRNE _0x2020018
00111f 85e8      	LDD  R30,Y+8
001120 85f9      	LDD  R31,Y+8+1
001121 93fa      	ST   -Y,R31
001122 93ea      	ST   -Y,R30
                +
001123 eba3     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
001124 e0b7     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
001125 940e 1432 	CALL _strcpyf
001127 c0ad      	RJMP _0x20C0005
                 _0x2020018:
001128 85ab      	LDD  R26,Y+11
001129 30a7      	CPI  R26,LOW(0x7)
00112a f010      	BRLO _0x202001B
00112b e0e6      	LDI  R30,LOW(6)
00112c 87eb      	STD  Y+11,R30
                 _0x202001B:
00112d 851b      	LDD  R17,Y+11
                 _0x202001C:
00112e 2fe1      	MOV  R30,R17
00112f 5011      	SUBI R17,1
001130 30e0      	CPI  R30,0
001131 f019      	BREQ _0x202001E
001132 940e 1950 	CALL SUBOPT_0x77
001134 cff9      	RJMP _0x202001C
                 _0x202001E:
001135 940e 17c3 	CALL SUBOPT_0x3E
001137 940e 1cf5 	CALL __CPD10
001139 f421      	BRNE _0x202001F
00113a e030      	LDI  R19,LOW(0)
00113b 940e 1950 	CALL SUBOPT_0x77
00113d c034      	RJMP _0x2020020
                 _0x202001F:
00113e 853b      	LDD  R19,Y+11
00113f 940e 1953 	CALL SUBOPT_0x78
001141 f009      	BREQ PC+2
001142 f410      	BRCC PC+3
001143 940c 1153 	JMP  _0x2020021
001145 940e 1950 	CALL SUBOPT_0x77
                 _0x2020022:
001147 940e 1953 	CALL SUBOPT_0x78
001149 f040      	BRLO _0x2020024
00114a 940e 17cd 	CALL SUBOPT_0x40
00114c 940e 1927 	CALL SUBOPT_0x70
00114e 940e 1958 	CALL SUBOPT_0x79
001150 5f3f      	SUBI R19,-LOW(1)
001151 cff5      	RJMP _0x2020022
                 _0x2020024:
001152 c00d      	RJMP _0x2020025
                 _0x2020021:
                 _0x2020026:
001153 940e 1953 	CALL SUBOPT_0x78
001155 f440      	BRSH _0x2020028
001156 940e 17cd 	CALL SUBOPT_0x40
001158 940e 193c 	CALL SUBOPT_0x73
00115a 940e 1958 	CALL SUBOPT_0x79
00115c 5031      	SUBI R19,LOW(1)
00115d cff5      	RJMP _0x2020026
                 _0x2020028:
00115e 940e 1950 	CALL SUBOPT_0x77
                 _0x2020025:
001160 940e 17c3 	CALL SUBOPT_0x3E
001162 940e 1940 	CALL SUBOPT_0x74
001164 940e 1ac5 	CALL __ADDF12
001166 940e 1958 	CALL SUBOPT_0x79
001168 940e 1953 	CALL SUBOPT_0x78
00116a f038      	BRLO _0x2020029
00116b 940e 17cd 	CALL SUBOPT_0x40
00116d 940e 1927 	CALL SUBOPT_0x70
00116f 940e 1958 	CALL SUBOPT_0x79
001171 5f3f      	SUBI R19,-LOW(1)
                 _0x2020029:
                 _0x2020020:
001172 e010      	LDI  R17,LOW(0)
                 _0x202002A:
001173 85eb      	LDD  R30,Y+11
001174 17e1      	CP   R30,R17
001175 f198      	BRLO _0x202002C
001176 940e 17e1 	CALL SUBOPT_0x44
001178 940e 1927 	CALL SUBOPT_0x70
00117a 940e 1940 	CALL SUBOPT_0x74
00117c 940e 18e3 	CALL SUBOPT_0x66
00117e 940e 1489 	CALL _floor
001180 940e 17d7 	CALL SUBOPT_0x42
001182 940e 17e9 	CALL SUBOPT_0x46
001184 940e 17cd 	CALL SUBOPT_0x40
001186 940e 1b63 	CALL __DIVF21
001188 940e 1a52 	CALL __CFD1U
00118a 2f0e      	MOV  R16,R30
00118b 940e 195d 	CALL SUBOPT_0x7A
00118d 2fe0      	MOV  R30,R16
00118e 5de0      	SUBI R30,-LOW(48)
00118f 93ec      	ST   X,R30
001190 2fe0      	MOV  R30,R16
001191 27ff      	CLR  R31
001192 2766      	CLR  R22
001193 2777      	CLR  R23
001194 940e 1a8b 	CALL __CDF1
001196 940e 17e1 	CALL SUBOPT_0x44
001198 940e 1b15 	CALL __MULF12
00119a 940e 17cd 	CALL SUBOPT_0x40
00119c 940e 17d2 	CALL SUBOPT_0x41
00119e 940e 1958 	CALL SUBOPT_0x79
0011a0 2fe1      	MOV  R30,R17
0011a1 5f1f      	SUBI R17,-1
0011a2 30e0      	CPI  R30,0
0011a3 f679      	BRNE _0x202002A
0011a4 940e 195d 	CALL SUBOPT_0x7A
0011a6 e2ee      	LDI  R30,LOW(46)
0011a7 93ec      	ST   X,R30
0011a8 cfca      	RJMP _0x202002A
                 _0x202002C:
0011a9 940e 1964 	CALL SUBOPT_0x7B
0011ab 9731      	SBIW R30,1
0011ac 85aa      	LDD  R26,Y+10
0011ad 83a0      	STD  Z+0,R26
0011ae 3030      	CPI  R19,0
0011af f42c      	BRGE _0x202002E
0011b0 9531      	NEG  R19
0011b1 85a8      	LDD  R26,Y+8
0011b2 85b9      	LDD  R27,Y+8+1
0011b3 e2ed      	LDI  R30,LOW(45)
0011b4 c003      	RJMP _0x202010E
                 _0x202002E:
0011b5 85a8      	LDD  R26,Y+8
0011b6 85b9      	LDD  R27,Y+8+1
0011b7 e2eb      	LDI  R30,LOW(43)
                 _0x202010E:
0011b8 93ec      	ST   X,R30
0011b9 940e 1964 	CALL SUBOPT_0x7B
0011bb 940e 1964 	CALL SUBOPT_0x7B
0011bd 9731      	SBIW R30,1
0011be 01bf      	MOVW R22,R30
0011bf 2fa3      	MOV  R26,R19
0011c0 e0ea      	LDI  R30,LOW(10)
0011c1 940e 1c28 	CALL __DIVB21
0011c3 5de0      	SUBI R30,-LOW(48)
0011c4 01db      	MOVW R26,R22
0011c5 93ec      	ST   X,R30
0011c6 940e 1964 	CALL SUBOPT_0x7B
0011c8 9731      	SBIW R30,1
0011c9 01bf      	MOVW R22,R30
0011ca 2fa3      	MOV  R26,R19
0011cb e0ea      	LDI  R30,LOW(10)
0011cc 940e 1c6a 	CALL __MODB21
0011ce 5de0      	SUBI R30,-LOW(48)
0011cf 01db      	MOVW R26,R22
0011d0 93ec      	ST   X,R30
0011d1 85a8      	LDD  R26,Y+8
0011d2 85b9      	LDD  R27,Y+8+1
0011d3 e0e0      	LDI  R30,LOW(0)
0011d4 93ec      	ST   X,R30
                 _0x20C0005:
0011d5 940e 1d11 	CALL __LOADLOCR4
0011d7 9660      	ADIW R28,16
0011d8 9508      	RET
                 __print_G101:
0011d9 93ba      	ST   -Y,R27
0011da 93aa      	ST   -Y,R26
0011db 97ef      	SBIW R28,63
0011dc 9761      	SBIW R28,17
0011dd 940e 1d08 	CALL __SAVELOCR6
0011df e010      	LDI  R17,0
                +
0011e0 01fe     +MOVW R30 , R28
0011e1 5ae8     +SUBI R30 , LOW ( - 88 )
0011e2 4fff     +SBCI R31 , HIGH ( - 88 )
0011e3 9001     +LD R0 , Z +
0011e4 81f0     +LD R31 , Z
0011e5 2de0     +MOV R30 , R0
                 	__GETW1SX 88
0011e6 87e8      	STD  Y+8,R30
0011e7 87f9      	STD  Y+8+1,R31
                +
0011e8 01fe     +MOVW R30 , R28
0011e9 5aea     +SUBI R30 , LOW ( - 86 )
0011ea 4fff     +SBCI R31 , HIGH ( - 86 )
0011eb 9001     +LD R0 , Z +
0011ec 81f0     +LD R31 , Z
0011ed 2de0     +MOV R30 , R0
                 	__GETW1SX 86
0011ee 83ee      	STD  Y+6,R30
0011ef 83ff      	STD  Y+6+1,R31
0011f0 81ae      	LDD  R26,Y+6
0011f1 81bf      	LDD  R27,Y+6+1
0011f2 e0e0      	LDI  R30,LOW(0)
0011f3 e0f0      	LDI  R31,HIGH(0)
0011f4 93ed      	ST   X+,R30
0011f5 93fc      	ST   X,R31
                 _0x2020030:
0011f6 01de      	MOVW R26,R28
0011f7 5aa4      	SUBI R26,LOW(-(92))
0011f8 4fbf      	SBCI R27,HIGH(-(92))
0011f9 940e 161c 	CALL SUBOPT_0x3
0011fb 9731      	SBIW R30,1
0011fc 91e4      	LPM  R30,Z
0011fd 2f2e      	MOV  R18,R30
0011fe 30e0      	CPI  R30,0
0011ff f411      	BRNE PC+3
001200 940c 13ec 	JMP _0x2020032
001202 2fe1      	MOV  R30,R17
001203 30e0      	CPI  R30,0
001204 f439      	BRNE _0x2020036
001205 3225      	CPI  R18,37
001206 f411      	BRNE _0x2020037
001207 e011      	LDI  R17,LOW(1)
001208 c002      	RJMP _0x2020038
                 _0x2020037:
001209 940e 196a 	CALL SUBOPT_0x7C
                 _0x2020038:
00120b c1df      	RJMP _0x2020035
                 _0x2020036:
00120c 30e1      	CPI  R30,LOW(0x1)
00120d f4c1      	BRNE _0x2020039
00120e 3225      	CPI  R18,37
00120f f419      	BRNE _0x202003A
001210 940e 196a 	CALL SUBOPT_0x7C
001212 c1d7      	RJMP _0x202010F
                 _0x202003A:
001213 e012      	LDI  R17,LOW(2)
001214 e0e0      	LDI  R30,LOW(0)
001215 8bed      	STD  Y+21,R30
001216 e000      	LDI  R16,LOW(0)
001217 322d      	CPI  R18,45
001218 f411      	BRNE _0x202003B
001219 e001      	LDI  R16,LOW(1)
00121a c1d0      	RJMP _0x2020035
                 _0x202003B:
00121b 322b      	CPI  R18,43
00121c f419      	BRNE _0x202003C
00121d e2eb      	LDI  R30,LOW(43)
00121e 8bed      	STD  Y+21,R30
00121f c1cb      	RJMP _0x2020035
                 _0x202003C:
001220 3220      	CPI  R18,32
001221 f419      	BRNE _0x202003D
001222 e2e0      	LDI  R30,LOW(32)
001223 8bed      	STD  Y+21,R30
001224 c1c6      	RJMP _0x2020035
                 _0x202003D:
001225 c002      	RJMP _0x202003E
                 _0x2020039:
001226 30e2      	CPI  R30,LOW(0x2)
001227 f439      	BRNE _0x202003F
                 _0x202003E:
001228 e050      	LDI  R21,LOW(0)
001229 e013      	LDI  R17,LOW(3)
00122a 3320      	CPI  R18,48
00122b f411      	BRNE _0x2020040
00122c 6800      	ORI  R16,LOW(128)
00122d c1bd      	RJMP _0x2020035
                 _0x2020040:
00122e c002      	RJMP _0x2020041
                 _0x202003F:
00122f 30e3      	CPI  R30,LOW(0x3)
001230 f491      	BRNE _0x2020042
                 _0x2020041:
001231 3320      	CPI  R18,48
001232 f010      	BRLO _0x2020044
001233 332a      	CPI  R18,58
001234 f008      	BRLO _0x2020045
                 _0x2020044:
001235 c007      	RJMP _0x2020043
                 _0x2020045:
001236 e0aa      	LDI  R26,LOW(10)
001237 9f5a      	MUL  R21,R26
001238 2d50      	MOV  R21,R0
001239 2fe2      	MOV  R30,R18
00123a 53e0      	SUBI R30,LOW(48)
00123b 0f5e      	ADD  R21,R30
00123c c1ae      	RJMP _0x2020035
                 _0x2020043:
00123d e040      	LDI  R20,LOW(0)
00123e 322e      	CPI  R18,46
00123f f411      	BRNE _0x2020046
001240 e014      	LDI  R17,LOW(4)
001241 c1a9      	RJMP _0x2020035
                 _0x2020046:
001242 c00f      	RJMP _0x2020047
                 _0x2020042:
001243 30e4      	CPI  R30,LOW(0x4)
001244 f499      	BRNE _0x2020049
001245 3320      	CPI  R18,48
001246 f010      	BRLO _0x202004B
001247 332a      	CPI  R18,58
001248 f008      	BRLO _0x202004C
                 _0x202004B:
001249 c008      	RJMP _0x202004A
                 _0x202004C:
00124a 6200      	ORI  R16,LOW(32)
00124b e0aa      	LDI  R26,LOW(10)
00124c 9f4a      	MUL  R20,R26
00124d 2d40      	MOV  R20,R0
00124e 2fe2      	MOV  R30,R18
00124f 53e0      	SUBI R30,LOW(48)
001250 0f4e      	ADD  R20,R30
001251 c199      	RJMP _0x2020035
                 _0x202004A:
                 _0x2020047:
001252 362c      	CPI  R18,108
001253 f419      	BRNE _0x202004D
001254 6002      	ORI  R16,LOW(2)
001255 e015      	LDI  R17,LOW(5)
001256 c194      	RJMP _0x2020035
                 _0x202004D:
001257 c004      	RJMP _0x202004E
                 _0x2020049:
001258 30e5      	CPI  R30,LOW(0x5)
001259 f011      	BREQ PC+3
00125a 940c 13eb 	JMP _0x2020035
                 _0x202004E:
00125c 2fe2      	MOV  R30,R18
00125d 36e3      	CPI  R30,LOW(0x63)
00125e f459      	BRNE _0x2020053
00125f 940e 1971 	CALL SUBOPT_0x7D
001261 940e 1978 	CALL SUBOPT_0x7E
001263 940e 1971 	CALL SUBOPT_0x7D
001265 81a4      	LDD  R26,Z+4
001266 93aa      	ST   -Y,R26
001267 940e 197f 	CALL SUBOPT_0x7F
001269 c180      	RJMP _0x2020054
                 _0x2020053:
00126a 34e5      	CPI  R30,LOW(0x45)
00126b f011      	BREQ _0x2020057
00126c 36e5      	CPI  R30,LOW(0x65)
00126d f409      	BRNE _0x2020058
                 _0x2020057:
00126e c004      	RJMP _0x2020059
                 _0x2020058:
00126f 36e6      	CPI  R30,LOW(0x66)
001270 f011      	BREQ PC+3
001271 940c 12b9 	JMP _0x202005A
                 _0x2020059:
001273 01fe      	MOVW R30,R28
001274 9676      	ADIW R30,22
001275 87ee      	STD  Y+14,R30
001276 87ff      	STD  Y+14+1,R31
001277 940e 1985 	CALL SUBOPT_0x80
001279 940e 1ca6 	CALL __GETD1P
00127b 940e 198c 	CALL SUBOPT_0x81
00127d 940e 1991 	CALL SUBOPT_0x82
00127f 85ad      	LDD  R26,Y+13
001280 23aa      	TST  R26
001281 f022      	BRMI _0x202005B
001282 89ad      	LDD  R26,Y+21
001283 32ab      	CPI  R26,LOW(0x2B)
001284 f049      	BREQ _0x202005D
001285 c017      	RJMP _0x202005E
                 _0x202005B:
001286 940e 1993 	CALL SUBOPT_0x83
001288 940e 1a1f 	CALL __ANEGF1
00128a 940e 198c 	CALL SUBOPT_0x81
00128c e2ed      	LDI  R30,LOW(45)
00128d 8bed      	STD  Y+21,R30
                 _0x202005D:
00128e ff07      	SBRS R16,7
00128f c005      	RJMP _0x202005F
001290 89ed      	LDD  R30,Y+21
001291 93ea      	ST   -Y,R30
001292 940e 197f 	CALL SUBOPT_0x7F
001294 c008      	RJMP _0x2020060
                 _0x202005F:
001295 85ee      	LDD  R30,Y+14
001296 85ff      	LDD  R31,Y+14+1
001297 9631      	ADIW R30,1
001298 87ee      	STD  Y+14,R30
001299 87ff      	STD  Y+14+1,R31
00129a 9731      	SBIW R30,1
00129b 89ad      	LDD  R26,Y+21
00129c 83a0      	STD  Z+0,R26
                 _0x2020060:
                 _0x202005E:
00129d ff05      	SBRS R16,5
00129e e046      	LDI  R20,LOW(6)
00129f 3626      	CPI  R18,102
0012a0 f451      	BRNE _0x2020062
0012a1 940e 1993 	CALL SUBOPT_0x83
0012a3 940e 1cca 	CALL __PUTPARD1
0012a5 934a      	ST   -Y,R20
0012a6 89ab      	LDD  R26,Y+19
0012a7 89bc      	LDD  R27,Y+19+1
0012a8 940e 1007 	CALL _ftoa
0012aa c009      	RJMP _0x2020063
                 _0x2020062:
0012ab 940e 1993 	CALL SUBOPT_0x83
0012ad 940e 1cca 	CALL __PUTPARD1
0012af 934a      	ST   -Y,R20
0012b0 932a      	ST   -Y,R18
0012b1 89ac      	LDD  R26,Y+20
0012b2 89bd      	LDD  R27,Y+20+1
0012b3 de4d      	RCALL __ftoe_G101
                 _0x2020063:
0012b4 01fe      	MOVW R30,R28
0012b5 9676      	ADIW R30,22
0012b6 940e 1998 	CALL SUBOPT_0x84
0012b8 c01e      	RJMP _0x2020064
                 _0x202005A:
0012b9 37e3      	CPI  R30,LOW(0x73)
0012ba f439      	BRNE _0x2020066
0012bb 940e 1991 	CALL SUBOPT_0x82
0012bd 940e 19a0 	CALL SUBOPT_0x85
0012bf 940e 1998 	CALL SUBOPT_0x84
0012c1 c00e      	RJMP _0x2020067
                 _0x2020066:
0012c2 37e0      	CPI  R30,LOW(0x70)
0012c3 f4c1      	BRNE _0x2020069
0012c4 940e 1991 	CALL SUBOPT_0x82
0012c6 940e 19a0 	CALL SUBOPT_0x85
0012c8 87ee      	STD  Y+14,R30
0012c9 87ff      	STD  Y+14+1,R31
0012ca 85ae      	LDD  R26,Y+14
0012cb 85bf      	LDD  R27,Y+14+1
0012cc 940e 144b 	CALL _strlenf
0012ce 2f1e      	MOV  R17,R30
0012cf 6008      	ORI  R16,LOW(8)
                 _0x2020067:
0012d0 770f      	ANDI R16,LOW(127)
0012d1 3040      	CPI  R20,0
0012d2 f011      	BREQ _0x202006B
0012d3 1741      	CP   R20,R17
0012d4 f008      	BRLO _0x202006C
                 _0x202006B:
0012d5 c001      	RJMP _0x202006A
                 _0x202006C:
0012d6 2f14      	MOV  R17,R20
                 _0x202006A:
                 _0x2020064:
0012d7 e040      	LDI  R20,LOW(0)
0012d8 e0e0      	LDI  R30,LOW(0)
0012d9 8bec      	STD  Y+20,R30
0012da e030      	LDI  R19,LOW(0)
0012db c06e      	RJMP _0x202006D
                 _0x2020069:
0012dc 36e4      	CPI  R30,LOW(0x64)
0012dd f011      	BREQ _0x2020070
0012de 36e9      	CPI  R30,LOW(0x69)
0012df f411      	BRNE _0x2020071
                 _0x2020070:
0012e0 6004      	ORI  R16,LOW(4)
0012e1 c002      	RJMP _0x2020072
                 _0x2020071:
0012e2 37e5      	CPI  R30,LOW(0x75)
0012e3 f4a1      	BRNE _0x2020073
                 _0x2020072:
0012e4 e0ea      	LDI  R30,LOW(10)
0012e5 8bec      	STD  Y+20,R30
0012e6 ff01      	SBRS R16,1
0012e7 c008      	RJMP _0x2020074
                +
0012e8 e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
0012e9 ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
0012ea e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
0012eb e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
0012ec 940e 19a5 	CALL SUBOPT_0x86
0012ee e01a      	LDI  R17,LOW(10)
0012ef c023      	RJMP _0x2020075
                 _0x2020074:
                +
0012f0 e1e0     +LDI R30 , LOW ( 0x2710 )
0012f1 e2f7     +LDI R31 , HIGH ( 0x2710 )
0012f2 e060     +LDI R22 , BYTE3 ( 0x2710 )
0012f3 e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
0012f4 940e 19a5 	CALL SUBOPT_0x86
0012f6 e015      	LDI  R17,LOW(5)
0012f7 c01b      	RJMP _0x2020075
                 _0x2020073:
0012f8 35e8      	CPI  R30,LOW(0x58)
0012f9 f411      	BRNE _0x2020077
0012fa 6008      	ORI  R16,LOW(8)
0012fb c004      	RJMP _0x2020078
                 _0x2020077:
0012fc 37e8      	CPI  R30,LOW(0x78)
0012fd f011      	BREQ PC+3
0012fe 940c 13ea 	JMP _0x20200B6
                 _0x2020078:
001300 e1e0      	LDI  R30,LOW(16)
001301 8bec      	STD  Y+20,R30
001302 ff01      	SBRS R16,1
001303 c008      	RJMP _0x202007A
                +
001304 e0e0     +LDI R30 , LOW ( 0x10000000 )
001305 e0f0     +LDI R31 , HIGH ( 0x10000000 )
001306 e060     +LDI R22 , BYTE3 ( 0x10000000 )
001307 e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
001308 940e 19a5 	CALL SUBOPT_0x86
00130a e018      	LDI  R17,LOW(8)
00130b c007      	RJMP _0x2020075
                 _0x202007A:
                +
00130c e0e0     +LDI R30 , LOW ( 0x1000 )
00130d e1f0     +LDI R31 , HIGH ( 0x1000 )
00130e e060     +LDI R22 , BYTE3 ( 0x1000 )
00130f e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
001310 940e 19a5 	CALL SUBOPT_0x86
001312 e014      	LDI  R17,LOW(4)
                 _0x2020075:
001313 3040      	CPI  R20,0
001314 f011      	BREQ _0x202007B
001315 770f      	ANDI R16,LOW(127)
001316 c001      	RJMP _0x202007C
                 _0x202007B:
001317 e041      	LDI  R20,LOW(1)
                 _0x202007C:
001318 ff01      	SBRS R16,1
001319 c008      	RJMP _0x202007D
00131a 940e 1991 	CALL SUBOPT_0x82
00131c 940e 1985 	CALL SUBOPT_0x80
00131e 9614      	ADIW R26,4
00131f 940e 1ca6 	CALL __GETD1P
001321 c00f      	RJMP _0x2020110
                 _0x202007D:
001322 ff02      	SBRS R16,2
001323 c007      	RJMP _0x202007F
001324 940e 1991 	CALL SUBOPT_0x82
001326 940e 19a0 	CALL SUBOPT_0x85
001328 940e 1c15 	CALL __CWD1
00132a c006      	RJMP _0x2020110
                 _0x202007F:
00132b 940e 1991 	CALL SUBOPT_0x82
00132d 940e 19a0 	CALL SUBOPT_0x85
00132f 2766      	CLR  R22
001330 2777      	CLR  R23
                 _0x2020110:
                +
001331 87ea     +STD Y + 10 , R30
001332 87fb     +STD Y + 10 + 1 , R31
001333 876c     +STD Y + 10 + 2 , R22
001334 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
001335 ff02      	SBRS R16,2
001336 c012      	RJMP _0x2020081
001337 85ad      	LDD  R26,Y+13
001338 23aa      	TST  R26
001339 f442      	BRPL _0x2020082
00133a 940e 1993 	CALL SUBOPT_0x83
00133c 940e 1c07 	CALL __ANEGD1
00133e 940e 198c 	CALL SUBOPT_0x81
001340 e2ed      	LDI  R30,LOW(45)
001341 8bed      	STD  Y+21,R30
                 _0x2020082:
001342 89ed      	LDD  R30,Y+21
001343 30e0      	CPI  R30,0
001344 f019      	BREQ _0x2020083
001345 5f1f      	SUBI R17,-LOW(1)
001346 5f4f      	SUBI R20,-LOW(1)
001347 c001      	RJMP _0x2020084
                 _0x2020083:
001348 7f0b      	ANDI R16,LOW(251)
                 _0x2020084:
                 _0x2020081:
001349 2f34      	MOV  R19,R20
                 _0x202006D:
00134a fd00      	SBRC R16,0
00134b c014      	RJMP _0x2020085
                 _0x2020086:
00134c 1715      	CP   R17,R21
00134d f410      	BRSH _0x2020089
00134e 1735      	CP   R19,R21
00134f f008      	BRLO _0x202008A
                 _0x2020089:
001350 c00f      	RJMP _0x2020088
                 _0x202008A:
001351 ff07      	SBRS R16,7
001352 c008      	RJMP _0x202008B
001353 ff02      	SBRS R16,2
001354 c004      	RJMP _0x202008C
001355 7f0b      	ANDI R16,LOW(251)
001356 892d      	LDD  R18,Y+21
001357 5011      	SUBI R17,LOW(1)
001358 c001      	RJMP _0x202008D
                 _0x202008C:
001359 e320      	LDI  R18,LOW(48)
                 _0x202008D:
00135a c001      	RJMP _0x202008E
                 _0x202008B:
00135b e220      	LDI  R18,LOW(32)
                 _0x202008E:
00135c 940e 196a 	CALL SUBOPT_0x7C
00135e 5051      	SUBI R21,LOW(1)
00135f cfec      	RJMP _0x2020086
                 _0x2020088:
                 _0x2020085:
                 _0x202008F:
001360 1714      	CP   R17,R20
001361 f490      	BRSH _0x2020091
001362 6100      	ORI  R16,LOW(16)
001363 ff02      	SBRS R16,2
001364 c006      	RJMP _0x2020092
001365 940e 19aa 	CALL SUBOPT_0x87
001367 f009      	BREQ _0x2020093
001368 5051      	SUBI R21,LOW(1)
                 _0x2020093:
001369 5011      	SUBI R17,LOW(1)
00136a 5041      	SUBI R20,LOW(1)
                 _0x2020092:
00136b e3e0      	LDI  R30,LOW(48)
00136c 93ea      	ST   -Y,R30
00136d 940e 197f 	CALL SUBOPT_0x7F
00136f 3050      	CPI  R21,0
001370 f009      	BREQ _0x2020094
001371 5051      	SUBI R21,LOW(1)
                 _0x2020094:
001372 5041      	SUBI R20,LOW(1)
001373 cfec      	RJMP _0x202008F
                 _0x2020091:
001374 2f31      	MOV  R19,R17
001375 89ec      	LDD  R30,Y+20
001376 30e0      	CPI  R30,0
001377 f4b9      	BRNE _0x2020095
                 _0x2020096:
001378 3030      	CPI  R19,0
001379 f0a1      	BREQ _0x2020098
00137a ff03      	SBRS R16,3
00137b c006      	RJMP _0x2020099
00137c 85ee      	LDD  R30,Y+14
00137d 85ff      	LDD  R31,Y+14+1
00137e 9125      	LPM  R18,Z+
00137f 87ee      	STD  Y+14,R30
001380 87ff      	STD  Y+14+1,R31
001381 c005      	RJMP _0x202009A
                 _0x2020099:
001382 85ae      	LDD  R26,Y+14
001383 85bf      	LDD  R27,Y+14+1
001384 912d      	LD   R18,X+
001385 87ae      	STD  Y+14,R26
001386 87bf      	STD  Y+14+1,R27
                 _0x202009A:
001387 940e 196a 	CALL SUBOPT_0x7C
001389 3050      	CPI  R21,0
00138a f009      	BREQ _0x202009B
00138b 5051      	SUBI R21,LOW(1)
                 _0x202009B:
00138c 5031      	SUBI R19,LOW(1)
00138d cfea      	RJMP _0x2020096
                 _0x2020098:
00138e c051      	RJMP _0x202009C
                 _0x2020095:
                 _0x202009E:
00138f 940e 19bc 	CALL SUBOPT_0x88
001391 940e 1c45 	CALL __DIVD21U
001393 2f2e      	MOV  R18,R30
001394 302a      	CPI  R18,10
001395 f030      	BRLO _0x20200A0
001396 ff03      	SBRS R16,3
001397 c002      	RJMP _0x20200A1
001398 5c29      	SUBI R18,-LOW(55)
001399 c001      	RJMP _0x20200A2
                 _0x20200A1:
00139a 5a29      	SUBI R18,-LOW(87)
                 _0x20200A2:
00139b c001      	RJMP _0x20200A3
                 _0x20200A0:
00139c 5d20      	SUBI R18,-LOW(48)
                 _0x20200A3:
00139d fd04      	SBRC R16,4
00139e c021      	RJMP _0x20200A5
00139f 3321      	CPI  R18,49
0013a0 f460      	BRSH _0x20200A7
                +
0013a1 89a8     +LDD R26 , Y + 16
0013a2 89b9     +LDD R27 , Y + 16 + 1
0013a3 898a     +LDD R24 , Y + 16 + 2
0013a4 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
0013a5 30a1     +CPI R26 , LOW ( 0x1 )
0013a6 e0e0     +LDI R30 , HIGH ( 0x1 )
0013a7 07be     +CPC R27 , R30
0013a8 e0e0     +LDI R30 , BYTE3 ( 0x1 )
0013a9 078e     +CPC R24 , R30
0013aa e0e0     +LDI R30 , BYTE4 ( 0x1 )
0013ab 079e     +CPC R25 , R30
                 	__CPD2N 0x1
0013ac f409      	BRNE _0x20200A6
                 _0x20200A7:
0013ad c00b      	RJMP _0x20200A9
                 _0x20200A6:
0013ae 1743      	CP   R20,R19
0013af f440      	BRSH _0x2020111
0013b0 1753      	CP   R21,R19
0013b1 f010      	BRLO _0x20200AC
0013b2 ff00      	SBRS R16,0
0013b3 c001      	RJMP _0x20200AD
                 _0x20200AC:
0013b4 c010      	RJMP _0x20200AB
                 _0x20200AD:
0013b5 e220      	LDI  R18,LOW(32)
0013b6 ff07      	SBRS R16,7
0013b7 c008      	RJMP _0x20200AE
                 _0x2020111:
0013b8 e320      	LDI  R18,LOW(48)
                 _0x20200A9:
0013b9 6100      	ORI  R16,LOW(16)
0013ba ff02      	SBRS R16,2
0013bb c004      	RJMP _0x20200AF
0013bc 940e 19aa 	CALL SUBOPT_0x87
0013be f009      	BREQ _0x20200B0
0013bf 5051      	SUBI R21,LOW(1)
                 _0x20200B0:
                 _0x20200AF:
                 _0x20200AE:
                 _0x20200A5:
0013c0 940e 196a 	CALL SUBOPT_0x7C
0013c2 3050      	CPI  R21,0
0013c3 f009      	BREQ _0x20200B1
0013c4 5051      	SUBI R21,LOW(1)
                 _0x20200B1:
                 _0x20200AB:
0013c5 5031      	SUBI R19,LOW(1)
0013c6 940e 19bc 	CALL SUBOPT_0x88
0013c8 940e 1c84 	CALL __MODD21U
0013ca 940e 198c 	CALL SUBOPT_0x81
0013cc 89ec      	LDD  R30,Y+20
                +
0013cd 89a8     +LDD R26 , Y + 16
0013ce 89b9     +LDD R27 , Y + 16 + 1
0013cf 898a     +LDD R24 , Y + 16 + 2
0013d0 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
0013d1 27ff      	CLR  R31
0013d2 2766      	CLR  R22
0013d3 2777      	CLR  R23
0013d4 940e 1c45 	CALL __DIVD21U
0013d6 940e 19a5 	CALL SUBOPT_0x86
                +
0013d8 89e8     +LDD R30 , Y + 16
0013d9 89f9     +LDD R31 , Y + 16 + 1
0013da 896a     +LDD R22 , Y + 16 + 2
0013db 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
0013dc 940e 1cf5 	CALL __CPD10
0013de f009      	BREQ _0x202009F
0013df cfaf      	RJMP _0x202009E
                 _0x202009F:
                 _0x202009C:
0013e0 ff00      	SBRS R16,0
0013e1 c008      	RJMP _0x20200B2
                 _0x20200B3:
0013e2 3050      	CPI  R21,0
0013e3 f031      	BREQ _0x20200B5
0013e4 5051      	SUBI R21,LOW(1)
0013e5 e2e0      	LDI  R30,LOW(32)
0013e6 93ea      	ST   -Y,R30
0013e7 940e 197f 	CALL SUBOPT_0x7F
0013e9 cff8      	RJMP _0x20200B3
                 _0x20200B5:
                 _0x20200B2:
                 _0x20200B6:
                 _0x2020054:
                 _0x202010F:
0013ea e010      	LDI  R17,LOW(0)
                 _0x2020035:
0013eb ce0a      	RJMP _0x2020030
                 _0x2020032:
0013ec 81ae      	LDD  R26,Y+6
0013ed 81bf      	LDD  R27,Y+6+1
0013ee 940e 1ca2 	CALL __GETW1P
0013f0 940e 1d0f 	CALL __LOADLOCR6
0013f2 96ef      	ADIW R28,63
0013f3 966f      	ADIW R28,31
0013f4 9508      	RET
                 _vsprintf:
0013f5 93ba      	ST   -Y,R27
0013f6 93aa      	ST   -Y,R26
0013f7 9726      	SBIW R28,6
0013f8 931a      	ST   -Y,R17
0013f9 930a      	ST   -Y,R16
0013fa 85ec      	LDD  R30,Y+12
0013fb 85fd      	LDD  R31,Y+12+1
0013fc 9730      	SBIW R30,0
0013fd f421      	BRNE _0x20200BA
0013fe efef      	LDI  R30,LOW(65535)
0013ff efff      	LDI  R31,HIGH(65535)
001400 940c 15ac 	JMP  _0x20C0002
                 _0x20200BA:
001402 85ec      	LDD  R30,Y+12
001403 85fd      	LDD  R31,Y+12+1
001404 83ec      	STD  Y+4,R30
001405 83fd      	STD  Y+4+1,R31
001406 e0e0      	LDI  R30,LOW(0)
001407 83ee      	STD  Y+6,R30
001408 83ef      	STD  Y+6+1,R30
001409 85ea      	LDD  R30,Y+10
00140a 85fb      	LDD  R31,Y+10+1
00140b 93fa      	ST   -Y,R31
00140c 93ea      	ST   -Y,R30
00140d 85ea      	LDD  R30,Y+10
00140e 85fb      	LDD  R31,Y+10+1
00140f 93fa      	ST   -Y,R31
001410 93ea      	ST   -Y,R30
001411 ece7      	LDI  R30,LOW(_put_buff_G101)
001412 e1f0      	LDI  R31,HIGH(_put_buff_G101)
001413 93fa      	ST   -Y,R31
001414 93ea      	ST   -Y,R30
001415 01de      	MOVW R26,R28
001416 9618      	ADIW R26,8
001417 ddc1      	RCALL __print_G101
001418 018f      	MOVW R16,R30
001419 81ac      	LDD  R26,Y+4
00141a 81bd      	LDD  R27,Y+4+1
00141b e0e0      	LDI  R30,LOW(0)
00141c 93ec      	ST   X,R30
00141d 01f8      	MOVW R30,R16
00141e 940c 15ac 	JMP  _0x20C0002
                 
                 	.CSEG
                 _memcpy:
001420 93ba      	ST   -Y,R27
001421 93aa      	ST   -Y,R26
001422 8199          ldd  r25,y+1
001423 8188          ld   r24,y
001424 9600          adiw r24,0
001425 f041          breq memcpy1
001426 81bd          ldd  r27,y+5
001427 81ac          ldd  r26,y+4
001428 81fb          ldd  r31,y+3
001429 81ea          ldd  r30,y+2
                 memcpy0:
00142a 9161          ld   r22,z+
00142b 936d          st   x+,r22
00142c 9701          sbiw r24,1
00142d f7e1          brne memcpy0
                 memcpy1:
00142e 81fd          ldd  r31,y+5
00142f 81ec          ldd  r30,y+4
001430 9626      	ADIW R28,6
001431 9508      	RET
                 _strcpyf:
001432 93ba      	ST   -Y,R27
001433 93aa      	ST   -Y,R26
001434 91e9          ld   r30,y+
001435 91f9          ld   r31,y+
001436 91a9          ld   r26,y+
001437 91b9          ld   r27,y+
001438 01cd          movw r24,r26
                 strcpyf0:
001439 9005      	lpm  r0,z+
00143a 920d          st   x+,r0
00143b 2000          tst  r0
00143c f7e1          brne strcpyf0
00143d 01fc          movw r30,r24
00143e 9508          ret
                 _strlen:
00143f 93ba      	ST   -Y,R27
001440 93aa      	ST   -Y,R26
001441 91a9          ld   r26,y+
001442 91b9          ld   r27,y+
001443 27ee          clr  r30
001444 27ff          clr  r31
                 strlen0:
001445 916d          ld   r22,x+
001446 2366          tst  r22
001447 f011          breq strlen1
001448 9631          adiw r30,1
001449 cffb          rjmp strlen0
                 strlen1:
00144a 9508          ret
                 _strlenf:
00144b 93ba      	ST   -Y,R27
00144c 93aa      	ST   -Y,R26
00144d 27aa          clr  r26
00144e 27bb          clr  r27
00144f 91e9          ld   r30,y+
001450 91f9          ld   r31,y+
                 strlenf0:
001451 9005      	lpm  r0,z+
001452 2000          tst  r0
001453 f011          breq strlenf1
001454 9611          adiw r26,1
001455 cffb          rjmp strlenf0
                 strlenf1:
001456 01fd          movw r30,r26
001457 9508          ret
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
001458 940e 1ccf 	CALL __PUTPARD2
00145a 817b         ldd  r23,y+3
00145b 816a         ldd  r22,y+2
00145c 81f9         ldd  r31,y+1
00145d 81e8         ld   r30,y
00145e fb77         bst  r23,7
00145f 0f77         lsl  r23
001460 fd67         sbrc r22,7
001461 6071         sbr  r23,1
001462 2f97         mov  r25,r23
001463 579e         subi r25,0x7e
001464 f081         breq __ftrunc0
001465 f078         brcs __ftrunc0
001466 3198         cpi  r25,24
001467 f490         brsh __ftrunc1
001468 27aa         clr  r26
001469 27bb         clr  r27
00146a 2788         clr  r24
                 __ftrunc2:
00146b 9408         sec
00146c 9587         ror  r24
00146d 95b7         ror  r27
00146e 95a7         ror  r26
00146f 959a         dec  r25
001470 f7d1         brne __ftrunc2
001471 23ea         and  r30,r26
001472 23fb         and  r31,r27
001473 2368         and  r22,r24
001474 c005         rjmp __ftrunc1
                 __ftrunc0:
001475 94e8         clt
001476 2777         clr  r23
001477 27ee         clr  r30
001478 27ff         clr  r31
001479 2766         clr  r22
                 __ftrunc1:
00147a 776f         cbr  r22,0x80
00147b 9576         lsr  r23
00147c f408         brcc __ftrunc3
00147d 6860         sbr  r22,0x80
                 __ftrunc3:
00147e f977         bld  r23,7
00147f 91a9         ld   r26,y+
001480 91b9         ld   r27,y+
001481 9189         ld   r24,y+
001482 9199         ld   r25,y+
001483 17ea         cp   r30,r26
001484 07fb         cpc  r31,r27
001485 0768         cpc  r22,r24
001486 0779         cpc  r23,r25
001487 fb97         bst  r25,7
001488 9508         ret
                 _floor:
001489 940e 1ccf 	CALL __PUTPARD2
00148b 940e 1cc0 	CALL __GETD2S0
00148d 940e 1458 	CALL _ftrunc
00148f 940e 1cc5 	CALL __PUTD1S0
001491 f419          brne __floor1
                 __floor0:
001492 940e 183f 	CALL SUBOPT_0x51
001494 c005      	RJMP _0x20C0004
                 __floor1:
001495 f7e6          brtc __floor0
001496 940e 183f 	CALL SUBOPT_0x51
001498 940e 19c5 	CALL SUBOPT_0x89
                 _0x20C0004:
00149a 9624      	ADIW R28,4
00149b 9508      	RET
                 _log:
00149c 940e 1ccf 	CALL __PUTPARD2
00149e 9724      	SBIW R28,4
00149f 931a      	ST   -Y,R17
0014a0 930a      	ST   -Y,R16
0014a1 940e 19cc 	CALL SUBOPT_0x8A
0014a3 940e 1cfd 	CALL __CPD02
0014a5 f02c      	BRLT _0x208000C
                +
0014a6 efef     +LDI R30 , LOW ( 0xFF7FFFFF )
0014a7 efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
0014a8 e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
0014a9 ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
0014aa c071      	RJMP _0x20C0003
                 _0x208000C:
0014ab 940e 19d1 	CALL SUBOPT_0x8B
0014ad 940e 1cca 	CALL __PUTPARD1
0014af b7ad      	IN   R26,SPL
0014b0 b7be      	IN   R27,SPH
0014b1 9711      	SBIW R26,1
0014b2 931f      	PUSH R17
0014b3 930f      	PUSH R16
0014b4 940e 1a02 	CALL _frexp
0014b6 910f      	POP  R16
0014b7 911f      	POP  R17
0014b8 940e 19d6 	CALL SUBOPT_0x8C
0014ba 940e 19cc 	CALL SUBOPT_0x8A
                +
0014bc efe3     +LDI R30 , LOW ( 0x3F3504F3 )
0014bd e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
0014be e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
0014bf e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
0014c0 940e 1ba8 	CALL __CMPF12
0014c2 f440      	BRSH _0x208000D
0014c3 940e 19db 	CALL SUBOPT_0x8D
0014c5 940e 1ac5 	CALL __ADDF12
0014c7 940e 19d6 	CALL SUBOPT_0x8C
                +
0014c9 5001     +SUBI R16 , LOW ( 1 )
0014ca 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x208000D:
0014cb 940e 19d1 	CALL SUBOPT_0x8B
0014cd 940e 19c5 	CALL SUBOPT_0x89
0014cf 937f      	PUSH R23
0014d0 936f      	PUSH R22
0014d1 93ff      	PUSH R31
0014d2 93ef      	PUSH R30
0014d3 940e 19d1 	CALL SUBOPT_0x8B
                +
0014d5 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0014d6 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0014d7 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0014d8 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0014d9 940e 1ac5 	CALL __ADDF12
0014db 91af      	POP  R26
0014dc 91bf      	POP  R27
0014dd 918f      	POP  R24
0014de 919f      	POP  R25
0014df 940e 1b63 	CALL __DIVF21
0014e1 940e 19d6 	CALL SUBOPT_0x8C
0014e3 940e 19db 	CALL SUBOPT_0x8D
0014e5 940e 19dd 	CALL SUBOPT_0x8E
                +
0014e7 e2a6     +LDI R26 , LOW ( 0x3F654226 )
0014e8 e4b2     +LDI R27 , HIGH ( 0x3F654226 )
0014e9 e685     +LDI R24 , BYTE3 ( 0x3F654226 )
0014ea e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
0014eb 940e 18f6 	CALL SUBOPT_0x69
                +
0014ed e4ee     +LDI R30 , LOW ( 0x4054114E )
0014ee e1f1     +LDI R31 , HIGH ( 0x4054114E )
0014ef e564     +LDI R22 , BYTE3 ( 0x4054114E )
0014f0 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
0014f1 940e 17d2 	CALL SUBOPT_0x41
0014f3 940e 19cc 	CALL SUBOPT_0x8A
0014f5 940e 1b15 	CALL __MULF12
0014f7 937f      	PUSH R23
0014f8 936f      	PUSH R22
0014f9 93ff      	PUSH R31
0014fa 93ef      	PUSH R30
0014fb 940e 19e5 	CALL SUBOPT_0x8F
                +
0014fd e4ad     +LDI R26 , LOW ( 0x3FD4114D )
0014fe e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
0014ff ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
001500 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
001501 940e 1abe 	CALL __SUBF12
001503 91af      	POP  R26
001504 91bf      	POP  R27
001505 918f      	POP  R24
001506 919f      	POP  R25
001507 940e 1b63 	CALL __DIVF21
001509 937f      	PUSH R23
00150a 936f      	PUSH R22
00150b 93ff      	PUSH R31
00150c 93ef      	PUSH R30
00150d 01f8      	MOVW R30,R16
00150e 940e 17c8 	CALL SUBOPT_0x3F
                +
001510 e1a8     +LDI R26 , LOW ( 0x3F317218 )
001511 e7b2     +LDI R27 , HIGH ( 0x3F317218 )
001512 e381     +LDI R24 , BYTE3 ( 0x3F317218 )
001513 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
001514 940e 1b15 	CALL __MULF12
001516 91af      	POP  R26
001517 91bf      	POP  R27
001518 918f      	POP  R24
001519 919f      	POP  R25
00151a 940e 1ac5 	CALL __ADDF12
                 _0x20C0003:
00151c 8119      	LDD  R17,Y+1
00151d 8108      	LDD  R16,Y+0
00151e 962a      	ADIW R28,10
00151f 9508      	RET
                 _exp:
001520 940e 1ccf 	CALL __PUTPARD2
001522 9728      	SBIW R28,8
001523 931a      	ST   -Y,R17
001524 930a      	ST   -Y,R16
001525 940e 19ea 	CALL SUBOPT_0x90
                +
001527 e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
001528 eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
001529 ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
00152a ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
00152b 940e 1ba8 	CALL __CMPF12
00152d f418      	BRSH _0x208000F
00152e 940e 19ef 	CALL SUBOPT_0x91
001530 c07b      	RJMP _0x20C0002
                 _0x208000F:
001531 940e 1993 	CALL SUBOPT_0x83
001533 940e 1cf5 	CALL __CPD10
001535 f419      	BRNE _0x2080010
001536 940e 1670 	CALL SUBOPT_0xC
001538 c073      	RJMP _0x20C0002
                 _0x2080010:
001539 940e 19ea 	CALL SUBOPT_0x90
                +
00153b e1e8     +LDI R30 , LOW ( 0x42B17218 )
00153c e7f2     +LDI R31 , HIGH ( 0x42B17218 )
00153d eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
00153e e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
00153f 940e 1ba8 	CALL __CMPF12
001541 f009      	BREQ PC+2
001542 f410      	BRCC PC+3
001543 940c 154a 	JMP  _0x2080011
                +
001545 efef     +LDI R30 , LOW ( 0x7F7FFFFF )
001546 efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
001547 e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
001548 e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
001549 c062      	RJMP _0x20C0002
                 _0x2080011:
00154a 940e 19ea 	CALL SUBOPT_0x90
                +
00154c e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
00154d eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
00154e eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
00154f e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
001550 940e 1b15 	CALL __MULF12
001552 940e 198c 	CALL SUBOPT_0x81
001554 940e 19ea 	CALL SUBOPT_0x90
001556 df32      	RCALL _floor
001557 940e 1a54 	CALL __CFD1
001559 018f      	MOVW R16,R30
00155a 01f8      	MOVW R30,R16
00155b 940e 19ea 	CALL SUBOPT_0x90
00155d 940e 17c8 	CALL SUBOPT_0x3F
00155f 940e 17d2 	CALL SUBOPT_0x41
001561 01df      	MOVW R26,R30
001562 01cb      	MOVW R24,R22
                +
001563 e0e0     +LDI R30 , LOW ( 0x3F000000 )
001564 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
001565 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
001566 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
001567 940e 17d2 	CALL SUBOPT_0x41
001569 940e 19d6 	CALL SUBOPT_0x8C
00156b 940e 19db 	CALL SUBOPT_0x8D
00156d 940e 19dd 	CALL SUBOPT_0x8E
                +
00156f e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
001570 e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
001571 e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
001572 e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
001573 940e 1b15 	CALL __MULF12
                +
001575 eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
001576 eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
001577 ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
001578 e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
001579 940e 1ac5 	CALL __ADDF12
00157b 940e 19cc 	CALL SUBOPT_0x8A
00157d 940e 1b15 	CALL __MULF12
00157f 940e 19d6 	CALL SUBOPT_0x8C
001581 940e 19e5 	CALL SUBOPT_0x8F
                +
001583 e2a8     +LDI R26 , LOW ( 0x41A68D28 )
001584 e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
001585 ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
001586 e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
001587 940e 1ac5 	CALL __ADDF12
001589 940e 192e 	CALL SUBOPT_0x71
00158b 940e 19d1 	CALL SUBOPT_0x8B
00158d 940e 1922 	CALL SUBOPT_0x6F
00158f 940e 1ac5 	CALL __ADDF12
                +
001591 efa3     +LDI R26 , LOW ( 0x3FB504F3 )
001592 e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
001593 eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
001594 e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
001595 940e 1b15 	CALL __MULF12
001597 937f      	PUSH R23
001598 936f      	PUSH R22
001599 93ff      	PUSH R31
00159a 93ef      	PUSH R30
00159b 940e 19cc 	CALL SUBOPT_0x8A
00159d 940e 19e5 	CALL SUBOPT_0x8F
00159f 940e 1abe 	CALL __SUBF12
0015a1 91af      	POP  R26
0015a2 91bf      	POP  R27
0015a3 918f      	POP  R24
0015a4 919f      	POP  R25
0015a5 940e 1b63 	CALL __DIVF21
0015a7 940e 1cca 	CALL __PUTPARD1
0015a9 01d8      	MOVW R26,R16
0015aa 940e 1a13 	CALL _ldexp
                 _0x20C0002:
0015ac 8119      	LDD  R17,Y+1
0015ad 8108      	LDD  R16,Y+0
0015ae 962e      	ADIW R28,14
0015af 9508      	RET
                 _pow:
0015b0 940e 1ccf 	CALL __PUTPARD2
0015b2 9724      	SBIW R28,4
0015b3 940e 183a 	CALL SUBOPT_0x50
0015b5 940e 1cf5 	CALL __CPD10
0015b7 f419      	BRNE _0x2080012
0015b8 940e 19ef 	CALL SUBOPT_0x91
0015ba c043      	RJMP _0x20C0001
                 _0x2080012:
                +
0015bb 85a8     +LDD R26 , Y + 8
0015bc 85b9     +LDD R27 , Y + 8 + 1
0015bd 858a     +LDD R24 , Y + 8 + 2
0015be 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0015bf 940e 1cfd 	CALL __CPD02
0015c1 f484      	BRGE _0x2080013
0015c2 940e 17e9 	CALL SUBOPT_0x46
0015c4 940e 1cf5 	CALL __CPD10
0015c6 f419      	BRNE _0x2080014
0015c7 940e 1670 	CALL SUBOPT_0xC
0015c9 c034      	RJMP _0x20C0001
                 _0x2080014:
                +
0015ca 85a8     +LDD R26 , Y + 8
0015cb 85b9     +LDD R27 , Y + 8 + 1
0015cc 858a     +LDD R24 , Y + 8 + 2
0015cd 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0015ce 940e 19f4 	CALL SUBOPT_0x92
0015d0 df4f      	RCALL _exp
0015d1 c02c      	RJMP _0x20C0001
                 _0x2080013:
0015d2 940e 17e9 	CALL SUBOPT_0x46
0015d4 01de      	MOVW R26,R28
0015d5 940e 1a54 	CALL __CFD1
0015d7 940e 1cb1 	CALL __PUTDP1
0015d9 940e 183f 	CALL SUBOPT_0x51
0015db 940e 1a8b 	CALL __CDF1
0015dd 01df      	MOVW R26,R30
0015de 01cb      	MOVW R24,R22
0015df 940e 17e9 	CALL SUBOPT_0x46
0015e1 940e 1d03 	CALL __CPD12
0015e3 f019      	BREQ _0x2080015
0015e4 940e 19ef 	CALL SUBOPT_0x91
0015e6 c017      	RJMP _0x20C0001
                 _0x2080015:
0015e7 940e 183a 	CALL SUBOPT_0x50
0015e9 940e 1a1f 	CALL __ANEGF1
0015eb 01df      	MOVW R26,R30
0015ec 01cb      	MOVW R24,R22
0015ed 940e 19f4 	CALL SUBOPT_0x92
0015ef df30      	RCALL _exp
                +
0015f0 87e8     +STD Y + 8 , R30
0015f1 87f9     +STD Y + 8 + 1 , R31
0015f2 876a     +STD Y + 8 + 2 , R22
0015f3 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
0015f4 81e8      	LD   R30,Y
0015f5 70e1      	ANDI R30,LOW(0x1)
0015f6 f419      	BRNE _0x2080016
0015f7 940e 183a 	CALL SUBOPT_0x50
0015f9 c004      	RJMP _0x20C0001
                 _0x2080016:
0015fa 940e 183a 	CALL SUBOPT_0x50
0015fc 940e 1a1f 	CALL __ANEGF1
                 _0x20C0001:
0015fe 962c      	ADIW R28,12
0015ff 9508      	RET
                 
                 	.CSEG
                 _isprint:
001600 93aa      	ST   -Y,R26
001601 e0e1          ldi  r30,1
001602 91f9          ld   r31,y+
001603 32f0          cpi  r31,32
001604 f010          brlo isprint0
001605 38f0          cpi  r31,128
001606 f008          brlo isprint1
                 isprint0:
001607 27ee          clr  r30
                 isprint1:
001608 9508          ret
                 
                 	.DSEG
                 _SWITCH:
000600           	.BYTE 0x1
                 _CURRENT_VOLT:
000601           	.BYTE 0x4
                 _CURRENT_AMP:
000605           	.BYTE 0x4
                 
                 	.ESEG
                 _ADJ0_SENSOR5A:
000000 ec
000001 51
000002 b8
000003 3d        	.DB  0xEC,0x51,0xB8,0x3D
                 _ADJ0_SENSOR20A:
000004 ae
000005 47
000006 e1
000007 3d        	.DB  0xAE,0x47,0xE1,0x3D
                 _ADJ0_SENSOR30A:
000008 ae
000009 47
00000a e1
00000b 3d        	.DB  0xAE,0x47,0xE1,0x3D
                 
                 	.DSEG
                 __FlagPackageTerminate0:
000609           	.BYTE 0x1
                 _rxPackage0:
00060a           	.BYTE 0x20
                 _flag_state:
00062a           	.BYTE 0x2
                 _rx_rd_index1:
00062c           	.BYTE 0x2
                 _rx_counter1:
00062e           	.BYTE 0x2
                 _rx_buffer1:
000630           	.BYTE 0x200
                 _number:
000830           	.BYTE 0x2
                 _AMP_ADJ_ZERO:
000832           	.BYTE 0x4
                 _SENSOR_SENSITIVE:
000836           	.BYTE 0x4
                 _adcValue:
00083a           	.BYTE 0x2
                 _total:
00083c           	.BYTE 0x4
                 _avg:
000840           	.BYTE 0x4
                 _value:
000844           	.BYTE 0x4
                 _Viout:
000848           	.BYTE 0x4
                 _Vdif:
00084c           	.BYTE 0x4
                 _Vsq_avg:
000850           	.BYTE 0x4
                 _volt:
000854           	.BYTE 0x4
                 _amp:
000858           	.BYTE 0x4
                 _power:
00085c           	.BYTE 0x4
                 _whour:
000860           	.BYTE 0x4
                 _Vsum:
000864           	.BYTE 0x4
                 _Isum:
000868           	.BYTE 0x4
                 _Psum:
00086c           	.BYTE 0x4
                 _WHsum:
000870           	.BYTE 0x4
                 _Vavg:
000874           	.BYTE 0x4
                 _Iavg:
000878           	.BYTE 0x4
                 _Pavg:
00087c           	.BYTE 0x4
                 _countSampling:
000880           	.BYTE 0x2
                 _EndDevice_MacAddress:
000882           	.BYTE 0x8
                 _Gateway_MacAddress:
00088a           	.BYTE 0x8
                 _STATUS_DEVICE:
000892           	.BYTE 0x1
                 _event_state:
000893           	.BYTE 0x2
                 _input:
000895           	.BYTE 0x3C
                 _count_input:
0008d1           	.BYTE 0x2
                 _count_event:
0008d3           	.BYTE 0x2
                 _baseCounter:
0008d5           	.BYTE 0x4
                 _pressedBTCounter:
0008d9           	.BYTE 0x1
                 __FlagBT:
0008da           	.BYTE 0x1
                 __Flag05INT:
0008db           	.BYTE 0x1
                 __Flag0001INT:
0008dc           	.BYTE 0x1
                 __BlinkLED_1Hz:
0008dd           	.BYTE 0x1
                 _Eaddress:
0008de           	.BYTE 0x1
                 _specData:
0008df           	.BYTE 0xD
                 _SEND_EVENT_TEST:
0008ec           	.BYTE 0x26
                 _rxPackageIndex0:
000912           	.BYTE 0x1
                 _rxPackageIndexCount0:
000913           	.BYTE 0x1
                 _AI_COMMAND:
000914           	.BYTE 0x8
                 _SL_COMMAND:
00091c           	.BYTE 0x8
                 _SH_COMMAND:
000924           	.BYTE 0x8
                 _EVENT:
00092c           	.BYTE 0x2
                 _JOIN_A1:
00092e           	.BYTE 0x27
                 _PING_A4:
000955           	.BYTE 0x27
                 _SEND_EVENT_:
00097c           	.BYTE 0x29
                 _SEND_REPORT_:
0009a5           	.BYTE 0x4C
                 __voltage:
0009f1           	.BYTE 0x8
                 __amp:
0009f9           	.BYTE 0x8
                 __power:
000a01           	.BYTE 0x8
                 __watt:
000a09           	.BYTE 0x8
                 _Vreferent:
000a11           	.BYTE 0x1
                 __seed_G100:
000a12           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
001609 931a      	ST   -Y,R17
00160a 930a      	ST   -Y,R16
                +
00160b e000     +LDI R16 , LOW ( 0 )
00160c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
00160d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1:
00160e e9a5      	LDI  R26,LOW(_input)
00160f e0b8      	LDI  R27,HIGH(_input)
001610 0fee      	LSL  R30
001611 1fff      	ROL  R31
001612 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x2:
001613 940e 1c15 	CALL __CWD1
001615 940e 1cca 	CALL __PUTPARD1
001617 e084      	LDI  R24,4
001618 940e 064a 	CALL _printDebug
00161a 9626      	ADIW R28,6
00161b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x3:
00161c 91ed      	LD   R30,X+
00161d 91fd      	LD   R31,X+
00161e 9631      	ADIW R30,1
00161f 93fe      	ST   -X,R31
001620 93ee      	ST   -X,R30
001621 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x4:
001622 91e0 08d1 	LDS  R30,_count_input
001624 91f0 08d2 	LDS  R31,_count_input+1
001626 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
001627 91a0 08de 	LDS  R26,_Eaddress
001629 27bb      	CLR  R27
00162a 940e 0e75 	CALL _EEPROM_read
00162c 93e0 0892 	STS  _STATUS_DEVICE,R30
00162e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x6:
00162f 91e0 08de 	LDS  R30,_Eaddress
001631 e0f0      	LDI  R31,0
001632 93fa      	ST   -Y,R31
001633 93ea      	ST   -Y,R30
001634 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x7:
                +
001635 e0e0     +LDI R30 , LOW ( 0x43390000 )
001636 e0f0     +LDI R31 , HIGH ( 0x43390000 )
001637 e369     +LDI R22 , BYTE3 ( 0x43390000 )
001638 e473     +LDI R23 , BYTE4 ( 0x43390000 )
                 	__GETD1N 0x43390000
001639 93e0 0836 	STS  _SENSOR_SENSITIVE,R30
00163b 93f0 0837 	STS  _SENSOR_SENSITIVE+1,R31
00163d 9360 0838 	STS  _SENSOR_SENSITIVE+2,R22
00163f 9370 0839 	STS  _SENSOR_SENSITIVE+3,R23
001641 e0a0      	LDI  R26,LOW(_ADJ0_SENSOR5A)
001642 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR5A)
001643 940e 1ce1 	CALL __EEPROMRDD
001645 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
001646 01df      	MOVW R26,R30
001647 01cb      	MOVW R24,R22
001648 940e 1cfd 	CALL __CPD02
00164a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
00164b 93e0 0836 	STS  _SENSOR_SENSITIVE,R30
00164d 93f0 0837 	STS  _SENSOR_SENSITIVE+1,R31
00164f 9360 0838 	STS  _SENSOR_SENSITIVE+2,R22
001651 9370 0839 	STS  _SENSOR_SENSITIVE+3,R23
001653 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xA:
001654 93fa      	ST   -Y,R31
001655 93ea      	ST   -Y,R30
001656 e080      	LDI  R24,0
001657 940e 064a 	CALL _printDebug
001659 9622      	ADIW R28,2
                +
00165a eeeb     +LDI R30 , LOW ( 2 * _0x0 + ( 71 ) )
00165b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 71 ) )
                 	__POINTW1FN _0x0,71
00165c 93fa      	ST   -Y,R31
00165d 93ea      	ST   -Y,R30
                +
00165e e0e0     +LDI R30 , LOW ( 0x3F800000 )
00165f e0f0     +LDI R31 , HIGH ( 0x3F800000 )
001660 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
001661 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
001662 940e 1cca 	CALL __PUTPARD1
001664 e084      	LDI  R24,4
001665 940e 064a 	CALL _printDebug
001667 9626      	ADIW R28,6
001668 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 26 TIMES, CODE SIZE REDUCTION:97 WORDS
                 SUBOPT_0xB:
001669 93fa      	ST   -Y,R31
00166a 93ea      	ST   -Y,R30
00166b e080      	LDI  R24,0
00166c 940e 064a 	CALL _printDebug
00166e 9622      	ADIW R28,2
00166f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
                +
001670 e0e0     +LDI R30 , LOW ( 0x3F800000 )
001671 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
001672 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
001673 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
001674 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:57 WORDS
                 SUBOPT_0xD:
001675 940e 1cca 	CALL __PUTPARD1
001677 e084      	LDI  R24,4
001678 940e 064a 	CALL _printDebug
00167a 9626      	ADIW R28,6
00167b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
00167c 91e0 0836 	LDS  R30,_SENSOR_SENSITIVE
00167e 91f0 0837 	LDS  R31,_SENSOR_SENSITIVE+1
001680 9160 0838 	LDS  R22,_SENSOR_SENSITIVE+2
001682 9170 0839 	LDS  R23,_SENSOR_SENSITIVE+3
001684 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
001685 91e0 0832 	LDS  R30,_AMP_ADJ_ZERO
001687 91f0 0833 	LDS  R31,_AMP_ADJ_ZERO+1
001689 9160 0834 	LDS  R22,_AMP_ADJ_ZERO+2
00168b 9170 0835 	LDS  R23,_AMP_ADJ_ZERO+3
00168d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x10:
00168e e9e0      	LDI  R30,LOW(144)
                +
00168f 93e0 08ee+STS _SEND_EVENT_TEST + ( 2 ) , R30
                 	__PUTB1MN _SEND_EVENT_TEST,2
                +
001691 93e0 08ef+STS _SEND_EVENT_TEST + ( 3 ) , R30
                 	__PUTB1MN _SEND_EVENT_TEST,3
001693 eae5      	LDI  R30,LOW(165)
                +
001694 93e0 090f+STS _SEND_EVENT_TEST + ( 35 ) , R30
                 	__PUTB1MN _SEND_EVENT_TEST,35
001696 e0e1      	LDI  R30,LOW(1)
                +
001697 93e0 0910+STS _SEND_EVENT_TEST + ( 36 ) , R30
                 	__PUTB1MN _SEND_EVENT_TEST,36
001699 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
00169a e0a0      	LDI  R26,LOW(0)
00169b e0b0      	LDI  R27,0
00169c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x12:
00169d 940e 08e4 	CALL _xbee_sendATCommand
00169f e6a4      	LDI  R26,LOW(100)
0016a0 e0b0      	LDI  R27,0
0016a1 940c 19f8 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x13:
0016a3 e6a4      	LDI  R26,LOW(100)
0016a4 e0b0      	LDI  R27,0
0016a5 940c 19f8 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
0016a7 91e0 0065 	LDS  R30,101
0016a9 60e4      	ORI  R30,4
0016aa 93e0 0065 	STS  101,R30
0016ac 98af      	CBI  0x15,7
0016ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x15:
0016ae 91a0 0892 	LDS  R26,_STATUS_DEVICE
0016b0 940c 0e68 	JMP  _EEPROM_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
0016b2 e0a1      	LDI  R26,LOW(1)
0016b3 e0b0      	LDI  R27,0
0016b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x17:
0016b5 e0a2      	LDI  R26,LOW(2)
0016b6 e0b0      	LDI  R27,0
0016b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x18:
0016b8 01f4      	MOVW R30,R8
0016b9 9631      	ADIW R30,1
0016ba 014f      	MOVW R8,R30
0016bb 01d4      	MOVW R26,R8
0016bc e0ea      	LDI  R30,LOW(10)
0016bd e0f0      	LDI  R31,HIGH(10)
0016be 940e 1c76 	CALL __MODW21
0016c0 9730      	SBIW R30,0
0016c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
0016c2 eca8      	LDI  R26,LOW(200)
0016c3 e0b0      	LDI  R27,0
0016c4 940c 19f8 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1A:
0016c6 93e0 0892 	STS  _STATUS_DEVICE,R30
0016c8 cf66      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1B:
0016c9 e0e4      	LDI  R30,LOW(4)
0016ca e0f0      	LDI  R31,HIGH(4)
0016cb 93e0 062a 	STS  _flag_state,R30
0016cd 93f0 062b 	STS  _flag_state+1,R31
0016cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1C:
                +
0016d0 efe1     +LDI R30 , LOW ( 2 * _0x0 + ( 589 ) )
0016d1 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 589 ) )
                 	__POINTW1FN _0x0,589
0016d2 93fa      	ST   -Y,R31
0016d3 93ea      	ST   -Y,R30
0016d4 df4d      	RCALL SUBOPT_0x4
0016d5 cf3d      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1D:
0016d6 91e0 0065 	LDS  R30,101
0016d8 7feb      	ANDI R30,0xFB
0016d9 93e0 0065 	STS  101,R30
0016db 9aaf      	SBI  0x15,7
0016dc e0e0      	LDI  R30,LOW(0)
0016dd cfe8      	RJMP SUBOPT_0x1A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1E:
0016de e0e3      	LDI  R30,LOW(3)
0016df e0f0      	LDI  R31,HIGH(3)
0016e0 93e0 062a 	STS  _flag_state,R30
0016e2 93f0 062b 	STS  _flag_state+1,R31
0016e4 cfeb      	RJMP SUBOPT_0x1C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
0016e5 01fe      	MOVW R30,R28
0016e6 9632      	ADIW R30,2
0016e7 93fa      	ST   -Y,R31
0016e8 93ea      	ST   -Y,R30
0016e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
0016ea 93ba      	ST   -Y,R27
0016eb 93aa      	ST   -Y,R26
0016ec 9724      	SBIW R28,4
0016ed e0e0      	LDI  R30,LOW(0)
0016ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x21:
0016ef 81ee      	LDD  R30,Y+6
0016f0 81ff      	LDD  R31,Y+6+1
0016f1 93fa      	ST   -Y,R31
0016f2 93ea      	ST   -Y,R30
0016f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
0016f4 85ac      	LDD  R26,Y+12
0016f5 85bd      	LDD  R27,Y+12+1
0016f6 940c 06b7 	JMP  _print_hex_ascii_line
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
0016f8 85a8      	LDD  R26,Y+8
0016f9 85b9      	LDD  R27,Y+8+1
0016fa 0fea      	ADD  R30,R26
0016fb 1ffb      	ADC  R31,R27
0016fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x24:
0016fd 93fa      	ST   -Y,R31
0016fe 93ea      	ST   -Y,R30
0016ff 01da      	MOVW R26,R20
001700 91ec      	LD   R30,X
001701 27ff      	CLR  R31
001702 2766      	CLR  R22
001703 2777      	CLR  R23
001704 cf70      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
001705 eaeb      	LDI  R30,LOW(171)
001706 93e0 0089 	STS  137,R30
001708 eae0      	LDI  R30,LOW(160)
001709 93e0 0088 	STS  136,R30
00170b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x26:
00170c 920a      	ST   -Y,R0
00170d 921a      	ST   -Y,R1
00170e 92fa      	ST   -Y,R15
00170f 936a      	ST   -Y,R22
001710 937a      	ST   -Y,R23
001711 938a      	ST   -Y,R24
001712 939a      	ST   -Y,R25
001713 93aa      	ST   -Y,R26
001714 93ba      	ST   -Y,R27
001715 93ea      	ST   -Y,R30
001716 93fa      	ST   -Y,R31
001717 b7ef      	IN   R30,SREG
001718 93ea      	ST   -Y,R30
001719 931a      	ST   -Y,R17
00171a 930a      	ST   -Y,R16
00171b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
00171c 2766      	CLR  R22
00171d 2777      	CLR  R23
00171e cf56      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x28:
00171f 81a9      	LDD  R26,Y+1
001720 81ba      	LDD  R27,Y+1+1
001721 27ee      	CLR  R30
001722 0fa1      	ADD  R26,R17
001723 1fbe      	ADC  R27,R30
001724 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x29:
001725 940e 1cbb 	CALL __GETD1S0
                +
001727 36e0     +CPI R30 , LOW ( 0x960 )
001728 e0a9     +LDI R26 , HIGH ( 0x960 )
001729 07fa     +CPC R31 , R26
00172a e0a0     +LDI R26 , BYTE3 ( 0x960 )
00172b 076a     +CPC R22 , R26
00172c e0a0     +LDI R26 , BYTE4 ( 0x960 )
00172d 077a     +CPC R23 , R26
                 	__CPD1N 0x960
00172e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2A:
                +
00172f 38e0     +CPI R30 , LOW ( 0x2580 )
001730 e2a5     +LDI R26 , HIGH ( 0x2580 )
001731 07fa     +CPC R31 , R26
001732 e0a0     +LDI R26 , BYTE3 ( 0x2580 )
001733 076a     +CPC R22 , R26
001734 e0a0     +LDI R26 , BYTE4 ( 0x2580 )
001735 077a     +CPC R23 , R26
                 	__CPD1N 0x2580
001736 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2B:
                +
001737 34e0     +CPI R30 , LOW ( 0x3840 )
001738 e3a8     +LDI R26 , HIGH ( 0x3840 )
001739 07fa     +CPC R31 , R26
00173a e0a0     +LDI R26 , BYTE3 ( 0x3840 )
00173b 076a     +CPC R22 , R26
00173c e0a0     +LDI R26 , BYTE4 ( 0x3840 )
00173d 077a     +CPC R23 , R26
                 	__CPD1N 0x3840
00173e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2C:
                +
00173f 30e0     +CPI R30 , LOW ( 0x4B00 )
001740 e4ab     +LDI R26 , HIGH ( 0x4B00 )
001741 07fa     +CPC R31 , R26
001742 e0a0     +LDI R26 , BYTE3 ( 0x4B00 )
001743 076a     +CPC R22 , R26
001744 e0a0     +LDI R26 , BYTE4 ( 0x4B00 )
001745 077a     +CPC R23 , R26
                 	__CPD1N 0x4B00
001746 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2D:
                +
001747 30e0     +CPI R30 , LOW ( 0x9600 )
001748 e9a6     +LDI R26 , HIGH ( 0x9600 )
001749 07fa     +CPC R31 , R26
00174a e0a0     +LDI R26 , BYTE3 ( 0x9600 )
00174b 076a     +CPC R22 , R26
00174c e0a0     +LDI R26 , BYTE4 ( 0x9600 )
00174d 077a     +CPC R23 , R26
                 	__CPD1N 0x9600
00174e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2E:
                +
00174f 30e0     +CPI R30 , LOW ( 0xE100 )
001750 eea1     +LDI R26 , HIGH ( 0xE100 )
001751 07fa     +CPC R31 , R26
001752 e0a0     +LDI R26 , BYTE3 ( 0xE100 )
001753 076a     +CPC R22 , R26
001754 e0a0     +LDI R26 , BYTE4 ( 0xE100 )
001755 077a     +CPC R23 , R26
                 	__CPD1N 0xE100
001756 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2F:
                +
001757 30e0     +CPI R30 , LOW ( 0x1C200 )
001758 eca2     +LDI R26 , HIGH ( 0x1C200 )
001759 07fa     +CPC R31 , R26
00175a e0a1     +LDI R26 , BYTE3 ( 0x1C200 )
00175b 076a     +CPC R22 , R26
00175c e0a0     +LDI R26 , BYTE4 ( 0x1C200 )
00175d 077a     +CPC R23 , R26
                 	__CPD1N 0x1C200
00175e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x30:
00175f 93fa      	ST   -Y,R31
001760 93ea      	ST   -Y,R30
001761 e0a8      	LDI  R26,LOW(8)
001762 e0b0      	LDI  R27,0
001763 940c 066f 	JMP  _print_payload
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 22 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x31:
001765 e0a8      	LDI  R26,LOW(8)
001766 e0b0      	LDI  R27,0
001767 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x32:
001768 01f8      	MOVW R30,R16
001769 81ac      	LDD  R26,Y+4
00176a 81bd      	LDD  R27,Y+4+1
00176b 0fae      	ADD  R26,R30
00176c 1fbf      	ADC  R27,R31
00176d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x33:
00176e 81a9      	LDD  R26,Y+1
00176f 81ba      	LDD  R27,Y+1+1
001770 9612      	ADIW R26,2
001771 91ac      	LD   R26,X
001772 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x34:
001773 81a9      	LDD  R26,Y+1
001774 81ba      	LDD  R27,Y+1+1
001775 9613      	ADIW R26,3
001776 91ac      	LD   R26,X
001777 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x35:
001778 e8e2      	LDI  R30,LOW(_EndDevice_MacAddress)
001779 e0f8      	LDI  R31,HIGH(_EndDevice_MacAddress)
00177a 93fa      	ST   -Y,R31
00177b 93ea      	ST   -Y,R30
00177c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x36:
00177d 81eb      	LDD  R30,Y+3
00177e 81fc      	LDD  R31,Y+3+1
00177f 9635      	ADIW R30,5
001780 93fa      	ST   -Y,R31
001781 93ea      	ST   -Y,R30
001782 e0a4      	LDI  R26,LOW(4)
001783 e0b0      	LDI  R27,0
001784 940c 1420 	JMP  _memcpy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x37:
001786 81a9      	LDD  R26,Y+1
001787 81ba      	LDD  R27,Y+1+1
001788 9690      	ADIW R26,32
001789 91ac      	LD   R26,X
00178a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x38:
00178b e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
00178c e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
00178d 93fa      	ST   -Y,R31
00178e 93ea      	ST   -Y,R30
00178f 81eb      	LDD  R30,Y+3
001790 81fc      	LDD  R31,Y+3+1
001791 9631      	ADIW R30,1
001792 93fa      	ST   -Y,R31
001793 93ea      	ST   -Y,R30
001794 cfd0      	RJMP SUBOPT_0x31
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x39:
001795 940e 1420 	CALL _memcpy
001797 de8a      	RCALL SUBOPT_0x4
001798 ce75      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
001799 de88      	RCALL SUBOPT_0x4
00179a ce73      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3B:
00179b 9aaf      	SBI  0x15,7
00179c 91e0 0065 	LDS  R30,101
00179e 7feb      	ANDI R30,0xFB
00179f 93e0 0065 	STS  101,R30
0017a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3C:
0017a2 93ea      	ST   -Y,R30
                +
0017a3 e0a0     +LDI R26 , LOW ( 0x9600 )
0017a4 e9b6     +LDI R27 , HIGH ( 0x9600 )
0017a5 e080     +LDI R24 , BYTE3 ( 0x9600 )
0017a6 e090     +LDI R25 , BYTE4 ( 0x9600 )
                 	__GETD2N 0x9600
0017a7 940c 087a 	JMP  _init_uart
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:20 WORDS
                 SUBOPT_0x3D:
0017a9 e0e0      	LDI  R30,0
0017aa 99cf      	SBIC 0x19,7
0017ab e0e1      	LDI  R30,1
0017ac 2e0e      	MOV  R0,R30
0017ad e0a0      	LDI  R26,0
0017ae 99ce      	SBIC 0x19,6
0017af e0a1      	LDI  R26,1
0017b0 2fea      	MOV  R30,R26
0017b1 0fee      	LSL  R30
0017b2 2a0e      	OR   R0,R30
0017b3 e0a0      	LDI  R26,0
0017b4 99cd      	SBIC 0x19,5
0017b5 e0a1      	LDI  R26,1
0017b6 2fea      	MOV  R30,R26
0017b7 0fee      	LSL  R30
0017b8 0fee      	LSL  R30
0017b9 2a0e      	OR   R0,R30
0017ba e0a0      	LDI  R26,0
0017bb 99cc      	SBIC 0x19,4
0017bc e0a1      	LDI  R26,1
0017bd 2fea      	MOV  R30,R26
0017be 0fee      	LSL  R30
0017bf 0fee      	LSL  R30
0017c0 0fee      	LSL  R30
0017c1 29e0      	OR   R30,R0
0017c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3E:
                +
0017c3 85ec     +LDD R30 , Y + 12
0017c4 85fd     +LDD R31 , Y + 12 + 1
0017c5 856e     +LDD R22 , Y + 12 + 2
0017c6 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
0017c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3F:
0017c8 940e 1c15 	CALL __CWD1
0017ca 940e 1a8b 	CALL __CDF1
0017cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x40:
                +
0017cd 85ac     +LDD R26 , Y + 12
0017ce 85bd     +LDD R27 , Y + 12 + 1
0017cf 858e     +LDD R24 , Y + 12 + 2
0017d0 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
0017d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x41:
0017d2 940e 1cd4 	CALL __SWAPD12
0017d4 940e 1abe 	CALL __SUBF12
0017d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x42:
                +
0017d7 83ec     +STD Y + 4 , R30
0017d8 83fd     +STD Y + 4 + 1 , R31
0017d9 836e     +STD Y + 4 + 2 , R22
0017da 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
0017db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x43:
                +
0017dc e0e0     +LDI R30 , LOW ( 0x41200000 )
0017dd e0f0     +LDI R31 , HIGH ( 0x41200000 )
0017de e260     +LDI R22 , BYTE3 ( 0x41200000 )
0017df e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0017e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x44:
                +
0017e1 81ac     +LDD R26 , Y + 4
0017e2 81bd     +LDD R27 , Y + 4 + 1
0017e3 818e     +LDD R24 , Y + 4 + 2
0017e4 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0017e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x45:
0017e6 940e 1b15 	CALL __MULF12
0017e8 cfee      	RJMP SUBOPT_0x42
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x46:
                +
0017e9 81ec     +LDD R30 , Y + 4
0017ea 81fd     +LDD R31 , Y + 4 + 1
0017eb 816e     +LDD R22 , Y + 4 + 2
0017ec 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0017ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x47:
0017ee 93aa      	ST   -Y,R26
                +
0017ef e8e1     +LDI R30 , LOW ( _SEND_EVENT_ + ( 5 ) )
0017f0 e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 5 ) )
                 	__POINTW1MN _SEND_EVENT_,5
0017f1 93fa      	ST   -Y,R31
0017f2 93ea      	ST   -Y,R30
0017f3 e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
0017f4 e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
0017f5 93fa      	ST   -Y,R31
0017f6 93ea      	ST   -Y,R30
0017f7 cf6d      	RJMP SUBOPT_0x31
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x48:
0017f8 940e 1420 	CALL _memcpy
                +
0017fa e8ee     +LDI R30 , LOW ( _SEND_EVENT_ + ( 18 ) )
0017fb e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 18 ) )
                 	__POINTW1MN _SEND_EVENT_,18
0017fc 93fa      	ST   -Y,R31
0017fd 93ea      	ST   -Y,R30
0017fe cf79      	RJMP SUBOPT_0x35
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x49:
0017ff 940e 1420 	CALL _memcpy
                +
001801 e9e6     +LDI R30 , LOW ( _SEND_EVENT_ + ( 26 ) )
001802 e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 26 ) )
                 	__POINTW1MN _SEND_EVENT_,26
001803 93fa      	ST   -Y,R31
001804 93ea      	ST   -Y,R30
001805 e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
001806 e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
001807 93fa      	ST   -Y,R31
001808 93ea      	ST   -Y,R30
001809 cf5b      	RJMP SUBOPT_0x31
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4A:
00180a 940e 1420 	CALL _memcpy
                +
00180c eae3     +LDI R30 , LOW ( _SEND_EVENT_ + ( 39 ) )
00180d e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 39 ) )
                 	__POINTW1MN _SEND_EVENT_,39
00180e 93fa      	ST   -Y,R31
00180f 93ea      	ST   -Y,R30
001810 ced4      	RJMP SUBOPT_0x1F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4B:
                +
001811 93e0 09a1+STS _SEND_EVENT_ + ( 37 ) , R30
                 	__PUTB1MN _SEND_EVENT_,37
001813 81e9      	LDD  R30,Y+1
                +
001814 93e0 09a2+STS _SEND_EVENT_ + ( 38 ) , R30
                 	__PUTB1MN _SEND_EVENT_,38
                +
001816 e7ef     +LDI R30 , LOW ( _SEND_EVENT_ + ( 3 ) )
001817 e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 3 ) )
                 	__POINTW1MN _SEND_EVENT_,3
001818 93fa      	ST   -Y,R31
001819 93ea      	ST   -Y,R30
                +
00181a 91a0 097e+LDS R26 , _SEND_EVENT_ + ( 2 )
                 	__GETB2MN _SEND_EVENT_,2
00181c e0b0      	LDI  R27,0
00181d 940e 0919 	CALL _xbee_checksum
                +
00181f 93e0 09a4+STS _SEND_EVENT_ + ( 40 ) , R30
                 	__PUTB1MN _SEND_EVENT_,40
001821 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x4C:
001822 e7ec      	LDI  R30,LOW(_SEND_EVENT_)
001823 e0f9      	LDI  R31,HIGH(_SEND_EVENT_)
001824 93fa      	ST   -Y,R31
001825 93ea      	ST   -Y,R30
001826 e2a9      	LDI  R26,LOW(41)
001827 e0b0      	LDI  R27,0
001828 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x4D:
001829 93fa      	ST   -Y,R31
00182a 93ea      	ST   -Y,R30
00182b e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
00182c e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
00182d 93fa      	ST   -Y,R31
00182e 93ea      	ST   -Y,R30
00182f cf35      	RJMP SUBOPT_0x31
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4E:
001830 e5e5      	LDI  R30,LOW(_PING_A4)
001831 e0f9      	LDI  R31,HIGH(_PING_A4)
001832 93fa      	ST   -Y,R31
001833 93ea      	ST   -Y,R30
001834 e2a7      	LDI  R26,LOW(39)
001835 e0b0      	LDI  R27,0
001836 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4F:
001837 93fa      	ST   -Y,R31
001838 93ea      	ST   -Y,R30
001839 ce7b      	RJMP SUBOPT_0x17
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x50:
                +
00183a 85e8     +LDD R30 , Y + 8
00183b 85f9     +LDD R31 , Y + 8 + 1
00183c 856a     +LDD R22 , Y + 8 + 2
00183d 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
00183e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x51:
00183f 940e 1cbb 	CALL __GETD1S0
001841 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x52:
001842 93fa      	ST   -Y,R31
001843 93ea      	ST   -Y,R30
001844 cf20      	RJMP SUBOPT_0x31
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x53:
001845 eae5      	LDI  R30,LOW(_SEND_REPORT_)
001846 e0f9      	LDI  R31,HIGH(_SEND_REPORT_)
001847 93fa      	ST   -Y,R31
001848 93ea      	ST   -Y,R30
001849 e4ac      	LDI  R26,LOW(76)
00184a e0b0      	LDI  R27,0
00184b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x54:
00184c 91e0 0830 	LDS  R30,_number
00184e 91f0 0831 	LDS  R31,_number+1
001850 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x55:
001851 91a0 0864 	LDS  R26,_Vsum
001853 91b0 0865 	LDS  R27,_Vsum+1
001855 9180 0866 	LDS  R24,_Vsum+2
001857 9190 0867 	LDS  R25,_Vsum+3
001859 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x56:
00185a 2766      	CLR  R22
00185b 2777      	CLR  R23
00185c 940e 1a8b 	CALL __CDF1
00185e 940e 1b63 	CALL __DIVF21
001860 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x57:
001861 91a0 0868 	LDS  R26,_Isum
001863 91b0 0869 	LDS  R27,_Isum+1
001865 9180 086a 	LDS  R24,_Isum+2
001867 9190 086b 	LDS  R25,_Isum+3
001869 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x58:
00186a 93e0 0878 	STS  _Iavg,R30
00186c 93f0 0879 	STS  _Iavg+1,R31
00186e 9360 087a 	STS  _Iavg+2,R22
001870 9370 087b 	STS  _Iavg+3,R23
001872 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x59:
001873 91a0 086c 	LDS  R26,_Psum
001875 91b0 086d 	LDS  R27,_Psum+1
001877 9180 086e 	LDS  R24,_Psum+2
001879 9190 086f 	LDS  R25,_Psum+3
00187b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5A:
00187c 91e0 0874 	LDS  R30,_Vavg
00187e 91f0 0875 	LDS  R31,_Vavg+1
001880 9160 0876 	LDS  R22,_Vavg+2
001882 9170 0877 	LDS  R23,_Vavg+3
001884 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5B:
001885 91e0 0878 	LDS  R30,_Iavg
001887 91f0 0879 	LDS  R31,_Iavg+1
001889 9160 087a 	LDS  R22,_Iavg+2
00188b 9170 087b 	LDS  R23,_Iavg+3
00188d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5C:
00188e 91e0 087c 	LDS  R30,_Pavg
001890 91f0 087d 	LDS  R31,_Pavg+1
001892 9160 087e 	LDS  R22,_Pavg+2
001894 9170 087f 	LDS  R23,_Pavg+3
001896 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5D:
001897 91a0 0878 	LDS  R26,_Iavg
001899 91b0 0879 	LDS  R27,_Iavg+1
00189b 9180 087a 	LDS  R24,_Iavg+2
00189d 9190 087b 	LDS  R25,_Iavg+3
                +
00189f e0e0     +LDI R30 , LOW ( 0x447A0000 )
0018a0 e0f0     +LDI R31 , HIGH ( 0x447A0000 )
0018a1 e76a     +LDI R22 , BYTE3 ( 0x447A0000 )
0018a2 e474     +LDI R23 , BYTE4 ( 0x447A0000 )
                 	__GETD1N 0x447A0000
0018a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5E:
0018a4 91a0 0870 	LDS  R26,_WHsum
0018a6 91b0 0871 	LDS  R27,_WHsum+1
0018a8 9180 0872 	LDS  R24,_WHsum+2
0018aa 9190 0873 	LDS  R25,_WHsum+3
0018ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5F:
0018ad 91a0 0836 	LDS  R26,_SENSOR_SENSITIVE
0018af 91b0 0837 	LDS  R27,_SENSOR_SENSITIVE+1
0018b1 9180 0838 	LDS  R24,_SENSOR_SENSITIVE+2
0018b3 9190 0839 	LDS  R25,_SENSOR_SENSITIVE+3
0018b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x60:
0018b6 91a0 0878 	LDS  R26,_Iavg
0018b8 91b0 0879 	LDS  R27,_Iavg+1
0018ba 9180 087a 	LDS  R24,_Iavg+2
0018bc 9190 087b 	LDS  R25,_Iavg+3
0018be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x61:
0018bf 940e 0e4d 	CALL _read_adc
0018c1 93e0 083a 	STS  _adcValue,R30
0018c3 93f0 083b 	STS  _adcValue+1,R31
0018c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x62:
0018c6 91e0 083a 	LDS  R30,_adcValue
0018c8 91f0 083b 	LDS  R31,_adcValue+1
0018ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x63:
0018cb dffa      	RCALL SUBOPT_0x62
0018cc 2766      	CLR  R22
0018cd 2777      	CLR  R23
0018ce 940e 1a8b 	CALL __CDF1
0018d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x64:
0018d1 91e0 0840 	LDS  R30,_avg
0018d3 91f0 0841 	LDS  R31,_avg+1
0018d5 9160 0842 	LDS  R22,_avg+2
0018d7 9170 0843 	LDS  R23,_avg+3
0018d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x65:
0018da 91a0 0844 	LDS  R26,_value
0018dc 91b0 0845 	LDS  R27,_value+1
0018de 9180 0846 	LDS  R24,_value+2
0018e0 9190 0847 	LDS  R25,_value+3
0018e2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x66:
0018e3 940e 1ac5 	CALL __ADDF12
0018e5 01df      	MOVW R26,R30
0018e6 01cb      	MOVW R24,R22
0018e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x67:
0018e8 dfe8      	RCALL SUBOPT_0x64
0018e9 dff0      	RCALL SUBOPT_0x65
0018ea 940e 1ba8 	CALL __CMPF12
0018ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x68:
0018ed 91a0 083c 	LDS  R26,_total
0018ef 91b0 083d 	LDS  R27,_total+1
0018f1 9180 083e 	LDS  R24,_total+2
0018f3 9190 083f 	LDS  R25,_total+3
0018f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x69:
0018f6 940e 1b15 	CALL __MULF12
0018f8 01df      	MOVW R26,R30
0018f9 01cb      	MOVW R24,R22
0018fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6A:
0018fb 91a0 0854 	LDS  R26,_volt
0018fd 91b0 0855 	LDS  R27,_volt+1
0018ff 9180 0856 	LDS  R24,_volt+2
001901 9190 0857 	LDS  R25,_volt+3
001903 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x6B:
001904 91e0 0854 	LDS  R30,_volt
001906 91f0 0855 	LDS  R31,_volt+1
001908 9160 0856 	LDS  R22,_volt+2
00190a 9170 0857 	LDS  R23,_volt+3
00190c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6C:
00190d 91e0 0858 	LDS  R30,_amp
00190f 91f0 0859 	LDS  R31,_amp+1
001911 9160 085a 	LDS  R22,_amp+2
001913 9170 085b 	LDS  R23,_amp+3
001915 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6D:
                +
001916 87e9     +STD Y + 9 , R30
001917 87fa     +STD Y + 9 + 1 , R31
001918 876b     +STD Y + 9 + 2 , R22
001919 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
00191a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6E:
00191b 81ae      	LDD  R26,Y+6
00191c 81bf      	LDD  R27,Y+6+1
00191d 9611      	ADIW R26,1
00191e 83ae      	STD  Y+6,R26
00191f 83bf      	STD  Y+6+1,R27
001920 9711      	SBIW R26,1
001921 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6F:
                +
001922 81aa     +LDD R26 , Y + 2
001923 81bb     +LDD R27 , Y + 2 + 1
001924 818c     +LDD R24 , Y + 2 + 2
001925 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
001926 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x70:
                +
001927 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
001928 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
001929 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
00192a e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
00192b 940e 1b15 	CALL __MULF12
00192d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x71:
                +
00192e 83ea     +STD Y + 2 , R30
00192f 83fb     +STD Y + 2 + 1 , R31
001930 836c     +STD Y + 2 + 2 , R22
001931 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
001932 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x72:
                +
001933 81ea     +LDD R30 , Y + 2
001934 81fb     +LDD R31 , Y + 2 + 1
001935 816c     +LDD R22 , Y + 2 + 2
001936 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
001937 85a9     +LDD R26 , Y + 9
001938 85ba     +LDD R27 , Y + 9 + 1
001939 858b     +LDD R24 , Y + 9 + 2
00193a 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
00193b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x73:
00193c de9f      	RCALL SUBOPT_0x43
00193d 940e 1b15 	CALL __MULF12
00193f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x74:
                +
001940 e0a0     +LDI R26 , LOW ( 0x3F000000 )
001941 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
001942 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
001943 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
001944 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x75:
001945 2fe0      	MOV  R30,R16
001946 5de0      	SUBI R30,-LOW(48)
001947 93ec      	ST   X,R30
001948 2fe0      	MOV  R30,R16
001949 e0f0      	LDI  R31,0
00194a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x76:
                +
00194b 85a9     +LDD R26 , Y + 9
00194c 85ba     +LDD R27 , Y + 9 + 1
00194d 858b     +LDD R24 , Y + 9 + 2
00194e 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
00194f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x77:
001950 de90      	RCALL SUBOPT_0x44
001951 de8a      	RCALL SUBOPT_0x43
001952 ce93      	RJMP SUBOPT_0x45
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x78:
001953 de95      	RCALL SUBOPT_0x46
001954 de78      	RCALL SUBOPT_0x40
001955 940e 1ba8 	CALL __CMPF12
001957 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x79:
                +
001958 87ec     +STD Y + 12 , R30
001959 87fd     +STD Y + 12 + 1 , R31
00195a 876e     +STD Y + 12 + 2 , R22
00195b 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
00195c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7A:
00195d 85a8      	LDD  R26,Y+8
00195e 85b9      	LDD  R27,Y+8+1
00195f 9611      	ADIW R26,1
001960 87a8      	STD  Y+8,R26
001961 87b9      	STD  Y+8+1,R27
001962 9711      	SBIW R26,1
001963 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7B:
001964 85e8      	LDD  R30,Y+8
001965 85f9      	LDD  R31,Y+8+1
001966 9631      	ADIW R30,1
001967 87e8      	STD  Y+8,R30
001968 87f9      	STD  Y+8+1,R31
001969 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x7C:
00196a 932a      	ST   -Y,R18
00196b 81af      	LDD  R26,Y+7
00196c 85b8      	LDD  R27,Y+7+1
00196d 85e9      	LDD  R30,Y+9
00196e 85fa      	LDD  R31,Y+9+1
00196f 9509      	ICALL
001970 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x7D:
                +
001971 01fe     +MOVW R30 , R28
001972 5ae6     +SUBI R30 , LOW ( - 90 )
001973 4fff     +SBCI R31 , HIGH ( - 90 )
001974 9001     +LD R0 , Z +
001975 81f0     +LD R31 , Z
001976 2de0     +MOV R30 , R0
                 	__GETW1SX 90
001977 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x7E:
001978 9734      	SBIW R30,4
                +
001979 01de     +MOVW R26 , R28
00197a 5aa6     +SUBI R26 , LOW ( - 90 )
00197b 4fbf     +SBCI R27 , HIGH ( - 90 )
00197c 93ed     +ST X + , R30
00197d 93fc     +ST X , R31
                 	__PUTW1SX 90
00197e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7F:
00197f 81af      	LDD  R26,Y+7
001980 85b8      	LDD  R27,Y+7+1
001981 85e9      	LDD  R30,Y+9
001982 85fa      	LDD  R31,Y+9+1
001983 9509      	ICALL
001984 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x80:
                +
001985 01de     +MOVW R26 , R28
001986 5aa6     +SUBI R26 , LOW ( - 90 )
001987 4fbf     +SBCI R27 , HIGH ( - 90 )
001988 900d     +LD R0 , X +
001989 91bc     +LD R27 , X
00198a 2da0     +MOV R26 , R0
                 	__GETW2SX 90
00198b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x81:
                +
00198c 87ea     +STD Y + 10 , R30
00198d 87fb     +STD Y + 10 + 1 , R31
00198e 876c     +STD Y + 10 + 2 , R22
00198f 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
001990 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x82:
001991 dfdf      	RCALL SUBOPT_0x7D
001992 cfe5      	RJMP SUBOPT_0x7E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x83:
                +
001993 85ea     +LDD R30 , Y + 10
001994 85fb     +LDD R31 , Y + 10 + 1
001995 856c     +LDD R22 , Y + 10 + 2
001996 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
001997 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x84:
001998 87ee      	STD  Y+14,R30
001999 87ff      	STD  Y+14+1,R31
00199a 85ae      	LDD  R26,Y+14
00199b 85bf      	LDD  R27,Y+14+1
00199c 940e 143f 	CALL _strlen
00199e 2f1e      	MOV  R17,R30
00199f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x85:
0019a0 dfe4      	RCALL SUBOPT_0x80
0019a1 9614      	ADIW R26,4
0019a2 940e 1ca2 	CALL __GETW1P
0019a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x86:
                +
0019a5 8be8     +STD Y + 16 , R30
0019a6 8bf9     +STD Y + 16 + 1 , R31
0019a7 8b6a     +STD Y + 16 + 2 , R22
0019a8 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
0019a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x87:
0019aa 7f0b      	ANDI R16,LOW(251)
0019ab 89ed      	LDD  R30,Y+21
0019ac 93ea      	ST   -Y,R30
                +
0019ad 01de     +MOVW R26 , R28
0019ae 5aa9     +SUBI R26 , LOW ( - 87 )
0019af 4fbf     +SBCI R27 , HIGH ( - 87 )
0019b0 900d     +LD R0 , X +
0019b1 91bc     +LD R27 , X
0019b2 2da0     +MOV R26 , R0
                 	__GETW2SX 87
                +
0019b3 01fe     +MOVW R30 , R28
0019b4 5ae7     +SUBI R30 , LOW ( - 89 )
0019b5 4fff     +SBCI R31 , HIGH ( - 89 )
0019b6 9001     +LD R0 , Z +
0019b7 81f0     +LD R31 , Z
0019b8 2de0     +MOV R30 , R0
                 	__GETW1SX 89
0019b9 9509      	ICALL
0019ba 3050      	CPI  R21,0
0019bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x88:
                +
0019bc 89e8     +LDD R30 , Y + 16
0019bd 89f9     +LDD R31 , Y + 16 + 1
0019be 896a     +LDD R22 , Y + 16 + 2
0019bf 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
0019c0 85aa     +LDD R26 , Y + 10
0019c1 85bb     +LDD R27 , Y + 10 + 1
0019c2 858c     +LDD R24 , Y + 10 + 2
0019c3 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
0019c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x89:
                +
0019c5 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0019c6 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0019c7 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0019c8 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0019c9 940e 1abe 	CALL __SUBF12
0019cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8A:
                +
0019cc 81ae     +LDD R26 , Y + 6
0019cd 81bf     +LDD R27 , Y + 6 + 1
0019ce 8588     +LDD R24 , Y + 6 + 2
0019cf 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
0019d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8B:
                +
0019d1 81ee     +LDD R30 , Y + 6
0019d2 81ff     +LDD R31 , Y + 6 + 1
0019d3 8568     +LDD R22 , Y + 6 + 2
0019d4 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
0019d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8C:
                +
0019d6 83ee     +STD Y + 6 , R30
0019d7 83ff     +STD Y + 6 + 1 , R31
0019d8 8768     +STD Y + 6 + 2 , R22
0019d9 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
0019da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8D:
0019db dff5      	RCALL SUBOPT_0x8B
0019dc cfef      	RJMP SUBOPT_0x8A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8E:
0019dd 940e 1b15 	CALL __MULF12
0019df df4e      	RCALL SUBOPT_0x71
                +
0019e0 81ea     +LDD R30 , Y + 2
0019e1 81fb     +LDD R31 , Y + 2 + 1
0019e2 816c     +LDD R22 , Y + 2 + 2
0019e3 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0019e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8F:
                +
0019e5 81ea     +LDD R30 , Y + 2
0019e6 81fb     +LDD R31 , Y + 2 + 1
0019e7 816c     +LDD R22 , Y + 2 + 2
0019e8 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0019e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x90:
                +
0019ea 85aa     +LDD R26 , Y + 10
0019eb 85bb     +LDD R27 , Y + 10 + 1
0019ec 858c     +LDD R24 , Y + 10 + 2
0019ed 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
0019ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x91:
                +
0019ef e0e0     +LDI R30 , LOW ( 0x0 )
0019f0 e0f0     +LDI R31 , HIGH ( 0x0 )
0019f1 e060     +LDI R22 , BYTE3 ( 0x0 )
0019f2 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0019f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x92:
0019f4 940e 149c 	CALL _log
0019f6 ddea      	RCALL SUBOPT_0x44
0019f7 cefe      	RJMP SUBOPT_0x69
                 
                 
                 	.CSEG
                 _delay_ms:
0019f8 9610      	adiw r26,0
0019f9 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0019fa ec8d     +LDI R24 , LOW ( 0xACD )
0019fb e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
0019fc 9701     +SBIW R24 , 1
0019fd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
0019fe 95a8      	wdr
0019ff 9711      	sbiw r26,1
001a00 f7c9      	brne __delay_ms0
                 __delay_ms1:
001a01 9508      	ret
                 
                 _frexp:
001a02 91e9      	LD   R30,Y+
001a03 91f9      	LD   R31,Y+
001a04 9169      	LD   R22,Y+
001a05 9179      	LD   R23,Y+
001a06 fb77      	BST  R23,7
001a07 0f66      	LSL  R22
001a08 1f77      	ROL  R23
001a09 2788      	CLR  R24
001a0a 577e      	SUBI R23,0x7E
001a0b 0b88      	SBC  R24,R24
001a0c 937d      	ST   X+,R23
001a0d 938c      	ST   X,R24
001a0e e77e      	LDI  R23,0x7E
001a0f 9576      	LSR  R23
001a10 9567      	ROR  R22
001a11 f06e      	BRTS __ANEGF1
001a12 9508      	RET
                 
                 _ldexp:
001a13 91e9      	LD   R30,Y+
001a14 91f9      	LD   R31,Y+
001a15 9169      	LD   R22,Y+
001a16 9179      	LD   R23,Y+
001a17 fb77      	BST  R23,7
001a18 0f66      	LSL  R22
001a19 1f77      	ROL  R23
001a1a 0f7a      	ADD  R23,R26
001a1b 9576      	LSR  R23
001a1c 9567      	ROR  R22
001a1d f00e      	BRTS __ANEGF1
001a1e 9508      	RET
                 
                 __ANEGF1:
001a1f 9730      	SBIW R30,0
001a20 4060      	SBCI R22,0
001a21 4070      	SBCI R23,0
001a22 f009      	BREQ __ANEGF10
001a23 5870      	SUBI R23,0x80
                 __ANEGF10:
001a24 9508      	RET
                 
                 __ROUND_REPACK:
001a25 2355      	TST  R21
001a26 f442      	BRPL __REPACK
001a27 3850      	CPI  R21,0x80
001a28 f411      	BRNE __ROUND_REPACK0
001a29 ffe0      	SBRS R30,0
001a2a c004      	RJMP __REPACK
                 __ROUND_REPACK0:
001a2b 9631      	ADIW R30,1
001a2c 1f69      	ADC  R22,R25
001a2d 1f79      	ADC  R23,R25
001a2e f06b      	BRVS __REPACK1
                 
                 __REPACK:
001a2f e850      	LDI  R21,0x80
001a30 2757      	EOR  R21,R23
001a31 f411      	BRNE __REPACK0
001a32 935f      	PUSH R21
001a33 c0cf      	RJMP __ZERORES
                 __REPACK0:
001a34 3f5f      	CPI  R21,0xFF
001a35 f031      	BREQ __REPACK1
001a36 0f66      	LSL  R22
001a37 0c00      	LSL  R0
001a38 9557      	ROR  R21
001a39 9567      	ROR  R22
001a3a 2f75      	MOV  R23,R21
001a3b 9508      	RET
                 __REPACK1:
001a3c 935f      	PUSH R21
001a3d 2000      	TST  R0
001a3e f00a      	BRMI __REPACK2
001a3f c0cf      	RJMP __MAXRES
                 __REPACK2:
001a40 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
001a41 e850      	LDI  R21,0x80
001a42 2e19      	MOV  R1,R25
001a43 2215      	AND  R1,R21
001a44 0f88      	LSL  R24
001a45 1f99      	ROL  R25
001a46 2795      	EOR  R25,R21
001a47 0f55      	LSL  R21
001a48 9587      	ROR  R24
                 
                 __UNPACK1:
001a49 e850      	LDI  R21,0x80
001a4a 2e07      	MOV  R0,R23
001a4b 2205      	AND  R0,R21
001a4c 0f66      	LSL  R22
001a4d 1f77      	ROL  R23
001a4e 2775      	EOR  R23,R21
001a4f 0f55      	LSL  R21
001a50 9567      	ROR  R22
001a51 9508      	RET
                 
                 __CFD1U:
001a52 9468      	SET
001a53 c001      	RJMP __CFD1U0
                 __CFD1:
001a54 94e8      	CLT
                 __CFD1U0:
001a55 935f      	PUSH R21
001a56 dff2      	RCALL __UNPACK1
001a57 3870      	CPI  R23,0x80
001a58 f018      	BRLO __CFD10
001a59 3f7f      	CPI  R23,0xFF
001a5a f408      	BRCC __CFD10
001a5b c0a7      	RJMP __ZERORES
                 __CFD10:
001a5c e156      	LDI  R21,22
001a5d 1b57      	SUB  R21,R23
001a5e f4aa      	BRPL __CFD11
001a5f 9551      	NEG  R21
001a60 3058      	CPI  R21,8
001a61 f40e      	BRTC __CFD19
001a62 3059      	CPI  R21,9
                 __CFD19:
001a63 f030      	BRLO __CFD17
001a64 efef      	SER  R30
001a65 efff      	SER  R31
001a66 ef6f      	SER  R22
001a67 e77f      	LDI  R23,0x7F
001a68 f977      	BLD  R23,7
001a69 c01a      	RJMP __CFD15
                 __CFD17:
001a6a 2777      	CLR  R23
001a6b 2355      	TST  R21
001a6c f0b9      	BREQ __CFD15
                 __CFD18:
001a6d 0fee      	LSL  R30
001a6e 1fff      	ROL  R31
001a6f 1f66      	ROL  R22
001a70 1f77      	ROL  R23
001a71 955a      	DEC  R21
001a72 f7d1      	BRNE __CFD18
001a73 c010      	RJMP __CFD15
                 __CFD11:
001a74 2777      	CLR  R23
                 __CFD12:
001a75 3058      	CPI  R21,8
001a76 f028      	BRLO __CFD13
001a77 2fef      	MOV  R30,R31
001a78 2ff6      	MOV  R31,R22
001a79 2f67      	MOV  R22,R23
001a7a 5058      	SUBI R21,8
001a7b cff9      	RJMP __CFD12
                 __CFD13:
001a7c 2355      	TST  R21
001a7d f031      	BREQ __CFD15
                 __CFD14:
001a7e 9576      	LSR  R23
001a7f 9567      	ROR  R22
001a80 95f7      	ROR  R31
001a81 95e7      	ROR  R30
001a82 955a      	DEC  R21
001a83 f7d1      	BRNE __CFD14
                 __CFD15:
001a84 2000      	TST  R0
001a85 f40a      	BRPL __CFD16
001a86 d180      	RCALL __ANEGD1
                 __CFD16:
001a87 915f      	POP  R21
001a88 9508      	RET
                 
                 __CDF1U:
001a89 9468      	SET
001a8a c001      	RJMP __CDF1U0
                 __CDF1:
001a8b 94e8      	CLT
                 __CDF1U0:
001a8c 9730      	SBIW R30,0
001a8d 4060      	SBCI R22,0
001a8e 4070      	SBCI R23,0
001a8f f0b1      	BREQ __CDF10
001a90 2400      	CLR  R0
001a91 f026      	BRTS __CDF11
001a92 2377      	TST  R23
001a93 f412      	BRPL __CDF11
001a94 9400      	COM  R0
001a95 d171      	RCALL __ANEGD1
                 __CDF11:
001a96 2e17      	MOV  R1,R23
001a97 e17e      	LDI  R23,30
001a98 2011      	TST  R1
                 __CDF12:
001a99 f032      	BRMI __CDF13
001a9a 957a      	DEC  R23
001a9b 0fee      	LSL  R30
001a9c 1fff      	ROL  R31
001a9d 1f66      	ROL  R22
001a9e 1c11      	ROL  R1
001a9f cff9      	RJMP __CDF12
                 __CDF13:
001aa0 2fef      	MOV  R30,R31
001aa1 2ff6      	MOV  R31,R22
001aa2 2d61      	MOV  R22,R1
001aa3 935f      	PUSH R21
001aa4 df8a      	RCALL __REPACK
001aa5 915f      	POP  R21
                 __CDF10:
001aa6 9508      	RET
                 
                 __SWAPACC:
001aa7 934f      	PUSH R20
001aa8 01af      	MOVW R20,R30
001aa9 01fd      	MOVW R30,R26
001aaa 01da      	MOVW R26,R20
001aab 01ab      	MOVW R20,R22
001aac 01bc      	MOVW R22,R24
001aad 01ca      	MOVW R24,R20
001aae 2d40      	MOV  R20,R0
001aaf 2c01      	MOV  R0,R1
001ab0 2e14      	MOV  R1,R20
001ab1 914f      	POP  R20
001ab2 9508      	RET
                 
                 __UADD12:
001ab3 0fea      	ADD  R30,R26
001ab4 1ffb      	ADC  R31,R27
001ab5 1f68      	ADC  R22,R24
001ab6 9508      	RET
                 
                 __NEGMAN1:
001ab7 95e0      	COM  R30
001ab8 95f0      	COM  R31
001ab9 9560      	COM  R22
001aba 5fef      	SUBI R30,-1
001abb 4fff      	SBCI R31,-1
001abc 4f6f      	SBCI R22,-1
001abd 9508      	RET
                 
                 __SUBF12:
001abe 935f      	PUSH R21
001abf df81      	RCALL __UNPACK
001ac0 3890      	CPI  R25,0x80
001ac1 f171      	BREQ __ADDF129
001ac2 e850      	LDI  R21,0x80
001ac3 2615      	EOR  R1,R21
                 
001ac4 c004      	RJMP __ADDF120
                 
                 __ADDF12:
001ac5 935f      	PUSH R21
001ac6 df7a      	RCALL __UNPACK
001ac7 3890      	CPI  R25,0x80
001ac8 f139      	BREQ __ADDF129
                 
                 __ADDF120:
001ac9 3870      	CPI  R23,0x80
001aca f121      	BREQ __ADDF128
                 __ADDF121:
001acb 2f57      	MOV  R21,R23
001acc 1b59      	SUB  R21,R25
001acd f12b      	BRVS __ADDF1211
001ace f412      	BRPL __ADDF122
001acf dfd7      	RCALL __SWAPACC
001ad0 cffa      	RJMP __ADDF121
                 __ADDF122:
001ad1 3158      	CPI  R21,24
001ad2 f018      	BRLO __ADDF123
001ad3 27aa      	CLR  R26
001ad4 27bb      	CLR  R27
001ad5 2788      	CLR  R24
                 __ADDF123:
001ad6 3058      	CPI  R21,8
001ad7 f028      	BRLO __ADDF124
001ad8 2fab      	MOV  R26,R27
001ad9 2fb8      	MOV  R27,R24
001ada 2788      	CLR  R24
001adb 5058      	SUBI R21,8
001adc cff9      	RJMP __ADDF123
                 __ADDF124:
001add 2355      	TST  R21
001ade f029      	BREQ __ADDF126
                 __ADDF125:
001adf 9586      	LSR  R24
001ae0 95b7      	ROR  R27
001ae1 95a7      	ROR  R26
001ae2 955a      	DEC  R21
001ae3 f7d9      	BRNE __ADDF125
                 __ADDF126:
001ae4 2d50      	MOV  R21,R0
001ae5 2551      	EOR  R21,R1
001ae6 f072      	BRMI __ADDF127
001ae7 dfcb      	RCALL __UADD12
001ae8 f438      	BRCC __ADDF129
001ae9 9567      	ROR  R22
001aea 95f7      	ROR  R31
001aeb 95e7      	ROR  R30
001aec 9573      	INC  R23
001aed f413      	BRVC __ADDF129
001aee c020      	RJMP __MAXRES
                 __ADDF128:
001aef dfb7      	RCALL __SWAPACC
                 __ADDF129:
001af0 df3e      	RCALL __REPACK
001af1 915f      	POP  R21
001af2 9508      	RET
                 __ADDF1211:
001af3 f7d8      	BRCC __ADDF128
001af4 cffb      	RJMP __ADDF129
                 __ADDF127:
001af5 1bea      	SUB  R30,R26
001af6 0bfb      	SBC  R31,R27
001af7 0b68      	SBC  R22,R24
001af8 f051      	BREQ __ZERORES
001af9 f410      	BRCC __ADDF1210
001afa 9400      	COM  R0
001afb dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
001afc 2366      	TST  R22
001afd f392      	BRMI __ADDF129
001afe 0fee      	LSL  R30
001aff 1fff      	ROL  R31
001b00 1f66      	ROL  R22
001b01 957a      	DEC  R23
001b02 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
001b03 27ee      	CLR  R30
001b04 27ff      	CLR  R31
001b05 2766      	CLR  R22
001b06 2777      	CLR  R23
001b07 915f      	POP  R21
001b08 9508      	RET
                 
                 __MINRES:
001b09 efef      	SER  R30
001b0a efff      	SER  R31
001b0b e76f      	LDI  R22,0x7F
001b0c ef7f      	SER  R23
001b0d 915f      	POP  R21
001b0e 9508      	RET
                 
                 __MAXRES:
001b0f efef      	SER  R30
001b10 efff      	SER  R31
001b11 e76f      	LDI  R22,0x7F
001b12 e77f      	LDI  R23,0x7F
001b13 915f      	POP  R21
001b14 9508      	RET
                 
                 __MULF12:
001b15 935f      	PUSH R21
001b16 df2a      	RCALL __UNPACK
001b17 3870      	CPI  R23,0x80
001b18 f351      	BREQ __ZERORES
001b19 3890      	CPI  R25,0x80
001b1a f341      	BREQ __ZERORES
001b1b 2401      	EOR  R0,R1
001b1c 9408      	SEC
001b1d 1f79      	ADC  R23,R25
001b1e f423      	BRVC __MULF124
001b1f f31c      	BRLT __ZERORES
                 __MULF125:
001b20 2000      	TST  R0
001b21 f33a      	BRMI __MINRES
001b22 cfec      	RJMP __MAXRES
                 __MULF124:
001b23 920f      	PUSH R0
001b24 931f      	PUSH R17
001b25 932f      	PUSH R18
001b26 933f      	PUSH R19
001b27 934f      	PUSH R20
001b28 2711      	CLR  R17
001b29 2722      	CLR  R18
001b2a 2799      	CLR  R25
001b2b 9f68      	MUL  R22,R24
001b2c 01a0      	MOVW R20,R0
001b2d 9f8f      	MUL  R24,R31
001b2e 2d30      	MOV  R19,R0
001b2f 0d41      	ADD  R20,R1
001b30 1f59      	ADC  R21,R25
001b31 9f6b      	MUL  R22,R27
001b32 0d30      	ADD  R19,R0
001b33 1d41      	ADC  R20,R1
001b34 1f59      	ADC  R21,R25
001b35 9f8e      	MUL  R24,R30
001b36 d027      	RCALL __MULF126
001b37 9fbf      	MUL  R27,R31
001b38 d025      	RCALL __MULF126
001b39 9f6a      	MUL  R22,R26
001b3a d023      	RCALL __MULF126
001b3b 9fbe      	MUL  R27,R30
001b3c d01d      	RCALL __MULF127
001b3d 9faf      	MUL  R26,R31
001b3e d01b      	RCALL __MULF127
001b3f 9fae      	MUL  R26,R30
001b40 0d11      	ADD  R17,R1
001b41 1f29      	ADC  R18,R25
001b42 1f39      	ADC  R19,R25
001b43 1f49      	ADC  R20,R25
001b44 1f59      	ADC  R21,R25
001b45 2fe3      	MOV  R30,R19
001b46 2ff4      	MOV  R31,R20
001b47 2f65      	MOV  R22,R21
001b48 2f52      	MOV  R21,R18
001b49 914f      	POP  R20
001b4a 913f      	POP  R19
001b4b 912f      	POP  R18
001b4c 911f      	POP  R17
001b4d 900f      	POP  R0
001b4e 2366      	TST  R22
001b4f f02a      	BRMI __MULF122
001b50 0f55      	LSL  R21
001b51 1fee      	ROL  R30
001b52 1fff      	ROL  R31
001b53 1f66      	ROL  R22
001b54 c002      	RJMP __MULF123
                 __MULF122:
001b55 9573      	INC  R23
001b56 f24b      	BRVS __MULF125
                 __MULF123:
001b57 decd      	RCALL __ROUND_REPACK
001b58 915f      	POP  R21
001b59 9508      	RET
                 
                 __MULF127:
001b5a 0d10      	ADD  R17,R0
001b5b 1d21      	ADC  R18,R1
001b5c 1f39      	ADC  R19,R25
001b5d c002      	RJMP __MULF128
                 __MULF126:
001b5e 0d20      	ADD  R18,R0
001b5f 1d31      	ADC  R19,R1
                 __MULF128:
001b60 1f49      	ADC  R20,R25
001b61 1f59      	ADC  R21,R25
001b62 9508      	RET
                 
                 __DIVF21:
001b63 935f      	PUSH R21
001b64 dedc      	RCALL __UNPACK
001b65 3870      	CPI  R23,0x80
001b66 f421      	BRNE __DIVF210
001b67 2011      	TST  R1
                 __DIVF211:
001b68 f40a      	BRPL __DIVF219
001b69 cf9f      	RJMP __MINRES
                 __DIVF219:
001b6a cfa4      	RJMP __MAXRES
                 __DIVF210:
001b6b 3890      	CPI  R25,0x80
001b6c f409      	BRNE __DIVF218
                 __DIVF217:
001b6d cf95      	RJMP __ZERORES
                 __DIVF218:
001b6e 2401      	EOR  R0,R1
001b6f 9408      	SEC
001b70 0b97      	SBC  R25,R23
001b71 f41b      	BRVC __DIVF216
001b72 f3d4      	BRLT __DIVF217
001b73 2000      	TST  R0
001b74 cff3      	RJMP __DIVF211
                 __DIVF216:
001b75 2f79      	MOV  R23,R25
001b76 931f      	PUSH R17
001b77 932f      	PUSH R18
001b78 933f      	PUSH R19
001b79 934f      	PUSH R20
001b7a 2411      	CLR  R1
001b7b 2711      	CLR  R17
001b7c 2722      	CLR  R18
001b7d 2733      	CLR  R19
001b7e 2744      	CLR  R20
001b7f 2755      	CLR  R21
001b80 e290      	LDI  R25,32
                 __DIVF212:
001b81 17ae      	CP   R26,R30
001b82 07bf      	CPC  R27,R31
001b83 0786      	CPC  R24,R22
001b84 0741      	CPC  R20,R17
001b85 f030      	BRLO __DIVF213
001b86 1bae      	SUB  R26,R30
001b87 0bbf      	SBC  R27,R31
001b88 0b86      	SBC  R24,R22
001b89 0b41      	SBC  R20,R17
001b8a 9408      	SEC
001b8b c001      	RJMP __DIVF214
                 __DIVF213:
001b8c 9488      	CLC
                 __DIVF214:
001b8d 1f55      	ROL  R21
001b8e 1f22      	ROL  R18
001b8f 1f33      	ROL  R19
001b90 1c11      	ROL  R1
001b91 1faa      	ROL  R26
001b92 1fbb      	ROL  R27
001b93 1f88      	ROL  R24
001b94 1f44      	ROL  R20
001b95 959a      	DEC  R25
001b96 f751      	BRNE __DIVF212
001b97 01f9      	MOVW R30,R18
001b98 2d61      	MOV  R22,R1
001b99 914f      	POP  R20
001b9a 913f      	POP  R19
001b9b 912f      	POP  R18
001b9c 911f      	POP  R17
001b9d 2366      	TST  R22
001b9e f032      	BRMI __DIVF215
001b9f 0f55      	LSL  R21
001ba0 1fee      	ROL  R30
001ba1 1fff      	ROL  R31
001ba2 1f66      	ROL  R22
001ba3 957a      	DEC  R23
001ba4 f243      	BRVS __DIVF217
                 __DIVF215:
001ba5 de7f      	RCALL __ROUND_REPACK
001ba6 915f      	POP  R21
001ba7 9508      	RET
                 
                 __CMPF12:
001ba8 2399      	TST  R25
001ba9 f09a      	BRMI __CMPF120
001baa 2377      	TST  R23
001bab f042      	BRMI __CMPF121
001bac 1797      	CP   R25,R23
001bad f048      	BRLO __CMPF122
001bae f429      	BRNE __CMPF121
001baf 17ae      	CP   R26,R30
001bb0 07bf      	CPC  R27,R31
001bb1 0786      	CPC  R24,R22
001bb2 f020      	BRLO __CMPF122
001bb3 f031      	BREQ __CMPF123
                 __CMPF121:
001bb4 9498      	CLZ
001bb5 9488      	CLC
001bb6 9508      	RET
                 __CMPF122:
001bb7 9498      	CLZ
001bb8 9408      	SEC
001bb9 9508      	RET
                 __CMPF123:
001bba 9418      	SEZ
001bbb 9488      	CLC
001bbc 9508      	RET
                 __CMPF120:
001bbd 2377      	TST  R23
001bbe f7c2      	BRPL __CMPF122
001bbf 1797      	CP   R25,R23
001bc0 f398      	BRLO __CMPF121
001bc1 f7a9      	BRNE __CMPF122
001bc2 17ea      	CP   R30,R26
001bc3 07fb      	CPC  R31,R27
001bc4 0768      	CPC  R22,R24
001bc5 f388      	BRLO __CMPF122
001bc6 f399      	BREQ __CMPF123
001bc7 cfec      	RJMP __CMPF121
                 
                 _sqrt:
001bc8 d106      	rcall __PUTPARD2
001bc9 9724      	sbiw r28,4
001bca 935f      	push r21
001bcb 819f      	ldd  r25,y+7
001bcc 2399      	tst  r25
001bcd f411      	brne __sqrt0
001bce 9628      	adiw r28,8
001bcf cf33      	rjmp __zerores
                 __sqrt0:
001bd0 f412      	brpl __sqrt1
001bd1 9628      	adiw r28,8
001bd2 cf3c      	rjmp __maxres
                 __sqrt1:
001bd3 934f      	push r20
001bd4 e442      	ldi  r20,66
001bd5 818e      	ldd  r24,y+6
001bd6 81bd      	ldd  r27,y+5
001bd7 81ac      	ldd  r26,y+4
                 __sqrt2:
001bd8 8388      	st   y,r24
001bd9 8399      	std  y+1,r25
001bda 83aa      	std  y+2,r26
001bdb 83bb      	std  y+3,r27
001bdc 01fd      	movw r30,r26
001bdd 01bc      	movw r22,r24
001bde 81ac      	ldd  r26,y+4
001bdf 81bd      	ldd  r27,y+5
001be0 818e      	ldd  r24,y+6
001be1 819f      	ldd  r25,y+7
001be2 df80      	rcall __divf21
001be3 8188      	ld   r24,y
001be4 8199      	ldd  r25,y+1
001be5 81aa      	ldd  r26,y+2
001be6 81bb      	ldd  r27,y+3
001be7 dedd      	rcall __addf12
001be8 de60      	rcall __unpack1
001be9 957a      	dec  r23
001bea de44      	rcall __repack
001beb 8188      	ld   r24,y
001bec 8199      	ldd  r25,y+1
001bed 81aa      	ldd  r26,y+2
001bee 81bb      	ldd  r27,y+3
001bef 27ae      	eor  r26,r30
001bf0 7fa8      	andi r26,0xf8
001bf1 f421      	brne __sqrt4
001bf2 17bf      	cp   r27,r31
001bf3 0786      	cpc  r24,r22
001bf4 0797      	cpc  r25,r23
001bf5 f029      	breq __sqrt3
                 __sqrt4:
001bf6 954a      	dec  r20
001bf7 f019      	breq __sqrt3
001bf8 01df      	movw r26,r30
001bf9 01cb      	movw r24,r22
001bfa cfdd      	rjmp __sqrt2
                 __sqrt3:
001bfb 914f      	pop  r20
001bfc 915f      	pop  r21
001bfd 9628      	adiw r28,8
001bfe 9508      	ret
                 
                 __ADDW2R15:
001bff 2400      	CLR  R0
001c00 0daf      	ADD  R26,R15
001c01 1db0      	ADC  R27,R0
001c02 9508      	RET
                 
                 __ANEGW1:
001c03 95f1      	NEG  R31
001c04 95e1      	NEG  R30
001c05 40f0      	SBCI R31,0
001c06 9508      	RET
                 
                 __ANEGD1:
001c07 95f0      	COM  R31
001c08 9560      	COM  R22
001c09 9570      	COM  R23
001c0a 95e1      	NEG  R30
001c0b 4fff      	SBCI R31,-1
001c0c 4f6f      	SBCI R22,-1
001c0d 4f7f      	SBCI R23,-1
001c0e 9508      	RET
                 
                 __CBD1:
001c0f 2ffe      	MOV  R31,R30
001c10 0fff      	ADD  R31,R31
001c11 0bff      	SBC  R31,R31
001c12 2f6f      	MOV  R22,R31
001c13 2f7f      	MOV  R23,R31
001c14 9508      	RET
                 
                 __CWD1:
001c15 2f6f      	MOV  R22,R31
001c16 0f66      	ADD  R22,R22
001c17 0b66      	SBC  R22,R22
001c18 2f76      	MOV  R23,R22
001c19 9508      	RET
                 
                 __DIVB21U:
001c1a 2400      	CLR  R0
001c1b e098      	LDI  R25,8
                 __DIVB21U1:
001c1c 0faa      	LSL  R26
001c1d 1c00      	ROL  R0
001c1e 1a0e      	SUB  R0,R30
001c1f f410      	BRCC __DIVB21U2
001c20 0e0e      	ADD  R0,R30
001c21 c001      	RJMP __DIVB21U3
                 __DIVB21U2:
001c22 60a1      	SBR  R26,1
                 __DIVB21U3:
001c23 959a      	DEC  R25
001c24 f7b9      	BRNE __DIVB21U1
001c25 2fea      	MOV  R30,R26
001c26 2da0      	MOV  R26,R0
001c27 9508      	RET
                 
                 __DIVB21:
001c28 d05f      	RCALL __CHKSIGNB
001c29 dff0      	RCALL __DIVB21U
001c2a f40e      	BRTC __DIVB211
001c2b 95e1      	NEG  R30
                 __DIVB211:
001c2c 9508      	RET
                 
                 __DIVW21U:
001c2d 2400      	CLR  R0
001c2e 2411      	CLR  R1
001c2f e190      	LDI  R25,16
                 __DIVW21U1:
001c30 0faa      	LSL  R26
001c31 1fbb      	ROL  R27
001c32 1c00      	ROL  R0
001c33 1c11      	ROL  R1
001c34 1a0e      	SUB  R0,R30
001c35 0a1f      	SBC  R1,R31
001c36 f418      	BRCC __DIVW21U2
001c37 0e0e      	ADD  R0,R30
001c38 1e1f      	ADC  R1,R31
001c39 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001c3a 60a1      	SBR  R26,1
                 __DIVW21U3:
001c3b 959a      	DEC  R25
001c3c f799      	BRNE __DIVW21U1
001c3d 01fd      	MOVW R30,R26
001c3e 01d0      	MOVW R26,R0
001c3f 9508      	RET
                 
                 __DIVW21:
001c40 d053      	RCALL __CHKSIGNW
001c41 dfeb      	RCALL __DIVW21U
001c42 f40e      	BRTC __DIVW211
001c43 dfbf      	RCALL __ANEGW1
                 __DIVW211:
001c44 9508      	RET
                 
                 __DIVD21U:
001c45 933f      	PUSH R19
001c46 934f      	PUSH R20
001c47 935f      	PUSH R21
001c48 2400      	CLR  R0
001c49 2411      	CLR  R1
001c4a 2744      	CLR  R20
001c4b 2755      	CLR  R21
001c4c e230      	LDI  R19,32
                 __DIVD21U1:
001c4d 0faa      	LSL  R26
001c4e 1fbb      	ROL  R27
001c4f 1f88      	ROL  R24
001c50 1f99      	ROL  R25
001c51 1c00      	ROL  R0
001c52 1c11      	ROL  R1
001c53 1f44      	ROL  R20
001c54 1f55      	ROL  R21
001c55 1a0e      	SUB  R0,R30
001c56 0a1f      	SBC  R1,R31
001c57 0b46      	SBC  R20,R22
001c58 0b57      	SBC  R21,R23
001c59 f428      	BRCC __DIVD21U2
001c5a 0e0e      	ADD  R0,R30
001c5b 1e1f      	ADC  R1,R31
001c5c 1f46      	ADC  R20,R22
001c5d 1f57      	ADC  R21,R23
001c5e c001      	RJMP __DIVD21U3
                 __DIVD21U2:
001c5f 60a1      	SBR  R26,1
                 __DIVD21U3:
001c60 953a      	DEC  R19
001c61 f759      	BRNE __DIVD21U1
001c62 01fd      	MOVW R30,R26
001c63 01bc      	MOVW R22,R24
001c64 01d0      	MOVW R26,R0
001c65 01ca      	MOVW R24,R20
001c66 915f      	POP  R21
001c67 914f      	POP  R20
001c68 913f      	POP  R19
001c69 9508      	RET
                 
                 __MODB21:
001c6a 94e8      	CLT
001c6b ffa7      	SBRS R26,7
001c6c c002      	RJMP __MODB211
001c6d 95a1      	NEG  R26
001c6e 9468      	SET
                 __MODB211:
001c6f fde7      	SBRC R30,7
001c70 95e1      	NEG  R30
001c71 dfa8      	RCALL __DIVB21U
001c72 2fea      	MOV  R30,R26
001c73 f40e      	BRTC __MODB212
001c74 95e1      	NEG  R30
                 __MODB212:
001c75 9508      	RET
                 
                 __MODW21:
001c76 94e8      	CLT
001c77 ffb7      	SBRS R27,7
001c78 c004      	RJMP __MODW211
001c79 95a0      	COM  R26
001c7a 95b0      	COM  R27
001c7b 9611      	ADIW R26,1
001c7c 9468      	SET
                 __MODW211:
001c7d fdf7      	SBRC R31,7
001c7e df84      	RCALL __ANEGW1
001c7f dfad      	RCALL __DIVW21U
001c80 01fd      	MOVW R30,R26
001c81 f40e      	BRTC __MODW212
001c82 df80      	RCALL __ANEGW1
                 __MODW212:
001c83 9508      	RET
                 
                 __MODD21U:
001c84 dfc0      	RCALL __DIVD21U
001c85 01fd      	MOVW R30,R26
001c86 01bc      	MOVW R22,R24
001c87 9508      	RET
                 
                 __CHKSIGNB:
001c88 94e8      	CLT
001c89 ffe7      	SBRS R30,7
001c8a c002      	RJMP __CHKSB1
001c8b 95e1      	NEG  R30
001c8c 9468      	SET
                 __CHKSB1:
001c8d ffa7      	SBRS R26,7
001c8e c004      	RJMP __CHKSB2
001c8f 95a1      	NEG  R26
001c90 f800      	BLD  R0,0
001c91 9403      	INC  R0
001c92 fa00      	BST  R0,0
                 __CHKSB2:
001c93 9508      	RET
                 
                 __CHKSIGNW:
001c94 94e8      	CLT
001c95 fff7      	SBRS R31,7
001c96 c002      	RJMP __CHKSW1
001c97 df6b      	RCALL __ANEGW1
001c98 9468      	SET
                 __CHKSW1:
001c99 ffb7      	SBRS R27,7
001c9a c006      	RJMP __CHKSW2
001c9b 95a0      	COM  R26
001c9c 95b0      	COM  R27
001c9d 9611      	ADIW R26,1
001c9e f800      	BLD  R0,0
001c9f 9403      	INC  R0
001ca0 fa00      	BST  R0,0
                 __CHKSW2:
001ca1 9508      	RET
                 
                 __GETW1P:
001ca2 91ed      	LD   R30,X+
001ca3 91fc      	LD   R31,X
001ca4 9711      	SBIW R26,1
001ca5 9508      	RET
                 
                 __GETD1P:
001ca6 91ed      	LD   R30,X+
001ca7 91fd      	LD   R31,X+
001ca8 916d      	LD   R22,X+
001ca9 917c      	LD   R23,X
001caa 9713      	SBIW R26,3
001cab 9508      	RET
                 
                 __GETD1P_INC:
001cac 91ed      	LD   R30,X+
001cad 91fd      	LD   R31,X+
001cae 916d      	LD   R22,X+
001caf 917d      	LD   R23,X+
001cb0 9508      	RET
                 
                 __PUTDP1:
001cb1 93ed      	ST   X+,R30
001cb2 93fd      	ST   X+,R31
001cb3 936d      	ST   X+,R22
001cb4 937c      	ST   X,R23
001cb5 9508      	RET
                 
                 __PUTDP1_DEC:
001cb6 937e      	ST   -X,R23
001cb7 936e      	ST   -X,R22
001cb8 93fe      	ST   -X,R31
001cb9 93ee      	ST   -X,R30
001cba 9508      	RET
                 
                 __GETD1S0:
001cbb 81e8      	LD   R30,Y
001cbc 81f9      	LDD  R31,Y+1
001cbd 816a      	LDD  R22,Y+2
001cbe 817b      	LDD  R23,Y+3
001cbf 9508      	RET
                 
                 __GETD2S0:
001cc0 81a8      	LD   R26,Y
001cc1 81b9      	LDD  R27,Y+1
001cc2 818a      	LDD  R24,Y+2
001cc3 819b      	LDD  R25,Y+3
001cc4 9508      	RET
                 
                 __PUTD1S0:
001cc5 83e8      	ST   Y,R30
001cc6 83f9      	STD  Y+1,R31
001cc7 836a      	STD  Y+2,R22
001cc8 837b      	STD  Y+3,R23
001cc9 9508      	RET
                 
                 __PUTPARD1:
001cca 937a      	ST   -Y,R23
001ccb 936a      	ST   -Y,R22
001ccc 93fa      	ST   -Y,R31
001ccd 93ea      	ST   -Y,R30
001cce 9508      	RET
                 
                 __PUTPARD2:
001ccf 939a      	ST   -Y,R25
001cd0 938a      	ST   -Y,R24
001cd1 93ba      	ST   -Y,R27
001cd2 93aa      	ST   -Y,R26
001cd3 9508      	RET
                 
                 __SWAPD12:
001cd4 2e18      	MOV  R1,R24
001cd5 2f86      	MOV  R24,R22
001cd6 2d61      	MOV  R22,R1
001cd7 2e19      	MOV  R1,R25
001cd8 2f97      	MOV  R25,R23
001cd9 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
001cda 2e1b      	MOV  R1,R27
001cdb 2fbf      	MOV  R27,R31
001cdc 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
001cdd 2e1a      	MOV  R1,R26
001cde 2fae      	MOV  R26,R30
001cdf 2de1      	MOV  R30,R1
001ce0 9508      	RET
                 
                 __EEPROMRDD:
001ce1 9612      	ADIW R26,2
001ce2 d002      	RCALL __EEPROMRDW
001ce3 01bf      	MOVW R22,R30
001ce4 9712      	SBIW R26,2
                 
                 __EEPROMRDW:
001ce5 9611      	ADIW R26,1
001ce6 d002      	RCALL __EEPROMRDB
001ce7 2ffe      	MOV  R31,R30
001ce8 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
001ce9 99e1      	SBIC EECR,EEWE
001cea cffe      	RJMP __EEPROMRDB
001ceb 93ff      	PUSH R31
001cec b7ff      	IN   R31,SREG
001ced 94f8      	CLI
001cee bbae      	OUT  EEARL,R26
001cef bbbf      	OUT  EEARH,R27
001cf0 9ae0      	SBI  EECR,EERE
001cf1 b3ed      	IN   R30,EEDR
001cf2 bfff      	OUT  SREG,R31
001cf3 91ff      	POP  R31
001cf4 9508      	RET
                 
                 __CPD10:
001cf5 9730      	SBIW R30,0
001cf6 4060      	SBCI R22,0
001cf7 4070      	SBCI R23,0
001cf8 9508      	RET
                 
                 __CPW02:
001cf9 2400      	CLR  R0
001cfa 160a      	CP   R0,R26
001cfb 060b      	CPC  R0,R27
001cfc 9508      	RET
                 
                 __CPD02:
001cfd 2400      	CLR  R0
001cfe 160a      	CP   R0,R26
001cff 060b      	CPC  R0,R27
001d00 0608      	CPC  R0,R24
001d01 0609      	CPC  R0,R25
001d02 9508      	RET
                 
                 __CPD12:
001d03 17ea      	CP   R30,R26
001d04 07fb      	CPC  R31,R27
001d05 0768      	CPC  R22,R24
001d06 0779      	CPC  R23,R25
001d07 9508      	RET
                 
                 __SAVELOCR6:
001d08 935a      	ST   -Y,R21
                 __SAVELOCR5:
001d09 934a      	ST   -Y,R20
                 __SAVELOCR4:
001d0a 933a      	ST   -Y,R19
                 __SAVELOCR3:
001d0b 932a      	ST   -Y,R18
                 __SAVELOCR2:
001d0c 931a      	ST   -Y,R17
001d0d 930a      	ST   -Y,R16
001d0e 9508      	RET
                 
                 __LOADLOCR6:
001d0f 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
001d10 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
001d11 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
001d12 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
001d13 8119      	LDD  R17,Y+1
001d14 8108      	LD   R16,Y
001d15 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  88 r1 :  40 r2 :   1 r3 :   0 r4 :   6 r5 :   2 r6 :   4 r7 :   3 
r8 :   5 r9 :   1 r10:   3 r11:   0 r12:   4 r13:   2 r14:   0 r15:   6 
r16: 134 r17: 127 r18:  66 r19:  48 r20:  69 r21: 101 r22: 223 r23: 200 
r24: 135 r25: 111 r26: 545 r27: 279 r28:  64 r29:   5 r30:1203 r31: 550 
x  :  92 y  : 812 z  :  34 
Registers used: 32 out of 35 (91.4%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  45 add   :  39 
adiw  :  74 and   :   5 andi  :  15 asr   :   0 bclr  :   0 bld   :   5 
brbc  :   0 brbs  :   0 brcc  :  15 brcs  :   1 break :   0 breq  :  74 
brge  :  17 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  32 
brlt  :   5 brmi  :  11 brne  : 137 brpl  :  10 brsh  :  14 brtc  :   6 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   6 call  : 727 
cbi   :   8 cbr   :   1 clc   :   3 clh   :   0 cli   :   3 cln   :   0 
clr   :  72 cls   :   0 clt   :   7 clv   :   0 clz   :   2 com   :  12 
cp    :  36 cpc   :  90 cpi   : 138 cpse  :   0 dec   :  15 des   :   0 
elpm  :   0 eor   :   8 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 
ijmp  :   0 in    :  15 inc   :   4 jmp   :  66 ld    : 121 ldd   : 368 
ldi   : 843 lds   : 176 lpm   :  12 lsl   :  24 lsr   :   5 mov   :  96 
movw  : 128 mul   :  11 muls  :   0 mulsu :   0 neg   :  11 nop   :   0 
or    :   8 ori   :  15 out   :  52 pop   :  43 push  :  43 rcall :  83 
ret   : 211 reti  :   3 rjmp  : 256 rol   :  38 ror   :  17 sbc   :  16 
sbci  :  43 sbi   :  15 sbic  :   9 sbis  :   3 sbiw  :  61 sbr   :   5 
sbrc  :   5 sbrs  :  23 sec   :   5 seh   :   0 sei   :   3 sen   :   0 
ser   :   8 ses   :   0 set   :   7 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    : 338 std   : 100 sts   : 228 sub   :  10 subi  :  80 
swap  :   0 tst   :  26 wdr   :   1 
Instructions used: 82 out of 117 (70.1%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x003a2c  12958   1934  14892  131072  11.4%
[.dseg] 0x000100 0x000a16      0   1046   1046    4351  24.0%
[.eseg] 0x000000 0x00000c      0     12     12    4096   0.3%

Assembly complete, 0 errors, 18 warnings
