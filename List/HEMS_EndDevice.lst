
AVRASM ver. 2.1.30  C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm Mon Oct 30 13:42:51 2017

C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1074): warning: Register r5 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1075): warning: Register r4 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1076): warning: Register r6 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1077): warning: Register r8 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1078): warning: Register r10 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1079): warning: Register r13 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1080): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128A
                 ;Program type             : Application
                 ;Clock frequency          : 11.059200 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : float, width, precision
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1280 byte(s)
                 ;Heap size                : 1024 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0500
                 	.EQU __HEAP_SIZE=0x0400
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _error=R5
                 	.DEF _read_D_SW=R4
                 	.DEF _start_event=R6
                 	.DEF _counter=R8
                 	.DEF _rx_wr_index1=R10
                 	.DEF _rxPackageIndex0=R13
                 	.DEF _rxPackageIndexCount0=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 03fe 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0702 	JMP  _timer1_ovf_isr
00001e 940c 0000 	JMP  0x00
000020 940c 06f4 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 07a3 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0721 	JMP  _timer3_ovf_isr
00003c 940c 07c9 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000046 0000      	.DW  0x0000
                 
                 ;HEAP START MARKER INITIALIZATION
                 __HEAP_START_MARKER:
000047 0000
000048 0000      	.DW  0,0
                 
                 _0x3:
000049 0000
00004a 0000
00004b 0000
00004c 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004d ff00
00004e ffff
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1135): warning: .cseg .db misalignment - padding zero byte
00004f 00ff      	.DB  0x0,0xFF,0xFF,0xFF,0xFF
                 _0x51:
000050 0000      	.DB  0x0,0x0
                 _0x0:
000051 0a0d
000052 2b2b
000053 2b2b
000054 2b2b      	.DB  0xD,0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000055 2b2b
000056 2b2b
000057 5320
000058 616d      	.DB  0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x6D,0x61
000059 7472
00005a 5320
00005b 6977
00005c 6374      	.DB  0x72,0x74,0x20,0x53,0x77,0x69,0x74,0x63
00005d 2068
00005e 2b2b
00005f 2b2b
000060 2b2b      	.DB  0x68,0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000061 2b2b
000062 2b2b
000063 0a0d
000064 0d00      	.DB  0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0,0xD
000065 460a
000066 7269
000067 776d
000068 7261      	.DB  0xA,0x46,0x69,0x72,0x6D,0x77,0x61,0x72
000069 2065
00006a 6556
00006b 7372
00006c 6f69      	.DB  0x65,0x20,0x56,0x65,0x72,0x73,0x69,0x6F
00006d 206e
00006e 203a
00006f 3025
000070 312e      	.DB  0x6E,0x20,0x3A,0x20,0x25,0x30,0x2E,0x31
000071 0d66
000072 000a
000073 7543
000074 7272      	.DB  0x66,0xD,0xA,0x0,0x43,0x75,0x72,0x72
000075 6e65
000076 2074
000077 6553
000078 736e      	.DB  0x65,0x6E,0x74,0x20,0x53,0x65,0x6E,0x73
000079 726f
00007a 2020
00007b 3a20
00007c 4120      	.DB  0x6F,0x72,0x20,0x20,0x20,0x3A,0x20,0x41
00007d 5343
00007e 3137
00007f 4532
000080 434c      	.DB  0x43,0x53,0x37,0x31,0x32,0x45,0x4C,0x43
000081 5254
000082 302d
000083 4235
000084 542d      	.DB  0x54,0x52,0x2D,0x30,0x35,0x42,0x2D,0x54
000085 2820
000086 3025
000087 312e
000088 2066      	.DB  0x20,0x28,0x25,0x30,0x2E,0x31,0x66,0x20
000089 566d
00008a 412f
00008b 706d
00008c 292e      	.DB  0x6D,0x56,0x2F,0x41,0x6D,0x70,0x2E,0x29
00008d 0a0d
00008e 0d00
00008f 2b0a
000090 2b2b      	.DB  0xD,0xA,0x0,0xD,0xA,0x2B,0x2B,0x2B
000091 2b2b
000092 2b2b
000093 2b2b
000094 202b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
000095 6d53
000096 7261
000097 2074
000098 6c50      	.DB  0x53,0x6D,0x61,0x72,0x74,0x20,0x50,0x6C
000099 6775
00009a 2b20
00009b 2b2b
00009c 2b2b      	.DB  0x75,0x67,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
00009d 2b2b
00009e 2b2b
00009f 0d2b
0000a0 000a      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0
0000a1 7543
0000a2 7272
0000a3 6e65
0000a4 2074      	.DB  0x43,0x75,0x72,0x72,0x65,0x6E,0x74,0x20
0000a5 6553
0000a6 736e
0000a7 726f
0000a8 2020      	.DB  0x53,0x65,0x6E,0x73,0x6F,0x72,0x20,0x20
0000a9 3a20
0000aa 4120
0000ab 5343
0000ac 3137      	.DB  0x20,0x3A,0x20,0x41,0x43,0x53,0x37,0x31
0000ad 4532
0000ae 434c
0000af 5254
0000b0 322d      	.DB  0x32,0x45,0x4C,0x43,0x54,0x52,0x2D,0x32
0000b1 4130
0000b2 542d
0000b3 2820
0000b4 3025      	.DB  0x30,0x41,0x2D,0x54,0x20,0x28,0x25,0x30
0000b5 312e
0000b6 2066
0000b7 566d
0000b8 412f      	.DB  0x2E,0x31,0x66,0x20,0x6D,0x56,0x2F,0x41
0000b9 706d
0000ba 292e
0000bb 0a0d
0000bc 0d00      	.DB  0x6D,0x70,0x2E,0x29,0xD,0xA,0x0,0xD
0000bd 2b0a
0000be 2b2b
0000bf 2b2b
0000c0 2b2b      	.DB  0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000c1 2b2b
0000c2 202b
0000c3 6d53
0000c4 7261      	.DB  0x2B,0x2B,0x2B,0x20,0x53,0x6D,0x61,0x72
0000c5 2074
0000c6 7242
0000c7 6165
0000c8 656b      	.DB  0x74,0x20,0x42,0x72,0x65,0x61,0x6B,0x65
0000c9 2072
0000ca 2b2b
0000cb 2b2b
0000cc 2b2b      	.DB  0x72,0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000cd 2b2b
0000ce 2b2b
0000cf 0a0d
0000d0 4300      	.DB  0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0,0x43
0000d1 7275
0000d2 6572
0000d3 746e
0000d4 5320      	.DB  0x75,0x72,0x72,0x65,0x6E,0x74,0x20,0x53
0000d5 6e65
0000d6 6f73
0000d7 2072
0000d8 2020      	.DB  0x65,0x6E,0x73,0x6F,0x72,0x20,0x20,0x20
0000d9 203a
0000da 4341
0000db 3753
0000dc 3231      	.DB  0x3A,0x20,0x41,0x43,0x53,0x37,0x31,0x32
0000dd 4c45
0000de 5443
0000df 2d52
0000e0 3033      	.DB  0x45,0x4C,0x43,0x54,0x52,0x2D,0x33,0x30
0000e1 2d41
0000e2 2054
0000e3 2528
0000e4 2e30      	.DB  0x41,0x2D,0x54,0x20,0x28,0x25,0x30,0x2E
0000e5 6631
0000e6 6d20
0000e7 2f56
0000e8 6d41      	.DB  0x31,0x66,0x20,0x6D,0x56,0x2F,0x41,0x6D
0000e9 2e70
0000ea 0d29
0000eb 000a
0000ec 6552      	.DB  0x70,0x2E,0x29,0xD,0xA,0x0,0x52,0x65
0000ed 6461
0000ee 4420
0000ef 7069
0000f0 532d      	.DB  0x61,0x64,0x20,0x44,0x69,0x70,0x2D,0x53
0000f1 6977
0000f2 6374
0000f3 2068
0000f4 5245      	.DB  0x77,0x69,0x74,0x63,0x68,0x20,0x45,0x52
0000f5 4f52
0000f6 2152
0000f7 0a0d
0000f8 0d00      	.DB  0x52,0x4F,0x52,0x21,0xD,0xA,0x0,0xD
0000f9 2b0a
0000fa 2b2b
0000fb 2b2b
0000fc 2b2b      	.DB  0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000fd 2b2b
0000fe 202b
0000ff 6544
000100 6166      	.DB  0x2B,0x2B,0x2B,0x20,0x44,0x65,0x66,0x61
000101 6c75
000102 2074
000103 7954
000104 6570      	.DB  0x75,0x6C,0x74,0x20,0x54,0x79,0x70,0x65
000105 3a20
000106 5320
000107 616d
000108 7472      	.DB  0x20,0x3A,0x20,0x53,0x6D,0x61,0x72,0x74
000109 5320
00010a 6977
00010b 6374
00010c 2068      	.DB  0x20,0x53,0x77,0x69,0x74,0x63,0x68,0x20
00010d 2b2b
00010e 2b2b
00010f 2b2b
000110 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000111 2b2b
000112 0a0d
000113 4300
000114 7275      	.DB  0x2B,0x2B,0xD,0xA,0x0,0x43,0x75,0x72
000115 6572
000116 746e
000117 4d20
000118 6165      	.DB  0x72,0x65,0x6E,0x74,0x20,0x4D,0x65,0x61
000119 7573
00011a 6572
00011b 2020
00011c 203a      	.DB  0x73,0x75,0x72,0x65,0x20,0x20,0x3A,0x20
00011d 203e
00011e 3025
00011f 322e
000120 2066      	.DB  0x3E,0x20,0x25,0x30,0x2E,0x32,0x66,0x20
000121 6d41
000122 2e70
000123 0a0d
000124 0d00      	.DB  0x41,0x6D,0x70,0x2E,0xD,0xA,0x0,0xD
000125 2d0a
000126 2d2d
000127 2d2d
000128 2d2d      	.DB  0xA,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000129 202d
00012a 6e49
00012b 7469
00012c 6169      	.DB  0x2D,0x20,0x49,0x6E,0x69,0x74,0x69,0x61
00012d 206c
00012e 6f43
00012f 706d
000130 656c      	.DB  0x6C,0x20,0x43,0x6F,0x6D,0x70,0x6C,0x65
000131 6574
000132 2d20
000133 2d2d
000134 2d2d      	.DB  0x74,0x65,0x20,0x2D,0x2D,0x2D,0x2D,0x2D
000135 2d2d
000136 0d2d
000137 000a
000138 0a0d      	.DB  0x2D,0x2D,0x2D,0xD,0xA,0x0,0xD,0xA
000139 2d2d
00013a 2d2d
00013b 2d2d
00013c 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00013d 5320
00013e 6174
00013f 7472
000140 5020      	.DB  0x20,0x53,0x74,0x61,0x72,0x74,0x20,0x50
000141 6f72
000142 7267
000143 6d61
000144 2d20      	.DB  0x72,0x6F,0x67,0x72,0x61,0x6D,0x20,0x2D
000145 2d2d
000146 2d2d
000147 2d2d
000148 0d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD
000149 000a
00014a 0a0d
00014b 2d2d
00014c 2d2d      	.DB  0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D,0x2D
00014d 2d2d
00014e 2d2d
00014f 4920
000150 6c64      	.DB  0x2D,0x2D,0x2D,0x2D,0x20,0x49,0x64,0x6C
000151 2065
000152 2d2d
000153 2d2d
000154 2d2d      	.DB  0x65,0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000155 2d2d
000156 0a0d
000157 0d00
000158 2d0a      	.DB  0x2D,0x2D,0xD,0xA,0x0,0xD,0xA,0x2D
000159 2d2d
00015a 2d2d
00015b 2d2d
00015c 202d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x20
00015d 4f50
00015e 2050
00015f 5645
000160 4e45      	.DB  0x50,0x4F,0x50,0x20,0x45,0x56,0x45,0x4E
000161 2054
000162 2d2d
000163 2d2d
000164 2d2d      	.DB  0x54,0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000165 2d2d
000166 0a0d
000167 0d00
000168 2d0a      	.DB  0x2D,0x2D,0xD,0xA,0x0,0xD,0xA,0x2D
000169 2d2d
00016a 2d2d
00016b 2d2d
00016c 202d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x20
00016d 6341
00016e 6974
00016f 6576
000170 2d20      	.DB  0x41,0x63,0x74,0x69,0x76,0x65,0x20,0x2D
000171 2d2d
000172 2d2d
000173 2d2d
000174 0d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD
000175 000a      	.DB  0xA,0x0
                 _0x20000:
000176 3025
000177 6435
000178 2020
000179 0020      	.DB  0x25,0x30,0x35,0x64,0x20,0x20,0x20,0x0
00017a 3025
00017b 5832
00017c 0020
00017d 6325      	.DB  0x25,0x30,0x32,0x58,0x20,0x0,0x25,0x63
00017e 2e00
00017f 0d00
000180 000a      	.DB  0x0,0x2E,0x0,0xD,0xA,0x0
                 _0x60000:
000181 4157
000182 4e52
000183 4e49
000184 2047      	.DB  0x57,0x41,0x52,0x4E,0x49,0x4E,0x47,0x20
000185 203a
000186 4155
000187 5452
000188 2030      	.DB  0x3A,0x20,0x55,0x41,0x52,0x54,0x30,0x20
000189 5542
00018a 4646
00018b 5245
00018c 4f20      	.DB  0x42,0x55,0x46,0x46,0x45,0x52,0x20,0x4F
00018d 4556
00018e 4652
00018f 4f4c
000190 2057      	.DB  0x56,0x45,0x52,0x46,0x4C,0x4F,0x57,0x20
000191 6425
000192 0a0d
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1222): warning: .cseg .db misalignment - padding zero byte
000193 0000      	.DB  0x25,0x64,0xD,0xA,0x0
                 _0x80003:
000194 007e
000195 0804
000196 4101
000197 6c49      	.DB  0x7E,0x0,0x4,0x8,0x1,0x41,0x49,0x6C
                 _0x80004:
000198 007e
000199 0804
00019a 5301
00019b 574c      	.DB  0x7E,0x0,0x4,0x8,0x1,0x53,0x4C,0x57
                 _0x80005:
00019c 007e
00019d 0804
00019e 5301
00019f 5b48      	.DB  0x7E,0x0,0x4,0x8,0x1,0x53,0x48,0x5B
                 _0x80000:
0001a0 0a0d
0001a1 2b20
0001a2 2b2b
0001a3 2b2b      	.DB  0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
0001a4 2b2b
0001a5 2b2b
0001a6 202b
0001a7 6553      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x65
0001a8 646e
0001a9 4120
0001aa 2049
0001ab 2b2b      	.DB  0x6E,0x64,0x20,0x41,0x49,0x20,0x2B,0x2B
0001ac 2b2b
0001ad 2b2b
0001ae 2b2b
0001af 0a0d      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA
0001b0 0d00
0001b1 200a
0001b2 2b2b
0001b3 2b2b      	.DB  0x0,0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B
0001b4 2b2b
0001b5 2b2b
0001b6 2b2b
0001b7 5320      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53
0001b8 6e65
0001b9 2064
0001ba 4853
0001bb 2b20      	.DB  0x65,0x6E,0x64,0x20,0x53,0x48,0x20,0x2B
0001bc 2b2b
0001bd 2b2b
0001be 2b2b
0001bf 0d2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD
0001c0 000a
0001c1 0a0d
0001c2 2b20
0001c3 2b2b      	.DB  0xA,0x0,0xD,0xA,0x20,0x2B,0x2B,0x2B
0001c4 2b2b
0001c5 2b2b
0001c6 2b2b
0001c7 202b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
0001c8 6553
0001c9 646e
0001ca 5320
0001cb 204c      	.DB  0x53,0x65,0x6E,0x64,0x20,0x53,0x4C,0x20
0001cc 2b2b
0001cd 2b2b
0001ce 2b2b
0001cf 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0001d0 0a0d
0001d1 0d00
0001d2 200a
0001d3 2b2b      	.DB  0xD,0xA,0x0,0xD,0xA,0x20,0x2B,0x2B
0001d4 2b2b
0001d5 2b2b
0001d6 2b2b
0001d7 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0001d8 5220
0001d9 6365
0001da 6572
0001db 7669      	.DB  0x20,0x52,0x65,0x63,0x72,0x65,0x69,0x76
0001dc 2065
0001dd 6144
0001de 6174
0001df 2b20      	.DB  0x65,0x20,0x44,0x61,0x74,0x61,0x20,0x2B
0001e0 2b2b
0001e1 2b2b
0001e2 2b2b
0001e3 0d2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD
0001e4 000a      	.DB  0xA,0x0
                 _0xC0003:
0001e5 007e
0001e6 1023
0001e7 0001
0001e8 0000      	.DB  0x7E,0x0,0x23,0x10,0x1,0x0,0x0,0x0
0001e9 0000
0001ea 0000
0001eb ff00
0001ec 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
0001ed 3000
0001ee 0000
0001ef 0000
0001f0 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
0001f1 0000
0001f2 0000
0001f3 0000
0001f4 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0001f5 0000
0001f6 007e
0001f7 a101      	.DB  0x0,0x0,0x7E,0x0,0x1,0xA1
                 _0xC0004:
0001f8 007e
0001f9 1023
0001fa 0001
0001fb 0000      	.DB  0x7E,0x0,0x23,0x10,0x1,0x0,0x0,0x0
0001fc 0000
0001fd 0000
0001fe ff00
0001ff 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
000200 3000
000201 0000
000202 0000
000203 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
000204 0000
000205 0000
000206 0000
000207 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000208 0000
000209 007e
00020a a401      	.DB  0x0,0x0,0x7E,0x0,0x1,0xA4
                 _0xC0005:
00020b 007e
00020c 1025
00020d 0001
00020e 0000      	.DB  0x7E,0x0,0x25,0x10,0x1,0x0,0x0,0x0
00020f 0000
000210 0000
000211 ff00
000212 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
000213 3000
000214 0000
000215 0000
000216 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
000217 0000
000218 0000
000219 0000
00021a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00021b 0000
00021c 007e
00021d a501
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1265): warning: .cseg .db misalignment - padding zero byte
00021e 0001      	.DB  0x0,0x0,0x7E,0x0,0x1,0xA5,0x1
                 _0xC0006:
00021f 007e
000220 1048
000221 0001
000222 0000      	.DB  0x7E,0x0,0x48,0x10,0x1,0x0,0x0,0x0
000223 0000
000224 0000
000225 ff00
000226 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
000227 3000
000228 0000
000229 0000
00022a 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
00022b 0000
00022c 0000
00022d 0000
00022e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00022f 0000
000230 007e
000231 a726
000232 0101      	.DB  0x0,0x0,0x7E,0x0,0x26,0xA7,0x1,0x1
000233 0000
000234 0000
000235 0000
000236 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000237 0002
000238 0000
000239 0000
00023a 0000      	.DB  0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00023b 0300
00023c 0000
00023d 0000
00023e 0000      	.DB  0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0
00023f 0000
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1275): warning: .cseg .db misalignment - padding zero byte
000240 0004      	.DB  0x0,0x0,0x4
                 _0xC0000:
000241 0a0d
000242 2b20
000243 2b2b
000244 2b2b      	.DB  0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
000245 2b2b
000246 2b2b
000247 202b
000248 6553      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x65
000249 646e
00024a 4c20
00024b 4445
00024c 2b20      	.DB  0x6E,0x64,0x20,0x4C,0x45,0x44,0x20,0x2B
00024d 2b2b
00024e 2b2b
00024f 2b2b
000250 0d2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD
000251 000a
000252 0a0d
000253 2b20
000254 2b2b      	.DB  0xA,0x0,0xD,0xA,0x20,0x2B,0x2B,0x2B
000255 2b2b
000256 2b2b
000257 2b2b
000258 202b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
000259 6553
00025a 646e
00025b 4a20
00025c 696f      	.DB  0x53,0x65,0x6E,0x64,0x20,0x4A,0x6F,0x69
00025d 206e
00025e 2b2b
00025f 2b2b
000260 2b2b      	.DB  0x6E,0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000261 2b2b
000262 0a0d
000263 0d00
000264 200a      	.DB  0x2B,0x2B,0xD,0xA,0x0,0xD,0xA,0x20
000265 2b2b
000266 2b2b
000267 2b2b
000268 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000269 2b2b
00026a 5320
00026b 6e65
00026c 2064      	.DB  0x2B,0x2B,0x20,0x53,0x65,0x6E,0x64,0x20
00026d 6950
00026e 676e
00026f 2b20
000270 2b2b      	.DB  0x50,0x69,0x6E,0x67,0x20,0x2B,0x2B,0x2B
000271 2b2b
000272 2b2b
000273 0d2b
000274 000a      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0
000275 0a0d
000276 2b20
000277 2b2b
000278 2b2b      	.DB  0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
000279 2b2b
00027a 2b2b
00027b 202b
00027c 6553      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x65
00027d 646e
00027e 4520
00027f 4556
000280 544e      	.DB  0x6E,0x64,0x20,0x45,0x56,0x45,0x4E,0x54
000281 5220
000282 4345
000283 5649
000284 2045      	.DB  0x20,0x52,0x45,0x43,0x49,0x56,0x45,0x20
000285 2b2b
000286 2b2b
000287 2b2b
000288 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000289 0a0d
00028a 0d00
00028b 200a
00028c 2b2b      	.DB  0xD,0xA,0x0,0xD,0xA,0x20,0x2B,0x2B
00028d 2b2b
00028e 2b2b
00028f 2b2b
000290 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000291 5320
000292 6e65
000293 2064
000294 4552      	.DB  0x20,0x53,0x65,0x6E,0x64,0x20,0x52,0x45
000295 4f50
000296 5452
000297 2b20
000298 2b2b      	.DB  0x50,0x4F,0x52,0x54,0x20,0x2B,0x2B,0x2B
000299 2b2b
00029a 2b2b
00029b 0d2b
00029c 000a      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0
00029d 0a0d
00029e 3d3d
00029f 3d3d
0002a0 3d3d      	.DB  0xD,0xA,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002a1 3d3d
0002a2 3d3d
0002a3 3d3d
0002a4 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002a5 3d3d
0002a6 3d3d
0002a7 3d3d
0002a8 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002a9 3d3d
0002aa 3d3d
0002ab 3d3d
0002ac 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002ad 3d3d
0002ae 3d3d
0002af 3d3d
0002b0 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002b1 3d3d
0002b2 3d3d
0002b3 3d3d
0002b4 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002b5 3d3d
0002b6 3d3d
0002b7 3d3d
0002b8 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0002b9 0a0d
0002ba 5600
0002bb 7573
0002bc 206d      	.DB  0xD,0xA,0x0,0x56,0x73,0x75,0x6D,0x20
0002bd 203d
0002be 3025
0002bf 342e
0002c0 2066      	.DB  0x3D,0x20,0x25,0x30,0x2E,0x34,0x66,0x20
0002c1 0020
0002c2 7349
0002c3 6d75
0002c4 3d20      	.DB  0x20,0x0,0x49,0x73,0x75,0x6D,0x20,0x3D
0002c5 2520
0002c6 2e30
0002c7 6634
0002c8 2020      	.DB  0x20,0x25,0x30,0x2E,0x34,0x66,0x20,0x20
0002c9 5000
0002ca 7573
0002cb 206d
0002cc 203d      	.DB  0x0,0x50,0x73,0x75,0x6D,0x20,0x3D,0x20
0002cd 3025
0002ce 342e
0002cf 0d66
0002d0 000a      	.DB  0x25,0x30,0x2E,0x34,0x66,0xD,0xA,0x0
0002d1 6156
0002d2 6776
0002d3 3d20
0002d4 2520      	.DB  0x56,0x61,0x76,0x67,0x20,0x3D,0x20,0x25
0002d5 2e30
0002d6 6634
0002d7 2020
0002d8 0020      	.DB  0x30,0x2E,0x34,0x66,0x20,0x20,0x20,0x0
0002d9 6149
0002da 6776
0002db 3d20
0002dc 2520      	.DB  0x49,0x61,0x76,0x67,0x20,0x3D,0x20,0x25
0002dd 2e30
0002de 6634
0002df 2020
0002e0 0020      	.DB  0x30,0x2E,0x34,0x66,0x20,0x20,0x20,0x0
0002e1 6150
0002e2 6776
0002e3 3d20
0002e4 2520      	.DB  0x50,0x61,0x76,0x67,0x20,0x3D,0x20,0x25
0002e5 2e30
0002e6 6634
0002e7 0a0d
0002e8 5700      	.DB  0x30,0x2E,0x34,0x66,0xD,0xA,0x0,0x57
0002e9 7461
0002ea 2d74
0002eb 6f48
0002ec 7275      	.DB  0x61,0x74,0x74,0x2D,0x48,0x6F,0x75,0x72
0002ed 5320
0002ee 6d75
0002ef 3d20
0002f0 2520      	.DB  0x20,0x53,0x75,0x6D,0x20,0x3D,0x20,0x25
0002f1 2e30
0002f2 6634
0002f3 0a0d
0002f4 4e00      	.DB  0x30,0x2E,0x34,0x66,0xD,0xA,0x0,0x4E
0002f5 6d75
0002f6 6562
0002f7 2072
0002f8 6153      	.DB  0x75,0x6D,0x62,0x65,0x72,0x20,0x53,0x61
0002f9 706d
0002fa 696c
0002fb 676e
0002fc 3d20      	.DB  0x6D,0x70,0x6C,0x69,0x6E,0x67,0x20,0x3D
0002fd 2520
0002fe 0d64
0002ff 000a
000300 3d3d      	.DB  0x20,0x25,0x64,0xD,0xA,0x0,0x3D,0x3D
000301 3d3d
000302 3d3d
000303 3d3d
000304 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000305 3d3d
000306 3d3d
000307 3d3d
000308 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000309 3d3d
00030a 3d3d
00030b 3d3d
00030c 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00030d 3d3d
00030e 3d3d
00030f 3d3d
000310 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000311 3d3d
000312 3d3d
000313 3d3d
000314 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000315 3d3d
000316 3d3d
000317 3d3d
000318 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000319 3d3d
00031a 3d3d
00031b 0a0d
00031c 0a0d      	.DB  0x3D,0x3D,0x3D,0x3D,0xD,0xA,0xD,0xA
00031d 4300
00031e 7275
00031f 6572
000320 746e      	.DB  0x0,0x43,0x75,0x72,0x72,0x65,0x6E,0x74
000321 4520
000322 6378
000323 6565
000324 2064      	.DB  0x20,0x45,0x78,0x63,0x65,0x65,0x64,0x20
000325 2d2d
000326 5753
000327 5449
000328 4843      	.DB  0x2D,0x2D,0x53,0x57,0x49,0x54,0x43,0x48
000329 4f20
00032a 4646
00032b 0d21
00032c 000a      	.DB  0x20,0x4F,0x46,0x46,0x21,0xD,0xA,0x0
                 _0xE0003:
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1337): warning: .cseg .db misalignment - padding zero byte
00032d 0040      	.DB  0x40
                 _0x100003:
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1339): warning: .cseg .db misalignment - padding zero byte
00032e 0005      	.DB  0x5
                 _0x120003:
00032f 4000
000330 451c      	.DB  0x0,0x40,0x1C,0x45
                 _0x120000:
000331 4441
000332 2043
000333 203d
000334 6425      	.DB  0x41,0x44,0x43,0x20,0x3D,0x20,0x25,0x64
000335 0a0d
000336 5600
000337 6c6f
000338 2074      	.DB  0xD,0xA,0x0,0x56,0x6F,0x6C,0x74,0x20
000339 203d
00033a 6625
00033b 0a0d
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1345): warning: .cseg .db misalignment - padding zero byte
00033c 0000      	.DB  0x3D,0x20,0x25,0x66,0xD,0xA,0x0
                 _0x140000:
00033d 5645
00033e 4e45
00033f 2054
000340 203d      	.DB  0x45,0x56,0x45,0x4E,0x54,0x20,0x3D,0x20
000341 6425
000342 0a0d
000343 6300
000344 756f      	.DB  0x25,0x64,0xD,0xA,0x0,0x63,0x6F,0x75
000345 746e
000346 655f
000347 6576
000348 746e      	.DB  0x6E,0x74,0x5F,0x65,0x76,0x65,0x6E,0x74
000349 3d20
00034a 2520
00034b 0d64
00034c 000a      	.DB  0x20,0x3D,0x20,0x25,0x64,0xD,0xA,0x0
00034d 0a0d
00034e 2d2d
00034f 2d2d
000350 2d2d      	.DB  0xD,0xA,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000351 2d2d
000352 4a20
000353 494f
000354 544e      	.DB  0x2D,0x2D,0x20,0x4A,0x4F,0x49,0x4E,0x54
000355 5320
000356 4355
000357 4543
000358 5353      	.DB  0x20,0x53,0x55,0x43,0x43,0x45,0x53,0x53
000359 2d20
00035a 2d2d
00035b 2d2d
00035c 2d2d      	.DB  0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00035d 0d2d
00035e 000a
00035f 0a0d
000360 2d2d      	.DB  0x2D,0xD,0xA,0x0,0xD,0xA,0x2D,0x2D
000361 2d2d
000362 2d2d
000363 2d2d
000364 5220      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x20,0x52
000365 4345
000366 5649
000367 2045
000368 4950      	.DB  0x45,0x43,0x49,0x56,0x45,0x20,0x50,0x49
000369 474e
00036a 2d20
00036b 2d2d
00036c 2d2d      	.DB  0x4E,0x47,0x20,0x2D,0x2D,0x2D,0x2D,0x2D
00036d 2d2d
00036e 0d2d
00036f 000a
000370 0a0d      	.DB  0x2D,0x2D,0x2D,0xD,0xA,0x0,0xD,0xA
000371 2b20
000372 2b2b
000373 2b2b
000374 2b2b      	.DB  0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000375 2b2b
000376 202b
000377 655f
000378 6576      	.DB  0x2B,0x2B,0x2B,0x20,0x5F,0x65,0x76,0x65
000379 746e
00037a 3d20
00037b 203d
00037c 3135      	.DB  0x6E,0x74,0x20,0x3D,0x3D,0x20,0x35,0x31
00037d 2030
00037e 7c7c
00037f 5f20
000380 7665      	.DB  0x30,0x20,0x7C,0x7C,0x20,0x5F,0x65,0x76
000381 6e65
000382 2074
000383 3d3d
000384 3520      	.DB  0x65,0x6E,0x74,0x20,0x3D,0x3D,0x20,0x35
000385 3131
000386 2b20
000387 2b2b
000388 2b2b      	.DB  0x31,0x31,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
000389 2b2b
00038a 0d2b
00038b 000a
00038c 0a0d      	.DB  0x2B,0x2B,0x2B,0xD,0xA,0x0,0xD,0xA
00038d 2d2d
00038e 2d2d
00038f 2d2d
000390 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000391 5220
000392 4345
000393 5649
000394 2045      	.DB  0x20,0x52,0x45,0x43,0x49,0x56,0x45,0x20
000395 5645
000396 4e45
000397 2054
000398 2d2d      	.DB  0x45,0x56,0x45,0x4E,0x54,0x20,0x2D,0x2D
000399 2d2d
00039a 2d2d
00039b 2d2d
00039c 0a0d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD,0xA
00039d 0d00
00039e 2d0a
00039f 2d2d
0003a0 2d2d      	.DB  0x0,0xD,0xA,0x2D,0x2D,0x2D,0x2D,0x2D
0003a1 2d2d
0003a2 202d
0003a3 4553
0003a4 444e      	.DB  0x2D,0x2D,0x2D,0x20,0x53,0x45,0x4E,0x44
0003a5 4520
0003a6 4556
0003a7 544e
0003a8 5320      	.DB  0x20,0x45,0x56,0x45,0x4E,0x54,0x20,0x53
0003a9 4355
0003aa 4543
0003ab 5353
0003ac 2d20      	.DB  0x55,0x43,0x43,0x45,0x53,0x53,0x20,0x2D
0003ad 2d2d
0003ae 2d2d
0003af 2d2d
0003b0 0d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD
0003b1 000a
0003b2 0a0d
0003b3 2d2d
0003b4 2d2d      	.DB  0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D,0x2D
0003b5 2d2d
0003b6 2d2d
0003b7 5320
0003b8 4e45      	.DB  0x2D,0x2D,0x2D,0x2D,0x20,0x53,0x45,0x4E
0003b9 2044
0003ba 4552
0003bb 4f50
0003bc 5452      	.DB  0x44,0x20,0x52,0x45,0x50,0x4F,0x52,0x54
0003bd 5320
0003be 4355
0003bf 4543
0003c0 5353      	.DB  0x20,0x53,0x55,0x43,0x43,0x45,0x53,0x53
0003c1 2d20
0003c2 2d2d
0003c3 2d2d
0003c4 2d2d      	.DB  0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
0003c5 0d2d
0003c6 000a      	.DB  0x2D,0xD,0xA,0x0
                 _0x2000060:
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1383): warning: .cseg .db misalignment - padding zero byte
0003c7 0001      	.DB  0x1
                 _0x2000000:
0003c8 4e2d
0003c9 4e41
0003ca 4900
0003cb 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1386): warning: .cseg .db misalignment - padding zero byte
0003cc 0000      	.DB  0x0
                 _0x2020000:
0003cd 4e2d
0003ce 4e41
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1388): warning: .cseg .db misalignment - padding zero byte
0003cf 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 
                 __GLOBAL_INI_TBL:
0003d0 0001      	.DW  0x01
0003d1 0002      	.DW  0x02
0003d2 008c      	.DW  __REG_BIT_VARS*2
                 
0003d3 0004      	.DW  0x04
0003d4 0d00      	.DW  0xD00
0003d5 008e      	.DW  __HEAP_START_MARKER*2
                 
0003d6 000d      	.DW  0x0D
0003d7 08df      	.DW  _specData
0003d8 0092      	.DW  _0x3*2
                 
0003d9 0002      	.DW  0x02
0003da 0008      	.DW  0x08
0003db 00a0      	.DW  _0x51*2
                 
0003dc 0008      	.DW  0x08
0003dd 08ec      	.DW  _AI_COMMAND
0003de 0328      	.DW  _0x80003*2
                 
0003df 0008      	.DW  0x08
0003e0 08f4      	.DW  _SL_COMMAND
0003e1 0330      	.DW  _0x80004*2
                 
0003e2 0008      	.DW  0x08
0003e3 08fc      	.DW  _SH_COMMAND
0003e4 0338      	.DW  _0x80005*2
                 
0003e5 0026      	.DW  0x26
0003e6 0904      	.DW  _JOIN_A1
0003e7 03ca      	.DW  _0xC0003*2
                 
0003e8 0026      	.DW  0x26
0003e9 092b      	.DW  _PING_A4
0003ea 03f0      	.DW  _0xC0004*2
                 
0003eb 0027      	.DW  0x27
0003ec 0952      	.DW  _SEND_EVENT_
0003ed 0416      	.DW  _0xC0005*2
                 
0003ee 0043      	.DW  0x43
0003ef 097b      	.DW  _SEND_REPORT_
0003f0 043e      	.DW  _0xC0006*2
                 
0003f1 0001      	.DW  0x01
0003f2 09e7      	.DW  _Vreferent
0003f3 065a      	.DW  _0xE0003*2
                 
0003f4 0001      	.DW  0x01
0003f5 089e      	.DW  _Eaddress
0003f6 065c      	.DW  _0x100003*2
                 
0003f7 0004      	.DW  0x04
0003f8 0840      	.DW  _avg
0003f9 065e      	.DW  _0x120003*2
                 
0003fa 0001      	.DW  0x01
0003fb 09e8      	.DW  __seed_G100
0003fc 078e      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
0003fd 0000      	.DW  0
                 
                 __RESET:
0003fe 94f8      	CLI
0003ff 27ee      	CLR  R30
000400 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000401 e0f1      	LDI  R31,1
000402 bff5      	OUT  MCUCR,R31
000403 bfe5      	OUT  MCUCR,R30
000404 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000406 e1f8      	LDI  R31,0x18
000407 bdf1      	OUT  WDTCR,R31
000408 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000409 e08d      	LDI  R24,(14-2)+1
00040a e0a2      	LDI  R26,2
00040b 27bb      	CLR  R27
                 __CLEAR_REG:
00040c 93ed      	ST   X+,R30
00040d 958a      	DEC  R24
00040e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00040f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000410 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000411 e0a0      	LDI  R26,LOW(__SRAM_START)
000412 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000413 93ed      	ST   X+,R30
000414 9701      	SBIW R24,1
000415 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000416 eae0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000417 e0f7      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000418 9185      	LPM  R24,Z+
000419 9195      	LPM  R25,Z+
00041a 9700      	SBIW R24,0
00041b f061      	BREQ __GLOBAL_INI_END
00041c 91a5      	LPM  R26,Z+
00041d 91b5      	LPM  R27,Z+
00041e 9005      	LPM  R0,Z+
00041f 9015      	LPM  R1,Z+
000420 01bf      	MOVW R22,R30
000421 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000422 9005      	LPM  R0,Z+
000423 920d      	ST   X+,R0
000424 9701      	SBIW R24,1
000425 f7e1      	BRNE __GLOBAL_INI_LOOP
000426 01fb      	MOVW R30,R22
000427 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000428 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000429 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00042a bfed      	OUT  SPL,R30
00042b e0ec      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00042c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00042d e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00042e e0d6      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00042f 940c 0443 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x600
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Project         : HEMS - Smart_Plug
                 ;Date            : 13/06/2013
                 ;Author          : Tawan Srisang, Sirichakorn
                 ;Company         : Intelenics Co.,Ltd.
                 ;Comments        :
                 ;Version Format  :
                 ;Chip type       : ATmega128
                 ;Program type    : Application
                 ;Frequency       : 11.059200 MHz
                 ;*****************************************************/
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <sleep.h>
                 ;#include <io.h>
                 ;#include <math.h>
                 ;#include <initial_system.h>
                 ;#include <int_protocol.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <timer.h>
                 ;#include <adc.h>
                 ;#include <eeprom.h>
                 ;#include <meansure.h>
                 ;#include <queue.h>
                 ;#define SWITCH_PRESSED !(PINC & (1<<PINC0))
                 ;
                 ;uint8_t SWITCH          = TURN_OFF;
                 ;uint8_t specData[]      = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF};   // Specific Stucture of Join Req packet
                 
                 	.DSEG
                 ;uint8_t error;
                 ;int8_t read_D_SW;
                 ;int start_event;
                 ;int counter = 0;
                 ;//int e = 0;
                 ;//uint8_t SEND_EVENT_TEST[38];
                 ;
                 ;void device_state(int state){
                 ; 0000 002A void device_state(int state){
                 
                 	.CSEG
                 _device_state:
                 ; 0000 002B     if(state == 0){
000431 940e 1615 	CALL SUBOPT_0x0
                 ;	state -> Y+0
000433 f429      	BRNE _0x4
                 ; 0000 002C         POWER_RELAY_OFF;
000434 940e 161b 	CALL SUBOPT_0x1
                 ; 0000 002D         LED_STAT_OFF;
000436 9aaf      	SBI  0x15,7
                 ; 0000 002E         STATUS_DEVICE = 0;
000437 e0e0      	LDI  R30,LOW(0)
000438 c006      	RJMP _0x48
                 ; 0000 002F     }else if(state == 1){
                 _0x4:
000439 81a8      	LD   R26,Y
00043a 81b9      	LDD  R27,Y+1
00043b 9711      	SBIW R26,1
00043c f421      	BRNE _0x8
                 ; 0000 0030         POWER_RELAY_ON;
00043d 940e 1621 	CALL SUBOPT_0x2
                 ; 0000 0031         LED_STAT_ON;
                 ; 0000 0032         STATUS_DEVICE = 1;
                 _0x48:
00043f 93e0 0892 	STS  _STATUS_DEVICE,R30
                 ; 0000 0033     }
                 ; 0000 0034 }
                 _0x8:
000441 940c 08d2 	JMP  _0x20C0010
                 ;
                 ;void main(void) {
                 ; 0000 0036 void main(void) {
                 _main:
                 ; 0000 0037 
                 ; 0000 0038     start_event = 0;
000443 2466      	CLR  R6
000444 2477      	CLR  R7
                 ; 0000 0039     STATUS_DEVICE = EEPROM_read(Eaddress);
000445 940e 1629 	CALL SUBOPT_0x3
                 ; 0000 003A     if(STATUS_DEVICE == 0xFF){
000447 91a0 0892 	LDS  R26,_STATUS_DEVICE
000449 3faf      	CPI  R26,LOW(0xFF)
00044a f439      	BRNE _0xB
                 ; 0000 003B         EEPROM_write(Eaddress,0);
00044b 940e 1631 	CALL SUBOPT_0x4
00044d e0a0      	LDI  R26,LOW(0)
00044e 940e 0db2 	CALL _EEPROM_write
                 ; 0000 003C         STATUS_DEVICE = EEPROM_read(Eaddress);
000450 940e 1629 	CALL SUBOPT_0x3
                 ; 0000 003D     }
                 ; 0000 003E 
                 ; 0000 003F     /*=============== System Initialize ===============*/
                 ; 0000 0040     do{ error = initial_system(); }while(error);
                 _0xB:
                 _0xD:
000452 940e 0a34 	CALL _initial_system
000454 2e5e      	MOV  R5,R30
000455 2055      	TST  R5
000456 f7d9      	BRNE _0xD
                 ; 0000 0041 
                 ; 0000 0042     /*=============== Select Device Type ===============*/
                 ; 0000 0043 
                 ; 0000 0044     do {
                 _0x10:
                 ; 0000 0045         read_D_SW = read_dSwitch();
000457 940e 0a6b 	CALL _read_dSwitch
000459 2e4e      	MOV  R4,R30
                 ; 0000 0046         if(read_D_SW == 0x0F) {
00045a e0ef      	LDI  R30,LOW(15)
00045b 15e4      	CP   R30,R4
00045c f531      	BRNE _0x12
                 ; 0000 0047             SENSOR_SENSITIVE = SENSOR5A;
00045d 940e 1637 	CALL SUBOPT_0x5
                 ; 0000 0048             if((ADJ0_SENSOR5A > 0.0) && (ADJ0_SENSOR5A < 0.12)) {
00045f 940e 1648 	CALL SUBOPT_0x6
000461 f44c      	BRGE _0x14
000462 01df      	MOVW R26,R30
000463 01cb      	MOVW R24,R22
                +
000464 e8ef     +LDI R30 , LOW ( 0x3DF5C28F )
000465 ecf2     +LDI R31 , HIGH ( 0x3DF5C28F )
000466 ef65     +LDI R22 , BYTE3 ( 0x3DF5C28F )
000467 e37d     +LDI R23 , BYTE4 ( 0x3DF5C28F )
                 	__GETD1N 0x3DF5C28F
000468 940e 1bac 	CALL __CMPF12
00046a f008      	BRLO _0x15
                 _0x14:
00046b c005      	RJMP _0x13
                 _0x15:
                 ; 0000 0049                 AMP_ADJ_ZERO = ADJ0_SENSOR5A;
00046c e0a0      	LDI  R26,LOW(_ADJ0_SENSOR5A)
00046d e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR5A)
00046e 940e 1ce5 	CALL __EEPROMRDD
000470 c004      	RJMP _0x49
                 ; 0000 004A             }else {AMP_ADJ_ZERO = 0.09;}
                 _0x13:
                +
000471 eeec     +LDI R30 , LOW ( 0x3DB851EC )
000472 e5f1     +LDI R31 , HIGH ( 0x3DB851EC )
000473 eb68     +LDI R22 , BYTE3 ( 0x3DB851EC )
000474 e37d     +LDI R23 , BYTE4 ( 0x3DB851EC )
                 	__GETD1N 0x3DB851EC
                 _0x49:
000475 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
000477 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
000479 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
00047b 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 004B             specData[8] = TYPE_SMART_SWITCH;                             // Device Type
00047d e1e2      	LDI  R30,LOW(18)
                +
00047e 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 004C             printDebug("\r\n++++++++++ Smart Switch ++++++++++\r\n");
                +
000480 eae2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000481 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000482 c081      	RJMP _0x4A
                 ; 0000 004D             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                 ; 0000 004E             printDebug("Current Sensor   : ACS712ELCTR-05B-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                 ; 0000 004F         }else if(read_D_SW == 0x0E) {
                 _0x12:
000483 e0ee      	LDI  R30,LOW(14)
000484 15e4      	CP   R30,R4
000485 f591      	BRNE _0x18
                 ; 0000 0050             SENSOR_SENSITIVE = SENSOR20A;
                +
000486 e0e0     +LDI R30 , LOW ( 0x42C80000 )
000487 e0f0     +LDI R31 , HIGH ( 0x42C80000 )
000488 ec68     +LDI R22 , BYTE3 ( 0x42C80000 )
000489 e472     +LDI R23 , BYTE4 ( 0x42C80000 )
                 	__GETD1N 0x42C80000
00048a 940e 164d 	CALL SUBOPT_0x7
                 ; 0000 0051             if((ADJ0_SENSOR20A > 0.0) && (ADJ0_SENSOR20A < 0.14)) {
00048c e0a4      	LDI  R26,LOW(_ADJ0_SENSOR20A)
00048d e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR20A)
00048e 940e 1ce5 	CALL __EEPROMRDD
000490 940e 1648 	CALL SUBOPT_0x6
000492 f44c      	BRGE _0x1A
000493 01df      	MOVW R26,R30
000494 01cb      	MOVW R24,R22
                +
000495 e2e9     +LDI R30 , LOW ( 0x3E0F5C29 )
000496 e5fc     +LDI R31 , HIGH ( 0x3E0F5C29 )
000497 e06f     +LDI R22 , BYTE3 ( 0x3E0F5C29 )
000498 e37e     +LDI R23 , BYTE4 ( 0x3E0F5C29 )
                 	__GETD1N 0x3E0F5C29
000499 940e 1bac 	CALL __CMPF12
00049b f008      	BRLO _0x1B
                 _0x1A:
00049c c005      	RJMP _0x19
                 _0x1B:
                 ; 0000 0052                 AMP_ADJ_ZERO = ADJ0_SENSOR20A;
00049d e0a4      	LDI  R26,LOW(_ADJ0_SENSOR20A)
00049e e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR20A)
00049f 940e 1ce5 	CALL __EEPROMRDD
0004a1 c004      	RJMP _0x4B
                 ; 0000 0053             }else {AMP_ADJ_ZERO = 0.11;}
                 _0x19:
                +
0004a2 eaee     +LDI R30 , LOW ( 0x3DE147AE )
0004a3 e4f7     +LDI R31 , HIGH ( 0x3DE147AE )
0004a4 ee61     +LDI R22 , BYTE3 ( 0x3DE147AE )
0004a5 e37d     +LDI R23 , BYTE4 ( 0x3DE147AE )
                 	__GETD1N 0x3DE147AE
                 _0x4B:
0004a6 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
0004a8 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
0004aa 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
0004ac 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 0054             specData[8] = TYPE_SMART_PLUG;                               // Device Type
0004ae e1e1      	LDI  R30,LOW(17)
                +
0004af 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 0055             printDebug("\r\n++++++++++ Smart Plug ++++++++++\r\n");
                +
0004b1 e1ed     +LDI R30 , LOW ( 2 * _0x0 + ( 123 ) )
0004b2 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 123 ) )
                 	__POINTW1FN _0x0,123
0004b3 940e 1656 	CALL SUBOPT_0x8
                 ; 0000 0056             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                 ; 0000 0057             printDebug("Current Sensor   : ACS712ELCTR-20A-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
0004b5 e4e2     +LDI R30 , LOW ( 2 * _0x0 + ( 160 ) )
0004b6 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 160 ) )
                 	__POINTW1FN _0x0,160
0004b7 c05b      	RJMP _0x4C
                 ; 0000 0058         }else if(read_D_SW == 0x0D) {
                 _0x18:
0004b8 e0ed      	LDI  R30,LOW(13)
0004b9 15e4      	CP   R30,R4
0004ba f591      	BRNE _0x1E
                 ; 0000 0059             SENSOR_SENSITIVE = SENSOR30A;
                +
0004bb e0e0     +LDI R30 , LOW ( 0x42840000 )
0004bc e0f0     +LDI R31 , HIGH ( 0x42840000 )
0004bd e864     +LDI R22 , BYTE3 ( 0x42840000 )
0004be e472     +LDI R23 , BYTE4 ( 0x42840000 )
                 	__GETD1N 0x42840000
0004bf 940e 164d 	CALL SUBOPT_0x7
                 ; 0000 005A             if((ADJ0_SENSOR30A > 0.0) && (ADJ0_SENSOR30A < 0.15)) {
0004c1 e0a8      	LDI  R26,LOW(_ADJ0_SENSOR30A)
0004c2 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR30A)
0004c3 940e 1ce5 	CALL __EEPROMRDD
0004c5 940e 1648 	CALL SUBOPT_0x6
0004c7 f44c      	BRGE _0x20
0004c8 01df      	MOVW R26,R30
0004c9 01cb      	MOVW R24,R22
                +
0004ca e9ea     +LDI R30 , LOW ( 0x3E19999A )
0004cb e9f9     +LDI R31 , HIGH ( 0x3E19999A )
0004cc e169     +LDI R22 , BYTE3 ( 0x3E19999A )
0004cd e37e     +LDI R23 , BYTE4 ( 0x3E19999A )
                 	__GETD1N 0x3E19999A
0004ce 940e 1bac 	CALL __CMPF12
0004d0 f008      	BRLO _0x21
                 _0x20:
0004d1 c005      	RJMP _0x1F
                 _0x21:
                 ; 0000 005B                 AMP_ADJ_ZERO = ADJ0_SENSOR30A;
0004d2 e0a8      	LDI  R26,LOW(_ADJ0_SENSOR30A)
0004d3 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR30A)
0004d4 940e 1ce5 	CALL __EEPROMRDD
0004d6 c004      	RJMP _0x4D
                 ; 0000 005C             }else {AMP_ADJ_ZERO = 0.12;}
                 _0x1F:
                +
0004d7 e8ef     +LDI R30 , LOW ( 0x3DF5C28F )
0004d8 ecf2     +LDI R31 , HIGH ( 0x3DF5C28F )
0004d9 ef65     +LDI R22 , BYTE3 ( 0x3DF5C28F )
0004da e37d     +LDI R23 , BYTE4 ( 0x3DF5C28F )
                 	__GETD1N 0x3DF5C28F
                 _0x4D:
0004db 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
0004dd 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
0004df 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
0004e1 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 005D             specData[8] = TYPE_SMART_BREAKER;                            // Device Type
0004e3 e1e3      	LDI  R30,LOW(19)
                +
0004e4 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 005E             printDebug("\r\n++++++++++ Smart Breaker ++++++++++\r\n");
                +
0004e6 e7e9     +LDI R30 , LOW ( 2 * _0x0 + ( 215 ) )
0004e7 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 215 ) )
                 	__POINTW1FN _0x0,215
0004e8 940e 1656 	CALL SUBOPT_0x8
                 ; 0000 005F             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                 ; 0000 0060             printDebug("Current Sensor   : ACS712ELCTR-30A-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
0004ea eae1     +LDI R30 , LOW ( 2 * _0x0 + ( 255 ) )
0004eb e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 255 ) )
                 	__POINTW1FN _0x0,255
0004ec c026      	RJMP _0x4C
                 ; 0000 0061         }else if(read_D_SW < 0) {
                 _0x1E:
0004ed e0e0      	LDI  R30,LOW(0)
0004ee 164e      	CP   R4,R30
0004ef f42c      	BRGE _0x24
                 ; 0000 0062             printDebug("Read Dip-Switch ERROR!\r\n");
                +
0004f0 ede8     +LDI R30 , LOW ( 2 * _0x0 + ( 310 ) )
0004f1 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 310 ) )
                 	__POINTW1FN _0x0,310
0004f2 940e 166b 	CALL SUBOPT_0x9
                 ; 0000 0063         }else {
0004f4 c024      	RJMP _0x25
                 _0x24:
                 ; 0000 0064             SENSOR_SENSITIVE = SENSOR5A;
0004f5 940e 1637 	CALL SUBOPT_0x5
                 ; 0000 0065             AMP_ADJ_ZERO = ADJ0_SENSOR5A;
0004f7 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
0004f9 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
0004fb 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
0004fd 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 0066             specData[8] = TYPE_SMART_SWITCH;
0004ff e1e2      	LDI  R30,LOW(18)
                +
000500 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 0067             printDebug("\r\n++++++++++ Default Type : Smart Switch ++++++++++\r\n");
                +
000502 efe1     +LDI R30 , LOW ( 2 * _0x0 + ( 335 ) )
000503 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 335 ) )
                 	__POINTW1FN _0x0,335
                 _0x4A:
000504 93fa      	ST   -Y,R31
000505 93ea      	ST   -Y,R30
000506 e080      	LDI  R24,0
000507 d110      	RCALL _printDebug
000508 9622      	ADIW R28,2
                 ; 0000 0068             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                +
000509 ece9     +LDI R30 , LOW ( 2 * _0x0 + ( 39 ) )
00050a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 39 ) )
                 	__POINTW1FN _0x0,39
00050b 93fa      	ST   -Y,R31
00050c 93ea      	ST   -Y,R30
00050d 940e 1672 	CALL SUBOPT_0xA
00050f 940e 1677 	CALL SUBOPT_0xB
                 ; 0000 0069             printDebug("Current Sensor   : ACS712ELCTR-05B-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
000511 eee6     +LDI R30 , LOW ( 2 * _0x0 + ( 68 ) )
000512 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 68 ) )
                 	__POINTW1FN _0x0,68
                 _0x4C:
000513 93fa      	ST   -Y,R31
000514 93ea      	ST   -Y,R30
000515 940e 167e 	CALL SUBOPT_0xC
000517 940e 1677 	CALL SUBOPT_0xB
                 ; 0000 006A         }
                 _0x25:
                 ; 0000 006B     }while(read_D_SW < 0);
000519 e0e0      	LDI  R30,LOW(0)
00051a 164e      	CP   R4,R30
00051b f40c      	BRGE _0x11
00051c cf3a      	RJMP _0x10
                 _0x11:
                 ; 0000 006C 
                 ; 0000 006D     /*=============== Current Measurement ===============*/
                 ; 0000 006E     printDebug("Current Measure  : > %0.2f Amp.\r\n", AMP_ADJ_ZERO);
                +
00051d e2e7     +LDI R30 , LOW ( 2 * _0x0 + ( 389 ) )
00051e e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 389 ) )
                 	__POINTW1FN _0x0,389
00051f 93fa      	ST   -Y,R31
000520 93ea      	ST   -Y,R30
000521 940e 1687 	CALL SUBOPT_0xD
000523 940e 1677 	CALL SUBOPT_0xB
                 ; 0000 006F 
                 ; 0000 0070 
                 ; 0000 0071     #asm("sei")    // Global enable interrupts
000525 9478      	sei
                 ; 0000 0072 
                 ; 0000 0073     printDebug("\r\n-------- Initial Complete --------\r\n");
                +
000526 e4e9     +LDI R30 , LOW ( 2 * _0x0 + ( 423 ) )
000527 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 423 ) )
                 	__POINTW1FN _0x0,423
000528 940e 166b 	CALL SUBOPT_0x9
                 ; 0000 0074     delay_ms(5000);
00052a e8a8      	LDI  R26,LOW(5000)
00052b e1b3      	LDI  R27,HIGH(5000)
00052c 940e 19fc 	CALL _delay_ms
                 ; 0000 0075 
                 ; 0000 0076     printDebug("\r\n-------- Start Program --------\r\n");
                +
00052e e7e0     +LDI R30 , LOW ( 2 * _0x0 + ( 462 ) )
00052f e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 462 ) )
                 	__POINTW1FN _0x0,462
000530 940e 166b 	CALL SUBOPT_0x9
                 ; 0000 0077     while(1) {
                 _0x26:
                 ; 0000 0078         xbee_read();
000532 940e 09f0 	CALL _xbee_read
                 ; 0000 0079 
                 ; 0000 007A //        if(counter%111 == 0 && counter >= 111){
                 ; 0000 007B //        if(e%2 == 0){
                 ; 0000 007C //            SEND_EVENT_TEST[2] = 0x90;
                 ; 0000 007D //            SEND_EVENT_TEST[3] = 0x90;
                 ; 0000 007E //            SEND_EVENT_TEST[35] = 0xA5;
                 ; 0000 007F //            SEND_EVENT_TEST[36] = 0x01;
                 ; 0000 0080 //            SEND_EVENT_TEST[37] = 0x01;
                 ; 0000 0081 //            xbee_receivePacket(SEND_EVENT_TEST,38);
                 ; 0000 0082 //        }else{
                 ; 0000 0083 //            SEND_EVENT_TEST[2] = 0x90;
                 ; 0000 0084 //            SEND_EVENT_TEST[3] = 0x90;
                 ; 0000 0085 //            SEND_EVENT_TEST[35] = 0xA5;
                 ; 0000 0086 //            SEND_EVENT_TEST[36] = 0x01;
                 ; 0000 0087 //            SEND_EVENT_TEST[37] = 0x00;
                 ; 0000 0088 //            xbee_receivePacket(SEND_EVENT_TEST,38);
                 ; 0000 0089 //       }
                 ; 0000 008A //       e++;
                 ; 0000 008B //}
                 ; 0000 008C         switch (flag_state) {
000534 91e0 062a 	LDS  R30,_flag_state
000536 91f0 062b 	LDS  R31,_flag_state+1
                 ; 0000 008D 
                 ; 0000 008E             /*=============== Send AI ===============*/
                 ; 0000 008F             case 0 :
000538 9730      	SBIW R30,0
000539 f4c1      	BRNE _0x2C
                 ; 0000 0090                 xbee_sendATCommand(AI);
00053a 940e 1690 	CALL SUBOPT_0xE
00053c 940e 1693 	CALL SUBOPT_0xF
                 ; 0000 0091                 delay_ms(100);
                 ; 0000 0092 
                 ; 0000 0093                 /*=============== Check last state from eeprom ===============*/
                 ; 0000 0094 
                 ; 0000 0095                 if(STATUS_DEVICE == 1){
00053e 91a0 0892 	LDS  R26,_STATUS_DEVICE
000540 30a1      	CPI  R26,LOW(0x1)
000541 f479      	BRNE _0x2D
                 ; 0000 0096                     delay_ms(100);
000542 940e 1699 	CALL SUBOPT_0x10
                 ; 0000 0097                     device_state(1);   //on
000544 940e 169d 	CALL SUBOPT_0x11
000546 940e 16a0 	CALL SUBOPT_0x12
                 ; 0000 0098                     EEPROM_write(Eaddress,STATUS_DEVICE);
000548 940e 16a3 	CALL SUBOPT_0x13
                 ; 0000 0099                     start_event = 1;
00054a e0e1      	LDI  R30,LOW(1)
00054b e0f0      	LDI  R31,HIGH(1)
00054c 013f      	MOVW R6,R30
                 ; 0000 009A                     push_event(511);
00054d efaf      	LDI  R26,LOW(511)
00054e e0b1      	LDI  R27,HIGH(511)
00054f 940e 0f51 	CALL _push_event
                 ; 0000 009B                 }
                 ; 0000 009C             break;
                 _0x2D:
000551 c0c4      	RJMP _0x2B
                 ; 0000 009D 
                 ; 0000 009E             /*=============== Send SH( High Bits MacAddress) ===============*/
                 ; 0000 009F             case 1 :
                 _0x2C:
000552 30e1      	CPI  R30,LOW(0x1)
000553 e0a0      	LDI  R26,HIGH(0x1)
000554 07fa      	CPC  R31,R26
000555 f429      	BRNE _0x2E
                 ; 0000 00A0                 xbee_sendATCommand(SH);
000556 940e 169d 	CALL SUBOPT_0x11
000558 940e 1693 	CALL SUBOPT_0xF
                 ; 0000 00A1                 delay_ms(100);
                 ; 0000 00A2             break;
00055a c0bb      	RJMP _0x2B
                 ; 0000 00A3 
                 ; 0000 00A4             /*=============== Send SL( LOW Bits MacAddress) ===============*/
                 ; 0000 00A5             case 2 :
                 _0x2E:
00055b 30e2      	CPI  R30,LOW(0x2)
00055c e0a0      	LDI  R26,HIGH(0x2)
00055d 07fa      	CPC  R31,R26
00055e f429      	BRNE _0x2F
                 ; 0000 00A6                 xbee_sendATCommand(SL);
00055f 940e 16a7 	CALL SUBOPT_0x14
000561 940e 1693 	CALL SUBOPT_0xF
                 ; 0000 00A7                 delay_ms(100);
                 ; 0000 00A8             break;
000563 c0b2      	RJMP _0x2B
                 ; 0000 00A9 
                 ; 0000 00AA             /*=============== Send Join ===============*/
                 ; 0000 00AB             case 3 :
                 _0x2F:
000564 30e3      	CPI  R30,LOW(0x3)
000565 e0a0      	LDI  R26,HIGH(0x3)
000566 07fa      	CPC  R31,R26
000567 f591      	BRNE _0x30
                 ; 0000 00AC                 delay_ms(2000);
000568 eda0      	LDI  R26,LOW(2000)
000569 e0b7      	LDI  R27,HIGH(2000)
00056a 940e 19fc 	CALL _delay_ms
                 ; 0000 00AD                 send_join();
00056c 940e 0b61 	CALL _send_join
                 ; 0000 00AE                 delay_ms(100);
00056e 940e 1699 	CALL SUBOPT_0x10
                 ; 0000 00AF 
                 ; 0000 00B0                 if(SWITCH_PRESSED){
000570 9998      	SBIC 0x13,0
000571 c027      	RJMP _0x31
                 ; 0000 00B1                     delay_ms(100);
000572 940e 1699 	CALL SUBOPT_0x10
                 ; 0000 00B2                     if(STATUS_DEVICE == 0){
000574 91e0 0892 	LDS  R30,_STATUS_DEVICE
000576 30e0      	CPI  R30,0
000577 f469      	BRNE _0x32
                 ; 0000 00B3                         POWER_RELAY_ON;
000578 940e 1621 	CALL SUBOPT_0x2
                 ; 0000 00B4                         LED_STAT_ON;
                 ; 0000 00B5                         STATUS_DEVICE = 1;
00057a 93e0 0892 	STS  _STATUS_DEVICE,R30
                 ; 0000 00B6                         device_state(1);      //on
00057c 940e 169d 	CALL SUBOPT_0x11
00057e 940e 16a0 	CALL SUBOPT_0x12
                 ; 0000 00B7                         EEPROM_write(Eaddress,STATUS_DEVICE);
000580 940e 16a3 	CALL SUBOPT_0x13
                 ; 0000 00B8                         push_event(511);
000582 efaf      	LDI  R26,LOW(511)
000583 e0b1      	LDI  R27,HIGH(511)
000584 c012      	RJMP _0x4E
                 ; 0000 00B9 
                 ; 0000 00BA                     }else if(STATUS_DEVICE == 1){
                 _0x32:
000585 91a0 0892 	LDS  R26,_STATUS_DEVICE
000587 30a1      	CPI  R26,LOW(0x1)
000588 f481      	BRNE _0x36
                 ; 0000 00BB                         LED_STAT_OFF;
000589 9aaf      	SBI  0x15,7
                 ; 0000 00BC                         POWER_RELAY_OFF;
00058a 940e 161b 	CALL SUBOPT_0x1
                 ; 0000 00BD                         STATUS_DEVICE = 0;
00058c e0e0      	LDI  R30,LOW(0)
00058d 93e0 0892 	STS  _STATUS_DEVICE,R30
                 ; 0000 00BE                         device_state(0);      //off
00058f 940e 1690 	CALL SUBOPT_0xE
000591 940e 16a0 	CALL SUBOPT_0x12
                 ; 0000 00BF                         EEPROM_write(Eaddress,STATUS_DEVICE);
000593 940e 16a3 	CALL SUBOPT_0x13
                 ; 0000 00C0                         push_event(510);
000595 efae      	LDI  R26,LOW(510)
000596 e0b1      	LDI  R27,HIGH(510)
                 _0x4E:
000597 940e 0f51 	CALL _push_event
                 ; 0000 00C1 
                 ; 0000 00C2                     }
                 ; 0000 00C3                 }
                 _0x36:
                 ; 0000 00C4             break;
                 _0x31:
000599 c07c      	RJMP _0x2B
                 ; 0000 00C5 
                 ; 0000 00C6             /*=============== Idle State ===============*/
                 ; 0000 00C7             case 4 :
                 _0x30:
00059a 30e4      	CPI  R30,LOW(0x4)
00059b e0a0      	LDI  R26,HIGH(0x4)
00059c 07fa      	CPC  R31,R26
00059d f011      	BREQ PC+3
00059e 940c 05e9 	JMP _0x39
                 ; 0000 00C8                 printDebug("\r\n-------- Idle --------\r\n");
                +
0005a0 e9e4     +LDI R30 , LOW ( 2 * _0x0 + ( 498 ) )
0005a1 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 498 ) )
                 	__POINTW1FN _0x0,498
0005a2 940e 166b 	CALL SUBOPT_0x9
                 ; 0000 00C9                 counter++;
0005a4 940e 16aa 	CALL SUBOPT_0x15
                 ; 0000 00CA                 if(counter%10 == 0 ){
0005a6 f431      	BRNE _0x3A
                 ; 0000 00CB                     pop_event();
0005a7 940e 0f64 	CALL _pop_event
                 ; 0000 00CC                     printDebug("\r\n-------- POP EVENT --------\r\n");
                +
0005a9 eaef     +LDI R30 , LOW ( 2 * _0x0 + ( 525 ) )
0005aa e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 525 ) )
                 	__POINTW1FN _0x0,525
0005ab 940e 166b 	CALL SUBOPT_0x9
                 ; 0000 00CD                 }
                 ; 0000 00CE 
                 ; 0000 00CF                 if(start_event == 1){
                 _0x3A:
0005ad e0e1      	LDI  R30,LOW(1)
0005ae e0f0      	LDI  R31,HIGH(1)
0005af 15e6      	CP   R30,R6
0005b0 05f7      	CPC  R31,R7
0005b1 f499      	BRNE _0x3B
                 ; 0000 00D0                     if(STATUS_DEVICE == 1){
0005b2 91a0 0892 	LDS  R26,_STATUS_DEVICE
0005b4 30a1      	CPI  R26,LOW(0x1)
0005b5 f419      	BRNE _0x3C
                 ; 0000 00D1                         flag_state = 5;
0005b6 e0e5      	LDI  R30,LOW(5)
0005b7 e0f0      	LDI  R31,HIGH(5)
0005b8 c006      	RJMP _0x4F
                 ; 0000 00D2                     }else if(STATUS_DEVICE == 0){
                 _0x3C:
0005b9 91e0 0892 	LDS  R30,_STATUS_DEVICE
0005bb 30e0      	CPI  R30,0
0005bc f431      	BRNE _0x3E
                 ; 0000 00D3                         flag_state = 4;
0005bd e0e4      	LDI  R30,LOW(4)
0005be e0f0      	LDI  R31,HIGH(4)
                 _0x4F:
0005bf 93e0 062a 	STS  _flag_state,R30
0005c1 93f0 062b 	STS  _flag_state+1,R31
                 ; 0000 00D4                     }
                 ; 0000 00D5                     start_event = 0;
                 _0x3E:
0005c3 2466      	CLR  R6
0005c4 2477      	CLR  R7
                 ; 0000 00D6                 }
                 ; 0000 00D7 
                 ; 0000 00D8 
                 ; 0000 00D9                 if(SWITCH_PRESSED){
                 _0x3B:
0005c5 9998      	SBIC 0x13,0
0005c6 c021      	RJMP _0x3F
                 ; 0000 00DA                     delay_ms(200);
0005c7 940e 16b4 	CALL SUBOPT_0x16
                 ; 0000 00DB                        if(STATUS_DEVICE == 0){
0005c9 91e0 0892 	LDS  R30,_STATUS_DEVICE
0005cb 30e0      	CPI  R30,0
0005cc f469      	BRNE _0x40
                 ; 0000 00DC //                            POWER_RELAY_ON;
                 ; 0000 00DD //                            LED_STAT_ON;
                 ; 0000 00DE //                            STATUS_DEVICE = 1;
                 ; 0000 00DF                             device_state(1);      //on
0005cd 940e 169d 	CALL SUBOPT_0x11
0005cf 940e 16a0 	CALL SUBOPT_0x12
                 ; 0000 00E0                             EEPROM_write(Eaddress,STATUS_DEVICE);
0005d1 940e 16a3 	CALL SUBOPT_0x13
                 ; 0000 00E1                             flag_state = 5;
0005d3 e0e5      	LDI  R30,LOW(5)
0005d4 e0f0      	LDI  R31,HIGH(5)
0005d5 940e 16b8 	CALL SUBOPT_0x17
                 ; 0000 00E2                             //printDebug("count_input = %d\r\n", count_input);
                 ; 0000 00E3                             push_event(511);
0005d7 efaf      	LDI  R26,LOW(511)
0005d8 e0b1      	LDI  R27,HIGH(511)
0005d9 c00c      	RJMP _0x50
                 ; 0000 00E4                        }else if(STATUS_DEVICE == 1){
                 _0x40:
0005da 91a0 0892 	LDS  R26,_STATUS_DEVICE
0005dc 30a1      	CPI  R26,LOW(0x1)
0005dd f451      	BRNE _0x42
                 ; 0000 00E5 //                            POWER_RELAY_OFF;
                 ; 0000 00E6 //                            LED_STAT_OFF;
                 ; 0000 00E7 //                            STATUS_DEVICE = 0;
                 ; 0000 00E8                             device_state(0);     //off
0005de 940e 1690 	CALL SUBOPT_0xE
0005e0 940e 16a0 	CALL SUBOPT_0x12
                 ; 0000 00E9                             EEPROM_write(Eaddress,STATUS_DEVICE);
0005e2 940e 16a3 	CALL SUBOPT_0x13
                 ; 0000 00EA                             flag_state = 4;
0005e4 940e 16bd 	CALL SUBOPT_0x18
                 ; 0000 00EB                             //printDebug("count_input = %d\r\n", count_input);
                 ; 0000 00EC                             push_event(510);
                 _0x50:
0005e6 940e 0f51 	CALL _push_event
                 ; 0000 00ED                        }
                 ; 0000 00EE                 }
                 _0x42:
                 ; 0000 00EF             break;
                 _0x3F:
0005e8 c02d      	RJMP _0x2B
                 ; 0000 00F0 
                 ; 0000 00F1             /*=============== Active State ===============*/
                 ; 0000 00F2             case 5 :
                 _0x39:
0005e9 30e5      	CPI  R30,LOW(0x5)
0005ea e0a0      	LDI  R26,HIGH(0x5)
0005eb 07fa      	CPC  R31,R26
0005ec f549      	BRNE _0x2B
                 ; 0000 00F3             printDebug("\r\n-------- Active --------\r\n");
                +
0005ed ecef     +LDI R30 , LOW ( 2 * _0x0 + ( 557 ) )
0005ee e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 557 ) )
                 	__POINTW1FN _0x0,557
0005ef 940e 166b 	CALL SUBOPT_0x9
                 ; 0000 00F4                 ReadCurrent();
0005f1 940e 0dcb 	CALL _ReadCurrent
                 ; 0000 00F5                 ReadVoltage();
0005f3 940e 0e41 	CALL _ReadVoltage
                 ; 0000 00F6 
                 ; 0000 00F7                 counter++;
0005f5 940e 16aa 	CALL SUBOPT_0x15
                 ; 0000 00F8                 if(counter%10 == 0 ){
0005f7 f431      	BRNE _0x44
                 ; 0000 00F9                     printDebug("\r\n-------- POP EVENT --------\r\n");
                +
0005f8 eaef     +LDI R30 , LOW ( 2 * _0x0 + ( 525 ) )
0005f9 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 525 ) )
                 	__POINTW1FN _0x0,525
0005fa 940e 166b 	CALL SUBOPT_0x9
                 ; 0000 00FA                     pop_event();
0005fc 940e 0f64 	CALL _pop_event
                 ; 0000 00FB                 }
                 ; 0000 00FC 
                 ; 0000 00FD 
                 ; 0000 00FE                 if(number == 1000){
                 _0x44:
0005fe 91a0 0830 	LDS  R26,_number
000600 91b0 0831 	LDS  R27,_number+1
000602 3ea8      	CPI  R26,LOW(0x3E8)
000603 e0e3      	LDI  R30,HIGH(0x3E8)
000604 07be      	CPC  R27,R30
000605 f411      	BRNE _0x45
                 ; 0000 00FF                     SendStatusReport();
000606 940e 0c4c 	CALL _SendStatusReport
                 ; 0000 0100                 }
                 ; 0000 0101 
                 ; 0000 0102                 if(SWITCH_PRESSED){
                 _0x45:
000608 9998      	SBIC 0x13,0
000609 c00c      	RJMP _0x46
                 ; 0000 0103                     delay_ms(200);
00060a 940e 16b4 	CALL SUBOPT_0x16
                 ; 0000 0104 //                    POWER_RELAY_OFF;
                 ; 0000 0105 //                    LED_STAT_OFF;
                 ; 0000 0106 //                    STATUS_DEVICE = 0;
                 ; 0000 0107                     device_state(0); // off
00060c 940e 1690 	CALL SUBOPT_0xE
00060e 940e 16a0 	CALL SUBOPT_0x12
                 ; 0000 0108                     EEPROM_write(Eaddress,STATUS_DEVICE);
000610 940e 16a3 	CALL SUBOPT_0x13
                 ; 0000 0109                     flag_state = 4;
000612 940e 16bd 	CALL SUBOPT_0x18
                 ; 0000 010A //                    printDebug("count_input = %d\r\n", count_input);
                 ; 0000 010B                     push_event(510);
000614 940e 0f51 	CALL _push_event
                 ; 0000 010C                 }
                 ; 0000 010D             break;
                 _0x46:
                 ; 0000 010E         }
                 _0x2B:
                 ; 0000 010F     }
000616 cf1b      	RJMP _0x26
                 ; 0000 0110 }
                 _0x47:
000617 cfff      	RJMP _0x47
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <stdarg.h>
                 ;#include <ctype.h>
                 ;#include <stdint.h>
                 ;#include <debug.h>
                 ;#include <uart.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <adc.h>
                 ;#include <initial_system.h>
                 ;
                 ;/* ================================================================================= */
                 ;void printDebug(flash char *fmtstr, ...)
                 ; 0001 000E {
                 
                 	.CSEG
                 _printDebug:
000618 92ff      	PUSH R15
000619 2ef8      	MOV  R15,R24
                 ; 0001 000F     char textBuffer[256];
                 ; 0001 0010     va_list argptr;
                 ; 0001 0011 
                 ; 0001 0012     va_start(argptr, fmtstr);
00061a 50d1      	SUBI R29,1
00061b 931a      	ST   -Y,R17
00061c 930a      	ST   -Y,R16
                 ;	*fmtstr -> Y+258
                 ;	textBuffer -> Y+2
                 ;	*argptr -> R16,R17
00061d 01de      	MOVW R26,R28
00061e 50a2      	SUBI R26,LOW(-(254))
00061f 4fbf      	SBCI R27,HIGH(-(254))
000620 940e 1c03 	CALL __ADDW2R15
000622 018d      	MOVW R16,R26
                 ; 0001 0013     vsprintf(textBuffer,fmtstr,argptr);
000623 940e 16c3 	CALL SUBOPT_0x19
000625 01de      	MOVW R26,R28
000626 5fac      	SUBI R26,LOW(-(260))
000627 4fbe      	SBCI R27,HIGH(-(260))
000628 940e 1c03 	CALL __ADDW2R15
00062a 940e 1ca6 	CALL __GETW1P
00062c 93fa      	ST   -Y,R31
00062d 93ea      	ST   -Y,R30
00062e 01d8      	MOVW R26,R16
00062f 940e 1401 	CALL _vsprintf
                 ; 0001 0014     send_uart(0, textBuffer);
000631 e0e0      	LDI  R30,LOW(0)
000632 93ea      	ST   -Y,R30
000633 01de      	MOVW R26,R28
000634 9613      	ADIW R26,3
000635 940e 0813 	CALL _send_uart
                 ; 0001 0015     va_end(argptr);
                 ; 0001 0016 
                 ; 0001 0017     return;
000637 8119      	LDD  R17,Y+1
000638 8108      	LDD  R16,Y+0
000639 9622      	ADIW R28,2
00063a 5fdf      	SUBI R29,-1
00063b 90ff      	POP  R15
00063c 9508      	RET
                 ; 0001 0018 }
                 ;/* ================================================================================= */
                 ; void print_payload(const unsigned char *payload, int len) {
                 ; 0001 001A void print_payload(const unsigned char *payload, int len) {
                 _print_payload:
                 ; 0001 001B 
                 ; 0001 001C     int len_rem = len;
                 ; 0001 001D     int line_width = 16;            // number of bytes per line //
                 ; 0001 001E     int line_len;
                 ; 0001 001F     int offset = 0;                  // zero-based offset counter //
                 ; 0001 0020     const unsigned char *ch = payload;
                 ; 0001 0021 
                 ; 0001 0022     if (len <= 0)
00063d 940e 16c8 	CALL SUBOPT_0x1A
00063f 83ea      	STD  Y+2,R30
000640 e0e0      	LDI  R30,LOW(0)
000641 83eb      	STD  Y+3,R30
000642 940e 1d0c 	CALL __SAVELOCR6
                 ;	*payload -> Y+12
                 ;	len -> Y+10
                 ;	len_rem -> R16,R17
                 ;	line_width -> R18,R19
                 ;	line_len -> R20,R21
                 ;	offset -> Y+8
                 ;	*ch -> Y+6
                +
000644 850a     +LDD R16 , Y + 10
000645 851b     +LDD R17 , Y + 10 + 1
                 	__GETWRS 16,17,10
                +
000646 e120     +LDI R18 , LOW ( 16 )
000647 e030     +LDI R19 , HIGH ( 16 )
                 	__GETWRN 18,19,16
000648 85ec      	LDD  R30,Y+12
000649 85fd      	LDD  R31,Y+12+1
00064a 83ee      	STD  Y+6,R30
00064b 83ff      	STD  Y+6+1,R31
00064c 85aa      	LDD  R26,Y+10
00064d 85bb      	LDD  R27,Y+10+1
00064e 940e 1cfd 	CALL __CPW02
000650 f584      	BRGE _0x20C0012
                 ; 0001 0023         return;
                 ; 0001 0024 
                 ; 0001 0025     // data fits on one line //
                 ; 0001 0026     if (len <= line_width) {
000651 172a      	CP   R18,R26
000652 073b      	CPC  R19,R27
000653 f04c      	BRLT _0x20004
                 ; 0001 0027         print_hex_ascii_line(ch, len, offset);
000654 940e 16cd 	CALL SUBOPT_0x1B
000656 85ec      	LDD  R30,Y+12
000657 85fd      	LDD  R31,Y+12+1
000658 93fa      	ST   -Y,R31
000659 93ea      	ST   -Y,R30
00065a 940e 16d2 	CALL SUBOPT_0x1C
                 ; 0001 0028         return;
00065c c024      	RJMP _0x20C0012
                 ; 0001 0029     }
                 ; 0001 002A     // data spans multiple lines //
                 ; 0001 002B     for ( ;; ) {
                 _0x20004:
                 _0x20006:
                 ; 0001 002C         // compute current line length //
                 ; 0001 002D         line_len = line_width % len_rem;
00065d 01f8      	MOVW R30,R16
00065e 01d9      	MOVW R26,R18
00065f 940e 1c7a 	CALL __MODW21
000661 01af      	MOVW R20,R30
                 ; 0001 002E         // print line //
                 ; 0001 002F         print_hex_ascii_line(ch, line_len, offset);
000662 940e 16cd 	CALL SUBOPT_0x1B
000664 935a      	ST   -Y,R21
000665 934a      	ST   -Y,R20
000666 940e 16d2 	CALL SUBOPT_0x1C
                 ; 0001 0030         // compute total remaining //
                 ; 0001 0031         len_rem = len_rem - line_len;
                +
000668 1b04     +SUB R16 , R20
000669 0b15     +SBC R17 , R21
                 	__SUBWRR 16,17,20,21
                 ; 0001 0032         // shift pointer to remaining bytes to print //
                 ; 0001 0033         ch = ch + line_len;
00066a 01fa      	MOVW R30,R20
00066b 81ae      	LDD  R26,Y+6
00066c 81bf      	LDD  R27,Y+6+1
00066d 0fea      	ADD  R30,R26
00066e 1ffb      	ADC  R31,R27
00066f 83ee      	STD  Y+6,R30
000670 83ff      	STD  Y+6+1,R31
                 ; 0001 0034         // add offset //
                 ; 0001 0035         offset = offset + line_width;
000671 01f9      	MOVW R30,R18
000672 940e 16d6 	CALL SUBOPT_0x1D
000674 87e8      	STD  Y+8,R30
000675 87f9      	STD  Y+8+1,R31
                 ; 0001 0036         // check if we have line width chars or less //
                 ; 0001 0037         if (len_rem <= line_width) {
                +
000676 1720     +CP R18 , R16
000677 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
000678 f03c      	BRLT _0x20008
                 ; 0001 0038             // print last line and get out //
                 ; 0001 0039             print_hex_ascii_line(ch, len_rem, offset);
000679 940e 16cd 	CALL SUBOPT_0x1B
00067b 931a      	ST   -Y,R17
00067c 930a      	ST   -Y,R16
00067d 940e 16d2 	CALL SUBOPT_0x1C
                 ; 0001 003A             break;
00067f c001      	RJMP _0x20007
                 ; 0001 003B         }
                 ; 0001 003C     }
                 _0x20008:
000680 cfdc      	RJMP _0x20006
                 _0x20007:
                 ; 0001 003D     return;
                 _0x20C0012:
000681 940e 1d13 	CALL __LOADLOCR6
000683 962e      	ADIW R28,14
000684 9508      	RET
                 ; 0001 003E 
                 ; 0001 003F }
                 ;/* ================================================================================= */
                 ;void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
                 ; 0001 0041 void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
                 _print_hex_ascii_line:
                 ; 0001 0042 
                 ; 0001 0043     int i;
                 ; 0001 0044     int gap;
                 ; 0001 0045     const unsigned char *ch;
                 ; 0001 0046 
                 ; 0001 0047     // offset //
                 ; 0001 0048     printDebug("%05d   ", offset);
000685 93ba      	ST   -Y,R27
000686 93aa      	ST   -Y,R26
000687 940e 1d0c 	CALL __SAVELOCR6
                 ;	*payload -> Y+10
                 ;	len -> Y+8
                 ;	offset -> Y+6
                 ;	i -> R16,R17
                 ;	gap -> R18,R19
                 ;	*ch -> R20,R21
                +
000689 eeec     +LDI R30 , LOW ( 2 * _0x20000 + ( 0 ) )
00068a e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 0 ) )
                 	__POINTW1FN _0x20000,0
00068b 93fa      	ST   -Y,R31
00068c 93ea      	ST   -Y,R30
00068d 85e8      	LDD  R30,Y+8
00068e 85f9      	LDD  R31,Y+8+1
00068f 940e 16db 	CALL SUBOPT_0x1E
                 ; 0001 0049 
                 ; 0001 004A     // hex //
                 ; 0001 004B     ch = payload;
                +
000691 854a     +LDD R20 , Y + 10
000692 855b     +LDD R21 , Y + 10 + 1
                 	__GETWRS 20,21,10
                 ; 0001 004C     for(i = 0; i < len; i++) {
                +
000693 e000     +LDI R16 , LOW ( 0 )
000694 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2000A:
000695 85e8      	LDD  R30,Y+8
000696 85f9      	LDD  R31,Y+8+1
000697 170e      	CP   R16,R30
000698 071f      	CPC  R17,R31
000699 f494      	BRGE _0x2000B
                 ; 0001 004D         printDebug("%02X ", *ch);
                +
00069a efe4     +LDI R30 , LOW ( 2 * _0x20000 + ( 8 ) )
00069b e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 8 ) )
                 	__POINTW1FN _0x20000,8
00069c 940e 16de 	CALL SUBOPT_0x1F
                 ; 0001 004E 
                 ; 0001 004F         ch++;
                +
00069e 5f4f     +SUBI R20 , LOW ( - 1 )
00069f 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0001 0050         // print extra space after 8th byte for visual aid //
                 ; 0001 0051         if (i == 7){
0006a0 e0e7      	LDI  R30,LOW(7)
0006a1 e0f0      	LDI  R31,HIGH(7)
0006a2 17e0      	CP   R30,R16
0006a3 07f1      	CPC  R31,R17
0006a4 f421      	BRNE _0x2000C
                 ; 0001 0052             printDebug(" ");
                +
0006a5 efe2     +LDI R30 , LOW ( 2 * _0x20000 + ( 6 ) )
0006a6 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 6 ) )
                 	__POINTW1FN _0x20000,6
0006a7 940e 166b 	CALL SUBOPT_0x9
                 ; 0001 0053 
                 ; 0001 0054         }
                 ; 0001 0055     }
                 _0x2000C:
                +
0006a9 5f0f     +SUBI R16 , LOW ( - 1 )
0006aa 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0006ab cfe9      	RJMP _0x2000A
                 _0x2000B:
                 ; 0001 0056     // print space to handle line less than 8 bytes //
                 ; 0001 0057     if (len < 8){
0006ac 85a8      	LDD  R26,Y+8
0006ad 85b9      	LDD  R27,Y+8+1
0006ae 9718      	SBIW R26,8
0006af f424      	BRGE _0x2000D
                 ; 0001 0058         printDebug(" ");
                +
0006b0 efe2     +LDI R30 , LOW ( 2 * _0x20000 + ( 6 ) )
0006b1 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 6 ) )
                 	__POINTW1FN _0x20000,6
0006b2 940e 166b 	CALL SUBOPT_0x9
                 ; 0001 0059 
                 ; 0001 005A     }
                 ; 0001 005B 
                 ; 0001 005C     // fill hex gap with spaces if not full line //
                 ; 0001 005D     if (len < 16) {
                 _0x2000D:
0006b4 85a8      	LDD  R26,Y+8
0006b5 85b9      	LDD  R27,Y+8+1
0006b6 9750      	SBIW R26,16
0006b7 f49c      	BRGE _0x2000E
                 ; 0001 005E         gap = 16 - len;
0006b8 85a8      	LDD  R26,Y+8
0006b9 85b9      	LDD  R27,Y+8+1
0006ba e1e0      	LDI  R30,LOW(16)
0006bb e0f0      	LDI  R31,HIGH(16)
0006bc 1bea      	SUB  R30,R26
0006bd 0bfb      	SBC  R31,R27
0006be 019f      	MOVW R18,R30
                 ; 0001 005F         for (i = 0; i < gap; i++) {
                +
0006bf e000     +LDI R16 , LOW ( 0 )
0006c0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20010:
                +
0006c1 1702     +CP R16 , R18
0006c2 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
0006c3 f43c      	BRGE _0x20011
                 ; 0001 0060             printDebug("   ");
                +
0006c4 efe0     +LDI R30 , LOW ( 2 * _0x20000 + ( 4 ) )
0006c5 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 4 ) )
                 	__POINTW1FN _0x20000,4
0006c6 940e 166b 	CALL SUBOPT_0x9
                 ; 0001 0061 
                 ; 0001 0062         }
                +
0006c8 5f0f     +SUBI R16 , LOW ( - 1 )
0006c9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0006ca cff6      	RJMP _0x20010
                 _0x20011:
                 ; 0001 0063     }
                 ; 0001 0064     printDebug("   ");
                 _0x2000E:
                +
0006cb efe0     +LDI R30 , LOW ( 2 * _0x20000 + ( 4 ) )
0006cc e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 4 ) )
                 	__POINTW1FN _0x20000,4
0006cd 940e 166b 	CALL SUBOPT_0x9
                 ; 0001 0065 
                 ; 0001 0066 
                 ; 0001 0067     // ascii (if printable) //
                 ; 0001 0068     ch = payload;
                +
0006cf 854a     +LDD R20 , Y + 10
0006d0 855b     +LDD R21 , Y + 10 + 1
                 	__GETWRS 20,21,10
                 ; 0001 0069     for(i = 0; i < len; i++) {
                +
0006d1 e000     +LDI R16 , LOW ( 0 )
0006d2 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20013:
0006d3 85e8      	LDD  R30,Y+8
0006d4 85f9      	LDD  R31,Y+8+1
0006d5 170e      	CP   R16,R30
0006d6 071f      	CPC  R17,R31
0006d7 f4a4      	BRGE _0x20014
                 ; 0001 006A         if (isprint(*ch)){
0006d8 01da      	MOVW R26,R20
0006d9 91ac      	LD   R26,X
0006da 940e 160c 	CALL _isprint
0006dc 30e0      	CPI  R30,0
0006dd f029      	BREQ _0x20015
                 ; 0001 006B             printDebug("%c", *ch);
                +
0006de efea     +LDI R30 , LOW ( 2 * _0x20000 + ( 14 ) )
0006df e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 14 ) )
                 	__POINTW1FN _0x20000,14
0006e0 940e 16de 	CALL SUBOPT_0x1F
                 ; 0001 006C 
                 ; 0001 006D         }
                 ; 0001 006E         else{
0006e2 c004      	RJMP _0x20016
                 _0x20015:
                 ; 0001 006F             printDebug(".");
                +
0006e3 efed     +LDI R30 , LOW ( 2 * _0x20000 + ( 17 ) )
0006e4 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 17 ) )
                 	__POINTW1FN _0x20000,17
0006e5 940e 166b 	CALL SUBOPT_0x9
                 ; 0001 0070 
                 ; 0001 0071         }
                 _0x20016:
                 ; 0001 0072         ch++;
                +
0006e7 5f4f     +SUBI R20 , LOW ( - 1 )
0006e8 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0001 0073     }
                +
0006e9 5f0f     +SUBI R16 , LOW ( - 1 )
0006ea 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0006eb cfe7      	RJMP _0x20013
                 _0x20014:
                 ; 0001 0074 
                 ; 0001 0075     printDebug("\r\n");
                +
0006ec efef     +LDI R30 , LOW ( 2 * _0x20000 + ( 19 ) )
0006ed e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 19 ) )
                 	__POINTW1FN _0x20000,19
0006ee 940e 166b 	CALL SUBOPT_0x9
                 ; 0001 0076     return;
0006f0 940e 1d13 	CALL __LOADLOCR6
0006f2 962c      	ADIW R28,12
0006f3 9508      	RET
                 ; 0001 0077 }
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <timer.h>
                 ;#include <debug.h>
                 ;#include <int_protocol.h>
                 ;#include <initial_system.h>
                 ;
                 ;TIMER baseCounter = 0;    // -- increase continually by 1 second timer. use for timer comparison -- //
                 ;uint8_t pressedBTCounter = 0;
                 ;uint8_t _FlagBT = 0;
                 ;uint8_t _Flag05INT = 0;
                 ;uint8_t _Flag0001INT = 0;
                 ;uint8_t _BlinkLED_1Hz = 0;
                 ;
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/******************************* Software Timer Support ******************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;
                 ;/* ================================================================================= */
                 ;
                 ;/* ================================================================================= */
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/********************************* Hardware Support **********************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;// Timer 0 overflow interrupt service routine (1 ms.)
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0002 0021 interrupt [17] void timer0_ovf_isr(void) {
                 
                 	.CSEG
                 _timer0_ovf_isr:
0006f4 93aa      	ST   -Y,R26
0006f5 93ea      	ST   -Y,R30
0006f6 b7ef      	IN   R30,SREG
0006f7 93ea      	ST   -Y,R30
                 ; 0002 0022 
                 ; 0002 0023     // Reinitialize Timer 0 value
                 ; 0002 0024     TCNT0 = 0xD7;
0006f8 ede7      	LDI  R30,LOW(215)
0006f9 bfe2      	OUT  0x32,R30
                 ; 0002 0025     // Place your code here
                 ; 0002 0026     if(SWITCH == TURN_ON /*&& _pired*/) {
0006fa 91a0 0600 	LDS  R26,_SWITCH
0006fc 30a1      	CPI  R26,LOW(0x1)
0006fd f419      	BRNE _0x40003
                 ; 0002 0027         _Flag0001INT = 1;
0006fe e0e1      	LDI  R30,LOW(1)
0006ff 93e0 089c 	STS  __Flag0001INT,R30
                 ; 0002 0028     }
                 ; 0002 0029 
                 ; 0002 002A }
                 _0x40003:
000701 c03e      	RJMP _0x40015
                 ;/* ================================================================================= */
                 ;// Timer1 overflow interrupt service routine (1 sec.)
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void) {
                 ; 0002 002D interrupt [15] void timer1_ovf_isr(void) {
                 _timer1_ovf_isr:
000702 936a      	ST   -Y,R22
000703 937a      	ST   -Y,R23
000704 93aa      	ST   -Y,R26
000705 93ba      	ST   -Y,R27
000706 93ea      	ST   -Y,R30
000707 93fa      	ST   -Y,R31
000708 b7ef      	IN   R30,SREG
000709 93ea      	ST   -Y,R30
                 ; 0002 002E 
                 ; 0002 002F     //char i;
                 ; 0002 0030 
                 ; 0002 0031     // Reinitialize Timer1 value
                 ; 0002 0032     TCNT1H = 0x57;
00070a e5e7      	LDI  R30,LOW(87)
00070b bded      	OUT  0x2D,R30
                 ; 0002 0033     TCNT1L = 0x40;
00070c e4e0      	LDI  R30,LOW(64)
00070d bdec      	OUT  0x2C,R30
                 ; 0002 0034 
                 ; 0002 0035     baseCounter++;
00070e e9a5      	LDI  R26,LOW(_baseCounter)
00070f e0b8      	LDI  R27,HIGH(_baseCounter)
000710 940e 1cb0 	CALL __GETD1P_INC
                +
000712 5fef     +SUBI R30 , LOW ( - 1 )
000713 4fff     +SBCI R31 , HIGH ( - 1 )
000714 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000715 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
000716 940e 1cba 	CALL __PUTDP1_DEC
                 ; 0002 0036 }
000718 91e9      	LD   R30,Y+
000719 bfef      	OUT  SREG,R30
00071a 91f9      	LD   R31,Y+
00071b 91e9      	LD   R30,Y+
00071c 91b9      	LD   R27,Y+
00071d 91a9      	LD   R26,Y+
00071e 9179      	LD   R23,Y+
00071f 9169      	LD   R22,Y+
000720 9518      	RETI
                 ;/* ================================================================================= */
                 ;// Timer3 overflow interrupt service routine (0.5 sec.)
                 ;interrupt [TIM3_OVF] void timer3_ovf_isr(void) {
                 ; 0002 0039 interrupt [30] void timer3_ovf_isr(void) {
                 _timer3_ovf_isr:
000721 93aa      	ST   -Y,R26
000722 93ea      	ST   -Y,R30
000723 b7ef      	IN   R30,SREG
000724 93ea      	ST   -Y,R30
                 ; 0002 003A 
                 ; 0002 003B     // Reinitialize Timer3 value
                 ; 0002 003C     TCNT3H = 0xAB;
000725 940e 16e6 	CALL SUBOPT_0x20
                 ; 0002 003D     TCNT3L = 0xA0;
                 ; 0002 003E 
                 ; 0002 003F     /*----- Count time pressed button -----*/
                 ; 0002 0040     if(_FlagBT) {
000727 91e0 089a 	LDS  R30,__FlagBT
000729 30e0      	CPI  R30,0
00072a f029      	BREQ _0x40004
                 ; 0002 0041         pressedBTCounter++;
00072b 91e0 0899 	LDS  R30,_pressedBTCounter
00072d 5fef      	SUBI R30,-LOW(1)
00072e 93e0 0899 	STS  _pressedBTCounter,R30
                 ; 0002 0042     }
                 ; 0002 0043 
                 ; 0002 0044     /*----- 0.5 millisecond flag -----*/
                 ; 0002 0045     if(SWITCH == TURN_ON /*&& _pired*/) {
                 _0x40004:
000730 91a0 0600 	LDS  R26,_SWITCH
000732 30a1      	CPI  R26,LOW(0x1)
000733 f419      	BRNE _0x40005
                 ; 0002 0046         _Flag05INT = 1;
000734 e0e1      	LDI  R30,LOW(1)
000735 93e0 089b 	STS  __Flag05INT,R30
                 ; 0002 0047     }
                 ; 0002 0048 
                 ; 0002 0049     /*----- Blink Power LED 1 Hz -----*/
                 ; 0002 004A     if(_BlinkLED_1Hz) {
                 _0x40005:
000737 91e0 089d 	LDS  R30,__BlinkLED_1Hz
000739 30e0      	CPI  R30,0
00073a f029      	BREQ _0x40006
                 ; 0002 004B         if(LED_STAT_PIN == 1) {
00073b 9b9f      	SBIS 0x13,7
00073c c002      	RJMP _0x40007
                 ; 0002 004C             LED_STAT_ON;
00073d 98af      	CBI  0x15,7
                 ; 0002 004D         }else {
00073e c001      	RJMP _0x4000A
                 _0x40007:
                 ; 0002 004E             LED_STAT_OFF;
00073f 9aaf      	SBI  0x15,7
                 ; 0002 004F         }
                 _0x4000A:
                 ; 0002 0050     }
                 ; 0002 0051 
                 ; 0002 0052 }
                 _0x40006:
                 _0x40015:
000740 91e9      	LD   R30,Y+
000741 bfef      	OUT  SREG,R30
000742 91e9      	LD   R30,Y+
000743 91a9      	LD   R26,Y+
000744 9518      	RETI
                 ;/* ================================================================================= */
                 ;void init_timer(void) {
                 ; 0002 0054 void init_timer(void) {
                 _init_timer:
                 ; 0002 0055 
                 ; 0002 0056     // Timer/Counter 0 initialization (1 ms.)
                 ; 0002 0057     // Clock source: System Clock
                 ; 0002 0058     // Clock value: 43.200 kHz
                 ; 0002 0059     // Mode: Normal top=0xFF
                 ; 0002 005A     // OC0 output: Disconnected
                 ; 0002 005B     ASSR=0x00;
000745 e0e0      	LDI  R30,LOW(0)
000746 bfe0      	OUT  0x30,R30
                 ; 0002 005C     TCCR0=0x06;
000747 e0e6      	LDI  R30,LOW(6)
000748 bfe3      	OUT  0x33,R30
                 ; 0002 005D     TCNT0=0xD7;
000749 ede7      	LDI  R30,LOW(215)
00074a bfe2      	OUT  0x32,R30
                 ; 0002 005E     OCR0=0x00;
00074b e0e0      	LDI  R30,LOW(0)
00074c bfe1      	OUT  0x31,R30
                 ; 0002 005F 
                 ; 0002 0060     // Timer/Counter 1 initialization (1 sec.)
                 ; 0002 0061     // Clock source: System Clock
                 ; 0002 0062     // Clock value: 43.200 kHz
                 ; 0002 0063     // Mode: Normal top=0xFFFF
                 ; 0002 0064     // OC1A output: Discon.
                 ; 0002 0065     // OC1B output: Discon.
                 ; 0002 0066     // OC1C output: Discon.
                 ; 0002 0067     // Noise Canceler: Off
                 ; 0002 0068     // Input Capture on Falling Edge
                 ; 0002 0069     // Timer1 Overflow Interrupt: On
                 ; 0002 006A     // Input Capture Interrupt: Off
                 ; 0002 006B     // Compare A Match Interrupt: Off
                 ; 0002 006C     // Compare B Match Interrupt: Off
                 ; 0002 006D     // Compare C Match Interrupt: Off
                 ; 0002 006E     TCCR1A=0x00;
00074d bdef      	OUT  0x2F,R30
                 ; 0002 006F     TCCR1B=0x04;
00074e e0e4      	LDI  R30,LOW(4)
00074f bdee      	OUT  0x2E,R30
                 ; 0002 0070     TCNT1H=0x57;
000750 e5e7      	LDI  R30,LOW(87)
000751 bded      	OUT  0x2D,R30
                 ; 0002 0071     TCNT1L=0x40;
000752 e4e0      	LDI  R30,LOW(64)
000753 bdec      	OUT  0x2C,R30
                 ; 0002 0072     ICR1H=0x00;
000754 e0e0      	LDI  R30,LOW(0)
000755 bde7      	OUT  0x27,R30
                 ; 0002 0073     ICR1L=0x00;
000756 bde6      	OUT  0x26,R30
                 ; 0002 0074     OCR1AH=0x00;
000757 bdeb      	OUT  0x2B,R30
                 ; 0002 0075     OCR1AL=0x00;
000758 bdea      	OUT  0x2A,R30
                 ; 0002 0076     OCR1BH=0x00;
000759 bde9      	OUT  0x29,R30
                 ; 0002 0077     OCR1BL=0x00;
00075a bde8      	OUT  0x28,R30
                 ; 0002 0078     OCR1CH=0x00;
00075b 93e0 0079 	STS  121,R30
                 ; 0002 0079     OCR1CL=0x00;
00075d 93e0 0078 	STS  120,R30
                 ; 0002 007A 
                 ; 0002 007B     // Timer/Counter 2 initialization
                 ; 0002 007C     // Clock source: System Clock
                 ; 0002 007D     // Clock value: Timer2 Stopped
                 ; 0002 007E     // Mode: Normal top=0xFF
                 ; 0002 007F     // OC2 output: Disconnected
                 ; 0002 0080     TCCR2=0x00;
00075f bde5      	OUT  0x25,R30
                 ; 0002 0081     TCNT2=0x00;
000760 bde4      	OUT  0x24,R30
                 ; 0002 0082     OCR2=0x00;
000761 bde3      	OUT  0x23,R30
                 ; 0002 0083 
                 ; 0002 0084     // Timer/Counter 3 initialization (0.5 sec.)
                 ; 0002 0085     // Clock source: System Clock
                 ; 0002 0086     // Clock value: 43.200 kHz
                 ; 0002 0087     // Mode: Normal top=0xFFFF
                 ; 0002 0088     // OC3A output: Discon.
                 ; 0002 0089     // OC3B output: Discon.
                 ; 0002 008A     // OC3C output: Discon.
                 ; 0002 008B     // Noise Canceler: Off
                 ; 0002 008C     // Input Capture on Falling Edge
                 ; 0002 008D     // Timer3 Overflow Interrupt: On
                 ; 0002 008E     // Input Capture Interrupt: Off
                 ; 0002 008F     // Compare A Match Interrupt: Off
                 ; 0002 0090     // Compare B Match Interrupt: Off
                 ; 0002 0091     // Compare C Match Interrupt: Off
                 ; 0002 0092     TCCR3A=0x00;
000762 93e0 008b 	STS  139,R30
                 ; 0002 0093     TCCR3B=0x04;
000764 e0e4      	LDI  R30,LOW(4)
000765 93e0 008a 	STS  138,R30
                 ; 0002 0094     TCNT3H=0xAB;
000767 940e 16e6 	CALL SUBOPT_0x20
                 ; 0002 0095     TCNT3L=0xA0;
                 ; 0002 0096     ICR3H=0x00;
000769 e0e0      	LDI  R30,LOW(0)
00076a 93e0 0081 	STS  129,R30
                 ; 0002 0097     ICR3L=0x00;
00076c 93e0 0080 	STS  128,R30
                 ; 0002 0098     OCR3AH=0x00;
00076e 93e0 0087 	STS  135,R30
                 ; 0002 0099     OCR3AL=0x00;
000770 93e0 0086 	STS  134,R30
                 ; 0002 009A     OCR3BH=0x00;
000772 93e0 0085 	STS  133,R30
                 ; 0002 009B     OCR3BL=0x00;
000774 93e0 0084 	STS  132,R30
                 ; 0002 009C     OCR3CH=0x00;
000776 93e0 0083 	STS  131,R30
                 ; 0002 009D     OCR3CL=0x00;
000778 93e0 0082 	STS  130,R30
                 ; 0002 009E 
                 ; 0002 009F     // Watchdog Timer initialization
                 ; 0002 00A0     // Watchdog Timer Prescaler: OSC/2048k
                 ; 0002 00A1     #pragma optsize-
                 ; 0002 00A2     WDTCR=0x1F;
00077a e1ef      	LDI  R30,LOW(31)
00077b bde1      	OUT  0x21,R30
                 ; 0002 00A3     WDTCR=0x0F;
00077c e0ef      	LDI  R30,LOW(15)
00077d bde1      	OUT  0x21,R30
                 ; 0002 00A4     #ifdef _OPTIMIZE_SIZE_
                 ; 0002 00A5     #pragma optsize+
                 ; 0002 00A6     #endif
                 ; 0002 00A7 
                 ; 0002 00A8     // Timer/Counter 0 Interrupt(s) initialization
                 ; 0002 00A9     TIMSK = 0x00;
00077e e0e0      	LDI  R30,LOW(0)
00077f bfe7      	OUT  0x37,R30
                 ; 0002 00AA 
                 ; 0002 00AB     // Timer/Counter 1 Interrupt(s) initialization
                 ; 0002 00AC     TIMSK = 0x00;
000780 bfe7      	OUT  0x37,R30
                 ; 0002 00AD 
                 ; 0002 00AE     // Timer/Counter 3 Interrupt(s) initialization
                 ; 0002 00AF     ETIMSK = 0x00;
000781 93e0 007d 	STS  125,R30
                 ; 0002 00B0 
                 ; 0002 00B1 }
000783 9508      	RET
                 ;/* ================================================================================= */
                 ;void enable_timerOverflow(int ch) {
                 ; 0002 00B3 void enable_timerOverflow(int ch) {
                 _enable_timerOverflow:
                 ; 0002 00B4 
                 ; 0002 00B5     /*-------------- enable timer ---------------*/
                 ; 0002 00B6     switch(ch){
000784 940e 1615 	CALL SUBOPT_0x0
                 ;	ch -> Y+0
                 ; 0002 00B7         case 0: // Timer/Counter 0 Interrupt(s) initialization
000786 f421      	BRNE _0x40010
                 ; 0002 00B8                 TIMSK |= 0x01;
000787 b7e7      	IN   R30,0x37
000788 60e1      	ORI  R30,1
000789 bfe7      	OUT  0x37,R30
                 ; 0002 00B9                 break;
00078a c015      	RJMP _0x4000F
                 ; 0002 00BA         case 1: // Timer/Counter 1 Interrupt(s) initialization
                 _0x40010:
00078b 30e1      	CPI  R30,LOW(0x1)
00078c e0a0      	LDI  R26,HIGH(0x1)
00078d 07fa      	CPC  R31,R26
00078e f421      	BRNE _0x40011
                 ; 0002 00BB                 TIMSK |= 0x04;
00078f b7e7      	IN   R30,0x37
000790 60e4      	ORI  R30,4
000791 bfe7      	OUT  0x37,R30
                 ; 0002 00BC                 break;
000792 c00d      	RJMP _0x4000F
                 ; 0002 00BD         case 2: // Timer/Counter 2 Interrupt(s) initialization
                 _0x40011:
000793 30e2      	CPI  R30,LOW(0x2)
000794 e0a0      	LDI  R26,HIGH(0x2)
000795 07fa      	CPC  R31,R26
000796 f049      	BREQ _0x4000F
                 ; 0002 00BE                 //TIMSK2=0x01;
                 ; 0002 00BF                 break;
                 ; 0002 00C0         case 3: // Timer/Counter 3 Interrupt(s) initialization
000797 30e3      	CPI  R30,LOW(0x3)
000798 e0a0      	LDI  R26,HIGH(0x3)
000799 07fa      	CPC  R31,R26
00079a f429      	BRNE _0x40013
                 ; 0002 00C1                 ETIMSK |= 0x04;
00079b 91e0 007d 	LDS  R30,125
00079d 60e4      	ORI  R30,4
00079e 93e0 007d 	STS  125,R30
                 ; 0002 00C2                 break;
                 ; 0002 00C3         case 4: // Timer/Counter 4 Interrupt(s) initialization
                 _0x40013:
                 ; 0002 00C4                 //TIMSK4=0x01;
                 ; 0002 00C5                 break;
                 ; 0002 00C6     }
                 _0x4000F:
                 ; 0002 00C7     // Global enable interrupts
                 ; 0002 00C8     #asm("sei")
0007a0 9478      	sei
                 ; 0002 00C9 }
0007a1 940c 08d2 	JMP  _0x20C0010
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;
                 ;// UART 1
                 ;uint8_t rx_buffer1[RX_BUFFER_SIZE1];                                       // USART0 Receiver buffer
                 ;uint16_t rx_wr_index1, rx_rd_index1, rx_counter1;
                 ;bit rx_buffer_overflow1;                                                // This flag is set on USART0 Receiver buffer overflow
                 ;
                 ;// UART 0
                 ;flash uint8_t charHeader            = '$';
                 ;flash uint8_t charTerminate         = '#';
                 ;uint8_t _FlagPackageTerminate0      = 0;
                 ;uint8_t rxPackageIndex0;
                 ;uint8_t rxPackage0[RX_BUFFER_SIZE0];
                 ;uint8_t rxPackageIndexCount0;
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;#else
                 ;#endif
                 ;
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void) {
                 ; 0003 001B interrupt [19] void usart0_rx_isr(void) {
                 
                 	.CSEG
                 _usart0_rx_isr:
0007a3 940e 16ed 	CALL SUBOPT_0x21
                 ; 0003 001C 
                 ; 0003 001D     uint8_t status, data;
                 ; 0003 001E     status  = UCSR0A;
                 ;	status -> R17
                 ;	data -> R16
0007a5 b11b      	IN   R17,11
                 ; 0003 001F     data    = UDR0;
0007a6 b10c      	IN   R16,12
                 ; 0003 0020 
                 ; 0003 0021     if((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
0007a7 2fe1      	MOV  R30,R17
0007a8 71ec      	ANDI R30,LOW(0x1C)
0007a9 f4c1      	BRNE _0x60003
                 ; 0003 0022 
                 ; 0003 0023         putchar0(data);
0007aa 2fa0      	MOV  R26,R16
0007ab d017      	RCALL _putchar0
                 ; 0003 0024         // Detect Package Header
                 ; 0003 0025         if(data == charHeader) {
0007ac 3204      	CPI  R16,36
0007ad f409      	BRNE _0x60004
                 ; 0003 0026             rxPackageIndex0 = 0;
0007ae 24dd      	CLR  R13
                 ; 0003 0027         }
                 ; 0003 0028 
                 ; 0003 0029         rxPackage0[rxPackageIndex0++] = data;
                 _0x60004:
0007af 2ded      	MOV  R30,R13
0007b0 94d3      	INC  R13
0007b1 e0f0      	LDI  R31,0
0007b2 5fe6      	SUBI R30,LOW(-_rxPackage0)
0007b3 4ff9      	SBCI R31,HIGH(-_rxPackage0)
0007b4 8300      	ST   Z,R16
                 ; 0003 002A 
                 ; 0003 002B         if(rxPackageIndex0 >= RX_BUFFER_SIZE0) {
0007b5 e2e0      	LDI  R30,LOW(32)
0007b6 16de      	CP   R13,R30
0007b7 f008      	BRLO _0x60005
                 ; 0003 002C             rxPackageIndex0 = 0;
0007b8 24dd      	CLR  R13
                 ; 0003 002D         }
                 ; 0003 002E 
                 ; 0003 002F         if(data == charTerminate) {
                 _0x60005:
0007b9 3203      	CPI  R16,35
0007ba f439      	BRNE _0x60006
                 ; 0003 0030             rxPackageIndexCount0 = (rxPackageIndex0 - 1);
0007bb 2ded      	MOV  R30,R13
0007bc 50e1      	SUBI R30,LOW(1)
0007bd 2ece      	MOV  R12,R30
                 ; 0003 0031             rxPackageIndex0 = 0;
0007be 24dd      	CLR  R13
                 ; 0003 0032             _FlagPackageTerminate0 = 1;
0007bf e0e1      	LDI  R30,LOW(1)
0007c0 93e0 0609 	STS  __FlagPackageTerminate0,R30
                 ; 0003 0033         }
                 ; 0003 0034     }
                 _0x60006:
                 ; 0003 0035 }
                 _0x60003:
0007c2 c036      	RJMP _0x6003E
                 ;/* ================================================================================= */
                 ;// Write a character to the USART0 Transmitter
                 ;#pragma used+
                 ;void putchar0(uint8_t c) {
                 ; 0003 0039 void putchar0(uint8_t c) {
                 _putchar0:
                 ; 0003 003A     while((UCSR0A & DATA_REGISTER_EMPTY) == 0);
0007c3 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x60007:
0007c4 9b5d      	SBIS 0xB,5
0007c5 cffe      	RJMP _0x60007
                 ; 0003 003B     UDR0 = c;
0007c6 81e8      	LD   R30,Y
0007c7 b9ec      	OUT  0xC,R30
                 ; 0003 003C }
0007c8 c048      	RJMP _0x20C0011
                 ;#pragma used-
                 ;
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void) {
                 ; 0003 003F interrupt [31] void usart1_rx_isr(void) {
                 _usart1_rx_isr:
0007c9 940e 16ed 	CALL SUBOPT_0x21
                 ; 0003 0040 
                 ; 0003 0041     uint8_t status, data;
                 ; 0003 0042     status  = UCSR1A;
                 ;	status -> R17
                 ;	data -> R16
0007cb 9110 009b 	LDS  R17,155
                 ; 0003 0043     data    = UDR1;
0007cd 9100 009c 	LDS  R16,156
                 ; 0003 0044 
                 ; 0003 0045     if((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
0007cf 2fe1      	MOV  R30,R17
0007d0 71ec      	ANDI R30,LOW(0x1C)
0007d1 f539      	BRNE _0x6000A
                 ; 0003 0046         rx_buffer1[rx_wr_index1++] = data;
0007d2 01f5      	MOVW R30,R10
0007d3 9631      	ADIW R30,1
0007d4 015f      	MOVW R10,R30
0007d5 9731      	SBIW R30,1
0007d6 5de0      	SUBI R30,LOW(-_rx_buffer1)
0007d7 4ff9      	SBCI R31,HIGH(-_rx_buffer1)
0007d8 8300      	ST   Z,R16
                 ; 0003 0047          //printDebug("%02X ",data);
                 ; 0003 0048         if (rx_wr_index1 == RX_BUFFER_SIZE1)
0007d9 e0e0      	LDI  R30,LOW(512)
0007da e0f2      	LDI  R31,HIGH(512)
0007db 15ea      	CP   R30,R10
0007dc 05fb      	CPC  R31,R11
0007dd f411      	BRNE _0x6000B
                 ; 0003 0049             rx_wr_index1 = 0;
0007de 24aa      	CLR  R10
0007df 24bb      	CLR  R11
                 ; 0003 004A         if (++rx_counter1 == RX_BUFFER_SIZE1) {
                 _0x6000B:
0007e0 e2ae      	LDI  R26,LOW(_rx_counter1)
0007e1 e0b6      	LDI  R27,HIGH(_rx_counter1)
0007e2 940e 16fd 	CALL SUBOPT_0x22
0007e4 30e0      	CPI  R30,LOW(0x200)
0007e5 e0a2      	LDI  R26,HIGH(0x200)
0007e6 07fa      	CPC  R31,R26
0007e7 f489      	BRNE _0x6000C
                 ; 0003 004B             printDebug("WARNING : UART0 BUFFER OVERFLOW %d\r\n", rx_counter1);
                +
0007e8 e0e2     +LDI R30 , LOW ( 2 * _0x60000 + ( 0 ) )
0007e9 e0f3     +LDI R31 , HIGH ( 2 * _0x60000 + ( 0 ) )
                 	__POINTW1FN _0x60000,0
0007ea 93fa      	ST   -Y,R31
0007eb 93ea      	ST   -Y,R30
0007ec 91e0 062e 	LDS  R30,_rx_counter1
0007ee 91f0 062f 	LDS  R31,_rx_counter1+1
0007f0 940e 1703 	CALL SUBOPT_0x23
                 ; 0003 004C             rx_counter1 = 0;
0007f2 e0e0      	LDI  R30,LOW(0)
0007f3 93e0 062e 	STS  _rx_counter1,R30
0007f5 93e0 062f 	STS  _rx_counter1+1,R30
                 ; 0003 004D             rx_buffer_overflow1 = 1;
0007f7 9468      	SET
0007f8 f820      	BLD  R2,0
                 ; 0003 004E         }
                 ; 0003 004F     }
                 _0x6000C:
                 ; 0003 0050 }
                 _0x6000A:
                 _0x6003E:
0007f9 9109      	LD   R16,Y+
0007fa 9119      	LD   R17,Y+
0007fb 91e9      	LD   R30,Y+
0007fc bfef      	OUT  SREG,R30
0007fd 91f9      	LD   R31,Y+
0007fe 91e9      	LD   R30,Y+
0007ff 91b9      	LD   R27,Y+
000800 91a9      	LD   R26,Y+
000801 9199      	LD   R25,Y+
000802 9189      	LD   R24,Y+
000803 9179      	LD   R23,Y+
000804 9169      	LD   R22,Y+
000805 90f9      	LD   R15,Y+
000806 9019      	LD   R1,Y+
000807 9009      	LD   R0,Y+
000808 9518      	RETI
                 ;
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART1 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void) {
                 ; 0003 0057 char getchar(void) {
                 ; 0003 0058 
                 ; 0003 0059     uint8_t data;
                 ; 0003 005A 
                 ; 0003 005B     while (rx_counter1 == 0);
                 ;	data -> R17
                 ; 0003 005C     data = rx_buffer1[rx_rd_index1++];
                 ; 0003 005D     if(rx_rd_index1 == RX_BUFFER_SIZE1)
                 ; 0003 005E         rx_rd_index1 = 0;
                 ; 0003 005F     #asm("cli")
                 ; 0003 0060     --rx_counter1;
                 ; 0003 0061     #asm("sei")
                 ; 0003 0062     return data;
                 ; 0003 0063 }
                 ;
                 ;
                 ;#pragma used-
                 ;// Write a character to the USART1 Transmitter
                 ;#pragma used+
                 ;void putchar1(uint8_t c) {
                 ; 0003 0069 void putchar1(uint8_t c) {
                 _putchar1:
                 ; 0003 006A 
                 ; 0003 006B     while((UCSR1A & DATA_REGISTER_EMPTY) == 0);
000809 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x60011:
00080a 91e0 009b 	LDS  R30,155
00080c 72e0      	ANDI R30,LOW(0x20)
00080d f3e1      	BREQ _0x60011
                 ; 0003 006C     UDR1 = c;
00080e 81e8      	LD   R30,Y
00080f 93e0 009c 	STS  156,R30
                 ; 0003 006D }
                 _0x20C0011:
000811 9621      	ADIW R28,1
000812 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;
                 ;void send_uart(uint8_t port, uint8_t *buffer) {
                 ; 0003 0071 void send_uart(uint8_t port, uint8_t *buffer) {
                 _send_uart:
                 ; 0003 0072 
                 ; 0003 0073     uint8_t i = 0;
                 ; 0003 0074 
                 ; 0003 0075     switch(port) {
000813 93ba      	ST   -Y,R27
000814 93aa      	ST   -Y,R26
000815 931a      	ST   -Y,R17
                 ;	port -> Y+3
                 ;	*buffer -> Y+1
                 ;	i -> R17
000816 e010      	LDI  R17,0
000817 81eb      	LDD  R30,Y+3
000818 e0f0      	LDI  R31,0
                 ; 0003 0076         case 0:
000819 9730      	SBIW R30,0
00081a f461      	BRNE _0x60017
                 ; 0003 0077             while(buffer[i] != 0) {
                 _0x60018:
00081b 940e 1706 	CALL SUBOPT_0x24
00081d 91ec      	LD   R30,X
00081e 30e0      	CPI  R30,0
00081f f031      	BREQ _0x6001A
                 ; 0003 0078                 putchar0(buffer[i]);
000820 940e 1706 	CALL SUBOPT_0x24
000822 91ac      	LD   R26,X
000823 df9f      	RCALL _putchar0
                 ; 0003 0079                 i++;
000824 5f1f      	SUBI R17,-1
                 ; 0003 007A             }
000825 cff5      	RJMP _0x60018
                 _0x6001A:
                 ; 0003 007B             break;
000826 c00f      	RJMP _0x60016
                 ; 0003 007C         case 1:
                 _0x60017:
000827 30e1      	CPI  R30,LOW(0x1)
000828 e0a0      	LDI  R26,HIGH(0x1)
000829 07fa      	CPC  R31,R26
00082a f459      	BRNE _0x60016
                 ; 0003 007D             while(buffer[i] != 0) {
                 _0x6001C:
00082b 940e 1706 	CALL SUBOPT_0x24
00082d 91ec      	LD   R30,X
00082e 30e0      	CPI  R30,0
00082f f031      	BREQ _0x6001E
                 ; 0003 007E                 putchar1(buffer[i]);
000830 940e 1706 	CALL SUBOPT_0x24
000832 91ac      	LD   R26,X
000833 dfd5      	RCALL _putchar1
                 ; 0003 007F                 i++;
000834 5f1f      	SUBI R17,-1
                 ; 0003 0080             }
000835 cff5      	RJMP _0x6001C
                 _0x6001E:
                 ; 0003 0081             break;
                 ; 0003 0082     }
                 _0x60016:
                 ; 0003 0083 }
000836 8118      	LDD  R17,Y+0
000837 c0c8      	RJMP _0x20C000F
                 ;
                 ;
                 ;void init_uart(uint8_t channel, uint32_t baud) {
                 ; 0003 0086 void init_uart(uint8_t channel, uint32_t baud) {
                 _init_uart:
                 ; 0003 0087 
                 ; 0003 0088     switch(channel) {
000838 940e 1cd3 	CALL __PUTPARD2
                 ;	channel -> Y+4
                 ;	baud -> Y+0
00083a 81ec      	LDD  R30,Y+4
00083b e0f0      	LDI  R31,0
                 ; 0003 0089     case 0:
00083c 9730      	SBIW R30,0
00083d f571      	BRNE _0x60022
                 ; 0003 008A         // USART0 initialization
                 ; 0003 008B         // FOSC = 11.0592 MHz
                 ; 0003 008C         // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0003 008D         // USART0 Receiver: On
                 ; 0003 008E         // USART0 Transmitter: On
                 ; 0003 008F         // USART0 Mode: Asynchronous
                 ; 0003 0090         // USART0 Baud Rate: 9600
                 ; 0003 0091         UCSR0A=0x00;
00083e e0e0      	LDI  R30,LOW(0)
00083f b9eb      	OUT  0xB,R30
                 ; 0003 0092         UCSR0B=0x98;
000840 e9e8      	LDI  R30,LOW(152)
000841 b9ea      	OUT  0xA,R30
                 ; 0003 0093         UCSR0C=0x06;
000842 e0e6      	LDI  R30,LOW(6)
000843 93e0 0095 	STS  149,R30
                 ; 0003 0094         UBRR0H=0x00;
000845 e0e0      	LDI  R30,LOW(0)
000846 93e0 0090 	STS  144,R30
                 ; 0003 0095         switch (baud) {
000848 940e 170c 	CALL SUBOPT_0x25
                 ; 0003 0096         case 2400:
00084a f411      	BRNE _0x60026
                 ; 0003 0097             UBRR0L = 0x1F;
00084b e1ef      	LDI  R30,LOW(31)
00084c c01d      	RJMP _0x6003A
                 ; 0003 0098             break;
                 ; 0003 0099         case 9600:
                 _0x60026:
00084d 940e 1716 	CALL SUBOPT_0x26
00084f f0c9      	BREQ _0x6003B
                 ; 0003 009A             UBRR0L = 0x47;
                 ; 0003 009B             break;
                 ; 0003 009C         case 14400:
000850 940e 171e 	CALL SUBOPT_0x27
000852 f411      	BRNE _0x60028
                 ; 0003 009D             UBRR0L = 0x2F;
000853 e2ef      	LDI  R30,LOW(47)
000854 c015      	RJMP _0x6003A
                 ; 0003 009E             break;
                 ; 0003 009F         case 19200:
                 _0x60028:
000855 940e 1726 	CALL SUBOPT_0x28
000857 f411      	BRNE _0x60029
                 ; 0003 00A0             UBRR0L = 0x23;
000858 e2e3      	LDI  R30,LOW(35)
000859 c010      	RJMP _0x6003A
                 ; 0003 00A1             break;
                 ; 0003 00A2         case 38400:
                 _0x60029:
00085a 940e 172e 	CALL SUBOPT_0x29
00085c f411      	BRNE _0x6002A
                 ; 0003 00A3             UBRR0L = 0x11;
00085d e1e1      	LDI  R30,LOW(17)
00085e c00b      	RJMP _0x6003A
                 ; 0003 00A4             break;
                 ; 0003 00A5         case 57600:
                 _0x6002A:
00085f 940e 1736 	CALL SUBOPT_0x2A
000861 f411      	BRNE _0x6002B
                 ; 0003 00A6             UBRR0L = 0x0B;
000862 e0eb      	LDI  R30,LOW(11)
000863 c006      	RJMP _0x6003A
                 ; 0003 00A7             break;
                 ; 0003 00A8         case 115200:
                 _0x6002B:
000864 940e 173e 	CALL SUBOPT_0x2B
000866 f411      	BRNE _0x6002D
                 ; 0003 00A9             UBRR0L = 0x05;
000867 e0e5      	LDI  R30,LOW(5)
000868 c001      	RJMP _0x6003A
                 ; 0003 00AA             break;
                 ; 0003 00AB         default:
                 _0x6002D:
                 ; 0003 00AC             UBRR0L = 0x47;       // default baudrate is 9600
                 _0x6003B:
000869 e4e7      	LDI  R30,LOW(71)
                 _0x6003A:
00086a b9e9      	OUT  0x9,R30
                 ; 0003 00AD         }
                 ; 0003 00AE         break;
00086b c034      	RJMP _0x60021
                 ; 0003 00AF     case 1:
                 _0x60022:
00086c 30e1      	CPI  R30,LOW(0x1)
00086d e0a0      	LDI  R26,HIGH(0x1)
00086e 07fa      	CPC  R31,R26
00086f f581      	BRNE _0x60021
                 ; 0003 00B0         // USART1 initialization
                 ; 0003 00B1         // FOSC = 11.0592 MHz
                 ; 0003 00B2         // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0003 00B3         // USART1 Receiver: On
                 ; 0003 00B4         // USART1 Transmitter: On
                 ; 0003 00B5         // USART1 Mode: Asynchronous
                 ; 0003 00B6         // USART1 Baud Rate: 9600
                 ; 0003 00B7         UCSR1A=0x00;
000870 e0e0      	LDI  R30,LOW(0)
000871 93e0 009b 	STS  155,R30
                 ; 0003 00B8         UCSR1B=0x98;
000873 e9e8      	LDI  R30,LOW(152)
000874 93e0 009a 	STS  154,R30
                 ; 0003 00B9         UCSR1C=0x06;
000876 e0e6      	LDI  R30,LOW(6)
000877 93e0 009d 	STS  157,R30
                 ; 0003 00BA         UBRR1H=0x00;
000879 e0e0      	LDI  R30,LOW(0)
00087a 93e0 0098 	STS  152,R30
                 ; 0003 00BB         switch ( baud ) {
00087c 940e 170c 	CALL SUBOPT_0x25
                 ; 0003 00BC         case 2400:
00087e f411      	BRNE _0x60032
                 ; 0003 00BD             UBRR1L = 0x1F;
00087f e1ef      	LDI  R30,LOW(31)
000880 c01d      	RJMP _0x6003C
                 ; 0003 00BE             break;
                 ; 0003 00BF         case 9600:
                 _0x60032:
000881 940e 1716 	CALL SUBOPT_0x26
000883 f0c9      	BREQ _0x6003D
                 ; 0003 00C0             UBRR1L = 0x47;
                 ; 0003 00C1             break;
                 ; 0003 00C2         case 14400:
000884 940e 171e 	CALL SUBOPT_0x27
000886 f411      	BRNE _0x60034
                 ; 0003 00C3             UBRR1L = 0x2F;
000887 e2ef      	LDI  R30,LOW(47)
000888 c015      	RJMP _0x6003C
                 ; 0003 00C4             break;
                 ; 0003 00C5         case 19200:
                 _0x60034:
000889 940e 1726 	CALL SUBOPT_0x28
00088b f411      	BRNE _0x60035
                 ; 0003 00C6             UBRR1L = 0x23;
00088c e2e3      	LDI  R30,LOW(35)
00088d c010      	RJMP _0x6003C
                 ; 0003 00C7             break;
                 ; 0003 00C8         case 38400:
                 _0x60035:
00088e 940e 172e 	CALL SUBOPT_0x29
000890 f411      	BRNE _0x60036
                 ; 0003 00C9             UBRR1L = 0x11;
000891 e1e1      	LDI  R30,LOW(17)
000892 c00b      	RJMP _0x6003C
                 ; 0003 00CA             break;
                 ; 0003 00CB         case 57600:
                 _0x60036:
000893 940e 1736 	CALL SUBOPT_0x2A
000895 f411      	BRNE _0x60037
                 ; 0003 00CC             UBRR1L = 0x0B;
000896 e0eb      	LDI  R30,LOW(11)
000897 c006      	RJMP _0x6003C
                 ; 0003 00CD             break;
                 ; 0003 00CE         case 115200:
                 _0x60037:
000898 940e 173e 	CALL SUBOPT_0x2B
00089a f411      	BRNE _0x60039
                 ; 0003 00CF             UBRR1L = 0x05;
00089b e0e5      	LDI  R30,LOW(5)
00089c c001      	RJMP _0x6003C
                 ; 0003 00D0             break;
                 ; 0003 00D1         default:
                 _0x60039:
                 ; 0003 00D2             UBRR1L = 0x47;       // default baudrate is 9600
                 _0x6003D:
00089d e4e7      	LDI  R30,LOW(71)
                 _0x6003C:
00089e 93e0 0099 	STS  153,R30
                 ; 0003 00D3         }
                 ; 0003 00D4         break;
                 ; 0003 00D5 
                 ; 0003 00D6     }
                 _0x60021:
                 ; 0003 00D7 
                 ; 0003 00D8 }
0008a0 9625      	ADIW R28,5
0008a1 9508      	RET
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <uart.h>
                 ;#include <xbee.h>
                 ;#include <queue.h>
                 ;#include <debug.h>
                 ;#include <int_protocol.h>
                 ;#include <eeprom.h>
                 ;
                 ;
                 ;#define XBEE_RESET PORTE.2
                 ;
                 ;char EndDevice_MacAddress[8];
                 ;char Gateway_MacAddress[8];
                 ;
                 ;
                 ;uint8_t AI_COMMAND[]            = {0x7E,0x00,0x04,0x08,0x01,0x41,0x49,0x6C};
                 
                 	.DSEG
                 ;uint8_t SL_COMMAND[]            = {0x7E,0x00,0x04,0x08,0x01,0x53,0x4C,0x57};
                 ;uint8_t SH_COMMAND[]            = {0x7E,0x00,0x04,0x08,0x01,0x53,0x48,0x5B};
                 ;uint8_t EVENT[2]                = {0x00,0x00};
                 ;uint8_t STATUS_DEVICE           = 0;
                 ;int flag_state                  = 0;
                 ;
                 ;
                 ;void xbee_sendATCommand(int param){
                 ; 0004 001C void xbee_sendATCommand(int param){
                 
                 	.CSEG
                 _xbee_sendATCommand:
                 ; 0004 001D      switch(param) {
0008a2 940e 1615 	CALL SUBOPT_0x0
                 ;	param -> Y+0
                 ; 0004 001E         case 0  :
0008a4 f459      	BRNE _0x80009
                 ; 0004 001F             printDebug("\r\n ++++++++++ Send AI ++++++++\r\n");
                +
0008a5 e4e0     +LDI R30 , LOW ( 2 * _0x80000 + ( 0 ) )
0008a6 e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 0 ) )
                 	__POINTW1FN _0x80000,0
0008a7 940e 166b 	CALL SUBOPT_0x9
                 ; 0004 0020             print_payload(AI_COMMAND,8);
0008a9 eeec      	LDI  R30,LOW(_AI_COMMAND)
0008aa e0f8      	LDI  R31,HIGH(_AI_COMMAND)
0008ab 940e 1746 	CALL SUBOPT_0x2C
                 ; 0004 0021             xbee_send(AI_COMMAND,8);
0008ad eeec      	LDI  R30,LOW(_AI_COMMAND)
0008ae e0f8      	LDI  R31,HIGH(_AI_COMMAND)
0008af c01d      	RJMP _0x80035
                 ; 0004 0022 
                 ; 0004 0023         break;
                 ; 0004 0024 
                 ; 0004 0025         case 1  :
                 _0x80009:
0008b0 30e1      	CPI  R30,LOW(0x1)
0008b1 e0a0      	LDI  R26,HIGH(0x1)
0008b2 07fa      	CPC  R31,R26
0008b3 f459      	BRNE _0x8000A
                 ; 0004 0026             printDebug("\r\n ++++++++++ Send SH ++++++++\r\n");
                +
0008b4 e6e1     +LDI R30 , LOW ( 2 * _0x80000 + ( 33 ) )
0008b5 e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 33 ) )
                 	__POINTW1FN _0x80000,33
0008b6 940e 166b 	CALL SUBOPT_0x9
                 ; 0004 0027             print_payload(SH_COMMAND,8);
0008b8 efec      	LDI  R30,LOW(_SH_COMMAND)
0008b9 e0f8      	LDI  R31,HIGH(_SH_COMMAND)
0008ba 940e 1746 	CALL SUBOPT_0x2C
                 ; 0004 0028             xbee_send(SH_COMMAND,8);
0008bc efec      	LDI  R30,LOW(_SH_COMMAND)
0008bd e0f8      	LDI  R31,HIGH(_SH_COMMAND)
0008be c00e      	RJMP _0x80035
                 ; 0004 0029 
                 ; 0004 002A         break;
                 ; 0004 002B 
                 ; 0004 002C         case 2  :
                 _0x8000A:
0008bf 30e2      	CPI  R30,LOW(0x2)
0008c0 e0a0      	LDI  R26,HIGH(0x2)
0008c1 07fa      	CPC  R31,R26
0008c2 f479      	BRNE _0x80008
                 ; 0004 002D             printDebug("\r\n ++++++++++ Send SL ++++++++\r\n");
                +
0008c3 e8e2     +LDI R30 , LOW ( 2 * _0x80000 + ( 66 ) )
0008c4 e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 66 ) )
                 	__POINTW1FN _0x80000,66
0008c5 940e 166b 	CALL SUBOPT_0x9
                 ; 0004 002E             print_payload(SL_COMMAND,8);
0008c7 efe4      	LDI  R30,LOW(_SL_COMMAND)
0008c8 e0f8      	LDI  R31,HIGH(_SL_COMMAND)
0008c9 940e 1746 	CALL SUBOPT_0x2C
                 ; 0004 002F             xbee_send(SL_COMMAND,8);
0008cb efe4      	LDI  R30,LOW(_SL_COMMAND)
0008cc e0f8      	LDI  R31,HIGH(_SL_COMMAND)
                 _0x80035:
0008cd 93fa      	ST   -Y,R31
0008ce 93ea      	ST   -Y,R30
0008cf 940e 174c 	CALL SUBOPT_0x2D
0008d1 d109      	RCALL _xbee_send
                 ; 0004 0030 
                 ; 0004 0031         break;
                 ; 0004 0032      }
                 _0x80008:
                 ; 0004 0033 }
                 _0x20C0010:
0008d2 9622      	ADIW R28,2
0008d3 9508      	RET
                 ;
                 ;int xbee_checksum(char buf[],int len) {
                 ; 0004 0035 int xbee_checksum(char buf[],int len) {
                 _xbee_checksum:
                 ; 0004 0036 
                 ; 0004 0037     int i;
                 ; 0004 0038     char sum = 0;
                 ; 0004 0039     for (i = 0; i < len; i++) {
0008d4 93ba      	ST   -Y,R27
0008d5 93aa      	ST   -Y,R26
0008d6 940e 1d0e 	CALL __SAVELOCR4
                 ;	buf -> Y+6
                 ;	len -> Y+4
                 ;	i -> R16,R17
                 ;	sum -> R19
0008d8 e030      	LDI  R19,0
                +
0008d9 e000     +LDI R16 , LOW ( 0 )
0008da e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x8000D:
0008db 81ec      	LDD  R30,Y+4
0008dc 81fd      	LDD  R31,Y+4+1
0008dd 170e      	CP   R16,R30
0008de 071f      	CPC  R17,R31
0008df f454      	BRGE _0x8000E
                 ; 0004 003A         sum += buf[i];
0008e0 01f8      	MOVW R30,R16
0008e1 81ae      	LDD  R26,Y+6
0008e2 81bf      	LDD  R27,Y+6+1
0008e3 0fae      	ADD  R26,R30
0008e4 1fbf      	ADC  R27,R31
0008e5 91ec      	LD   R30,X
0008e6 0f3e      	ADD  R19,R30
                 ; 0004 003B     }
                +
0008e7 5f0f     +SUBI R16 , LOW ( - 1 )
0008e8 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0008e9 cff1      	RJMP _0x8000D
                 _0x8000E:
                 ; 0004 003C     return (0xFF - (sum & 0xFF));
0008ea 2fe3      	MOV  R30,R19
0008eb e0f0      	LDI  R31,0
0008ec 70f0      	ANDI R31,HIGH(0xFF)
0008ed efaf      	LDI  R26,LOW(255)
0008ee e0b0      	LDI  R27,HIGH(255)
0008ef 940e 1cde 	CALL __SWAPW12
0008f1 1bea      	SUB  R30,R26
0008f2 0bfb      	SBC  R31,R27
0008f3 940e 1d15 	CALL __LOADLOCR4
0008f5 940c 0ae7 	JMP  _0x20C000C
                 ; 0004 003D }
                 ;
                 ;
                 ;void xbee_sendAPI(uint8_t buff[],uint16_t len){
                 ; 0004 0040 void xbee_sendAPI(uint8_t buff[],uint16_t len){
                 _xbee_sendAPI:
                 ; 0004 0041     xbee_send(buff,len);
0008f7 93ba      	ST   -Y,R27
0008f8 93aa      	ST   -Y,R26
                 ;	buff -> Y+2
                 ;	len -> Y+0
0008f9 81ea      	LDD  R30,Y+2
0008fa 81fb      	LDD  R31,Y+2+1
0008fb 93fa      	ST   -Y,R31
0008fc 93ea      	ST   -Y,R30
0008fd 81aa      	LDD  R26,Y+2
0008fe 81bb      	LDD  R27,Y+2+1
0008ff d0db      	RCALL _xbee_send
                 ; 0004 0042 }
                 _0x20C000F:
000900 9624      	ADIW R28,4
000901 9508      	RET
                 ;
                 ;
                 ;void xbee_receivePacket( uint8_t recvPacket[],uint16_t size){
                 ; 0004 0045 void xbee_receivePacket( uint8_t recvPacket[],uint16_t size){
                 _xbee_receivePacket:
                 ; 0004 0046 
                 ; 0004 0047     int start = 3;
                 ; 0004 0048     if(size <= 5)
000902 940e 174f 	CALL SUBOPT_0x2E
                 ;	recvPacket -> Y+4
                 ;	size -> Y+2
                 ;	start -> R16,R17
                +
000904 e003     +LDI R16 , LOW ( 3 )
000905 e010     +LDI R17 , HIGH ( 3 )
                 	__GETWRN 16,17,3
000906 81aa      	LDD  R26,Y+2
000907 81bb      	LDD  R27,Y+2+1
000908 9716      	SBIW R26,6
000909 f408      	BRSH _0x8000F
                 ; 0004 0049         return;
00090a c0e1      	RJMP _0x20C000E
                 ; 0004 004A     printDebug("\r\n ++++++++++ Recreive Data ++++++++\r\n");
                 _0x8000F:
                +
00090b eae3     +LDI R30 , LOW ( 2 * _0x80000 + ( 99 ) )
00090c e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 99 ) )
                 	__POINTW1FN _0x80000,99
00090d 940e 166b 	CALL SUBOPT_0x9
                 ; 0004 004B     print_payload(recvPacket, size);
00090f 81ec      	LDD  R30,Y+4
000910 81fd      	LDD  R31,Y+4+1
000911 93fa      	ST   -Y,R31
000912 93ea      	ST   -Y,R30
000913 81ac      	LDD  R26,Y+4
000914 81bd      	LDD  R27,Y+4+1
000915 940e 063d 	CALL _print_payload
                 ; 0004 004C     xbee_processPacket(&recvPacket[start]);
000917 940e 1754 	CALL SUBOPT_0x2F
000919 d001      	RCALL _xbee_processPacket
                 ; 0004 004D 
                 ; 0004 004E }
00091a c0d1      	RJMP _0x20C000E
                 ;
                 ;void xbee_processPacket(char *buf) {
                 ; 0004 0050 void xbee_processPacket(char *buf) {
                 _xbee_processPacket:
                 ; 0004 0051       uint8_t frameType;
                 ; 0004 0052       frameType = buf[0];
00091b 93ba      	ST   -Y,R27
00091c 93aa      	ST   -Y,R26
00091d 931a      	ST   -Y,R17
                 ;	*buf -> Y+1
                 ;	frameType -> R17
00091e 81a9      	LDD  R26,Y+1
00091f 81ba      	LDD  R27,Y+1+1
000920 911c      	LD   R17,X
                 ; 0004 0053       switch(frameType) {
000921 2fe1      	MOV  R30,R17
000922 e0f0      	LDI  R31,0
                 ; 0004 0054 
                 ; 0004 0055         /*=============== Recive AI ===============*/
                 ; 0004 0056         case 0x88  :
000923 38e8      	CPI  R30,LOW(0x88)
000924 e0a0      	LDI  R26,HIGH(0x88)
000925 07fa      	CPC  R31,R26
000926 f591      	BRNE _0x80013
                 ; 0004 0057             if(buf[2] == 0x41 && buf[3] == 0x49){
000927 940e 175a 	CALL SUBOPT_0x30
000929 34a1      	CPI  R26,LOW(0x41)
00092a f421      	BRNE _0x80015
00092b 940e 175f 	CALL SUBOPT_0x31
00092d 34a9      	CPI  R26,LOW(0x49)
00092e f009      	BREQ _0x80016
                 _0x80015:
00092f c003      	RJMP _0x80014
                 _0x80016:
                 ; 0004 0058                 flag_state = 1;
000930 e0e1      	LDI  R30,LOW(1)
000931 e0f0      	LDI  R31,HIGH(1)
000932 c021      	RJMP _0x80036
                 ; 0004 0059             }
                 ; 0004 005A 
                 ; 0004 005B         /*=============== Recive SH ===============*/
                 ; 0004 005C 
                 ; 0004 005D             else if (buf[2] == 0x53 && buf[3] == 0x48){
                 _0x80014:
000933 940e 175a 	CALL SUBOPT_0x30
000935 35a3      	CPI  R26,LOW(0x53)
000936 f421      	BRNE _0x80019
000937 940e 175f 	CALL SUBOPT_0x31
000939 34a8      	CPI  R26,LOW(0x48)
00093a f009      	BREQ _0x8001A
                 _0x80019:
00093b c007      	RJMP _0x80018
                 _0x8001A:
                 ; 0004 005E                 memcpy(EndDevice_MacAddress,&buf[5],4);
00093c 940e 1764 	CALL SUBOPT_0x32
00093e 940e 1769 	CALL SUBOPT_0x33
                 ; 0004 005F                 flag_state = 2;
000940 e0e2      	LDI  R30,LOW(2)
000941 e0f0      	LDI  R31,HIGH(2)
000942 c011      	RJMP _0x80036
                 ; 0004 0060             }
                 ; 0004 0061 
                 ; 0004 0062         /*=============== Recive SL ===============*/
                 ; 0004 0063 
                 ; 0004 0064             else if( buf[2] == 0x53 && buf[3] == 0x4C){
                 _0x80018:
000943 940e 175a 	CALL SUBOPT_0x30
000945 35a3      	CPI  R26,LOW(0x53)
000946 f421      	BRNE _0x8001D
000947 940e 175f 	CALL SUBOPT_0x31
000949 34ac      	CPI  R26,LOW(0x4C)
00094a f009      	BREQ _0x8001E
                 _0x8001D:
00094b c00c      	RJMP _0x8001C
                 _0x8001E:
                 ; 0004 0065                 memcpy(&EndDevice_MacAddress[4],&buf[5],4);
                +
00094c e8e6     +LDI R30 , LOW ( _EndDevice_MacAddress + ( 4 ) )
00094d e0f8     +LDI R31 , HIGH ( _EndDevice_MacAddress + ( 4 ) )
                 	__POINTW1MN _EndDevice_MacAddress,4
00094e 93fa      	ST   -Y,R31
00094f 93ea      	ST   -Y,R30
000950 940e 1769 	CALL SUBOPT_0x33
                 ; 0004 0066                 flag_state = 3;
000952 e0e3      	LDI  R30,LOW(3)
000953 e0f0      	LDI  R31,HIGH(3)
                 _0x80036:
000954 93e0 062a 	STS  _flag_state,R30
000956 93f0 062b 	STS  _flag_state+1,R31
                 ; 0004 0067             }
                 ; 0004 0068 
                 ; 0004 0069         break;
                 _0x8001C:
000958 c060      	RJMP _0x80012
                 ; 0004 006A 
                 ; 0004 006B         /*=============== Recive ACK ===============*/
                 ; 0004 006C         case 0x90  :
                 _0x80013:
000959 39e0      	CPI  R30,LOW(0x90)
00095a e0a0      	LDI  R26,HIGH(0x90)
00095b 07fa      	CPC  R31,R26
00095c f011      	BREQ PC+3
00095d 940c 09b9 	JMP _0x80012
                 ; 0004 006D 
                 ; 0004 006E         if(buf[32] == 0xA2){
00095f 940e 1772 	CALL SUBOPT_0x34
000961 3aa2      	CPI  R26,LOW(0xA2)
000962 f439      	BRNE _0x80020
                 ; 0004 006F             memcpy(Gateway_MacAddress,&buf[1],8);
000963 940e 1777 	CALL SUBOPT_0x35
000965 940e 142c 	CALL _memcpy
                 ; 0004 0070             //input[count_input] = 2;
                 ; 0004 0071             flag_state = 4;
000967 940e 1781 	CALL SUBOPT_0x36
                 ; 0004 0072         }
                 ; 0004 0073         else if(buf[32] == 0xA3){
000969 c04f      	RJMP _0x80021
                 _0x80020:
00096a 940e 1772 	CALL SUBOPT_0x34
00096c 3aa3      	CPI  R26,LOW(0xA3)
00096d f439      	BRNE _0x80022
                 ; 0004 0074             memcpy(Gateway_MacAddress,&buf[1],8);
00096e 940e 1777 	CALL SUBOPT_0x35
000970 940e 1784 	CALL SUBOPT_0x37
                 ; 0004 0075             input[count_input] = 3;
000972 e0e3      	LDI  R30,LOW(3)
000973 e0f0      	LDI  R31,HIGH(3)
000974 c03e      	RJMP _0x80037
                 ; 0004 0076             count_input++;
                 ; 0004 0077         }
                 ; 0004 0078         else if(buf[32] == 0xA5){
                 _0x80022:
000975 940e 1772 	CALL SUBOPT_0x34
000977 3aa5      	CPI  R26,LOW(0xA5)
000978 f4d9      	BRNE _0x80024
                 ; 0004 0079             memcpy(Gateway_MacAddress,&buf[1],8);
000979 940e 1777 	CALL SUBOPT_0x35
00097b 940e 142c 	CALL _memcpy
                 ; 0004 007A             if(buf[34] == 0x01)
00097d 81a9      	LDD  R26,Y+1
00097e 81ba      	LDD  R27,Y+1+1
00097f 9692      	ADIW R26,34
000980 91ac      	LD   R26,X
000981 30a1      	CPI  R26,LOW(0x1)
000982 f429      	BRNE _0x80025
                 ; 0004 007B                 input[count_input] = 511;
000983 940e 1791 	CALL SUBOPT_0x38
000985 efef      	LDI  R30,LOW(511)
000986 e0f1      	LDI  R31,HIGH(511)
000987 c009      	RJMP _0x80038
                 ; 0004 007C             else if(buf[34] == 0x00)
                 _0x80025:
000988 81e9      	LDD  R30,Y+1
000989 81fa      	LDD  R31,Y+1+1
00098a a1e2      	LDD  R30,Z+34
00098b 30e0      	CPI  R30,0
00098c f431      	BRNE _0x80027
                 ; 0004 007D                 input[count_input] = 510;
00098d 940e 1791 	CALL SUBOPT_0x38
00098f efee      	LDI  R30,LOW(510)
000990 e0f1      	LDI  R31,HIGH(510)
                 _0x80038:
000991 93ed      	ST   X+,R30
000992 93fc      	ST   X,R31
                 ; 0004 007E             count_input++;
                 _0x80027:
000993 c021      	RJMP _0x80039
                 ; 0004 007F         }
                 ; 0004 0080         else if(buf[32] == 0xA6){
                 _0x80024:
000994 940e 1772 	CALL SUBOPT_0x34
000996 3aa6      	CPI  R26,LOW(0xA6)
000997 f489      	BRNE _0x80029
                 ; 0004 0081             EVENT[0] = buf[33];
000998 81e9      	LDD  R30,Y+1
000999 81fa      	LDD  R31,Y+1+1
00099a a1e1      	LDD  R30,Z+33
00099b 93e0 0893 	STS  _EVENT,R30
                 ; 0004 0082             EVENT[1] = buf[34];
00099d 81e9      	LDD  R30,Y+1
00099e 81fa      	LDD  R31,Y+1+1
00099f a1e2      	LDD  R30,Z+34
                +
0009a0 93e0 0894+STS _EVENT + ( 1 ) , R30
                 	__PUTB1MN _EVENT,1
                 ; 0004 0083             memcpy(Gateway_MacAddress,&buf[1],8);
0009a2 940e 1777 	CALL SUBOPT_0x35
0009a4 940e 1784 	CALL SUBOPT_0x37
                 ; 0004 0084             input[count_input] = 6;
0009a6 e0e6      	LDI  R30,LOW(6)
0009a7 e0f0      	LDI  R31,HIGH(6)
0009a8 c00a      	RJMP _0x80037
                 ; 0004 0085             count_input++;
                 ; 0004 0086         }
                 ; 0004 0087         else if(buf[32] == 0xA8){
                 _0x80029:
0009a9 940e 1772 	CALL SUBOPT_0x34
0009ab 3aa8      	CPI  R26,LOW(0xA8)
0009ac f461      	BRNE _0x8002B
                 ; 0004 0088             memcpy(Gateway_MacAddress,&buf[1],8);
0009ad 940e 1777 	CALL SUBOPT_0x35
0009af 940e 1784 	CALL SUBOPT_0x37
                 ; 0004 0089             input[count_input] = 8;
0009b1 e0e8      	LDI  R30,LOW(8)
0009b2 e0f0      	LDI  R31,HIGH(8)
                 _0x80037:
0009b3 93ed      	ST   X+,R30
0009b4 93fc      	ST   X,R31
                 ; 0004 008A             count_input++;
                 _0x80039:
0009b5 edab      	LDI  R26,LOW(_count_input)
0009b6 e0b8      	LDI  R27,HIGH(_count_input)
0009b7 940e 16fd 	CALL SUBOPT_0x22
                 ; 0004 008B         }
                 ; 0004 008C 
                 ; 0004 008D         break;
                 _0x8002B:
                 _0x80021:
                 ; 0004 008E       }
                 _0x80012:
                 ; 0004 008F       if(input[count_input-1] != 0) do_event(input[count_input]);
0009b9 91e0 08db 	LDS  R30,_count_input
0009bb 91f0 08dc 	LDS  R31,_count_input+1
0009bd 9731      	SBIW R30,1
0009be 940e 179c 	CALL SUBOPT_0x39
0009c0 0fae      	ADD  R26,R30
0009c1 1fbf      	ADC  R27,R31
0009c2 940e 1ca6 	CALL __GETW1P
0009c4 9730      	SBIW R30,0
0009c5 f039      	BREQ _0x8002C
0009c6 940e 1791 	CALL SUBOPT_0x38
0009c8 940e 1ca6 	CALL __GETW1P
0009ca 01df      	MOVW R26,R30
0009cb 940e 0f9a 	CALL _do_event
                 ; 0004 0090       if(count_input == 30)  count_input = 0;
                 _0x8002C:
0009cd 91a0 08db 	LDS  R26,_count_input
0009cf 91b0 08dc 	LDS  R27,_count_input+1
0009d1 975e      	SBIW R26,30
0009d2 f429      	BRNE _0x8002D
0009d3 e0e0      	LDI  R30,LOW(0)
0009d4 93e0 08db 	STS  _count_input,R30
0009d6 93e0 08dc 	STS  _count_input+1,R30
                 ; 0004 0091 }
                 _0x8002D:
0009d8 8118      	LDD  R17,Y+0
0009d9 940c 0dbd 	JMP  _0x20C000A
                 ;
                 ;uint16_t xbee_send(uint8_t buff[],uint16_t len){
                 ; 0004 0093 uint16_t xbee_send(uint8_t buff[],uint16_t len){
                 _xbee_send:
                 ; 0004 0094     uint16_t i;
                 ; 0004 0095     for(i = 0; i < len; i++) {
0009db 940e 174f 	CALL SUBOPT_0x2E
                 ;	buff -> Y+4
                 ;	len -> Y+2
                 ;	i -> R16,R17
                +
0009dd e000     +LDI R16 , LOW ( 0 )
0009de e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x8002F:
0009df 81ea      	LDD  R30,Y+2
0009e0 81fb      	LDD  R31,Y+2+1
0009e1 170e      	CP   R16,R30
0009e2 071f      	CPC  R17,R31
0009e3 f438      	BRSH _0x80030
                 ; 0004 0096         putchar1(buff[i]);
0009e4 940e 1754 	CALL SUBOPT_0x2F
0009e6 91ac      	LD   R26,X
0009e7 de21      	RCALL _putchar1
                 ; 0004 0097     }
                +
0009e8 5f0f     +SUBI R16 , LOW ( - 1 )
0009e9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0009ea cff4      	RJMP _0x8002F
                 _0x80030:
                 ; 0004 0098     return i;
0009eb 01f8      	MOVW R30,R16
                 _0x20C000E:
0009ec 8119      	LDD  R17,Y+1
0009ed 8108      	LDD  R16,Y+0
0009ee 9626      	ADIW R28,6
0009ef 9508      	RET
                 ; 0004 0099 }
                 ;
                 ;void xbee_read() {
                 ; 0004 009B void xbee_read() {
                 _xbee_read:
                 ; 0004 009C 
                 ; 0004 009D     uint8_t readbuf[256];
                 ; 0004 009E     uint8_t data;
                 ; 0004 009F     uint16_t len = 0;
                 ; 0004 00A0     int i = 0;
                 ; 0004 00A1     delay_ms(100);
0009f0 50d1      	SUBI R29,1
0009f1 940e 1d0c 	CALL __SAVELOCR6
                 ;	readbuf -> Y+6
                 ;	data -> R17
                 ;	len -> R18,R19
                 ;	i -> R20,R21
                +
0009f3 e020     +LDI R18 , LOW ( 0 )
0009f4 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0009f5 e040     +LDI R20 , LOW ( 0 )
0009f6 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0009f7 940e 1699 	CALL SUBOPT_0x10
                 ; 0004 00A2 
                 ; 0004 00A3     while (rx_counter1>0){
                 _0x80031:
0009f9 91a0 062e 	LDS  R26,_rx_counter1
0009fb 91b0 062f 	LDS  R27,_rx_counter1+1
0009fd 940e 1cfd 	CALL __CPW02
0009ff f548      	BRSH _0x80033
                 ; 0004 00A4         data=rx_buffer1[rx_rd_index1++];
000a00 e2ac      	LDI  R26,LOW(_rx_rd_index1)
000a01 e0b6      	LDI  R27,HIGH(_rx_rd_index1)
000a02 940e 16fd 	CALL SUBOPT_0x22
000a04 9731      	SBIW R30,1
000a05 5de0      	SUBI R30,LOW(-_rx_buffer1)
000a06 4ff9      	SBCI R31,HIGH(-_rx_buffer1)
000a07 8110      	LD   R17,Z
                 ; 0004 00A5         readbuf[i++] = data;
000a08 01fa      	MOVW R30,R20
                +
000a09 5f4f     +SUBI R20 , LOW ( - 1 )
000a0a 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000a0b 01de      	MOVW R26,R28
000a0c 9616      	ADIW R26,6
000a0d 0fea      	ADD  R30,R26
000a0e 1ffb      	ADC  R31,R27
000a0f 8310      	ST   Z,R17
                 ; 0004 00A6         len++;
                +
000a10 5f2f     +SUBI R18 , LOW ( - 1 )
000a11 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0004 00A7         #if RX_BUFFER_SIZE1 != 256
                 ; 0004 00A8         if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
000a12 91a0 062c 	LDS  R26,_rx_rd_index1
000a14 91b0 062d 	LDS  R27,_rx_rd_index1+1
000a16 30a0      	CPI  R26,LOW(0x200)
000a17 e0e2      	LDI  R30,HIGH(0x200)
000a18 07be      	CPC  R27,R30
000a19 f429      	BRNE _0x80034
000a1a e0e0      	LDI  R30,LOW(0)
000a1b 93e0 062c 	STS  _rx_rd_index1,R30
000a1d 93e0 062d 	STS  _rx_rd_index1+1,R30
                 ; 0004 00A9         #endif
                 ; 0004 00AA         #asm("cli")
                 _0x80034:
000a1f 94f8      	cli
                 ; 0004 00AB         --rx_counter1;
000a20 e2ae      	LDI  R26,LOW(_rx_counter1)
000a21 e0b6      	LDI  R27,HIGH(_rx_counter1)
000a22 91ed      	LD   R30,X+
000a23 91fd      	LD   R31,X+
000a24 9731      	SBIW R30,1
000a25 93fe      	ST   -X,R31
000a26 93ee      	ST   -X,R30
                 ; 0004 00AC         #asm("sei")
000a27 9478      	sei
                 ; 0004 00AD     }
000a28 cfd0      	RJMP _0x80031
                 _0x80033:
                 ; 0004 00AE 
                 ; 0004 00AF     xbee_receivePacket(readbuf, len);
000a29 01fe      	MOVW R30,R28
000a2a 9636      	ADIW R30,6
000a2b 93fa      	ST   -Y,R31
000a2c 93ea      	ST   -Y,R30
000a2d 01d9      	MOVW R26,R18
000a2e ded3      	RCALL _xbee_receivePacket
                 ; 0004 00B0 }
000a2f 940e 1d13 	CALL __LOADLOCR6
000a31 9626      	ADIW R28,6
000a32 5fdf      	SUBI R29,-1
000a33 9508      	RET
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;#include <io.h>
                 ;#include <initial_system.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <timer.h>
                 ;#include <int_protocol.h>
                 ;#include <adc.h>
                 ;
                 ;/* ================================================================================= */
                 ;int initial_system(void) {
                 ; 0005 000F int initial_system(void) {
                 
                 	.CSEG
                 _initial_system:
                 ; 0005 0010 
                 ; 0005 0011     init_IO();
000a34 d01a      	RCALL _init_IO
                 ; 0005 0012 
                 ; 0005 0013     //============ Uart Initial ============//
                 ; 0005 0014     init_uart(0, 38400);     // uart0 for printDebug
000a35 e0e0      	LDI  R30,LOW(0)
000a36 940e 17a1 	CALL SUBOPT_0x3A
                 ; 0005 0015     init_uart(1, 38400);    // uart1 for xbee
000a38 e0e1      	LDI  R30,LOW(1)
000a39 940e 17a1 	CALL SUBOPT_0x3A
                 ; 0005 0016 
                 ; 0005 0017     //============ Timer Initial ============//
                 ; 0005 0018     init_timer();
000a3b 940e 0745 	CALL _init_timer
                 ; 0005 0019     enable_timerOverflow(0);      // interrupt every 0.021 sec.
000a3d 940e 1690 	CALL SUBOPT_0xE
000a3f 940e 0784 	CALL _enable_timerOverflow
                 ; 0005 001A     enable_timerOverflow(1);      // interrupt every 1 sec.
000a41 940e 169d 	CALL SUBOPT_0x11
000a43 940e 0784 	CALL _enable_timerOverflow
                 ; 0005 001B     enable_timerOverflow(3);      // interrupt every 0.5 sec.
000a45 e0a3      	LDI  R26,LOW(3)
000a46 e0b0      	LDI  R27,0
000a47 940e 0784 	CALL _enable_timerOverflow
                 ; 0005 001C 
                 ; 0005 001D     //============ Module Initial ============//
                 ; 0005 001E     init_adc(VREF_AVCC);
000a49 e4a0      	LDI  R26,LOW(64)
000a4a 940e 0d8c 	CALL _init_adc
                 ; 0005 001F 
                 ; 0005 0020     return 0;
000a4c e0e0      	LDI  R30,LOW(0)
000a4d e0f0      	LDI  R31,HIGH(0)
000a4e 9508      	RET
                 ; 0005 0021 }
                 ;
                 ;/* ================================================================================= */
                 ;void init_IO(void) {
                 ; 0005 0024 void init_IO(void) {
                 _init_IO:
                 ; 0005 0025 
                 ; 0005 0026     /*----- Digital Input -----*/
                 ; 0005 0027     // Initial Direction
                 ; 0005 0028     SW_BUTTON_DDR;           // Switch Button, Join Button
000a4f 98a0      	CBI  0x14,0
                 ; 0005 0029     // pull up
                 ; 0005 002A     SW_BUTTON_PORT = 1;
000a50 9aa8      	SBI  0x15,0
                 ; 0005 002B 
                 ; 0005 002C     D_SW1_DDR;
000a51 98d7      	CBI  0x1A,7
                 ; 0005 002D     D_SW2_DDR;
000a52 98d6      	CBI  0x1A,6
                 ; 0005 002E     D_SW3_DDR;
000a53 98d5      	CBI  0x1A,5
                 ; 0005 002F     D_SW4_DDR;
000a54 98d4      	CBI  0x1A,4
                 ; 0005 0030 
                 ; 0005 0031     /*----- Digital Output -----*/
                 ; 0005 0032     // Initial Direction
                 ; 0005 0033     LED_STAT_DDR;                   // LED Status
000a55 9aa7      	SBI  0x14,7
                 ; 0005 0034     POWER_RELAY_DDR;                // Drive relay
000a56 91e0 0064 	LDS  R30,100
000a58 60e4      	ORI  R30,4
000a59 93e0 0064 	STS  100,R30
                 ; 0005 0035     XBEE_RESET_DDR;
000a5b 9a12      	SBI  0x2,2
                 ; 0005 0036     XBEE_SLEEP_DDR;
000a5c 91e0 0064 	LDS  R30,100
000a5e 60e8      	ORI  R30,8
000a5f 93e0 0064 	STS  100,R30
                 ; 0005 0037 
                 ; 0005 0038     LED_STAT_OFF;
000a61 9aaf      	SBI  0x15,7
                 ; 0005 0039     POWER_RELAY_OFF;
000a62 940e 161b 	CALL SUBOPT_0x1
                 ; 0005 003A     XBEE_RESET_HIGH;      // XBee Reset active low
000a64 9a1a      	SBI  0x3,2
                 ; 0005 003B     XBEE_SLEEP_LOW;
000a65 91e0 0065 	LDS  R30,101
000a67 7fe7      	ANDI R30,0XF7
000a68 93e0 0065 	STS  101,R30
                 ; 0005 003C 
                 ; 0005 003D }
000a6a 9508      	RET
                 ;/* ================================================================================= */
                 ;int8_t read_dSwitch() {
                 ; 0005 003F int8_t read_dSwitch() {
                 _read_dSwitch:
                 ; 0005 0040     int8_t read1, read2;
                 ; 0005 0041     read1 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
000a6b 931a      	ST   -Y,R17
000a6c 930a      	ST   -Y,R16
                 ;	read1 -> R17
                 ;	read2 -> R16
000a6d 940e 17a8 	CALL SUBOPT_0x3B
000a6f 2f1e      	MOV  R17,R30
                 ; 0005 0042     delay_ms(100);
000a70 940e 1699 	CALL SUBOPT_0x10
                 ; 0005 0043     read2 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
000a72 940e 17a8 	CALL SUBOPT_0x3B
000a74 2f0e      	MOV  R16,R30
                 ; 0005 0044     if(read1 == read2) {
000a75 1701      	CP   R16,R17
000a76 f411      	BRNE _0xA0017
                 ; 0005 0045         return read1;
000a77 2fe1      	MOV  R30,R17
000a78 c001      	RJMP _0x20C000D
                 ; 0005 0046     }else {
                 _0xA0017:
                 ; 0005 0047         return -1;
000a79 efef      	LDI  R30,LOW(255)
                 ; 0005 0048     }
                 ; 0005 0049 }
                 _0x20C000D:
000a7a 9109      	LD   R16,Y+
000a7b 9119      	LD   R17,Y+
000a7c 9508      	RET
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdint.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <math.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <meansure.h>
                 ;
                 ;uint8_t JOIN_A1[]           = {0x7E,0x00,0x23,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x01,0xA1,0x00};
                 
                 	.DSEG
                 ;uint8_t PING_A4[]           = {0x7E,0x00,0x23,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x01,0xA4,0x00};
                 ;uint8_t SEND_EVENT_[]       = {0x7E,0x00,0x25,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x01,0xA5,0x01,0x00,0x00};
                 ;uint8_t SEND_REPORT_[]      = {0x7E,0x00,0x48,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x26,0xA7,0x01,0x01,0x00,0x00,0x00,0x00,0x0                 0,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _voltage[8]         = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _amp[8]             = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _power[8]           = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _watt[8]            = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;
                 ;void reverse(char *str, int len){
                 ; 0006 0016 void reverse(char *str, int len){
                 
                 	.CSEG
                 _reverse:
                 ; 0006 0017     int i=0,j=len-1,temp;
                 ; 0006 0018 
000a7d 93ba      ; 0006 0019     while (i<j){
000a7e 93aa      	ST   -Y,R27
000a7f 940e 1d0c 	ST   -Y,R26
                 	CALL __SAVELOCR6
                 ;	*str -> Y+8
                 ;	len -> Y+6
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                +
000a81 e000     +LDI R16 , LOW ( 0 )
000a82 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000a83 81ee      	LDD  R30,Y+6
000a84 81ff      	LDD  R31,Y+6+1
000a85 9731      	SBIW R30,1
000a86 019f      	MOVW R18,R30
                 _0xC0007:
                +
000a87 1702     +CP R16 , R18
000a88 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
000a89 f4dc      	BRGE _0xC0009
                 ; 0006 001A         temp = str[i];
000a8a 01f8      	MOVW R30,R16
000a8b 85a8      	LDD  R26,Y+8
000a8c 85b9      	LDD  R27,Y+8+1
000a8d 0fae      	ADD  R26,R30
000a8e 1fbf      	ADC  R27,R31
000a8f 914c      	LD   R20,X
000a90 2755      	CLR  R21
                 ; 0006 001B         str[i] = str[j];
000a91 940e 16d6 	CALL SUBOPT_0x1D
000a93 010f      	MOVW R0,R30
000a94 01f9      	MOVW R30,R18
000a95 85a8      	LDD  R26,Y+8
000a96 85b9      	LDD  R27,Y+8+1
000a97 0fae      	ADD  R26,R30
000a98 1fbf      	ADC  R27,R31
000a99 91ec      	LD   R30,X
000a9a 01d0      	MOVW R26,R0
000a9b 93ec      	ST   X,R30
                 ; 0006 001C         str[j] = temp;
000a9c 01f9      	MOVW R30,R18
000a9d 940e 16d6 	CALL SUBOPT_0x1D
000a9f 8340      	ST   Z,R20
                 ; 0006 001D         i++; j--;
                +
000aa0 5f0f     +SUBI R16 , LOW ( - 1 )
000aa1 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                +
000aa2 5021     +SUBI R18 , LOW ( 1 )
000aa3 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0006 001E     }
000aa4 cfe2      	RJMP _0xC0007
                 _0xC0009:
                 ; 0006 001F }
000aa5 940e 1d13 	CALL __LOADLOCR6
000aa7 962a      	ADIW R28,10
000aa8 9508      	RET
                 ;
                 ;// Converts a given integer x to string str[]. d is the number
                 ;// of digits required in output. If d is more than the number
                 ;// of digits in x, then 0s are added at the beginning.
                 ;
                 ;int intToStr(int x, char str[], int d){
                 ; 0006 0025 int intToStr(int x, char str[], int d){
                 _intToStr:
                 ; 0006 0026     int i = 0;
                 ; 0006 0027     while (x){
000aa9 940e 174f 	CALL SUBOPT_0x2E
                 ;	x -> Y+6
                 ;	str -> Y+4
                 ;	d -> Y+2
                 ;	i -> R16,R17
                +
000aab e000     +LDI R16 , LOW ( 0 )
000aac e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xC000A:
000aad 81ee      	LDD  R30,Y+6
000aae 81ff      	LDD  R31,Y+6+1
000aaf 9730      	SBIW R30,0
000ab0 f0d1      	BREQ _0xC000C
                 ; 0006 0028         str[i++] = (x%10) + '0';
000ab1 01f8      	MOVW R30,R16
                +
000ab2 5f0f     +SUBI R16 , LOW ( - 1 )
000ab3 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000ab4 81ac      	LDD  R26,Y+4
000ab5 81bd      	LDD  R27,Y+4+1
000ab6 0fea      	ADD  R30,R26
000ab7 1ffb      	ADC  R31,R27
000ab8 01bf      	MOVW R22,R30
000ab9 81ae      	LDD  R26,Y+6
000aba 81bf      	LDD  R27,Y+6+1
000abb e0ea      	LDI  R30,LOW(10)
000abc e0f0      	LDI  R31,HIGH(10)
000abd 940e 1c7a 	CALL __MODW21
000abf 5de0      	SUBI R30,-LOW(48)
000ac0 01db      	MOVW R26,R22
000ac1 93ec      	ST   X,R30
                 ; 0006 0029         x = x/10;
000ac2 81ae      	LDD  R26,Y+6
000ac3 81bf      	LDD  R27,Y+6+1
000ac4 e0ea      	LDI  R30,LOW(10)
000ac5 e0f0      	LDI  R31,HIGH(10)
000ac6 940e 1c44 	CALL __DIVW21
000ac8 83ee      	STD  Y+6,R30
000ac9 83ff      	STD  Y+6+1,R31
                 ; 0006 002A     }
000aca cfe2      	RJMP _0xC000A
                 _0xC000C:
                 ; 0006 002B 
                 ; 0006 002C     // If number of digits required is more, then
                 ; 0006 002D     // add 0s at the beginning
                 ; 0006 002E     while (i < d)
                 _0xC000D:
000acb 81ea      	LDD  R30,Y+2
000acc 81fb      	LDD  R31,Y+2+1
000acd 170e      	CP   R16,R30
000ace 071f      	CPC  R17,R31
000acf f454      	BRGE _0xC000F
                 ; 0006 002F         str[i++] = '0';
000ad0 01f8      	MOVW R30,R16
                +
000ad1 5f0f     +SUBI R16 , LOW ( - 1 )
000ad2 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000ad3 81ac      	LDD  R26,Y+4
000ad4 81bd      	LDD  R27,Y+4+1
000ad5 0fae      	ADD  R26,R30
000ad6 1fbf      	ADC  R27,R31
000ad7 e3e0      	LDI  R30,LOW(48)
000ad8 93ec      	ST   X,R30
000ad9 cff1      	RJMP _0xC000D
                 _0xC000F:
                 ; 0006 0031 reverse(str, i);
000ada 81ec      	LDD  R30,Y+4
000adb 81fd      	LDD  R31,Y+4+1
000adc 93fa      	ST   -Y,R31
000add 93ea      	ST   -Y,R30
000ade 01d8      	MOVW R26,R16
000adf df9d      	RCALL _reverse
                 ; 0006 0032     str[i] = '\0';
000ae0 940e 1754 	CALL SUBOPT_0x2F
000ae2 e0e0      	LDI  R30,LOW(0)
000ae3 93ec      	ST   X,R30
                 ; 0006 0033     return i;
000ae4 01f8      	MOVW R30,R16
000ae5 8119      	LDD  R17,Y+1
000ae6 8108      	LDD  R16,Y+0
                 _0x20C000C:
000ae7 9628      	ADIW R28,8
000ae8 9508      	RET
                 ; 0006 0034 }
                 ;
                 ;void _ftoa(float n, char *res, int afterpoint){
                 ; 0006 0036 void _ftoa(float n, char *res, int afterpoint){
                 __ftoa:
                 ; 0006 0037     // Extract integer part
                 ; 0006 0038     int ipart = (int)n;
                 ; 0006 0039 
                 ; 0006 003A     // Extract floating part
                 ; 0006 003B     float fpart = n - (float)ipart;
                 ; 0006 003C 
                 ; 0006 003D     // convert integer part to string
                 ; 0006 003E     int i = intToStr(ipart, res, 0);
                 ; 0006 003F     if(ipart == 0){
000ae9 93ba      	ST   -Y,R27
000aea 93aa      	ST   -Y,R26
000aeb 9724      	SBIW R28,4
000aec 940e 1d0e 	CALL __SAVELOCR4
                 ;	n -> Y+12
                 ;	*res -> Y+10
                 ;	afterpoint -> Y+8
                 ;	ipart -> R16,R17
                 ;	fpart -> Y+4
                 ;	i -> R18,R19
000aee 940e 17c2 	CALL SUBOPT_0x3C
000af0 940e 1a58 	CALL __CFD1
000af2 018f      	MOVW R16,R30
000af3 01f8      	MOVW R30,R16
000af4 940e 17c7 	CALL SUBOPT_0x3D
000af6 940e 17cc 	CALL SUBOPT_0x3E
000af8 940e 17d1 	CALL SUBOPT_0x3F
000afa 940e 17d6 	CALL SUBOPT_0x40
000afc 931a      	ST   -Y,R17
000afd 930a      	ST   -Y,R16
000afe 85ec      	LDD  R30,Y+12
000aff 85fd      	LDD  R31,Y+12+1
000b00 93fa      	ST   -Y,R31
000b01 93ea      	ST   -Y,R30
000b02 940e 1690 	CALL SUBOPT_0xE
000b04 dfa4      	RCALL _intToStr
000b05 019f      	MOVW R18,R30
000b06 2e00      	MOV  R0,R16
000b07 2a01      	OR   R0,R17
000b08 f449      	BRNE _0xC0010
                 ; 0006 0040        res[i] = '0';
000b09 01f9      	MOVW R30,R18
000b0a 85aa      	LDD  R26,Y+10
000b0b 85bb      	LDD  R27,Y+10+1
000b0c 0fae      	ADD  R26,R30
000b0d 1fbf      	ADC  R27,R31
000b0e e3e0      	LDI  R30,LOW(48)
000b0f 93ec      	ST   X,R30
                 ; 0006 0041        i++;
                +
000b10 5f2f     +SUBI R18 , LOW ( - 1 )
000b11 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0006 0042     }
                 ; 0006 0043     // check for display option after point
                 ; 0006 0044     if (afterpoint != 0){
                 _0xC0010:
000b12 85e8      	LDD  R30,Y+8
000b13 85f9      	LDD  R31,Y+8+1
000b14 9730      	SBIW R30,0
000b15 f141      	BREQ _0xC0011
                 ; 0006 0045         res[i] = '.'; // add dot
000b16 01f9      	MOVW R30,R18
000b17 85aa      	LDD  R26,Y+10
000b18 85bb      	LDD  R27,Y+10+1
000b19 0fae      	ADD  R26,R30
000b1a 1fbf      	ADC  R27,R31
000b1b e2ee      	LDI  R30,LOW(46)
000b1c 93ec      	ST   X,R30
                 ; 0006 0046 
                 ; 0006 0047         // Get the value of fraction part upto given no.
                 ; 0006 0048         // of points after dot. The third parameter is needed
                 ; 0006 0049         // to handle cases like 233.007
                 ; 0006 004A         fpart = fpart * pow(10, afterpoint);
000b1d 940e 17db 	CALL SUBOPT_0x41
000b1f 940e 1cce 	CALL __PUTPARD1
000b21 85ec      	LDD  R30,Y+12
000b22 85fd      	LDD  R31,Y+12+1
000b23 940e 17c7 	CALL SUBOPT_0x3D
000b25 01df      	MOVW R26,R30
000b26 01cb      	MOVW R24,R22
000b27 940e 15bc 	CALL _pow
000b29 940e 17e0 	CALL SUBOPT_0x42
000b2b 940e 17e5 	CALL SUBOPT_0x43
                 ; 0006 004B 
                 ; 0006 004C         intToStr((int)fpart, res + i + 1, afterpoint);
000b2d 940e 17e8 	CALL SUBOPT_0x44
000b2f 940e 1a58 	CALL __CFD1
000b31 93fa      	ST   -Y,R31
000b32 93ea      	ST   -Y,R30
000b33 01f9      	MOVW R30,R18
000b34 85ac      	LDD  R26,Y+12
000b35 85bd      	LDD  R27,Y+12+1
000b36 0fea      	ADD  R30,R26
000b37 1ffb      	ADC  R31,R27
000b38 9631      	ADIW R30,1
000b39 93fa      	ST   -Y,R31
000b3a 93ea      	ST   -Y,R30
000b3b 85ac      	LDD  R26,Y+12
000b3c 85bd      	LDD  R27,Y+12+1
000b3d df6b      	RCALL _intToStr
                 ; 0006 004D     }
                 ; 0006 004E }
                 _0xC0011:
000b3e 940e 1d15 	CALL __LOADLOCR4
000b40 9660      	ADIW R28,16
000b41 9508      	RET
                 ;
                 ;
                 ;void send_event(uint8_t led,uint8_t state){
                 ; 0006 0051 void send_event(uint8_t led,uint8_t state){
                 _send_event:
                 ; 0006 0052 
                 ; 0006 0053     memcpy(&SEND_EVENT_[5],Gateway_MacAddress,8);
000b42 940e 17ed 	CALL SUBOPT_0x45
                 ;	led -> Y+1
                 ;	state -> Y+0
000b44 940e 17f7 	CALL SUBOPT_0x46
                 ; 0006 0054     memcpy(&SEND_EVENT_[18],EndDevice_MacAddress,8);
000b46 940e 174c 	CALL SUBOPT_0x2D
000b48 940e 17fe 	CALL SUBOPT_0x47
                 ; 0006 0055     memcpy(&SEND_EVENT_[26],Gateway_MacAddress,8);
000b4a 940e 1809 	CALL SUBOPT_0x48
                 ; 0006 0056     memcpy(&SEND_EVENT_[39],&state,1);
000b4c 940e 169d 	CALL SUBOPT_0x11
000b4e 940e 142c 	CALL _memcpy
                 ; 0006 0057     SEND_EVENT_[37] = 0xA5;
000b50 eae5      	LDI  R30,LOW(165)
000b51 940e 1810 	CALL SUBOPT_0x49
                 ; 0006 0058     SEND_EVENT_[38] = led;
                 ; 0006 0059     SEND_EVENT_[40] = xbee_checksum(&SEND_EVENT_[3],SEND_EVENT_[2]);
                 ; 0006 005A     printDebug("\r\n ++++++++++ Send LED ++++++++\r\n");
                +
000b53 e8e2     +LDI R30 , LOW ( 2 * _0xC0000 + ( 0 ) )
000b54 e0f4     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 0 ) )
                 	__POINTW1FN _0xC0000,0
000b55 940e 166b 	CALL SUBOPT_0x9
                 ; 0006 005B     print_payload(SEND_EVENT_,41);
000b57 940e 1821 	CALL SUBOPT_0x4A
000b59 940e 063d 	CALL _print_payload
                 ; 0006 005C     xbee_sendAPI(SEND_EVENT_,41);
000b5b 940e 1821 	CALL SUBOPT_0x4A
000b5d 940e 08f7 	CALL _xbee_sendAPI
                 ; 0006 005D 
                 ; 0006 005E }
000b5f 940c 1013 	JMP  _0x20C0008
                 ;
                 ;void send_join(){
                 ; 0006 0060 void send_join(){
                 _send_join:
                 ; 0006 0061 
                 ; 0006 0062     memcpy(&JOIN_A1[18],EndDevice_MacAddress,8);
                +
000b61 e1e6     +LDI R30 , LOW ( _JOIN_A1 + ( 18 ) )
000b62 e0f9     +LDI R31 , HIGH ( _JOIN_A1 + ( 18 ) )
                 	__POINTW1MN _JOIN_A1,18
000b63 940e 1828 	CALL SUBOPT_0x4B
000b65 940e 174c 	CALL SUBOPT_0x2D
000b67 940e 142c 	CALL _memcpy
                 ; 0006 0063     JOIN_A1[38] = xbee_checksum(&JOIN_A1[3],JOIN_A1[2]);
                +
000b69 e0e7     +LDI R30 , LOW ( _JOIN_A1 + ( 3 ) )
000b6a e0f9     +LDI R31 , HIGH ( _JOIN_A1 + ( 3 ) )
                 	__POINTW1MN _JOIN_A1,3
000b6b 93fa      	ST   -Y,R31
000b6c 93ea      	ST   -Y,R30
                +
000b6d 91a0 0906+LDS R26 , _JOIN_A1 + ( 2 )
                 	__GETB2MN _JOIN_A1,2
000b6f 940e 182b 	CALL SUBOPT_0x4C
                +
000b71 93e0 092a+STS _JOIN_A1 + ( 38 ) , R30
                 	__PUTB1MN _JOIN_A1,38
                 ; 0006 0064     printDebug("\r\n ++++++++++ Send Join ++++++++\r\n");
                +
000b73 eae4     +LDI R30 , LOW ( 2 * _0xC0000 + ( 34 ) )
000b74 e0f4     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 34 ) )
                 	__POINTW1FN _0xC0000,34
000b75 940e 166b 	CALL SUBOPT_0x9
                 ; 0006 0065     print_payload(JOIN_A1, 39);
000b77 e0e4      	LDI  R30,LOW(_JOIN_A1)
000b78 e0f9      	LDI  R31,HIGH(_JOIN_A1)
000b79 940e 182e 	CALL SUBOPT_0x4D
                 ; 0006 0066     xbee_sendAPI(JOIN_A1,39);
000b7b e0e4      	LDI  R30,LOW(_JOIN_A1)
000b7c e0f9      	LDI  R31,HIGH(_JOIN_A1)
000b7d c028      	RJMP _0x20C000B
                 ; 0006 0067 
                 ; 0006 0068 }
                 ;
                 ;void send_ping(){
                 ; 0006 006A void send_ping(){
                 _send_ping:
                 ; 0006 006B 
                 ; 0006 006C     memcpy(&PING_A4[5],Gateway_MacAddress,8);
                +
000b7e e3e0     +LDI R30 , LOW ( _PING_A4 + ( 5 ) )
000b7f e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 5 ) )
                 	__POINTW1MN _PING_A4,5
000b80 940e 1834 	CALL SUBOPT_0x4E
000b82 940e 142c 	CALL _memcpy
                 ; 0006 006D     memcpy(&PING_A4[18],EndDevice_MacAddress,8);
                +
000b84 e3ed     +LDI R30 , LOW ( _PING_A4 + ( 18 ) )
000b85 e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 18 ) )
                 	__POINTW1MN _PING_A4,18
000b86 940e 1828 	CALL SUBOPT_0x4B
000b88 940e 174c 	CALL SUBOPT_0x2D
000b8a 940e 142c 	CALL _memcpy
                 ; 0006 006E     memcpy(&PING_A4[26],Gateway_MacAddress,8);
                +
000b8c e4e5     +LDI R30 , LOW ( _PING_A4 + ( 26 ) )
000b8d e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 26 ) )
                 	__POINTW1MN _PING_A4,26
000b8e 940e 1834 	CALL SUBOPT_0x4E
000b90 940e 142c 	CALL _memcpy
                 ; 0006 006F     PING_A4[38] = xbee_checksum(&PING_A4[3],PING_A4[2]);
                +
000b92 e2ee     +LDI R30 , LOW ( _PING_A4 + ( 3 ) )
000b93 e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 3 ) )
                 	__POINTW1MN _PING_A4,3
000b94 93fa      	ST   -Y,R31
000b95 93ea      	ST   -Y,R30
                +
000b96 91a0 092d+LDS R26 , _PING_A4 + ( 2 )
                 	__GETB2MN _PING_A4,2
000b98 940e 182b 	CALL SUBOPT_0x4C
                +
000b9a 93e0 0951+STS _PING_A4 + ( 38 ) , R30
                 	__PUTB1MN _PING_A4,38
                 ; 0006 0070     printDebug("\r\n ++++++++++ Send Ping ++++++++\r\n");
                +
000b9c ece7     +LDI R30 , LOW ( 2 * _0xC0000 + ( 69 ) )
000b9d e0f4     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 69 ) )
                 	__POINTW1FN _0xC0000,69
000b9e 940e 166b 	CALL SUBOPT_0x9
                 ; 0006 0071     print_payload(PING_A4, 39);
000ba0 e2eb      	LDI  R30,LOW(_PING_A4)
000ba1 e0f9      	LDI  R31,HIGH(_PING_A4)
000ba2 940e 182e 	CALL SUBOPT_0x4D
                 ; 0006 0072     xbee_sendAPI(PING_A4,39);
000ba4 e2eb      	LDI  R30,LOW(_PING_A4)
000ba5 e0f9      	LDI  R31,HIGH(_PING_A4)
                 _0x20C000B:
000ba6 93fa      	ST   -Y,R31
000ba7 93ea      	ST   -Y,R30
000ba8 e2a7      	LDI  R26,LOW(39)
000ba9 e0b0      	LDI  R27,0
000baa 940e 08f7 	CALL _xbee_sendAPI
                 ; 0006 0073 
                 ; 0006 0074 }
000bac 9508      	RET
                 ;
                 ;void recive_event(uint8_t led,uint8_t state){
                 ; 0006 0076 void recive_event(uint8_t led,uint8_t state){
                 _recive_event:
                 ; 0006 0077 
                 ; 0006 0078     memcpy(&SEND_EVENT_[5],Gateway_MacAddress,8);
000bad 940e 17ed 	CALL SUBOPT_0x45
                 ;	led -> Y+1
                 ;	state -> Y+0
000baf 940e 17f7 	CALL SUBOPT_0x46
                 ; 0006 0079     memcpy(&SEND_EVENT_[18],EndDevice_MacAddress,8);
000bb1 940e 174c 	CALL SUBOPT_0x2D
000bb3 940e 17fe 	CALL SUBOPT_0x47
                 ; 0006 007A     memcpy(&SEND_EVENT_[26],Gateway_MacAddress,8);
000bb5 940e 1809 	CALL SUBOPT_0x48
                 ; 0006 007B     memcpy(&SEND_EVENT_[39],&state,1);
000bb7 940e 169d 	CALL SUBOPT_0x11
000bb9 940e 142c 	CALL _memcpy
                 ; 0006 007C     SEND_EVENT_[37] = 0xA6;
000bbb eae6      	LDI  R30,LOW(166)
000bbc 940e 1810 	CALL SUBOPT_0x49
                 ; 0006 007D     SEND_EVENT_[38] = led;
                 ; 0006 007E     SEND_EVENT_[40] = xbee_checksum(&SEND_EVENT_[3],SEND_EVENT_[2]);
                 ; 0006 007F     printDebug("\r\n ++++++++++ Send EVENT RECIVE ++++++++\r\n");
                +
000bbe eeea     +LDI R30 , LOW ( 2 * _0xC0000 + ( 104 ) )
000bbf e0f4     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 104 ) )
                 	__POINTW1FN _0xC0000,104
000bc0 940e 166b 	CALL SUBOPT_0x9
                 ; 0006 0080     print_payload(SEND_EVENT_,41);
000bc2 940e 1821 	CALL SUBOPT_0x4A
000bc4 940e 063d 	CALL _print_payload
                 ; 0006 0081     xbee_sendAPI(SEND_EVENT_,41);
000bc6 940e 1821 	CALL SUBOPT_0x4A
000bc8 940e 08f7 	CALL _xbee_sendAPI
                 ; 0006 0082 
                 ; 0006 0083 }
000bca 940c 1013 	JMP  _0x20C0008
                 ;
                 ;void send_report(uint8_t data_id,float Vavg,float Iavg,float Pavg,float WHsum){
                 ; 0006 0085 void send_report(uint8_t data_id,float Vavg,float Iavg,float Pavg,float WHsum){
                 _send_report:
                 ; 0006 0086 
                 ; 0006 0087     memcpy(&SEND_REPORT_[5],Gateway_MacAddress,8);
000bcc 940e 1cd3 	CALL __PUTPARD2
                 ;	data_id -> Y+16
                 ;	Vavg -> Y+12
                 ;	Iavg -> Y+8
                 ;	Pavg -> Y+4
                 ;	WHsum -> Y+0
                +
000bce e8e0     +LDI R30 , LOW ( _SEND_REPORT_ + ( 5 ) )
000bcf e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 5 ) )
                 	__POINTW1MN _SEND_REPORT_,5
000bd0 940e 1834 	CALL SUBOPT_0x4E
000bd2 940e 142c 	CALL _memcpy
                 ; 0006 0088     memcpy(&SEND_REPORT_[18],EndDevice_MacAddress,8);
                +
000bd4 e8ed     +LDI R30 , LOW ( _SEND_REPORT_ + ( 18 ) )
000bd5 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 18 ) )
                 	__POINTW1MN _SEND_REPORT_,18
000bd6 940e 1828 	CALL SUBOPT_0x4B
000bd8 940e 174c 	CALL SUBOPT_0x2D
000bda 940e 142c 	CALL _memcpy
                 ; 0006 0089     memcpy(&SEND_REPORT_[26],Gateway_MacAddress,8);
                +
000bdc e9e5     +LDI R30 , LOW ( _SEND_REPORT_ + ( 26 ) )
000bdd e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 26 ) )
                 	__POINTW1MN _SEND_REPORT_,26
000bde 940e 1834 	CALL SUBOPT_0x4E
000be0 940e 142c 	CALL _memcpy
                 ; 0006 008A 
                 ; 0006 008B     /*=============== Convert Data from float to ASCII ===============*/
                 ; 0006 008C     _ftoa(Vavg, _voltage,2);
000be2 940e 17c2 	CALL SUBOPT_0x3C
000be4 940e 1cce 	CALL __PUTPARD1
000be6 ece7      	LDI  R30,LOW(__voltage)
000be7 e0f9      	LDI  R31,HIGH(__voltage)
000be8 940e 183b 	CALL SUBOPT_0x4F
000bea defe      	RCALL __ftoa
                 ; 0006 008D     _ftoa(Iavg, _amp,2);
000beb 940e 183e 	CALL SUBOPT_0x50
000bed 940e 1cce 	CALL __PUTPARD1
000bef ecef      	LDI  R30,LOW(__amp)
000bf0 e0f9      	LDI  R31,HIGH(__amp)
000bf1 940e 183b 	CALL SUBOPT_0x4F
000bf3 def5      	RCALL __ftoa
                 ; 0006 008E     _ftoa(Pavg, _power,2);
000bf4 940e 17e8 	CALL SUBOPT_0x44
000bf6 940e 1cce 	CALL __PUTPARD1
000bf8 ede7      	LDI  R30,LOW(__power)
000bf9 e0f9      	LDI  R31,HIGH(__power)
000bfa 940e 183b 	CALL SUBOPT_0x4F
000bfc deec      	RCALL __ftoa
                 ; 0006 008F     _ftoa(WHsum, _watt,2);
000bfd 940e 1843 	CALL SUBOPT_0x51
000bff 940e 1cce 	CALL __PUTPARD1
000c01 edef      	LDI  R30,LOW(__watt)
000c02 e0f9      	LDI  R31,HIGH(__watt)
000c03 940e 183b 	CALL SUBOPT_0x4F
000c05 dee3      	RCALL __ftoa
                 ; 0006 0090 
                 ; 0006 0091     SEND_REPORT_[37] = 0xA7;
000c06 eae7      	LDI  R30,LOW(167)
                +
000c07 93e0 09a0+STS _SEND_REPORT_ + ( 37 ) , R30
                 	__PUTB1MN _SEND_REPORT_,37
                 ; 0006 0092     SEND_REPORT_[38] = data_id;
000c09 89e8      	LDD  R30,Y+16
                +
000c0a 93e0 09a1+STS _SEND_REPORT_ + ( 38 ) , R30
                 	__PUTB1MN _SEND_REPORT_,38
                 ; 0006 0093     memcpy(&SEND_REPORT_[40],_voltage,8);
                +
000c0c eae3     +LDI R30 , LOW ( _SEND_REPORT_ + ( 40 ) )
000c0d e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 40 ) )
                 	__POINTW1MN _SEND_REPORT_,40
000c0e 93fa      	ST   -Y,R31
000c0f 93ea      	ST   -Y,R30
000c10 ece7      	LDI  R30,LOW(__voltage)
000c11 e0f9      	LDI  R31,HIGH(__voltage)
000c12 940e 1846 	CALL SUBOPT_0x52
000c14 940e 142c 	CALL _memcpy
                 ; 0006 0094     memcpy(&SEND_REPORT_[49],_amp,8);
                +
000c16 eaec     +LDI R30 , LOW ( _SEND_REPORT_ + ( 49 ) )
000c17 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 49 ) )
                 	__POINTW1MN _SEND_REPORT_,49
000c18 93fa      	ST   -Y,R31
000c19 93ea      	ST   -Y,R30
000c1a ecef      	LDI  R30,LOW(__amp)
000c1b e0f9      	LDI  R31,HIGH(__amp)
000c1c 940e 1846 	CALL SUBOPT_0x52
000c1e 940e 142c 	CALL _memcpy
                 ; 0006 0095     memcpy(&SEND_REPORT_[58],_power,8);
                +
000c20 ebe5     +LDI R30 , LOW ( _SEND_REPORT_ + ( 58 ) )
000c21 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 58 ) )
                 	__POINTW1MN _SEND_REPORT_,58
000c22 93fa      	ST   -Y,R31
000c23 93ea      	ST   -Y,R30
000c24 ede7      	LDI  R30,LOW(__power)
000c25 e0f9      	LDI  R31,HIGH(__power)
000c26 940e 1846 	CALL SUBOPT_0x52
000c28 940e 142c 	CALL _memcpy
                 ; 0006 0096     memcpy(&SEND_REPORT_[67],_watt,8);
                +
000c2a ebee     +LDI R30 , LOW ( _SEND_REPORT_ + ( 67 ) )
000c2b e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 67 ) )
                 	__POINTW1MN _SEND_REPORT_,67
000c2c 93fa      	ST   -Y,R31
000c2d 93ea      	ST   -Y,R30
000c2e edef      	LDI  R30,LOW(__watt)
000c2f e0f9      	LDI  R31,HIGH(__watt)
000c30 940e 1846 	CALL SUBOPT_0x52
000c32 940e 142c 	CALL _memcpy
                 ; 0006 0097 
                 ; 0006 0098     SEND_REPORT_[75] = xbee_checksum(&SEND_REPORT_[3],SEND_REPORT_[2]);
                +
000c34 e7ee     +LDI R30 , LOW ( _SEND_REPORT_ + ( 3 ) )
000c35 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 3 ) )
                 	__POINTW1MN _SEND_REPORT_,3
000c36 93fa      	ST   -Y,R31
000c37 93ea      	ST   -Y,R30
                +
000c38 91a0 097d+LDS R26 , _SEND_REPORT_ + ( 2 )
                 	__GETB2MN _SEND_REPORT_,2
000c3a 940e 182b 	CALL SUBOPT_0x4C
                +
000c3c 93e0 09c6+STS _SEND_REPORT_ + ( 75 ) , R30
                 	__PUTB1MN _SEND_REPORT_,75
                 ; 0006 0099     printDebug("\r\n ++++++++++ Send REPORT ++++++++\r\n");
                +
000c3e e1e5     +LDI R30 , LOW ( 2 * _0xC0000 + ( 147 ) )
000c3f e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 147 ) )
                 	__POINTW1FN _0xC0000,147
000c40 940e 166b 	CALL SUBOPT_0x9
                 ; 0006 009A     print_payload(SEND_REPORT_,76);
000c42 940e 1849 	CALL SUBOPT_0x53
000c44 940e 063d 	CALL _print_payload
                 ; 0006 009B     xbee_sendAPI(SEND_REPORT_,76);
000c46 940e 1849 	CALL SUBOPT_0x53
000c48 940e 08f7 	CALL _xbee_sendAPI
                 ; 0006 009C 
                 ; 0006 009D }
000c4a 9661      	ADIW R28,17
000c4b 9508      	RET
                 ;
                 ;void SendStatusReport(void){
                 ; 0006 009F void SendStatusReport(void){
                 _SendStatusReport:
                 ; 0006 00A0 
                 ; 0006 00A1     Vavg = Vsum/number;      // Voltage
000c4c 940e 1850 	CALL SUBOPT_0x54
000c4e 940e 1855 	CALL SUBOPT_0x55
000c50 940e 185e 	CALL SUBOPT_0x56
000c52 93e0 0874 	STS  _Vavg,R30
000c54 93f0 0875 	STS  _Vavg+1,R31
000c56 9360 0876 	STS  _Vavg+2,R22
000c58 9370 0877 	STS  _Vavg+3,R23
                 ; 0006 00A2     Iavg = Isum/number;      // Current
000c5a 940e 1850 	CALL SUBOPT_0x54
000c5c 940e 1865 	CALL SUBOPT_0x57
000c5e 940e 185e 	CALL SUBOPT_0x56
000c60 940e 186e 	CALL SUBOPT_0x58
                 ; 0006 00A3     Pavg = Psum/number;      // Power
000c62 940e 1850 	CALL SUBOPT_0x54
000c64 940e 1877 	CALL SUBOPT_0x59
000c66 940e 185e 	CALL SUBOPT_0x56
000c68 93e0 087c 	STS  _Pavg,R30
000c6a 93f0 087d 	STS  _Pavg+1,R31
000c6c 9360 087e 	STS  _Pavg+2,R22
000c6e 9370 087f 	STS  _Pavg+3,R23
                 ; 0006 00A4 
                 ; 0006 00A5     CURRENT_VOLT = Vavg;
000c70 940e 1880 	CALL SUBOPT_0x5A
000c72 93e0 0601 	STS  _CURRENT_VOLT,R30
000c74 93f0 0602 	STS  _CURRENT_VOLT+1,R31
000c76 9360 0603 	STS  _CURRENT_VOLT+2,R22
000c78 9370 0604 	STS  _CURRENT_VOLT+3,R23
                 ; 0006 00A6     CURRENT_AMP = Iavg;
000c7a 940e 1889 	CALL SUBOPT_0x5B
000c7c 93e0 0605 	STS  _CURRENT_AMP,R30
000c7e 93f0 0606 	STS  _CURRENT_AMP+1,R31
000c80 9360 0607 	STS  _CURRENT_AMP+2,R22
000c82 9370 0608 	STS  _CURRENT_AMP+3,R23
                 ; 0006 00A7 
                 ; 0006 00A8     printDebug("\r\n======================================================\r\n");
                +
000c84 e3ea     +LDI R30 , LOW ( 2 * _0xC0000 + ( 184 ) )
000c85 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 184 ) )
                 	__POINTW1FN _0xC0000,184
000c86 940e 166b 	CALL SUBOPT_0x9
                 ; 0006 00A9     printDebug("Vsum = %0.4f  ", Vsum); printDebug("Isum = %0.4f  ", Isum); printDebug("Psum = %0.4f\r\n", Psum);
                +
000c88 e7e5     +LDI R30 , LOW ( 2 * _0xC0000 + ( 243 ) )
000c89 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 243 ) )
                 	__POINTW1FN _0xC0000,243
000c8a 93fa      	ST   -Y,R31
000c8b 93ea      	ST   -Y,R30
000c8c 91e0 0864 	LDS  R30,_Vsum
000c8e 91f0 0865 	LDS  R31,_Vsum+1
000c90 9160 0866 	LDS  R22,_Vsum+2
000c92 9170 0867 	LDS  R23,_Vsum+3
000c94 940e 1677 	CALL SUBOPT_0xB
                +
000c96 e8e4     +LDI R30 , LOW ( 2 * _0xC0000 + ( 258 ) )
000c97 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 258 ) )
                 	__POINTW1FN _0xC0000,258
000c98 93fa      	ST   -Y,R31
000c99 93ea      	ST   -Y,R30
000c9a 91e0 0868 	LDS  R30,_Isum
000c9c 91f0 0869 	LDS  R31,_Isum+1
000c9e 9160 086a 	LDS  R22,_Isum+2
000ca0 9170 086b 	LDS  R23,_Isum+3
000ca2 940e 1677 	CALL SUBOPT_0xB
                +
000ca4 e9e3     +LDI R30 , LOW ( 2 * _0xC0000 + ( 273 ) )
000ca5 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 273 ) )
                 	__POINTW1FN _0xC0000,273
000ca6 93fa      	ST   -Y,R31
000ca7 93ea      	ST   -Y,R30
000ca8 91e0 086c 	LDS  R30,_Psum
000caa 91f0 086d 	LDS  R31,_Psum+1
000cac 9160 086e 	LDS  R22,_Psum+2
000cae 9170 086f 	LDS  R23,_Psum+3
000cb0 940e 1677 	CALL SUBOPT_0xB
                 ; 0006 00AA     printDebug("Vavg = %0.4f   ", Vavg); printDebug("Iavg = %0.4f   ", Iavg); printDebug("Pavg = %0.4f\r\n", Pavg);
                +
000cb2 eae2     +LDI R30 , LOW ( 2 * _0xC0000 + ( 288 ) )
000cb3 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 288 ) )
                 	__POINTW1FN _0xC0000,288
000cb4 93fa      	ST   -Y,R31
000cb5 93ea      	ST   -Y,R30
000cb6 940e 1880 	CALL SUBOPT_0x5A
000cb8 940e 1677 	CALL SUBOPT_0xB
                +
000cba ebe2     +LDI R30 , LOW ( 2 * _0xC0000 + ( 304 ) )
000cbb e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 304 ) )
                 	__POINTW1FN _0xC0000,304
000cbc 93fa      	ST   -Y,R31
000cbd 93ea      	ST   -Y,R30
000cbe 940e 1889 	CALL SUBOPT_0x5B
000cc0 940e 1677 	CALL SUBOPT_0xB
                +
000cc2 ece2     +LDI R30 , LOW ( 2 * _0xC0000 + ( 320 ) )
000cc3 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 320 ) )
                 	__POINTW1FN _0xC0000,320
000cc4 93fa      	ST   -Y,R31
000cc5 93ea      	ST   -Y,R30
000cc6 940e 1892 	CALL SUBOPT_0x5C
000cc8 940e 1677 	CALL SUBOPT_0xB
                 ; 0006 00AB     printDebug("Watt-Hour Sum = %0.4f\r\n", WHsum);
                +
000cca ede1     +LDI R30 , LOW ( 2 * _0xC0000 + ( 335 ) )
000ccb e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 335 ) )
                 	__POINTW1FN _0xC0000,335
000ccc 93fa      	ST   -Y,R31
000ccd 93ea      	ST   -Y,R30
000cce 91e0 0870 	LDS  R30,_WHsum
000cd0 91f0 0871 	LDS  R31,_WHsum+1
000cd2 9160 0872 	LDS  R22,_WHsum+2
000cd4 9170 0873 	LDS  R23,_WHsum+3
000cd6 940e 1677 	CALL SUBOPT_0xB
                 ; 0006 00AC     printDebug("Number Sampling = %d\r\n", number);
                +
000cd8 eee9     +LDI R30 , LOW ( 2 * _0xC0000 + ( 359 ) )
000cd9 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 359 ) )
                 	__POINTW1FN _0xC0000,359
000cda 93fa      	ST   -Y,R31
000cdb 93ea      	ST   -Y,R30
000cdc 940e 1850 	CALL SUBOPT_0x54
000cde 940e 1703 	CALL SUBOPT_0x23
                 ; 0006 00AD     printDebug("======================================================\r\n\r\n");
                +
000ce0 e0e0     +LDI R30 , LOW ( 2 * _0xC0000 + ( 382 ) )
000ce1 e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 382 ) )
                 	__POINTW1FN _0xC0000,382
000ce2 940e 166b 	CALL SUBOPT_0x9
                 ; 0006 00AE 
                 ; 0006 00AF     Iavg *= 1000.0;
000ce4 940e 189b 	CALL SUBOPT_0x5D
000ce6 940e 1b19 	CALL __MULF12
000ce8 940e 186e 	CALL SUBOPT_0x58
                 ; 0006 00B0     send_report(01,Vavg,Iavg,Pavg,WHsum);
000cea e0e1      	LDI  R30,LOW(1)
000ceb 93ea      	ST   -Y,R30
000cec 940e 1880 	CALL SUBOPT_0x5A
000cee 940e 1cce 	CALL __PUTPARD1
000cf0 940e 1889 	CALL SUBOPT_0x5B
000cf2 940e 1cce 	CALL __PUTPARD1
000cf4 940e 1892 	CALL SUBOPT_0x5C
000cf6 940e 1cce 	CALL __PUTPARD1
000cf8 940e 18a8 	CALL SUBOPT_0x5E
000cfa ded1      	RCALL _send_report
                 ; 0006 00B1     Iavg /= 1000.0;
000cfb 940e 189b 	CALL SUBOPT_0x5D
000cfd 940e 1b67 	CALL __DIVF21
000cff 940e 186e 	CALL SUBOPT_0x58
                 ; 0006 00B2     /* Safety Current Sensor */
                 ; 0006 00B3     if((SENSOR_SENSITIVE == SENSOR5A) && (Iavg > 4.9)) {
000d01 940e 18b1 	CALL SUBOPT_0x5F
                +
000d03 30a0     +CPI R26 , LOW ( 0x43390000 )
000d04 e0e0     +LDI R30 , HIGH ( 0x43390000 )
000d05 07be     +CPC R27 , R30
000d06 e3e9     +LDI R30 , BYTE3 ( 0x43390000 )
000d07 078e     +CPC R24 , R30
000d08 e4e3     +LDI R30 , BYTE4 ( 0x43390000 )
000d09 079e     +CPC R25 , R30
                 	__CPD2N 0x43390000
000d0a f469      	BRNE _0xC0013
000d0b 940e 18ba 	CALL SUBOPT_0x60
                +
000d0d eced     +LDI R30 , LOW ( 0x409CCCCD )
000d0e ecfc     +LDI R31 , HIGH ( 0x409CCCCD )
000d0f e96c     +LDI R22 , BYTE3 ( 0x409CCCCD )
000d10 e470     +LDI R23 , BYTE4 ( 0x409CCCCD )
                 	__GETD1N 0x409CCCCD
000d11 940e 1bac 	CALL __CMPF12
000d13 f009      	BREQ PC+2
000d14 f410      	BRCC PC+3
000d15 940c 0d18 	JMP  _0xC0013
000d17 c001      	RJMP _0xC0014
                 _0xC0013:
000d18 c001      	RJMP _0xC0012
                 _0xC0014:
                 ; 0006 00B4         SWITCH = TURN_OFF;
000d19 c031      	RJMP _0xC0023
                 ; 0006 00B5         POWER_RELAY_OFF;
                 ; 0006 00B6         LED_STAT_OFF;
                 ; 0006 00B7         CURRENT_VOLT = 0.0;
                 ; 0006 00B8         CURRENT_AMP = 0.0;
                 ; 0006 00B9         printDebug("Current Exceed --SWITCH OFF!\r\n");
                 ; 0006 00BA     }else if((SENSOR_SENSITIVE == SENSOR20A) && (Iavg > 19.9)) {
                 _0xC0012:
000d1a 940e 18b1 	CALL SUBOPT_0x5F
                +
000d1c 30a0     +CPI R26 , LOW ( 0x42C80000 )
000d1d e0e0     +LDI R30 , HIGH ( 0x42C80000 )
000d1e 07be     +CPC R27 , R30
000d1f ece8     +LDI R30 , BYTE3 ( 0x42C80000 )
000d20 078e     +CPC R24 , R30
000d21 e4e2     +LDI R30 , BYTE4 ( 0x42C80000 )
000d22 079e     +CPC R25 , R30
                 	__CPD2N 0x42C80000
000d23 f469      	BRNE _0xC0019
000d24 940e 18ba 	CALL SUBOPT_0x60
                +
000d26 e3e3     +LDI R30 , LOW ( 0x419F3333 )
000d27 e3f3     +LDI R31 , HIGH ( 0x419F3333 )
000d28 e96f     +LDI R22 , BYTE3 ( 0x419F3333 )
000d29 e471     +LDI R23 , BYTE4 ( 0x419F3333 )
                 	__GETD1N 0x419F3333
000d2a 940e 1bac 	CALL __CMPF12
000d2c f009      	BREQ PC+2
000d2d f410      	BRCC PC+3
000d2e 940c 0d31 	JMP  _0xC0019
000d30 c001      	RJMP _0xC001A
                 _0xC0019:
000d31 c001      	RJMP _0xC0018
                 _0xC001A:
                 ; 0006 00BB         SWITCH = TURN_OFF;
000d32 c018      	RJMP _0xC0023
                 ; 0006 00BC         POWER_RELAY_OFF;
                 ; 0006 00BD         LED_STAT_OFF;
                 ; 0006 00BE         CURRENT_VOLT = 0.0;
                 ; 0006 00BF         CURRENT_AMP = 0.0;
                 ; 0006 00C0         printDebug("Current Exceed --SWITCH OFF!\r\n");
                 ; 0006 00C1     }else if((SENSOR_SENSITIVE == SENSOR30A) && (Iavg > 29.9)) {
                 _0xC0018:
000d33 940e 18b1 	CALL SUBOPT_0x5F
                +
000d35 30a0     +CPI R26 , LOW ( 0x42840000 )
000d36 e0e0     +LDI R30 , HIGH ( 0x42840000 )
000d37 07be     +CPC R27 , R30
000d38 e8e4     +LDI R30 , BYTE3 ( 0x42840000 )
000d39 078e     +CPC R24 , R30
000d3a e4e2     +LDI R30 , BYTE4 ( 0x42840000 )
000d3b 079e     +CPC R25 , R30
                 	__CPD2N 0x42840000
000d3c f469      	BRNE _0xC001F
000d3d 940e 18ba 	CALL SUBOPT_0x60
                +
000d3f e3e3     +LDI R30 , LOW ( 0x41EF3333 )
000d40 e3f3     +LDI R31 , HIGH ( 0x41EF3333 )
000d41 ee6f     +LDI R22 , BYTE3 ( 0x41EF3333 )
000d42 e471     +LDI R23 , BYTE4 ( 0x41EF3333 )
                 	__GETD1N 0x41EF3333
000d43 940e 1bac 	CALL __CMPF12
000d45 f009      	BREQ PC+2
000d46 f410      	BRCC PC+3
000d47 940c 0d4a 	JMP  _0xC001F
000d49 c001      	RJMP _0xC0020
                 _0xC001F:
000d4a c01b      	RJMP _0xC001E
                 _0xC0020:
                 ; 0006 00C2         SWITCH = TURN_OFF;
                 _0xC0023:
000d4b e0e0      	LDI  R30,LOW(0)
000d4c 93e0 0600 	STS  _SWITCH,R30
                 ; 0006 00C3         POWER_RELAY_OFF;
000d4e 940e 161b 	CALL SUBOPT_0x1
                 ; 0006 00C4         LED_STAT_OFF;
000d50 9aaf      	SBI  0x15,7
                 ; 0006 00C5         CURRENT_VOLT = 0.0;
000d51 e0e0      	LDI  R30,LOW(0)
000d52 93e0 0601 	STS  _CURRENT_VOLT,R30
000d54 93e0 0602 	STS  _CURRENT_VOLT+1,R30
000d56 93e0 0603 	STS  _CURRENT_VOLT+2,R30
000d58 93e0 0604 	STS  _CURRENT_VOLT+3,R30
                 ; 0006 00C6         CURRENT_AMP = 0.0;
000d5a 93e0 0605 	STS  _CURRENT_AMP,R30
000d5c 93e0 0606 	STS  _CURRENT_AMP+1,R30
000d5e 93e0 0607 	STS  _CURRENT_AMP+2,R30
000d60 93e0 0608 	STS  _CURRENT_AMP+3,R30
                 ; 0006 00C7         printDebug("Current Exceed --SWITCH OFF!\r\n");
                +
000d62 e3eb     +LDI R30 , LOW ( 2 * _0xC0000 + ( 441 ) )
000d63 e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 441 ) )
                 	__POINTW1FN _0xC0000,441
000d64 940e 166b 	CALL SUBOPT_0x9
                 ; 0006 00C8     }
                 ; 0006 00C9 
                 ; 0006 00CA     /* Reset value */
                 ; 0006 00CB     number = 0;
                 _0xC001E:
000d66 e0e0      	LDI  R30,LOW(0)
000d67 93e0 0830 	STS  _number,R30
000d69 93e0 0831 	STS  _number+1,R30
                 ; 0006 00CC     Vsum = 0.0;
000d6b 93e0 0864 	STS  _Vsum,R30
000d6d 93e0 0865 	STS  _Vsum+1,R30
000d6f 93e0 0866 	STS  _Vsum+2,R30
000d71 93e0 0867 	STS  _Vsum+3,R30
                 ; 0006 00CD     Isum = 0.0;
000d73 93e0 0868 	STS  _Isum,R30
000d75 93e0 0869 	STS  _Isum+1,R30
000d77 93e0 086a 	STS  _Isum+2,R30
000d79 93e0 086b 	STS  _Isum+3,R30
                 ; 0006 00CE     Psum = 0.0;
000d7b 93e0 086c 	STS  _Psum,R30
000d7d 93e0 086d 	STS  _Psum+1,R30
000d7f 93e0 086e 	STS  _Psum+2,R30
000d81 93e0 086f 	STS  _Psum+3,R30
                 ; 0006 00CF     WHsum = 0.0;
000d83 93e0 0870 	STS  _WHsum,R30
000d85 93e0 0871 	STS  _WHsum+1,R30
000d87 93e0 0872 	STS  _WHsum+2,R30
000d89 93e0 0873 	STS  _WHsum+3,R30
                 ; 0006 00D0 
                 ; 0006 00D1 }
000d8b 9508      	RET
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <adc.h>
                 ;#include <debug.h>
                 ;
                 ;char Vreferent = VREF_AVCC;
                 
                 	.DSEG
                 ;
                 ;
                 ;void init_adc(unsigned char vrff) {
                 ; 0007 000C void init_adc(unsigned char vrff) {
                 
                 	.CSEG
                 _init_adc:
                 ; 0007 000D 
                 ; 0007 000E     // ADC initialization
                 ; 0007 000F     // ADC Clock frequency: 691.200 kHz
                 ; 0007 0010     // ADC Voltage Reference: vrff
                 ; 0007 0011     Vreferent = vrff;
000d8c 93aa      	ST   -Y,R26
                 ;	vrff -> Y+0
000d8d 81e8      	LD   R30,Y
000d8e 93e0 09e7 	STS  _Vreferent,R30
                 ; 0007 0012     ADMUX = Vreferent & 0xff;
000d90 b9e7      	OUT  0x7,R30
                 ; 0007 0013     ADCSRA = 0xA4;
000d91 eae4      	LDI  R30,LOW(164)
000d92 b9e6      	OUT  0x6,R30
                 ; 0007 0014     //printDebug("ADMUX = %02X\r\n", ADMUX);
                 ; 0007 0015 
                 ; 0007 0016 }
000d93 9621      	ADIW R28,1
000d94 9508      	RET
                 ;
                 ;// Read the AD conversion result
                 ;uint16_t read_adc(unsigned char adc_input) {
                 ; 0007 0019 uint16_t read_adc(unsigned char adc_input) {
                 _read_adc:
                 ; 0007 001A 
                 ; 0007 001B     unsigned int adc_data = 0x0000;
                 ; 0007 001C 
                 ; 0007 001D     ADMUX = (Vreferent | adc_input);
000d95 93aa      	ST   -Y,R26
000d96 931a      	ST   -Y,R17
000d97 930a      	ST   -Y,R16
                 ;	adc_input -> Y+2
                 ;	adc_data -> R16,R17
                +
000d98 e000     +LDI R16 , LOW ( 0 )
000d99 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000d9a 81ea      	LDD  R30,Y+2
000d9b 91a0 09e7 	LDS  R26,_Vreferent
000d9d 2bea      	OR   R30,R26
000d9e b9e7      	OUT  0x7,R30
                 ; 0007 001E     //printDebug("ADMUX = %02X\r\n", ADMUX);
                 ; 0007 001F 
                 ; 0007 0020     // Delay needed for the stabilization of the ADC input voltage
                 ; 0007 0021     delay_us(50);
                +
000d9f eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
000da0 958a     +DEC R24
000da1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
                 ; 0007 0022 
                 ; 0007 0023     // Start the AD conversion
                 ; 0007 0024     ADCSRA |= 0x80; // ENABLE ADC
000da2 9a37      	SBI  0x6,7
                 ; 0007 0025     ADCSRA |= 0x40;  // Start convert
000da3 9a36      	SBI  0x6,6
                 ; 0007 0026 
                 ; 0007 0027     // Wait for the AD conversion to complete
                 ; 0007 0028     while((ADCSRA & 0x10) == 0);
                 _0xE0004:
000da4 9b34      	SBIS 0x6,4
000da5 cffe      	RJMP _0xE0004
                 ; 0007 0029     adc_data = ADCL;
000da6 b104      	IN   R16,4
000da7 2711      	CLR  R17
                 ; 0007 002A     adc_data |= (ADCH & 0x00ff) << 8;
000da8 b1e5      	IN   R30,0x5
000da9 2ffe      	MOV  R31,R30
000daa e0e0      	LDI  R30,0
                +
000dab 2b0e     +OR R16 , R30
000dac 2b1f     +OR R17 , R31
                 	__ORWRR 16,17,30,31
                 ; 0007 002B 
                 ; 0007 002C     ADCSRA |= 0x10;
000dad 9a34      	SBI  0x6,4
                 ; 0007 002D 
                 ; 0007 002E     return adc_data;
000dae 01f8      	MOVW R30,R16
000daf 8119      	LDD  R17,Y+1
000db0 8108      	LDD  R16,Y+0
000db1 c00b      	RJMP _0x20C000A
                 ; 0007 002F }
                 ;
                 ;
                 ;
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <uart.h>
                 ;#include <int_protocol.h>
                 ;#include <debug.h>
                 ;
                 ;uint8_t Eaddress        = 5;
                 
                 	.DSEG
                 ;
                 ;void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
                 ; 0008 000C void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
                 
                 	.CSEG
                 _EEPROM_write:
                 ; 0008 000D     while(EECR & (1<<EEWE))
000db2 93aa      	ST   -Y,R26
                 ;	uiAddress -> Y+1
                 ;	ucData -> Y+0
                 _0x100004:
000db3 99e1      	SBIC 0x1C,1
                 ; 0008 000E     ;
000db4 cffe      	RJMP _0x100004
                 ; 0008 000F     EEAR = uiAddress;
000db5 81e9      	LDD  R30,Y+1
000db6 81fa      	LDD  R31,Y+1+1
000db7 bbff      	OUT  0x1E+1,R31
000db8 bbee      	OUT  0x1E,R30
                 ; 0008 0010     EEDR = ucData;
000db9 81e8      	LD   R30,Y
000dba bbed      	OUT  0x1D,R30
                 ; 0008 0011     EECR |= (1<<EEMWE);
000dbb 9ae2      	SBI  0x1C,2
                 ; 0008 0012     EECR |= (1<<EEWE);
000dbc 9ae1      	SBI  0x1C,1
                 ; 0008 0013 }
                 _0x20C000A:
000dbd 9623      	ADIW R28,3
000dbe 9508      	RET
                 ;
                 ;
                 ;unsigned char EEPROM_read(unsigned int uiAddress){
                 ; 0008 0016 unsigned char EEPROM_read(unsigned int uiAddress){
                 _EEPROM_read:
                 ; 0008 0017     while(EECR & (1<<EEWE))
000dbf 93ba      	ST   -Y,R27
000dc0 93aa      	ST   -Y,R26
                 ;	uiAddress -> Y+0
                 _0x100007:
000dc1 99e1      	SBIC 0x1C,1
                 ; 0008 0018     ;
000dc2 cffe      	RJMP _0x100007
                 ; 0008 0019     EEAR = uiAddress;
000dc3 81e8      	LD   R30,Y
000dc4 81f9      	LDD  R31,Y+1
000dc5 bbff      	OUT  0x1E+1,R31
000dc6 bbee      	OUT  0x1E,R30
                 ; 0008 001A     EECR |= (1<<EERE);
000dc7 9ae0      	SBI  0x1C,0
                 ; 0008 001B     return EEDR;
000dc8 b3ed      	IN   R30,0x1D
000dc9 940c 1013 	JMP  _0x20C0008
                 ; 0008 001C }
                 ;
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <uart.h>
                 ;#include <int_protocol.h>
                 ;#include <debug.h>
                 ;#include <adc.h>
                 ;#include <math.h>
                 ;#include <meansure.h>
                 ;
                 ;float SENSOR_SENSITIVE;
                 ;float AMP_ADJ_ZERO;
                 ;float total                 = 0.0;
                 ;float avg                   = 2500.0;
                 
                 	.DSEG
                 ;float value                 = 0.0;
                 ;float Viout                 = 0.0;
                 ;float Vdif                  = 0.0;
                 ;float Vsq_avg               = 0.0;
                 ;float volt                  = 0.0;
                 ;float amp                   = 0.0;
                 ;float power                 = 0.0;
                 ;float whour                 = 0.0;
                 ;float Vsum                  = 0.0;
                 ;float Isum                  = 0.0;
                 ;float Psum                  = 0.0;
                 ;float WHsum                 = 0.0;
                 ;float Vavg                  = 0.0;
                 ;float Iavg                  = 0.0;
                 ;float Pavg                  = 0.0;
                 ;float CURRENT_VOLT          = 0.0;
                 ;float CURRENT_AMP           = 0.0;
                 ;uint16_t number             = 0;
                 ;uint16_t adcValue           = 0;
                 ;uint16_t countSampling      = 0;
                 ;eeprom float ADJ0_SENSOR5A  = 0.090;
                 ;eeprom float ADJ0_SENSOR20A = 0.11;
                 ;eeprom float ADJ0_SENSOR30A = 0.11;
                 ;
                 ;void ReadCurrent(void){
                 ; 0009 0029 void ReadCurrent(void){
                 
                 	.CSEG
                 _ReadCurrent:
                 ; 0009 002A     adcValue = read_adc(ADC1);
000dcb e0a1      	LDI  R26,LOW(1)
000dcc 940e 18c3 	CALL SUBOPT_0x61
                 ; 0009 002B     printDebug("ADC = %d\r\n", adcValue);
                +
000dce e6e2     +LDI R30 , LOW ( 2 * _0x120000 + ( 0 ) )
000dcf e0f6     +LDI R31 , HIGH ( 2 * _0x120000 + ( 0 ) )
                 	__POINTW1FN _0x120000,0
000dd0 93fa      	ST   -Y,R31
000dd1 93ea      	ST   -Y,R30
000dd2 940e 18ca 	CALL SUBOPT_0x62
000dd4 940e 1703 	CALL SUBOPT_0x23
                 ; 0009 002C     value = adcValue * (5000.0 / 1023.0);
000dd6 940e 18cf 	CALL SUBOPT_0x63
                +
000dd8 e1aa     +LDI R26 , LOW ( 0x409C671A )
000dd9 e6b7     +LDI R27 , HIGH ( 0x409C671A )
000dda e98c     +LDI R24 , BYTE3 ( 0x409C671A )
000ddb e490     +LDI R25 , BYTE4 ( 0x409C671A )
                 	__GETD2N 0x409C671A
000ddc 940e 1b19 	CALL __MULF12
000dde 93e0 0844 	STS  _value,R30
000de0 93f0 0845 	STS  _value+1,R31
000de2 9360 0846 	STS  _value+2,R22
000de4 9370 0847 	STS  _value+3,R23
                 ; 0009 002D 
                 ; 0009 002E     // Keep track of the moving average
                 ; 0009 002F     // See more : http://jeelabs.org/2011/09/15/power-measurement-acs-code/
                 ; 0009 0030     avg = (499.0*avg + value) / 500.0;
000de6 940e 18d5 	CALL SUBOPT_0x64
                +
000de8 e0a0     +LDI R26 , LOW ( 0x43F98000 )
000de9 e8b0     +LDI R27 , HIGH ( 0x43F98000 )
000dea ef89     +LDI R24 , BYTE3 ( 0x43F98000 )
000deb e493     +LDI R25 , BYTE4 ( 0x43F98000 )
                 	__GETD2N 0x43F98000
000dec 940e 1b19 	CALL __MULF12
000dee 940e 18de 	CALL SUBOPT_0x65
000df0 940e 18e7 	CALL SUBOPT_0x66
                +
000df2 e0e0     +LDI R30 , LOW ( 0x43FA0000 )
000df3 e0f0     +LDI R31 , HIGH ( 0x43FA0000 )
000df4 ef6a     +LDI R22 , BYTE3 ( 0x43FA0000 )
000df5 e473     +LDI R23 , BYTE4 ( 0x43FA0000 )
                 	__GETD1N 0x43FA0000
000df6 940e 1b67 	CALL __DIVF21
000df8 93e0 0840 	STS  _avg,R30
000dfa 93f0 0841 	STS  _avg+1,R31
000dfc 9360 0842 	STS  _avg+2,R22
000dfe 9370 0843 	STS  _avg+3,R23
                 ; 0009 0031 
                 ; 0009 0032     if(value > avg){
000e00 940e 18ec 	CALL SUBOPT_0x67
000e02 f009      	BREQ PC+2
000e03 f410      	BRCC PC+3
000e04 940c 0e17 	JMP  _0x120004
                 ; 0009 0033         Vdif = value - avg;
000e06 91a0 0840 	LDS  R26,_avg
000e08 91b0 0841 	LDS  R27,_avg+1
000e0a 9180 0842 	LDS  R24,_avg+2
000e0c 9190 0843 	LDS  R25,_avg+3
000e0e 91e0 0844 	LDS  R30,_value
000e10 91f0 0845 	LDS  R31,_value+1
000e12 9160 0846 	LDS  R22,_value+2
000e14 9170 0847 	LDS  R23,_value+3
000e16 c007      	RJMP _0x12000B
                 ; 0009 0034         total += (Vdif*Vdif);
                 ; 0009 0035     }else if(value < avg) {
                 _0x120004:
000e17 940e 18ec 	CALL SUBOPT_0x67
000e19 f520      	BRSH _0x120006
                 ; 0009 0036         Vdif = avg - value;
000e1a 940e 18de 	CALL SUBOPT_0x65
000e1c 940e 18d5 	CALL SUBOPT_0x64
                 _0x12000B:
000e1e 940e 1ac2 	CALL __SUBF12
000e20 93e0 084c 	STS  _Vdif,R30
000e22 93f0 084d 	STS  _Vdif+1,R31
000e24 9360 084e 	STS  _Vdif+2,R22
000e26 9370 084f 	STS  _Vdif+3,R23
                 ; 0009 0037         total += (Vdif*Vdif);
000e28 91a0 084c 	LDS  R26,_Vdif
000e2a 91b0 084d 	LDS  R27,_Vdif+1
000e2c 9180 084e 	LDS  R24,_Vdif+2
000e2e 9190 084f 	LDS  R25,_Vdif+3
000e30 940e 1b19 	CALL __MULF12
000e32 940e 18f1 	CALL SUBOPT_0x68
000e34 940e 1ac9 	CALL __ADDF12
000e36 93e0 083c 	STS  _total,R30
000e38 93f0 083d 	STS  _total+1,R31
000e3a 9360 083e 	STS  _total+2,R22
000e3c 9370 083f 	STS  _total+3,R23
                 ; 0009 0038     }
                 ; 0009 0039     countSampling++;
                 _0x120006:
000e3e e8a0      	LDI  R26,LOW(_countSampling)
000e3f e0b8      	LDI  R27,HIGH(_countSampling)
000e40 c10a      	RJMP _0x20C0009
                 ; 0009 003A }
                 ;
                 ;void ReadVoltage(void){
                 ; 0009 003C void ReadVoltage(void){
                 _ReadVoltage:
                 ; 0009 003D    /*---------- Voltage ----------*/
                 ; 0009 003E     adcValue = read_adc(ADC0);
000e41 e0a0      	LDI  R26,LOW(0)
000e42 940e 18c3 	CALL SUBOPT_0x61
                 ; 0009 003F     volt = (((adcValue*5.0)/1023.0)/0.01);
000e44 940e 18cf 	CALL SUBOPT_0x63
                +
000e46 e0a0     +LDI R26 , LOW ( 0x40A00000 )
000e47 e0b0     +LDI R27 , HIGH ( 0x40A00000 )
000e48 ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
000e49 e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
000e4a 940e 18fa 	CALL SUBOPT_0x69
                +
000e4c e0e0     +LDI R30 , LOW ( 0x447FC000 )
000e4d ecf0     +LDI R31 , HIGH ( 0x447FC000 )
000e4e e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
000e4f e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
000e50 940e 1b67 	CALL __DIVF21
000e52 01df      	MOVW R26,R30
000e53 01cb      	MOVW R24,R22
                +
000e54 e0ea     +LDI R30 , LOW ( 0x3C23D70A )
000e55 edf7     +LDI R31 , HIGH ( 0x3C23D70A )
000e56 e263     +LDI R22 , BYTE3 ( 0x3C23D70A )
000e57 e37c     +LDI R23 , BYTE4 ( 0x3C23D70A )
                 	__GETD1N 0x3C23D70A
000e58 940e 1b67 	CALL __DIVF21
000e5a 93e0 0854 	STS  _volt,R30
000e5c 93f0 0855 	STS  _volt+1,R31
000e5e 9360 0856 	STS  _volt+2,R22
000e60 9370 0857 	STS  _volt+3,R23
                 ; 0009 0040     if(volt < 223.0) {
000e62 940e 18ff 	CALL SUBOPT_0x6A
                +
000e64 e0e0     +LDI R30 , LOW ( 0x435F0000 )
000e65 e0f0     +LDI R31 , HIGH ( 0x435F0000 )
000e66 e56f     +LDI R22 , BYTE3 ( 0x435F0000 )
000e67 e473     +LDI R23 , BYTE4 ( 0x435F0000 )
                 	__GETD1N 0x435F0000
000e68 940e 1bac 	CALL __CMPF12
000e6a f448      	BRSH _0x120007
                 ; 0009 0041         volt += 9.0;
000e6b 940e 1908 	CALL SUBOPT_0x6B
                +
000e6d e0a0     +LDI R26 , LOW ( 0x41100000 )
000e6e e0b0     +LDI R27 , HIGH ( 0x41100000 )
000e6f e180     +LDI R24 , BYTE3 ( 0x41100000 )
000e70 e491     +LDI R25 , BYTE4 ( 0x41100000 )
                 	__GETD2N 0x41100000
000e71 940e 1ac9 	CALL __ADDF12
000e73 c014      	RJMP _0x12000C
                 ; 0009 0042     }else if(volt > 233.0) {
                 _0x120007:
000e74 940e 18ff 	CALL SUBOPT_0x6A
                +
000e76 e0e0     +LDI R30 , LOW ( 0x43690000 )
000e77 e0f0     +LDI R31 , HIGH ( 0x43690000 )
000e78 e669     +LDI R22 , BYTE3 ( 0x43690000 )
000e79 e473     +LDI R23 , BYTE4 ( 0x43690000 )
                 	__GETD1N 0x43690000
000e7a 940e 1bac 	CALL __CMPF12
000e7c f009      	BREQ PC+2
000e7d f410      	BRCC PC+3
000e7e 940c 0e90 	JMP  _0x120009
                 ; 0009 0043         volt -= 4.0;
000e80 940e 1908 	CALL SUBOPT_0x6B
                +
000e82 e0a0     +LDI R26 , LOW ( 0x40800000 )
000e83 e0b0     +LDI R27 , HIGH ( 0x40800000 )
000e84 e880     +LDI R24 , BYTE3 ( 0x40800000 )
000e85 e490     +LDI R25 , BYTE4 ( 0x40800000 )
                 	__GETD2N 0x40800000
000e86 940e 1ac2 	CALL __SUBF12
                 _0x12000C:
000e88 93e0 0854 	STS  _volt,R30
000e8a 93f0 0855 	STS  _volt+1,R31
000e8c 9360 0856 	STS  _volt+2,R22
000e8e 9370 0857 	STS  _volt+3,R23
                 ; 0009 0044     }
                 ; 0009 0045     printDebug("Volt = %f\r\n", volt);
                 _0x120009:
                +
000e90 e6ed     +LDI R30 , LOW ( 2 * _0x120000 + ( 11 ) )
000e91 e0f6     +LDI R31 , HIGH ( 2 * _0x120000 + ( 11 ) )
                 	__POINTW1FN _0x120000,11
000e92 93fa      	ST   -Y,R31
000e93 93ea      	ST   -Y,R30
000e94 940e 1908 	CALL SUBOPT_0x6B
000e96 940e 1677 	CALL SUBOPT_0xB
                 ; 0009 0046     Vsum += volt;
000e98 940e 1908 	CALL SUBOPT_0x6B
000e9a 940e 1855 	CALL SUBOPT_0x55
000e9c 940e 1ac9 	CALL __ADDF12
000e9e 93e0 0864 	STS  _Vsum,R30
000ea0 93f0 0865 	STS  _Vsum+1,R31
000ea2 9360 0866 	STS  _Vsum+2,R22
000ea4 9370 0867 	STS  _Vsum+3,R23
                 ; 0009 0047 
                 ; 0009 0048     /*---------- Current ----------*/
                 ; 0009 0049     // V-rms
                 ; 0009 004A     // See more : http://www.electronics-tutorials.ws/blog/rms-voltage.html
                 ; 0009 004B     Vsq_avg = total / countSampling;
000ea6 91e0 0880 	LDS  R30,_countSampling
000ea8 91f0 0881 	LDS  R31,_countSampling+1
000eaa 940e 18f1 	CALL SUBOPT_0x68
000eac 940e 185e 	CALL SUBOPT_0x56
000eae 93e0 0850 	STS  _Vsq_avg,R30
000eb0 93f0 0851 	STS  _Vsq_avg+1,R31
000eb2 9360 0852 	STS  _Vsq_avg+2,R22
000eb4 9370 0853 	STS  _Vsq_avg+3,R23
                 ; 0009 004C     Viout = sqrt(Vsq_avg);
000eb6 91a0 0850 	LDS  R26,_Vsq_avg
000eb8 91b0 0851 	LDS  R27,_Vsq_avg+1
000eba 9180 0852 	LDS  R24,_Vsq_avg+2
000ebc 9190 0853 	LDS  R25,_Vsq_avg+3
000ebe 940e 1bcc 	CALL _sqrt
000ec0 93e0 0848 	STS  _Viout,R30
000ec2 93f0 0849 	STS  _Viout+1,R31
000ec4 9360 084a 	STS  _Viout+2,R22
000ec6 9370 084b 	STS  _Viout+3,R23
                 ; 0009 004D     amp = Viout / SENSOR_SENSITIVE;                  // ACS712 +-5 or +-20 or +-30 Amp.
000ec8 940e 167e 	CALL SUBOPT_0xC
000eca 91a0 0848 	LDS  R26,_Viout
000ecc 91b0 0849 	LDS  R27,_Viout+1
000ece 9180 084a 	LDS  R24,_Viout+2
000ed0 9190 084b 	LDS  R25,_Viout+3
000ed2 940e 1b67 	CALL __DIVF21
000ed4 93e0 0858 	STS  _amp,R30
000ed6 93f0 0859 	STS  _amp+1,R31
000ed8 9360 085a 	STS  _amp+2,R22
000eda 9370 085b 	STS  _amp+3,R23
                 ; 0009 004E 
                 ; 0009 004F     /* Adjust Current to 0 */
                 ; 0009 0050     if(amp < AMP_ADJ_ZERO) {
000edc 940e 1687 	CALL SUBOPT_0xD
000ede 91a0 0858 	LDS  R26,_amp
000ee0 91b0 0859 	LDS  R27,_amp+1
000ee2 9180 085a 	LDS  R24,_amp+2
000ee4 9190 085b 	LDS  R25,_amp+3
000ee6 940e 1bac 	CALL __CMPF12
000ee8 f448      	BRSH _0x12000A
                 ; 0009 0051         amp = 0.0;
000ee9 e0e0      	LDI  R30,LOW(0)
000eea 93e0 0858 	STS  _amp,R30
000eec 93e0 0859 	STS  _amp+1,R30
000eee 93e0 085a 	STS  _amp+2,R30
000ef0 93e0 085b 	STS  _amp+3,R30
                 ; 0009 0052     }
                 ; 0009 0053 
                 ; 0009 0054     total = 0.0;
                 _0x12000A:
000ef2 e0e0      	LDI  R30,LOW(0)
000ef3 93e0 083c 	STS  _total,R30
000ef5 93e0 083d 	STS  _total+1,R30
000ef7 93e0 083e 	STS  _total+2,R30
000ef9 93e0 083f 	STS  _total+3,R30
                 ; 0009 0055     countSampling = 0;
000efb 93e0 0880 	STS  _countSampling,R30
000efd 93e0 0881 	STS  _countSampling+1,R30
                 ; 0009 0056     Isum += amp;
000eff 940e 1911 	CALL SUBOPT_0x6C
000f01 940e 1865 	CALL SUBOPT_0x57
000f03 940e 1ac9 	CALL __ADDF12
000f05 93e0 0868 	STS  _Isum,R30
000f07 93f0 0869 	STS  _Isum+1,R31
000f09 9360 086a 	STS  _Isum+2,R22
000f0b 9370 086b 	STS  _Isum+3,R23
                 ; 0009 0057 
                 ; 0009 0058     /*---------- Power ----------*/
                 ; 0009 0059     power = volt*amp;
000f0d 940e 1911 	CALL SUBOPT_0x6C
000f0f 940e 18ff 	CALL SUBOPT_0x6A
000f11 940e 1b19 	CALL __MULF12
000f13 93e0 085c 	STS  _power,R30
000f15 93f0 085d 	STS  _power+1,R31
000f17 9360 085e 	STS  _power+2,R22
000f19 9370 085f 	STS  _power+3,R23
                 ; 0009 005A     Psum += power;
000f1b 940e 1877 	CALL SUBOPT_0x59
000f1d 940e 1ac9 	CALL __ADDF12
000f1f 93e0 086c 	STS  _Psum,R30
000f21 93f0 086d 	STS  _Psum+1,R31
000f23 9360 086e 	STS  _Psum+2,R22
000f25 9370 086f 	STS  _Psum+3,R23
                 ; 0009 005B 
                 ; 0009 005C     /*----------  Watt-hour ----------*/
                 ; 0009 005D     whour = power*(0.5/3600.0);
000f27 91a0 085c 	LDS  R26,_power
000f29 91b0 085d 	LDS  R27,_power+1
000f2b 9180 085e 	LDS  R24,_power+2
000f2d 9190 085f 	LDS  R25,_power+3
                +
000f2f ebe4     +LDI R30 , LOW ( 0x3911A2B4 )
000f30 eaf2     +LDI R31 , HIGH ( 0x3911A2B4 )
000f31 e161     +LDI R22 , BYTE3 ( 0x3911A2B4 )
000f32 e379     +LDI R23 , BYTE4 ( 0x3911A2B4 )
                 	__GETD1N 0x3911A2B4
000f33 940e 1b19 	CALL __MULF12
000f35 93e0 0860 	STS  _whour,R30
000f37 93f0 0861 	STS  _whour+1,R31
000f39 9360 0862 	STS  _whour+2,R22
000f3b 9370 0863 	STS  _whour+3,R23
                 ; 0009 005E     WHsum += whour;
000f3d 940e 18a8 	CALL SUBOPT_0x5E
000f3f 940e 1ac9 	CALL __ADDF12
000f41 93e0 0870 	STS  _WHsum,R30
000f43 93f0 0871 	STS  _WHsum+1,R31
000f45 9360 0872 	STS  _WHsum+2,R22
000f47 9370 0873 	STS  _WHsum+3,R23
                 ; 0009 005F     number++;
000f49 e3a0      	LDI  R26,LOW(_number)
000f4a e0b8      	LDI  R27,HIGH(_number)
                 _0x20C0009:
000f4b 91ed      	LD   R30,X+
000f4c 91fd      	LD   R31,X+
000f4d 9631      	ADIW R30,1
000f4e 93fe      	ST   -X,R31
000f4f 93ee      	ST   -X,R30
                 ; 0009 0060 }
000f50 9508      	RET
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <queue.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <int_protocol.h>
                 ;#include <uart.h>
                 ;#include <eeprom.h>
                 ;
                 ;int input[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                 ;int count_input = 0;
                 ;int count_event = 0;
                 ;
                 ;void push_event(int event){
                 ; 000A 0010 void push_event(int event){
                 
                 	.CSEG
                 _push_event:
                 ; 000A 0011     input[count_input] = event;
000f51 93ba      	ST   -Y,R27
000f52 93aa      	ST   -Y,R26
                 ;	event -> Y+0
000f53 91e0 08db 	LDS  R30,_count_input
000f55 91f0 08dc 	LDS  R31,_count_input+1
000f57 940e 179c 	CALL SUBOPT_0x39
000f59 0fea      	ADD  R30,R26
000f5a 1ffb      	ADC  R31,R27
000f5b 81a8      	LD   R26,Y
000f5c 81b9      	LDD  R27,Y+1
000f5d 83a0      	STD  Z+0,R26
000f5e 83b1      	STD  Z+1,R27
                 ; 000A 0012     count_input++;
000f5f edab      	LDI  R26,LOW(_count_input)
000f60 e0b8      	LDI  R27,HIGH(_count_input)
000f61 940e 16fd 	CALL SUBOPT_0x22
                 ; 000A 0013 }
000f63 c0af      	RJMP _0x20C0008
                 ;
                 ;void pop_event(){
                 ; 000A 0015 void pop_event(){
                 _pop_event:
                 ; 000A 0016     int event = 0;
                 ; 000A 0017     event = input[count_event];
000f64 931a      	ST   -Y,R17
000f65 930a      	ST   -Y,R16
                 ;	event -> R16,R17
                +
000f66 e000     +LDI R16 , LOW ( 0 )
000f67 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000f68 91e0 08dd 	LDS  R30,_count_event
000f6a 91f0 08de 	LDS  R31,_count_event+1
000f6c 940e 179c 	CALL SUBOPT_0x39
000f6e 0fae      	ADD  R26,R30
000f6f 1fbf      	ADC  R27,R31
000f70 910d      	LD   R16,X+
000f71 911c      	LD   R17,X
                 ; 000A 0018     printDebug("EVENT = %d\r\n", event);
                +
000f72 e7ea     +LDI R30 , LOW ( 2 * _0x140000 + ( 0 ) )
000f73 e0f6     +LDI R31 , HIGH ( 2 * _0x140000 + ( 0 ) )
                 	__POINTW1FN _0x140000,0
000f74 93fa      	ST   -Y,R31
000f75 93ea      	ST   -Y,R30
000f76 01f8      	MOVW R30,R16
000f77 940e 16db 	CALL SUBOPT_0x1E
                 ; 000A 0019     if (event != 0) count_event++;
000f79 2e00      	MOV  R0,R16
000f7a 2a01      	OR   R0,R17
000f7b f021      	BREQ _0x140003
000f7c edad      	LDI  R26,LOW(_count_event)
000f7d e0b8      	LDI  R27,HIGH(_count_event)
000f7e 940e 16fd 	CALL SUBOPT_0x22
                 ; 000A 001A     printDebug("count_event = %d\r\n", count_event);
                 _0x140003:
                +
000f80 e8e7     +LDI R30 , LOW ( 2 * _0x140000 + ( 13 ) )
000f81 e0f6     +LDI R31 , HIGH ( 2 * _0x140000 + ( 13 ) )
                 	__POINTW1FN _0x140000,13
000f82 93fa      	ST   -Y,R31
000f83 93ea      	ST   -Y,R30
000f84 91e0 08dd 	LDS  R30,_count_event
000f86 91f0 08de 	LDS  R31,_count_event+1
000f88 940e 16db 	CALL SUBOPT_0x1E
                 ; 000A 001B     if(count_event == 30 ) count_event = 0;
000f8a 91a0 08dd 	LDS  R26,_count_event
000f8c 91b0 08de 	LDS  R27,_count_event+1
000f8e 975e      	SBIW R26,30
000f8f f429      	BRNE _0x140004
000f90 e0e0      	LDI  R30,LOW(0)
000f91 93e0 08dd 	STS  _count_event,R30
000f93 93e0 08de 	STS  _count_event+1,R30
                 ; 000A 001C     do_event(event);
                 _0x140004:
000f95 01d8      	MOVW R26,R16
000f96 d003      	RCALL _do_event
                 ; 000A 001D }
000f97 9109      	LD   R16,Y+
000f98 9119      	LD   R17,Y+
000f99 9508      	RET
                 ;
                 ;void do_event(int event){
                 ; 000A 001F void do_event(int event){
                 _do_event:
                 ; 000A 0020 
                 ; 000A 0021             if(event == 2){
000f9a 93ba      	ST   -Y,R27
000f9b 93aa      	ST   -Y,R26
                 ;	event -> Y+0
000f9c 81a8      	LD   R26,Y
000f9d 81b9      	LDD  R27,Y+1
000f9e 9712      	SBIW R26,2
000f9f f429      	BRNE _0x140005
                 ; 000A 0022                 flag_state = 4;
000fa0 940e 1781 	CALL SUBOPT_0x36
                 ; 000A 0023                 printDebug("\r\n-------- JOINT SUCCESS --------\r\n");
                +
000fa2 e9ea     +LDI R30 , LOW ( 2 * _0x140000 + ( 32 ) )
000fa3 e0f6     +LDI R31 , HIGH ( 2 * _0x140000 + ( 32 ) )
                 	__POINTW1FN _0x140000,32
000fa4 c068      	RJMP _0x140017
                 ; 000A 0024             }
                 ; 000A 0025 
                 ; 000A 0026         /*=============== Recive ACK ===============*/
                 ; 000A 0027             else if(event == 3){
                 _0x140005:
000fa5 81a8      	LD   R26,Y
000fa6 81b9      	LDD  R27,Y+1
000fa7 9713      	SBIW R26,3
000fa8 f439      	BRNE _0x140007
                 ; 000A 0028                 printDebug("\r\n-------- RECIVE PING --------\r\n");
                +
000fa9 ebee     +LDI R30 , LOW ( 2 * _0x140000 + ( 68 ) )
000faa e0f6     +LDI R31 , HIGH ( 2 * _0x140000 + ( 68 ) )
                 	__POINTW1FN _0x140000,68
000fab 940e 166b 	CALL SUBOPT_0x9
                 ; 000A 0029                 send_ping();
000fad 940e 0b7e 	CALL _send_ping
                 ; 000A 002A             }
                 ; 000A 002B 
                 ; 000A 002C         /*=============== Recive EVENT ===============*/
                 ; 000A 002D             else if(event == 510 || event == 511){
000faf c063      	RJMP _0x140008
                 _0x140007:
000fb0 81a8      	LD   R26,Y
000fb1 81b9      	LDD  R27,Y+1
000fb2 3fae      	CPI  R26,LOW(0x1FE)
000fb3 e0e1      	LDI  R30,HIGH(0x1FE)
000fb4 07be      	CPC  R27,R30
000fb5 f029      	BREQ _0x14000A
000fb6 3faf      	CPI  R26,LOW(0x1FF)
000fb7 e0e1      	LDI  R30,HIGH(0x1FF)
000fb8 07be      	CPC  R27,R30
000fb9 f009      	BREQ _0x14000A
000fba c045      	RJMP _0x140009
                 _0x14000A:
                 ; 000A 002E             printDebug("\r\n ++++++++++ _event == 510 || _event == 511 ++++++++\r\n");
                +
000fbb eee0     +LDI R30 , LOW ( 2 * _0x140000 + ( 102 ) )
000fbc e0f6     +LDI R31 , HIGH ( 2 * _0x140000 + ( 102 ) )
                 	__POINTW1FN _0x140000,102
000fbd 940e 166b 	CALL SUBOPT_0x9
                 ; 000A 002F                 if(event == 511){
000fbf 81a8      	LD   R26,Y
000fc0 81b9      	LDD  R27,Y+1
000fc1 3faf      	CPI  R26,LOW(0x1FF)
000fc2 e0e1      	LDI  R30,HIGH(0x1FF)
000fc3 07be      	CPC  R27,R30
000fc4 f4b1      	BRNE _0x14000C
                 ; 000A 0030                     EVENT[1] = 1;
000fc5 e0e1      	LDI  R30,LOW(1)
                +
000fc6 93e0 0894+STS _EVENT + ( 1 ) , R30
                 	__PUTB1MN _EVENT,1
                 ; 000A 0031                     //flag_state = 5;
                 ; 000A 0032                     flag_state = 4;
000fc8 940e 1781 	CALL SUBOPT_0x36
                 ; 000A 0033                     STATUS_DEVICE = 1;
000fca e0e1      	LDI  R30,LOW(1)
000fcb 93e0 0892 	STS  _STATUS_DEVICE,R30
                 ; 000A 0034                     EEPROM_write(Eaddress,STATUS_DEVICE);
000fcd 940e 1631 	CALL SUBOPT_0x4
000fcf 940e 16a3 	CALL SUBOPT_0x13
                 ; 000A 0035                     LED_STAT_ON;
000fd1 98af      	CBI  0x15,7
                 ; 000A 0036                     POWER_RELAY_ON;
000fd2 91e0 0065 	LDS  R30,101
000fd4 60e4      	ORI  R30,4
000fd5 93e0 0065 	STS  101,R30
                 ; 000A 0037                     send_event(1,1);
000fd7 e0e1      	LDI  R30,LOW(1)
000fd8 93ea      	ST   -Y,R30
000fd9 e0a1      	LDI  R26,LOW(1)
000fda c01a      	RJMP _0x140018
                 ; 000A 0038                 }else if(event == 510){
                 _0x14000C:
000fdb 81a8      	LD   R26,Y
000fdc 81b9      	LDD  R27,Y+1
000fdd 3fae      	CPI  R26,LOW(0x1FE)
000fde e0e1      	LDI  R30,HIGH(0x1FE)
000fdf 07be      	CPC  R27,R30
000fe0 f4b1      	BRNE _0x140010
                 ; 000A 0039                     EVENT[1] = 0;
000fe1 e0e0      	LDI  R30,LOW(0)
                +
000fe2 93e0 0894+STS _EVENT + ( 1 ) , R30
                 	__PUTB1MN _EVENT,1
                 ; 000A 003A                     //flag_state = 4;
                 ; 000A 003B                     flag_state = 3;
000fe4 e0e3      	LDI  R30,LOW(3)
000fe5 e0f0      	LDI  R31,HIGH(3)
000fe6 940e 16b8 	CALL SUBOPT_0x17
                 ; 000A 003C                     STATUS_DEVICE = 0;
000fe8 e0e0      	LDI  R30,LOW(0)
000fe9 93e0 0892 	STS  _STATUS_DEVICE,R30
                 ; 000A 003D                     EEPROM_write(Eaddress,STATUS_DEVICE);
000feb 940e 1631 	CALL SUBOPT_0x4
000fed 940e 16a3 	CALL SUBOPT_0x13
                 ; 000A 003E                     LED_STAT_OFF;
000fef 9aaf      	SBI  0x15,7
                 ; 000A 003F                     POWER_RELAY_OFF;
000ff0 940e 161b 	CALL SUBOPT_0x1
                 ; 000A 0040                     send_event(1,0);
000ff2 e0e1      	LDI  R30,LOW(1)
000ff3 93ea      	ST   -Y,R30
000ff4 e0a0      	LDI  R26,LOW(0)
                 _0x140018:
000ff5 940e 0b42 	CALL _send_event
                 ; 000A 0041                 }
                 ; 000A 0042                 recive_event(1,EVENT[1]);
                 _0x140010:
000ff7 e0e1      	LDI  R30,LOW(1)
000ff8 93ea      	ST   -Y,R30
                +
000ff9 91a0 0894+LDS R26 , _EVENT + ( 1 )
                 	__GETB2MN _EVENT,1
000ffb 940e 0bad 	CALL _recive_event
                 ; 000A 0043                 printDebug("\r\n-------- RECIVE EVENT --------\r\n");
                +
000ffd e1e8     +LDI R30 , LOW ( 2 * _0x140000 + ( 158 ) )
000ffe e0f7     +LDI R31 , HIGH ( 2 * _0x140000 + ( 158 ) )
                 	__POINTW1FN _0x140000,158
000fff c00d      	RJMP _0x140017
                 ; 000A 0044             }
                 ; 000A 0045 
                 ; 000A 0046             /*=============== Send EVENT Success ===============*/
                 ; 000A 0047             else if(event == 6){
                 _0x140009:
001000 81a8      	LD   R26,Y
001001 81b9      	LDD  R27,Y+1
001002 9716      	SBIW R26,6
001003 f419      	BRNE _0x140014
                 ; 000A 0048                 printDebug("\r\n-------- SEND EVENT SUCCESS --------\r\n");
                +
001004 e3eb     +LDI R30 , LOW ( 2 * _0x140000 + ( 193 ) )
001005 e0f7     +LDI R31 , HIGH ( 2 * _0x140000 + ( 193 ) )
                 	__POINTW1FN _0x140000,193
001006 c006      	RJMP _0x140017
                 ; 000A 0049             }
                 ; 000A 004A 
                 ; 000A 004B             /*=============== Send REPPORT Success ===============*/
                 ; 000A 004C             else if(event == 8){
                 _0x140014:
001007 81a8      	LD   R26,Y
001008 81b9      	LDD  R27,Y+1
001009 9718      	SBIW R26,8
00100a f441      	BRNE _0x140016
                 ; 000A 004D                 printDebug("\r\n-------- SEND REPORT SUCCESS --------\r\n");
                +
00100b e6e4     +LDI R30 , LOW ( 2 * _0x140000 + ( 234 ) )
00100c e0f7     +LDI R31 , HIGH ( 2 * _0x140000 + ( 234 ) )
                 	__POINTW1FN _0x140000,234
                 _0x140017:
00100d 93fa      	ST   -Y,R31
00100e 93ea      	ST   -Y,R30
00100f e080      	LDI  R24,0
001010 940e 0618 	CALL _printDebug
001012 9622      	ADIW R28,2
                 ; 000A 004E             }
                 ; 000A 004F }
                 _0x140016:
                 _0x140008:
                 _0x20C0008:
001013 9622      	ADIW R28,2
001014 9508      	RET
                 ;
                 ;
                 ;
                 
                 	.CSEG
                 _ftoa:
001015 940e 16c8 	CALL SUBOPT_0x1A
001017 83e8      	ST   Y,R30
001018 e0e0      	LDI  R30,LOW(0)
001019 83e9      	STD  Y+1,R30
00101a 83ea      	STD  Y+2,R30
00101b e3ef      	LDI  R30,LOW(63)
00101c 83eb      	STD  Y+3,R30
00101d 931a      	ST   -Y,R17
00101e 930a      	ST   -Y,R16
00101f 85eb      	LDD  R30,Y+11
001020 85fc      	LDD  R31,Y+11+1
001021 3fef      	CPI  R30,LOW(0xFFFF)
001022 efaf      	LDI  R26,HIGH(0xFFFF)
001023 07fa      	CPC  R31,R26
001024 f439      	BRNE _0x200000D
001025 940e 16cd 	CALL SUBOPT_0x1B
                +
001027 e9a0     +LDI R26 , LOW ( 2 * _0x2000000 + ( 0 ) )
001028 e0b7     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 0 ) )
                 	__POINTW2FN _0x2000000,0
001029 940e 143e 	CALL _strcpyf
00102b c0a5      	RJMP _0x20C0007
                 _0x200000D:
00102c 3fef      	CPI  R30,LOW(0x7FFF)
00102d e7af      	LDI  R26,HIGH(0x7FFF)
00102e 07fa      	CPC  R31,R26
00102f f439      	BRNE _0x200000C
001030 940e 16cd 	CALL SUBOPT_0x1B
                +
001032 e9a1     +LDI R26 , LOW ( 2 * _0x2000000 + ( 1 ) )
001033 e0b7     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 1 ) )
                 	__POINTW2FN _0x2000000,1
001034 940e 143e 	CALL _strcpyf
001036 c09a      	RJMP _0x20C0007
                 _0x200000C:
001037 85ac      	LDD  R26,Y+12
001038 23aa      	TST  R26
001039 f462      	BRPL _0x200000F
                +
00103a 85e9     +LDD R30 , Y + 9
00103b 85fa     +LDD R31 , Y + 9 + 1
00103c 856b     +LDD R22 , Y + 9 + 2
00103d 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
00103e 940e 1a23 	CALL __ANEGF1
001040 940e 191a 	CALL SUBOPT_0x6D
001042 940e 191f 	CALL SUBOPT_0x6E
001044 e2ed      	LDI  R30,LOW(45)
001045 93ec      	ST   X,R30
                 _0x200000F:
001046 85a8      	LDD  R26,Y+8
001047 30a7      	CPI  R26,LOW(0x7)
001048 f010      	BRLO _0x2000010
001049 e0e6      	LDI  R30,LOW(6)
00104a 87e8      	STD  Y+8,R30
                 _0x2000010:
00104b 8518      	LDD  R17,Y+8
                 _0x2000011:
00104c 2fe1      	MOV  R30,R17
00104d 5011      	SUBI R17,1
00104e 30e0      	CPI  R30,0
00104f f039      	BREQ _0x2000013
001050 940e 1926 	CALL SUBOPT_0x6F
001052 940e 192b 	CALL SUBOPT_0x70
001054 940e 1932 	CALL SUBOPT_0x71
001056 cff5      	RJMP _0x2000011
                 _0x2000013:
001057 940e 1937 	CALL SUBOPT_0x72
001059 940e 1ac9 	CALL __ADDF12
00105b 940e 191a 	CALL SUBOPT_0x6D
00105d e010      	LDI  R17,LOW(0)
00105e 940e 1672 	CALL SUBOPT_0xA
001060 940e 1932 	CALL SUBOPT_0x71
                 _0x2000014:
001062 940e 1937 	CALL SUBOPT_0x72
001064 940e 1bac 	CALL __CMPF12
001066 f088      	BRLO _0x2000016
001067 940e 1926 	CALL SUBOPT_0x6F
001069 940e 1940 	CALL SUBOPT_0x73
00106b 940e 1932 	CALL SUBOPT_0x71
00106d 5f1f      	SUBI R17,-LOW(1)
00106e 3217      	CPI  R17,39
00106f f038      	BRLO _0x2000017
001070 940e 16cd 	CALL SUBOPT_0x1B
                +
001072 e9a5     +LDI R26 , LOW ( 2 * _0x2000000 + ( 5 ) )
001073 e0b7     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 5 ) )
                 	__POINTW2FN _0x2000000,5
001074 940e 143e 	CALL _strcpyf
001076 c05a      	RJMP _0x20C0007
                 _0x2000017:
001077 cfea      	RJMP _0x2000014
                 _0x2000016:
001078 3010      	CPI  R17,0
001079 f429      	BRNE _0x2000018
00107a 940e 191f 	CALL SUBOPT_0x6E
00107c e3e0      	LDI  R30,LOW(48)
00107d 93ec      	ST   X,R30
00107e c028      	RJMP _0x2000019
                 _0x2000018:
                 _0x200001A:
00107f 2fe1      	MOV  R30,R17
001080 5011      	SUBI R17,1
001081 30e0      	CPI  R30,0
001082 f121      	BREQ _0x200001C
001083 940e 1926 	CALL SUBOPT_0x6F
001085 940e 192b 	CALL SUBOPT_0x70
001087 940e 1944 	CALL SUBOPT_0x74
001089 940e 18e7 	CALL SUBOPT_0x66
00108b 940e 1495 	CALL _floor
00108d 940e 1932 	CALL SUBOPT_0x71
00108f 940e 1937 	CALL SUBOPT_0x72
001091 940e 1b67 	CALL __DIVF21
001093 940e 1a56 	CALL __CFD1U
001095 2f0e      	MOV  R16,R30
001096 940e 191f 	CALL SUBOPT_0x6E
001098 940e 1949 	CALL SUBOPT_0x75
00109a 940e 1926 	CALL SUBOPT_0x6F
00109c 940e 17c7 	CALL SUBOPT_0x3D
00109e 940e 1b19 	CALL __MULF12
0010a0 940e 194f 	CALL SUBOPT_0x76
0010a2 940e 17d1 	CALL SUBOPT_0x3F
0010a4 940e 191a 	CALL SUBOPT_0x6D
0010a6 cfd8      	RJMP _0x200001A
                 _0x200001C:
                 _0x2000019:
0010a7 85e8      	LDD  R30,Y+8
0010a8 30e0      	CPI  R30,0
0010a9 f119      	BREQ _0x20C0006
0010aa 940e 191f 	CALL SUBOPT_0x6E
0010ac e2ee      	LDI  R30,LOW(46)
0010ad 93ec      	ST   X,R30
                 _0x200001E:
0010ae 85e8      	LDD  R30,Y+8
0010af 50e1      	SUBI R30,LOW(1)
0010b0 87e8      	STD  Y+8,R30
0010b1 5fef      	SUBI R30,-LOW(1)
0010b2 f0d1      	BREQ _0x2000020
0010b3 940e 194f 	CALL SUBOPT_0x76
0010b5 940e 1940 	CALL SUBOPT_0x73
0010b7 940e 191a 	CALL SUBOPT_0x6D
                +
0010b9 85e9     +LDD R30 , Y + 9
0010ba 85fa     +LDD R31 , Y + 9 + 1
0010bb 856b     +LDD R22 , Y + 9 + 2
0010bc 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0010bd 940e 1a56 	CALL __CFD1U
0010bf 2f0e      	MOV  R16,R30
0010c0 940e 191f 	CALL SUBOPT_0x6E
0010c2 940e 1949 	CALL SUBOPT_0x75
0010c4 940e 194f 	CALL SUBOPT_0x76
0010c6 940e 17c7 	CALL SUBOPT_0x3D
0010c8 940e 17d1 	CALL SUBOPT_0x3F
0010ca 940e 191a 	CALL SUBOPT_0x6D
0010cc cfe1      	RJMP _0x200001E
                 _0x2000020:
                 _0x20C0006:
0010cd 81ae      	LDD  R26,Y+6
0010ce 81bf      	LDD  R27,Y+6+1
0010cf e0e0      	LDI  R30,LOW(0)
0010d0 93ec      	ST   X,R30
                 _0x20C0007:
0010d1 8119      	LDD  R17,Y+1
0010d2 8108      	LDD  R16,Y+0
0010d3 962d      	ADIW R28,13
0010d4 9508      	RET
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
0010d5 940e 174f 	CALL SUBOPT_0x2E
0010d7 81aa      	LDD  R26,Y+2
0010d8 81bb      	LDD  R27,Y+2+1
0010d9 9612      	ADIW R26,2
0010da 940e 1ca6 	CALL __GETW1P
0010dc 9730      	SBIW R30,0
0010dd f129      	BREQ _0x2020010
0010de 81aa      	LDD  R26,Y+2
0010df 81bb      	LDD  R27,Y+2+1
0010e0 9614      	ADIW R26,4
0010e1 940e 1ca6 	CALL __GETW1P
0010e3 018f      	MOVW R16,R30
0010e4 9730      	SBIW R30,0
0010e5 f061      	BREQ _0x2020012
                +
0010e6 3002     +CPI R16 , LOW ( 2 )
0010e7 e0e0     +LDI R30 , HIGH ( 2 )
0010e8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0010e9 f0c0      	BRLO _0x2020013
0010ea 01f8      	MOVW R30,R16
0010eb 9731      	SBIW R30,1
0010ec 018f      	MOVW R16,R30
                +
0010ed 81aa     +LDD R26 , Y + 2
0010ee 81bb     +LDD R27 , Y + 2 + 1
0010ef 9614     +ADIW R26 , 4
0010f0 93ed     +ST X + , R30
0010f1 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0010f2 81aa      	LDD  R26,Y+2
0010f3 81bb      	LDD  R27,Y+2+1
0010f4 9612      	ADIW R26,2
0010f5 940e 16fd 	CALL SUBOPT_0x22
0010f7 9731      	SBIW R30,1
0010f8 81ac      	LDD  R26,Y+4
0010f9 83a0      	STD  Z+0,R26
0010fa 81aa      	LDD  R26,Y+2
0010fb 81bb      	LDD  R27,Y+2+1
0010fc 940e 1ca6 	CALL __GETW1P
0010fe 23ff      	TST  R31
0010ff f012      	BRMI _0x2020014
001100 940e 16fd 	CALL SUBOPT_0x22
                 _0x2020014:
                 _0x2020013:
001102 c006      	RJMP _0x2020015
                 _0x2020010:
001103 81aa      	LDD  R26,Y+2
001104 81bb      	LDD  R27,Y+2+1
001105 efef      	LDI  R30,LOW(65535)
001106 efff      	LDI  R31,HIGH(65535)
001107 93ed      	ST   X+,R30
001108 93fc      	ST   X,R31
                 _0x2020015:
001109 8119      	LDD  R17,Y+1
00110a 8108      	LDD  R16,Y+0
00110b 9625      	ADIW R28,5
00110c 9508      	RET
                 __ftoe_G101:
00110d 940e 16c8 	CALL SUBOPT_0x1A
00110f 83e8      	ST   Y,R30
001110 e0e0      	LDI  R30,LOW(0)
001111 83e9      	STD  Y+1,R30
001112 e8e0      	LDI  R30,LOW(128)
001113 83ea      	STD  Y+2,R30
001114 e3ef      	LDI  R30,LOW(63)
001115 83eb      	STD  Y+3,R30
001116 940e 1d0e 	CALL __SAVELOCR4
001118 85ee      	LDD  R30,Y+14
001119 85ff      	LDD  R31,Y+14+1
00111a 3fef      	CPI  R30,LOW(0xFFFF)
00111b efaf      	LDI  R26,HIGH(0xFFFF)
00111c 07fa      	CPC  R31,R26
00111d f449      	BRNE _0x2020019
00111e 85e8      	LDD  R30,Y+8
00111f 85f9      	LDD  R31,Y+8+1
001120 93fa      	ST   -Y,R31
001121 93ea      	ST   -Y,R30
                +
001122 e9aa     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
001123 e0b7     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
001124 940e 143e 	CALL _strcpyf
001126 c0ba      	RJMP _0x20C0005
                 _0x2020019:
001127 3fef      	CPI  R30,LOW(0x7FFF)
001128 e7af      	LDI  R26,HIGH(0x7FFF)
001129 07fa      	CPC  R31,R26
00112a f449      	BRNE _0x2020018
00112b 85e8      	LDD  R30,Y+8
00112c 85f9      	LDD  R31,Y+8+1
00112d 93fa      	ST   -Y,R31
00112e 93ea      	ST   -Y,R30
                +
00112f e9ab     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
001130 e0b7     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
001131 940e 143e 	CALL _strcpyf
001133 c0ad      	RJMP _0x20C0005
                 _0x2020018:
001134 85ab      	LDD  R26,Y+11
001135 30a7      	CPI  R26,LOW(0x7)
001136 f010      	BRLO _0x202001B
001137 e0e6      	LDI  R30,LOW(6)
001138 87eb      	STD  Y+11,R30
                 _0x202001B:
001139 851b      	LDD  R17,Y+11
                 _0x202001C:
00113a 2fe1      	MOV  R30,R17
00113b 5011      	SUBI R17,1
00113c 30e0      	CPI  R30,0
00113d f019      	BREQ _0x202001E
00113e 940e 1954 	CALL SUBOPT_0x77
001140 cff9      	RJMP _0x202001C
                 _0x202001E:
001141 940e 17c2 	CALL SUBOPT_0x3C
001143 940e 1cf9 	CALL __CPD10
001145 f421      	BRNE _0x202001F
001146 e030      	LDI  R19,LOW(0)
001147 940e 1954 	CALL SUBOPT_0x77
001149 c034      	RJMP _0x2020020
                 _0x202001F:
00114a 853b      	LDD  R19,Y+11
00114b 940e 1957 	CALL SUBOPT_0x78
00114d f009      	BREQ PC+2
00114e f410      	BRCC PC+3
00114f 940c 115f 	JMP  _0x2020021
001151 940e 1954 	CALL SUBOPT_0x77
                 _0x2020022:
001153 940e 1957 	CALL SUBOPT_0x78
001155 f040      	BRLO _0x2020024
001156 940e 17cc 	CALL SUBOPT_0x3E
001158 940e 192b 	CALL SUBOPT_0x70
00115a 940e 195c 	CALL SUBOPT_0x79
00115c 5f3f      	SUBI R19,-LOW(1)
00115d cff5      	RJMP _0x2020022
                 _0x2020024:
00115e c00d      	RJMP _0x2020025
                 _0x2020021:
                 _0x2020026:
00115f 940e 1957 	CALL SUBOPT_0x78
001161 f440      	BRSH _0x2020028
001162 940e 17cc 	CALL SUBOPT_0x3E
001164 940e 1940 	CALL SUBOPT_0x73
001166 940e 195c 	CALL SUBOPT_0x79
001168 5031      	SUBI R19,LOW(1)
001169 cff5      	RJMP _0x2020026
                 _0x2020028:
00116a 940e 1954 	CALL SUBOPT_0x77
                 _0x2020025:
00116c 940e 17c2 	CALL SUBOPT_0x3C
00116e 940e 1944 	CALL SUBOPT_0x74
001170 940e 1ac9 	CALL __ADDF12
001172 940e 195c 	CALL SUBOPT_0x79
001174 940e 1957 	CALL SUBOPT_0x78
001176 f038      	BRLO _0x2020029
001177 940e 17cc 	CALL SUBOPT_0x3E
001179 940e 192b 	CALL SUBOPT_0x70
00117b 940e 195c 	CALL SUBOPT_0x79
00117d 5f3f      	SUBI R19,-LOW(1)
                 _0x2020029:
                 _0x2020020:
00117e e010      	LDI  R17,LOW(0)
                 _0x202002A:
00117f 85eb      	LDD  R30,Y+11
001180 17e1      	CP   R30,R17
001181 f198      	BRLO _0x202002C
001182 940e 17e0 	CALL SUBOPT_0x42
001184 940e 192b 	CALL SUBOPT_0x70
001186 940e 1944 	CALL SUBOPT_0x74
001188 940e 18e7 	CALL SUBOPT_0x66
00118a 940e 1495 	CALL _floor
00118c 940e 17d6 	CALL SUBOPT_0x40
00118e 940e 17e8 	CALL SUBOPT_0x44
001190 940e 17cc 	CALL SUBOPT_0x3E
001192 940e 1b67 	CALL __DIVF21
001194 940e 1a56 	CALL __CFD1U
001196 2f0e      	MOV  R16,R30
001197 940e 1961 	CALL SUBOPT_0x7A
001199 2fe0      	MOV  R30,R16
00119a 5de0      	SUBI R30,-LOW(48)
00119b 93ec      	ST   X,R30
00119c 2fe0      	MOV  R30,R16
00119d 27ff      	CLR  R31
00119e 2766      	CLR  R22
00119f 2777      	CLR  R23
0011a0 940e 1a8f 	CALL __CDF1
0011a2 940e 17e0 	CALL SUBOPT_0x42
0011a4 940e 1b19 	CALL __MULF12
0011a6 940e 17cc 	CALL SUBOPT_0x3E
0011a8 940e 17d1 	CALL SUBOPT_0x3F
0011aa 940e 195c 	CALL SUBOPT_0x79
0011ac 2fe1      	MOV  R30,R17
0011ad 5f1f      	SUBI R17,-1
0011ae 30e0      	CPI  R30,0
0011af f679      	BRNE _0x202002A
0011b0 940e 1961 	CALL SUBOPT_0x7A
0011b2 e2ee      	LDI  R30,LOW(46)
0011b3 93ec      	ST   X,R30
0011b4 cfca      	RJMP _0x202002A
                 _0x202002C:
0011b5 940e 1968 	CALL SUBOPT_0x7B
0011b7 9731      	SBIW R30,1
0011b8 85aa      	LDD  R26,Y+10
0011b9 83a0      	STD  Z+0,R26
0011ba 3030      	CPI  R19,0
0011bb f42c      	BRGE _0x202002E
0011bc 9531      	NEG  R19
0011bd 85a8      	LDD  R26,Y+8
0011be 85b9      	LDD  R27,Y+8+1
0011bf e2ed      	LDI  R30,LOW(45)
0011c0 c003      	RJMP _0x202010E
                 _0x202002E:
0011c1 85a8      	LDD  R26,Y+8
0011c2 85b9      	LDD  R27,Y+8+1
0011c3 e2eb      	LDI  R30,LOW(43)
                 _0x202010E:
0011c4 93ec      	ST   X,R30
0011c5 940e 1968 	CALL SUBOPT_0x7B
0011c7 940e 1968 	CALL SUBOPT_0x7B
0011c9 9731      	SBIW R30,1
0011ca 01bf      	MOVW R22,R30
0011cb 2fa3      	MOV  R26,R19
0011cc e0ea      	LDI  R30,LOW(10)
0011cd 940e 1c2c 	CALL __DIVB21
0011cf 5de0      	SUBI R30,-LOW(48)
0011d0 01db      	MOVW R26,R22
0011d1 93ec      	ST   X,R30
0011d2 940e 1968 	CALL SUBOPT_0x7B
0011d4 9731      	SBIW R30,1
0011d5 01bf      	MOVW R22,R30
0011d6 2fa3      	MOV  R26,R19
0011d7 e0ea      	LDI  R30,LOW(10)
0011d8 940e 1c6e 	CALL __MODB21
0011da 5de0      	SUBI R30,-LOW(48)
0011db 01db      	MOVW R26,R22
0011dc 93ec      	ST   X,R30
0011dd 85a8      	LDD  R26,Y+8
0011de 85b9      	LDD  R27,Y+8+1
0011df e0e0      	LDI  R30,LOW(0)
0011e0 93ec      	ST   X,R30
                 _0x20C0005:
0011e1 940e 1d15 	CALL __LOADLOCR4
0011e3 9660      	ADIW R28,16
0011e4 9508      	RET
                 __print_G101:
0011e5 93ba      	ST   -Y,R27
0011e6 93aa      	ST   -Y,R26
0011e7 97ef      	SBIW R28,63
0011e8 9761      	SBIW R28,17
0011e9 940e 1d0c 	CALL __SAVELOCR6
0011eb e010      	LDI  R17,0
                +
0011ec 01fe     +MOVW R30 , R28
0011ed 5ae8     +SUBI R30 , LOW ( - 88 )
0011ee 4fff     +SBCI R31 , HIGH ( - 88 )
0011ef 9001     +LD R0 , Z +
0011f0 81f0     +LD R31 , Z
0011f1 2de0     +MOV R30 , R0
                 	__GETW1SX 88
0011f2 87e8      	STD  Y+8,R30
0011f3 87f9      	STD  Y+8+1,R31
                +
0011f4 01fe     +MOVW R30 , R28
0011f5 5aea     +SUBI R30 , LOW ( - 86 )
0011f6 4fff     +SBCI R31 , HIGH ( - 86 )
0011f7 9001     +LD R0 , Z +
0011f8 81f0     +LD R31 , Z
0011f9 2de0     +MOV R30 , R0
                 	__GETW1SX 86
0011fa 83ee      	STD  Y+6,R30
0011fb 83ff      	STD  Y+6+1,R31
0011fc 81ae      	LDD  R26,Y+6
0011fd 81bf      	LDD  R27,Y+6+1
0011fe e0e0      	LDI  R30,LOW(0)
0011ff e0f0      	LDI  R31,HIGH(0)
001200 93ed      	ST   X+,R30
001201 93fc      	ST   X,R31
                 _0x2020030:
001202 01de      	MOVW R26,R28
001203 5aa4      	SUBI R26,LOW(-(92))
001204 4fbf      	SBCI R27,HIGH(-(92))
001205 940e 16fd 	CALL SUBOPT_0x22
001207 9731      	SBIW R30,1
001208 91e4      	LPM  R30,Z
001209 2f2e      	MOV  R18,R30
00120a 30e0      	CPI  R30,0
00120b f411      	BRNE PC+3
00120c 940c 13f8 	JMP _0x2020032
00120e 2fe1      	MOV  R30,R17
00120f 30e0      	CPI  R30,0
001210 f439      	BRNE _0x2020036
001211 3225      	CPI  R18,37
001212 f411      	BRNE _0x2020037
001213 e011      	LDI  R17,LOW(1)
001214 c002      	RJMP _0x2020038
                 _0x2020037:
001215 940e 196e 	CALL SUBOPT_0x7C
                 _0x2020038:
001217 c1df      	RJMP _0x2020035
                 _0x2020036:
001218 30e1      	CPI  R30,LOW(0x1)
001219 f4c1      	BRNE _0x2020039
00121a 3225      	CPI  R18,37
00121b f419      	BRNE _0x202003A
00121c 940e 196e 	CALL SUBOPT_0x7C
00121e c1d7      	RJMP _0x202010F
                 _0x202003A:
00121f e012      	LDI  R17,LOW(2)
001220 e0e0      	LDI  R30,LOW(0)
001221 8bed      	STD  Y+21,R30
001222 e000      	LDI  R16,LOW(0)
001223 322d      	CPI  R18,45
001224 f411      	BRNE _0x202003B
001225 e001      	LDI  R16,LOW(1)
001226 c1d0      	RJMP _0x2020035
                 _0x202003B:
001227 322b      	CPI  R18,43
001228 f419      	BRNE _0x202003C
001229 e2eb      	LDI  R30,LOW(43)
00122a 8bed      	STD  Y+21,R30
00122b c1cb      	RJMP _0x2020035
                 _0x202003C:
00122c 3220      	CPI  R18,32
00122d f419      	BRNE _0x202003D
00122e e2e0      	LDI  R30,LOW(32)
00122f 8bed      	STD  Y+21,R30
001230 c1c6      	RJMP _0x2020035
                 _0x202003D:
001231 c002      	RJMP _0x202003E
                 _0x2020039:
001232 30e2      	CPI  R30,LOW(0x2)
001233 f439      	BRNE _0x202003F
                 _0x202003E:
001234 e050      	LDI  R21,LOW(0)
001235 e013      	LDI  R17,LOW(3)
001236 3320      	CPI  R18,48
001237 f411      	BRNE _0x2020040
001238 6800      	ORI  R16,LOW(128)
001239 c1bd      	RJMP _0x2020035
                 _0x2020040:
00123a c002      	RJMP _0x2020041
                 _0x202003F:
00123b 30e3      	CPI  R30,LOW(0x3)
00123c f491      	BRNE _0x2020042
                 _0x2020041:
00123d 3320      	CPI  R18,48
00123e f010      	BRLO _0x2020044
00123f 332a      	CPI  R18,58
001240 f008      	BRLO _0x2020045
                 _0x2020044:
001241 c007      	RJMP _0x2020043
                 _0x2020045:
001242 e0aa      	LDI  R26,LOW(10)
001243 9f5a      	MUL  R21,R26
001244 2d50      	MOV  R21,R0
001245 2fe2      	MOV  R30,R18
001246 53e0      	SUBI R30,LOW(48)
001247 0f5e      	ADD  R21,R30
001248 c1ae      	RJMP _0x2020035
                 _0x2020043:
001249 e040      	LDI  R20,LOW(0)
00124a 322e      	CPI  R18,46
00124b f411      	BRNE _0x2020046
00124c e014      	LDI  R17,LOW(4)
00124d c1a9      	RJMP _0x2020035
                 _0x2020046:
00124e c00f      	RJMP _0x2020047
                 _0x2020042:
00124f 30e4      	CPI  R30,LOW(0x4)
001250 f499      	BRNE _0x2020049
001251 3320      	CPI  R18,48
001252 f010      	BRLO _0x202004B
001253 332a      	CPI  R18,58
001254 f008      	BRLO _0x202004C
                 _0x202004B:
001255 c008      	RJMP _0x202004A
                 _0x202004C:
001256 6200      	ORI  R16,LOW(32)
001257 e0aa      	LDI  R26,LOW(10)
001258 9f4a      	MUL  R20,R26
001259 2d40      	MOV  R20,R0
00125a 2fe2      	MOV  R30,R18
00125b 53e0      	SUBI R30,LOW(48)
00125c 0f4e      	ADD  R20,R30
00125d c199      	RJMP _0x2020035
                 _0x202004A:
                 _0x2020047:
00125e 362c      	CPI  R18,108
00125f f419      	BRNE _0x202004D
001260 6002      	ORI  R16,LOW(2)
001261 e015      	LDI  R17,LOW(5)
001262 c194      	RJMP _0x2020035
                 _0x202004D:
001263 c004      	RJMP _0x202004E
                 _0x2020049:
001264 30e5      	CPI  R30,LOW(0x5)
001265 f011      	BREQ PC+3
001266 940c 13f7 	JMP _0x2020035
                 _0x202004E:
001268 2fe2      	MOV  R30,R18
001269 36e3      	CPI  R30,LOW(0x63)
00126a f459      	BRNE _0x2020053
00126b 940e 1975 	CALL SUBOPT_0x7D
00126d 940e 197c 	CALL SUBOPT_0x7E
00126f 940e 1975 	CALL SUBOPT_0x7D
001271 81a4      	LDD  R26,Z+4
001272 93aa      	ST   -Y,R26
001273 940e 1983 	CALL SUBOPT_0x7F
001275 c180      	RJMP _0x2020054
                 _0x2020053:
001276 34e5      	CPI  R30,LOW(0x45)
001277 f011      	BREQ _0x2020057
001278 36e5      	CPI  R30,LOW(0x65)
001279 f409      	BRNE _0x2020058
                 _0x2020057:
00127a c004      	RJMP _0x2020059
                 _0x2020058:
00127b 36e6      	CPI  R30,LOW(0x66)
00127c f011      	BREQ PC+3
00127d 940c 12c5 	JMP _0x202005A
                 _0x2020059:
00127f 01fe      	MOVW R30,R28
001280 9676      	ADIW R30,22
001281 87ee      	STD  Y+14,R30
001282 87ff      	STD  Y+14+1,R31
001283 940e 1989 	CALL SUBOPT_0x80
001285 940e 1caa 	CALL __GETD1P
001287 940e 1990 	CALL SUBOPT_0x81
001289 940e 1995 	CALL SUBOPT_0x82
00128b 85ad      	LDD  R26,Y+13
00128c 23aa      	TST  R26
00128d f022      	BRMI _0x202005B
00128e 89ad      	LDD  R26,Y+21
00128f 32ab      	CPI  R26,LOW(0x2B)
001290 f049      	BREQ _0x202005D
001291 c017      	RJMP _0x202005E
                 _0x202005B:
001292 940e 1997 	CALL SUBOPT_0x83
001294 940e 1a23 	CALL __ANEGF1
001296 940e 1990 	CALL SUBOPT_0x81
001298 e2ed      	LDI  R30,LOW(45)
001299 8bed      	STD  Y+21,R30
                 _0x202005D:
00129a ff07      	SBRS R16,7
00129b c005      	RJMP _0x202005F
00129c 89ed      	LDD  R30,Y+21
00129d 93ea      	ST   -Y,R30
00129e 940e 1983 	CALL SUBOPT_0x7F
0012a0 c008      	RJMP _0x2020060
                 _0x202005F:
0012a1 85ee      	LDD  R30,Y+14
0012a2 85ff      	LDD  R31,Y+14+1
0012a3 9631      	ADIW R30,1
0012a4 87ee      	STD  Y+14,R30
0012a5 87ff      	STD  Y+14+1,R31
0012a6 9731      	SBIW R30,1
0012a7 89ad      	LDD  R26,Y+21
0012a8 83a0      	STD  Z+0,R26
                 _0x2020060:
                 _0x202005E:
0012a9 ff05      	SBRS R16,5
0012aa e046      	LDI  R20,LOW(6)
0012ab 3626      	CPI  R18,102
0012ac f451      	BRNE _0x2020062
0012ad 940e 1997 	CALL SUBOPT_0x83
0012af 940e 1cce 	CALL __PUTPARD1
0012b1 934a      	ST   -Y,R20
0012b2 89ab      	LDD  R26,Y+19
0012b3 89bc      	LDD  R27,Y+19+1
0012b4 940e 1015 	CALL _ftoa
0012b6 c009      	RJMP _0x2020063
                 _0x2020062:
0012b7 940e 1997 	CALL SUBOPT_0x83
0012b9 940e 1cce 	CALL __PUTPARD1
0012bb 934a      	ST   -Y,R20
0012bc 932a      	ST   -Y,R18
0012bd 89ac      	LDD  R26,Y+20
0012be 89bd      	LDD  R27,Y+20+1
0012bf de4d      	RCALL __ftoe_G101
                 _0x2020063:
0012c0 01fe      	MOVW R30,R28
0012c1 9676      	ADIW R30,22
0012c2 940e 199c 	CALL SUBOPT_0x84
0012c4 c01e      	RJMP _0x2020064
                 _0x202005A:
0012c5 37e3      	CPI  R30,LOW(0x73)
0012c6 f439      	BRNE _0x2020066
0012c7 940e 1995 	CALL SUBOPT_0x82
0012c9 940e 19a4 	CALL SUBOPT_0x85
0012cb 940e 199c 	CALL SUBOPT_0x84
0012cd c00e      	RJMP _0x2020067
                 _0x2020066:
0012ce 37e0      	CPI  R30,LOW(0x70)
0012cf f4c1      	BRNE _0x2020069
0012d0 940e 1995 	CALL SUBOPT_0x82
0012d2 940e 19a4 	CALL SUBOPT_0x85
0012d4 87ee      	STD  Y+14,R30
0012d5 87ff      	STD  Y+14+1,R31
0012d6 85ae      	LDD  R26,Y+14
0012d7 85bf      	LDD  R27,Y+14+1
0012d8 940e 1457 	CALL _strlenf
0012da 2f1e      	MOV  R17,R30
0012db 6008      	ORI  R16,LOW(8)
                 _0x2020067:
0012dc 770f      	ANDI R16,LOW(127)
0012dd 3040      	CPI  R20,0
0012de f011      	BREQ _0x202006B
0012df 1741      	CP   R20,R17
0012e0 f008      	BRLO _0x202006C
                 _0x202006B:
0012e1 c001      	RJMP _0x202006A
                 _0x202006C:
0012e2 2f14      	MOV  R17,R20
                 _0x202006A:
                 _0x2020064:
0012e3 e040      	LDI  R20,LOW(0)
0012e4 e0e0      	LDI  R30,LOW(0)
0012e5 8bec      	STD  Y+20,R30
0012e6 e030      	LDI  R19,LOW(0)
0012e7 c06e      	RJMP _0x202006D
                 _0x2020069:
0012e8 36e4      	CPI  R30,LOW(0x64)
0012e9 f011      	BREQ _0x2020070
0012ea 36e9      	CPI  R30,LOW(0x69)
0012eb f411      	BRNE _0x2020071
                 _0x2020070:
0012ec 6004      	ORI  R16,LOW(4)
0012ed c002      	RJMP _0x2020072
                 _0x2020071:
0012ee 37e5      	CPI  R30,LOW(0x75)
0012ef f4a1      	BRNE _0x2020073
                 _0x2020072:
0012f0 e0ea      	LDI  R30,LOW(10)
0012f1 8bec      	STD  Y+20,R30
0012f2 ff01      	SBRS R16,1
0012f3 c008      	RJMP _0x2020074
                +
0012f4 e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
0012f5 ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
0012f6 e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
0012f7 e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
0012f8 940e 19a9 	CALL SUBOPT_0x86
0012fa e01a      	LDI  R17,LOW(10)
0012fb c023      	RJMP _0x2020075
                 _0x2020074:
                +
0012fc e1e0     +LDI R30 , LOW ( 0x2710 )
0012fd e2f7     +LDI R31 , HIGH ( 0x2710 )
0012fe e060     +LDI R22 , BYTE3 ( 0x2710 )
0012ff e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
001300 940e 19a9 	CALL SUBOPT_0x86
001302 e015      	LDI  R17,LOW(5)
001303 c01b      	RJMP _0x2020075
                 _0x2020073:
001304 35e8      	CPI  R30,LOW(0x58)
001305 f411      	BRNE _0x2020077
001306 6008      	ORI  R16,LOW(8)
001307 c004      	RJMP _0x2020078
                 _0x2020077:
001308 37e8      	CPI  R30,LOW(0x78)
001309 f011      	BREQ PC+3
00130a 940c 13f6 	JMP _0x20200B6
                 _0x2020078:
00130c e1e0      	LDI  R30,LOW(16)
00130d 8bec      	STD  Y+20,R30
00130e ff01      	SBRS R16,1
00130f c008      	RJMP _0x202007A
                +
001310 e0e0     +LDI R30 , LOW ( 0x10000000 )
001311 e0f0     +LDI R31 , HIGH ( 0x10000000 )
001312 e060     +LDI R22 , BYTE3 ( 0x10000000 )
001313 e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
001314 940e 19a9 	CALL SUBOPT_0x86
001316 e018      	LDI  R17,LOW(8)
001317 c007      	RJMP _0x2020075
                 _0x202007A:
                +
001318 e0e0     +LDI R30 , LOW ( 0x1000 )
001319 e1f0     +LDI R31 , HIGH ( 0x1000 )
00131a e060     +LDI R22 , BYTE3 ( 0x1000 )
00131b e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
00131c 940e 19a9 	CALL SUBOPT_0x86
00131e e014      	LDI  R17,LOW(4)
                 _0x2020075:
00131f 3040      	CPI  R20,0
001320 f011      	BREQ _0x202007B
001321 770f      	ANDI R16,LOW(127)
001322 c001      	RJMP _0x202007C
                 _0x202007B:
001323 e041      	LDI  R20,LOW(1)
                 _0x202007C:
001324 ff01      	SBRS R16,1
001325 c008      	RJMP _0x202007D
001326 940e 1995 	CALL SUBOPT_0x82
001328 940e 1989 	CALL SUBOPT_0x80
00132a 9614      	ADIW R26,4
00132b 940e 1caa 	CALL __GETD1P
00132d c00f      	RJMP _0x2020110
                 _0x202007D:
00132e ff02      	SBRS R16,2
00132f c007      	RJMP _0x202007F
001330 940e 1995 	CALL SUBOPT_0x82
001332 940e 19a4 	CALL SUBOPT_0x85
001334 940e 1c19 	CALL __CWD1
001336 c006      	RJMP _0x2020110
                 _0x202007F:
001337 940e 1995 	CALL SUBOPT_0x82
001339 940e 19a4 	CALL SUBOPT_0x85
00133b 2766      	CLR  R22
00133c 2777      	CLR  R23
                 _0x2020110:
                +
00133d 87ea     +STD Y + 10 , R30
00133e 87fb     +STD Y + 10 + 1 , R31
00133f 876c     +STD Y + 10 + 2 , R22
001340 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
001341 ff02      	SBRS R16,2
001342 c012      	RJMP _0x2020081
001343 85ad      	LDD  R26,Y+13
001344 23aa      	TST  R26
001345 f442      	BRPL _0x2020082
001346 940e 1997 	CALL SUBOPT_0x83
001348 940e 1c0b 	CALL __ANEGD1
00134a 940e 1990 	CALL SUBOPT_0x81
00134c e2ed      	LDI  R30,LOW(45)
00134d 8bed      	STD  Y+21,R30
                 _0x2020082:
00134e 89ed      	LDD  R30,Y+21
00134f 30e0      	CPI  R30,0
001350 f019      	BREQ _0x2020083
001351 5f1f      	SUBI R17,-LOW(1)
001352 5f4f      	SUBI R20,-LOW(1)
001353 c001      	RJMP _0x2020084
                 _0x2020083:
001354 7f0b      	ANDI R16,LOW(251)
                 _0x2020084:
                 _0x2020081:
001355 2f34      	MOV  R19,R20
                 _0x202006D:
001356 fd00      	SBRC R16,0
001357 c014      	RJMP _0x2020085
                 _0x2020086:
001358 1715      	CP   R17,R21
001359 f410      	BRSH _0x2020089
00135a 1735      	CP   R19,R21
00135b f008      	BRLO _0x202008A
                 _0x2020089:
00135c c00f      	RJMP _0x2020088
                 _0x202008A:
00135d ff07      	SBRS R16,7
00135e c008      	RJMP _0x202008B
00135f ff02      	SBRS R16,2
001360 c004      	RJMP _0x202008C
001361 7f0b      	ANDI R16,LOW(251)
001362 892d      	LDD  R18,Y+21
001363 5011      	SUBI R17,LOW(1)
001364 c001      	RJMP _0x202008D
                 _0x202008C:
001365 e320      	LDI  R18,LOW(48)
                 _0x202008D:
001366 c001      	RJMP _0x202008E
                 _0x202008B:
001367 e220      	LDI  R18,LOW(32)
                 _0x202008E:
001368 940e 196e 	CALL SUBOPT_0x7C
00136a 5051      	SUBI R21,LOW(1)
00136b cfec      	RJMP _0x2020086
                 _0x2020088:
                 _0x2020085:
                 _0x202008F:
00136c 1714      	CP   R17,R20
00136d f490      	BRSH _0x2020091
00136e 6100      	ORI  R16,LOW(16)
00136f ff02      	SBRS R16,2
001370 c006      	RJMP _0x2020092
001371 940e 19ae 	CALL SUBOPT_0x87
001373 f009      	BREQ _0x2020093
001374 5051      	SUBI R21,LOW(1)
                 _0x2020093:
001375 5011      	SUBI R17,LOW(1)
001376 5041      	SUBI R20,LOW(1)
                 _0x2020092:
001377 e3e0      	LDI  R30,LOW(48)
001378 93ea      	ST   -Y,R30
001379 940e 1983 	CALL SUBOPT_0x7F
00137b 3050      	CPI  R21,0
00137c f009      	BREQ _0x2020094
00137d 5051      	SUBI R21,LOW(1)
                 _0x2020094:
00137e 5041      	SUBI R20,LOW(1)
00137f cfec      	RJMP _0x202008F
                 _0x2020091:
001380 2f31      	MOV  R19,R17
001381 89ec      	LDD  R30,Y+20
001382 30e0      	CPI  R30,0
001383 f4b9      	BRNE _0x2020095
                 _0x2020096:
001384 3030      	CPI  R19,0
001385 f0a1      	BREQ _0x2020098
001386 ff03      	SBRS R16,3
001387 c006      	RJMP _0x2020099
001388 85ee      	LDD  R30,Y+14
001389 85ff      	LDD  R31,Y+14+1
00138a 9125      	LPM  R18,Z+
00138b 87ee      	STD  Y+14,R30
00138c 87ff      	STD  Y+14+1,R31
00138d c005      	RJMP _0x202009A
                 _0x2020099:
00138e 85ae      	LDD  R26,Y+14
00138f 85bf      	LDD  R27,Y+14+1
001390 912d      	LD   R18,X+
001391 87ae      	STD  Y+14,R26
001392 87bf      	STD  Y+14+1,R27
                 _0x202009A:
001393 940e 196e 	CALL SUBOPT_0x7C
001395 3050      	CPI  R21,0
001396 f009      	BREQ _0x202009B
001397 5051      	SUBI R21,LOW(1)
                 _0x202009B:
001398 5031      	SUBI R19,LOW(1)
001399 cfea      	RJMP _0x2020096
                 _0x2020098:
00139a c051      	RJMP _0x202009C
                 _0x2020095:
                 _0x202009E:
00139b 940e 19c0 	CALL SUBOPT_0x88
00139d 940e 1c49 	CALL __DIVD21U
00139f 2f2e      	MOV  R18,R30
0013a0 302a      	CPI  R18,10
0013a1 f030      	BRLO _0x20200A0
0013a2 ff03      	SBRS R16,3
0013a3 c002      	RJMP _0x20200A1
0013a4 5c29      	SUBI R18,-LOW(55)
0013a5 c001      	RJMP _0x20200A2
                 _0x20200A1:
0013a6 5a29      	SUBI R18,-LOW(87)
                 _0x20200A2:
0013a7 c001      	RJMP _0x20200A3
                 _0x20200A0:
0013a8 5d20      	SUBI R18,-LOW(48)
                 _0x20200A3:
0013a9 fd04      	SBRC R16,4
0013aa c021      	RJMP _0x20200A5
0013ab 3321      	CPI  R18,49
0013ac f460      	BRSH _0x20200A7
                +
0013ad 89a8     +LDD R26 , Y + 16
0013ae 89b9     +LDD R27 , Y + 16 + 1
0013af 898a     +LDD R24 , Y + 16 + 2
0013b0 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
0013b1 30a1     +CPI R26 , LOW ( 0x1 )
0013b2 e0e0     +LDI R30 , HIGH ( 0x1 )
0013b3 07be     +CPC R27 , R30
0013b4 e0e0     +LDI R30 , BYTE3 ( 0x1 )
0013b5 078e     +CPC R24 , R30
0013b6 e0e0     +LDI R30 , BYTE4 ( 0x1 )
0013b7 079e     +CPC R25 , R30
                 	__CPD2N 0x1
0013b8 f409      	BRNE _0x20200A6
                 _0x20200A7:
0013b9 c00b      	RJMP _0x20200A9
                 _0x20200A6:
0013ba 1743      	CP   R20,R19
0013bb f440      	BRSH _0x2020111
0013bc 1753      	CP   R21,R19
0013bd f010      	BRLO _0x20200AC
0013be ff00      	SBRS R16,0
0013bf c001      	RJMP _0x20200AD
                 _0x20200AC:
0013c0 c010      	RJMP _0x20200AB
                 _0x20200AD:
0013c1 e220      	LDI  R18,LOW(32)
0013c2 ff07      	SBRS R16,7
0013c3 c008      	RJMP _0x20200AE
                 _0x2020111:
0013c4 e320      	LDI  R18,LOW(48)
                 _0x20200A9:
0013c5 6100      	ORI  R16,LOW(16)
0013c6 ff02      	SBRS R16,2
0013c7 c004      	RJMP _0x20200AF
0013c8 940e 19ae 	CALL SUBOPT_0x87
0013ca f009      	BREQ _0x20200B0
0013cb 5051      	SUBI R21,LOW(1)
                 _0x20200B0:
                 _0x20200AF:
                 _0x20200AE:
                 _0x20200A5:
0013cc 940e 196e 	CALL SUBOPT_0x7C
0013ce 3050      	CPI  R21,0
0013cf f009      	BREQ _0x20200B1
0013d0 5051      	SUBI R21,LOW(1)
                 _0x20200B1:
                 _0x20200AB:
0013d1 5031      	SUBI R19,LOW(1)
0013d2 940e 19c0 	CALL SUBOPT_0x88
0013d4 940e 1c88 	CALL __MODD21U
0013d6 940e 1990 	CALL SUBOPT_0x81
0013d8 89ec      	LDD  R30,Y+20
                +
0013d9 89a8     +LDD R26 , Y + 16
0013da 89b9     +LDD R27 , Y + 16 + 1
0013db 898a     +LDD R24 , Y + 16 + 2
0013dc 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
0013dd 27ff      	CLR  R31
0013de 2766      	CLR  R22
0013df 2777      	CLR  R23
0013e0 940e 1c49 	CALL __DIVD21U
0013e2 940e 19a9 	CALL SUBOPT_0x86
                +
0013e4 89e8     +LDD R30 , Y + 16
0013e5 89f9     +LDD R31 , Y + 16 + 1
0013e6 896a     +LDD R22 , Y + 16 + 2
0013e7 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
0013e8 940e 1cf9 	CALL __CPD10
0013ea f009      	BREQ _0x202009F
0013eb cfaf      	RJMP _0x202009E
                 _0x202009F:
                 _0x202009C:
0013ec ff00      	SBRS R16,0
0013ed c008      	RJMP _0x20200B2
                 _0x20200B3:
0013ee 3050      	CPI  R21,0
0013ef f031      	BREQ _0x20200B5
0013f0 5051      	SUBI R21,LOW(1)
0013f1 e2e0      	LDI  R30,LOW(32)
0013f2 93ea      	ST   -Y,R30
0013f3 940e 1983 	CALL SUBOPT_0x7F
0013f5 cff8      	RJMP _0x20200B3
                 _0x20200B5:
                 _0x20200B2:
                 _0x20200B6:
                 _0x2020054:
                 _0x202010F:
0013f6 e010      	LDI  R17,LOW(0)
                 _0x2020035:
0013f7 ce0a      	RJMP _0x2020030
                 _0x2020032:
0013f8 81ae      	LDD  R26,Y+6
0013f9 81bf      	LDD  R27,Y+6+1
0013fa 940e 1ca6 	CALL __GETW1P
0013fc 940e 1d13 	CALL __LOADLOCR6
0013fe 96ef      	ADIW R28,63
0013ff 966f      	ADIW R28,31
001400 9508      	RET
                 _vsprintf:
001401 93ba      	ST   -Y,R27
001402 93aa      	ST   -Y,R26
001403 9726      	SBIW R28,6
001404 931a      	ST   -Y,R17
001405 930a      	ST   -Y,R16
001406 85ec      	LDD  R30,Y+12
001407 85fd      	LDD  R31,Y+12+1
001408 9730      	SBIW R30,0
001409 f421      	BRNE _0x20200BA
00140a efef      	LDI  R30,LOW(65535)
00140b efff      	LDI  R31,HIGH(65535)
00140c 940c 15b8 	JMP  _0x20C0002
                 _0x20200BA:
00140e 85ec      	LDD  R30,Y+12
00140f 85fd      	LDD  R31,Y+12+1
001410 83ec      	STD  Y+4,R30
001411 83fd      	STD  Y+4+1,R31
001412 e0e0      	LDI  R30,LOW(0)
001413 83ee      	STD  Y+6,R30
001414 83ef      	STD  Y+6+1,R30
001415 85ea      	LDD  R30,Y+10
001416 85fb      	LDD  R31,Y+10+1
001417 93fa      	ST   -Y,R31
001418 93ea      	ST   -Y,R30
001419 85ea      	LDD  R30,Y+10
00141a 85fb      	LDD  R31,Y+10+1
00141b 93fa      	ST   -Y,R31
00141c 93ea      	ST   -Y,R30
00141d ede5      	LDI  R30,LOW(_put_buff_G101)
00141e e1f0      	LDI  R31,HIGH(_put_buff_G101)
00141f 93fa      	ST   -Y,R31
001420 93ea      	ST   -Y,R30
001421 01de      	MOVW R26,R28
001422 9618      	ADIW R26,8
001423 ddc1      	RCALL __print_G101
001424 018f      	MOVW R16,R30
001425 81ac      	LDD  R26,Y+4
001426 81bd      	LDD  R27,Y+4+1
001427 e0e0      	LDI  R30,LOW(0)
001428 93ec      	ST   X,R30
001429 01f8      	MOVW R30,R16
00142a 940c 15b8 	JMP  _0x20C0002
                 
                 	.CSEG
                 _memcpy:
00142c 93ba      	ST   -Y,R27
00142d 93aa      	ST   -Y,R26
00142e 8199          ldd  r25,y+1
00142f 8188          ld   r24,y
001430 9600          adiw r24,0
001431 f041          breq memcpy1
001432 81bd          ldd  r27,y+5
001433 81ac          ldd  r26,y+4
001434 81fb          ldd  r31,y+3
001435 81ea          ldd  r30,y+2
                 memcpy0:
001436 9161          ld   r22,z+
001437 936d          st   x+,r22
001438 9701          sbiw r24,1
001439 f7e1          brne memcpy0
                 memcpy1:
00143a 81fd          ldd  r31,y+5
00143b 81ec          ldd  r30,y+4
00143c 9626      	ADIW R28,6
00143d 9508      	RET
                 _strcpyf:
00143e 93ba      	ST   -Y,R27
00143f 93aa      	ST   -Y,R26
001440 91e9          ld   r30,y+
001441 91f9          ld   r31,y+
001442 91a9          ld   r26,y+
001443 91b9          ld   r27,y+
001444 01cd          movw r24,r26
                 strcpyf0:
001445 9005      	lpm  r0,z+
001446 920d          st   x+,r0
001447 2000          tst  r0
001448 f7e1          brne strcpyf0
001449 01fc          movw r30,r24
00144a 9508          ret
                 _strlen:
00144b 93ba      	ST   -Y,R27
00144c 93aa      	ST   -Y,R26
00144d 91a9          ld   r26,y+
00144e 91b9          ld   r27,y+
00144f 27ee          clr  r30
001450 27ff          clr  r31
                 strlen0:
001451 916d          ld   r22,x+
001452 2366          tst  r22
001453 f011          breq strlen1
001454 9631          adiw r30,1
001455 cffb          rjmp strlen0
                 strlen1:
001456 9508          ret
                 _strlenf:
001457 93ba      	ST   -Y,R27
001458 93aa      	ST   -Y,R26
001459 27aa          clr  r26
00145a 27bb          clr  r27
00145b 91e9          ld   r30,y+
00145c 91f9          ld   r31,y+
                 strlenf0:
00145d 9005      	lpm  r0,z+
00145e 2000          tst  r0
00145f f011          breq strlenf1
001460 9611          adiw r26,1
001461 cffb          rjmp strlenf0
                 strlenf1:
001462 01fd          movw r30,r26
001463 9508          ret
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
001464 940e 1cd3 	CALL __PUTPARD2
001466 817b         ldd  r23,y+3
001467 816a         ldd  r22,y+2
001468 81f9         ldd  r31,y+1
001469 81e8         ld   r30,y
00146a fb77         bst  r23,7
00146b 0f77         lsl  r23
00146c fd67         sbrc r22,7
00146d 6071         sbr  r23,1
00146e 2f97         mov  r25,r23
00146f 579e         subi r25,0x7e
001470 f081         breq __ftrunc0
001471 f078         brcs __ftrunc0
001472 3198         cpi  r25,24
001473 f490         brsh __ftrunc1
001474 27aa         clr  r26
001475 27bb         clr  r27
001476 2788         clr  r24
                 __ftrunc2:
001477 9408         sec
001478 9587         ror  r24
001479 95b7         ror  r27
00147a 95a7         ror  r26
00147b 959a         dec  r25
00147c f7d1         brne __ftrunc2
00147d 23ea         and  r30,r26
00147e 23fb         and  r31,r27
00147f 2368         and  r22,r24
001480 c005         rjmp __ftrunc1
                 __ftrunc0:
001481 94e8         clt
001482 2777         clr  r23
001483 27ee         clr  r30
001484 27ff         clr  r31
001485 2766         clr  r22
                 __ftrunc1:
001486 776f         cbr  r22,0x80
001487 9576         lsr  r23
001488 f408         brcc __ftrunc3
001489 6860         sbr  r22,0x80
                 __ftrunc3:
00148a f977         bld  r23,7
00148b 91a9         ld   r26,y+
00148c 91b9         ld   r27,y+
00148d 9189         ld   r24,y+
00148e 9199         ld   r25,y+
00148f 17ea         cp   r30,r26
001490 07fb         cpc  r31,r27
001491 0768         cpc  r22,r24
001492 0779         cpc  r23,r25
001493 fb97         bst  r25,7
001494 9508         ret
                 _floor:
001495 940e 1cd3 	CALL __PUTPARD2
001497 940e 1cc4 	CALL __GETD2S0
001499 940e 1464 	CALL _ftrunc
00149b 940e 1cc9 	CALL __PUTD1S0
00149d f419          brne __floor1
                 __floor0:
00149e 940e 1843 	CALL SUBOPT_0x51
0014a0 c005      	RJMP _0x20C0004
                 __floor1:
0014a1 f7e6          brtc __floor0
0014a2 940e 1843 	CALL SUBOPT_0x51
0014a4 940e 19c9 	CALL SUBOPT_0x89
                 _0x20C0004:
0014a6 9624      	ADIW R28,4
0014a7 9508      	RET
                 _log:
0014a8 940e 1cd3 	CALL __PUTPARD2
0014aa 9724      	SBIW R28,4
0014ab 931a      	ST   -Y,R17
0014ac 930a      	ST   -Y,R16
0014ad 940e 19d0 	CALL SUBOPT_0x8A
0014af 940e 1d01 	CALL __CPD02
0014b1 f02c      	BRLT _0x208000C
                +
0014b2 efef     +LDI R30 , LOW ( 0xFF7FFFFF )
0014b3 efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
0014b4 e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
0014b5 ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
0014b6 c071      	RJMP _0x20C0003
                 _0x208000C:
0014b7 940e 19d5 	CALL SUBOPT_0x8B
0014b9 940e 1cce 	CALL __PUTPARD1
0014bb b7ad      	IN   R26,SPL
0014bc b7be      	IN   R27,SPH
0014bd 9711      	SBIW R26,1
0014be 931f      	PUSH R17
0014bf 930f      	PUSH R16
0014c0 940e 1a06 	CALL _frexp
0014c2 910f      	POP  R16
0014c3 911f      	POP  R17
0014c4 940e 19da 	CALL SUBOPT_0x8C
0014c6 940e 19d0 	CALL SUBOPT_0x8A
                +
0014c8 efe3     +LDI R30 , LOW ( 0x3F3504F3 )
0014c9 e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
0014ca e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
0014cb e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
0014cc 940e 1bac 	CALL __CMPF12
0014ce f440      	BRSH _0x208000D
0014cf 940e 19df 	CALL SUBOPT_0x8D
0014d1 940e 1ac9 	CALL __ADDF12
0014d3 940e 19da 	CALL SUBOPT_0x8C
                +
0014d5 5001     +SUBI R16 , LOW ( 1 )
0014d6 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x208000D:
0014d7 940e 19d5 	CALL SUBOPT_0x8B
0014d9 940e 19c9 	CALL SUBOPT_0x89
0014db 937f      	PUSH R23
0014dc 936f      	PUSH R22
0014dd 93ff      	PUSH R31
0014de 93ef      	PUSH R30
0014df 940e 19d5 	CALL SUBOPT_0x8B
                +
0014e1 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0014e2 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0014e3 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0014e4 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0014e5 940e 1ac9 	CALL __ADDF12
0014e7 91af      	POP  R26
0014e8 91bf      	POP  R27
0014e9 918f      	POP  R24
0014ea 919f      	POP  R25
0014eb 940e 1b67 	CALL __DIVF21
0014ed 940e 19da 	CALL SUBOPT_0x8C
0014ef 940e 19df 	CALL SUBOPT_0x8D
0014f1 940e 19e1 	CALL SUBOPT_0x8E
                +
0014f3 e2a6     +LDI R26 , LOW ( 0x3F654226 )
0014f4 e4b2     +LDI R27 , HIGH ( 0x3F654226 )
0014f5 e685     +LDI R24 , BYTE3 ( 0x3F654226 )
0014f6 e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
0014f7 940e 18fa 	CALL SUBOPT_0x69
                +
0014f9 e4ee     +LDI R30 , LOW ( 0x4054114E )
0014fa e1f1     +LDI R31 , HIGH ( 0x4054114E )
0014fb e564     +LDI R22 , BYTE3 ( 0x4054114E )
0014fc e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
0014fd 940e 17d1 	CALL SUBOPT_0x3F
0014ff 940e 19d0 	CALL SUBOPT_0x8A
001501 940e 1b19 	CALL __MULF12
001503 937f      	PUSH R23
001504 936f      	PUSH R22
001505 93ff      	PUSH R31
001506 93ef      	PUSH R30
001507 940e 19e9 	CALL SUBOPT_0x8F
                +
001509 e4ad     +LDI R26 , LOW ( 0x3FD4114D )
00150a e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
00150b ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
00150c e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
00150d 940e 1ac2 	CALL __SUBF12
00150f 91af      	POP  R26
001510 91bf      	POP  R27
001511 918f      	POP  R24
001512 919f      	POP  R25
001513 940e 1b67 	CALL __DIVF21
001515 937f      	PUSH R23
001516 936f      	PUSH R22
001517 93ff      	PUSH R31
001518 93ef      	PUSH R30
001519 01f8      	MOVW R30,R16
00151a 940e 17c7 	CALL SUBOPT_0x3D
                +
00151c e1a8     +LDI R26 , LOW ( 0x3F317218 )
00151d e7b2     +LDI R27 , HIGH ( 0x3F317218 )
00151e e381     +LDI R24 , BYTE3 ( 0x3F317218 )
00151f e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
001520 940e 1b19 	CALL __MULF12
001522 91af      	POP  R26
001523 91bf      	POP  R27
001524 918f      	POP  R24
001525 919f      	POP  R25
001526 940e 1ac9 	CALL __ADDF12
                 _0x20C0003:
001528 8119      	LDD  R17,Y+1
001529 8108      	LDD  R16,Y+0
00152a 962a      	ADIW R28,10
00152b 9508      	RET
                 _exp:
00152c 940e 1cd3 	CALL __PUTPARD2
00152e 9728      	SBIW R28,8
00152f 931a      	ST   -Y,R17
001530 930a      	ST   -Y,R16
001531 940e 19ee 	CALL SUBOPT_0x90
                +
001533 e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
001534 eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
001535 ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
001536 ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
001537 940e 1bac 	CALL __CMPF12
001539 f418      	BRSH _0x208000F
00153a 940e 19f3 	CALL SUBOPT_0x91
00153c c07b      	RJMP _0x20C0002
                 _0x208000F:
00153d 940e 1997 	CALL SUBOPT_0x83
00153f 940e 1cf9 	CALL __CPD10
001541 f419      	BRNE _0x2080010
001542 940e 1672 	CALL SUBOPT_0xA
001544 c073      	RJMP _0x20C0002
                 _0x2080010:
001545 940e 19ee 	CALL SUBOPT_0x90
                +
001547 e1e8     +LDI R30 , LOW ( 0x42B17218 )
001548 e7f2     +LDI R31 , HIGH ( 0x42B17218 )
001549 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
00154a e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
00154b 940e 1bac 	CALL __CMPF12
00154d f009      	BREQ PC+2
00154e f410      	BRCC PC+3
00154f 940c 1556 	JMP  _0x2080011
                +
001551 efef     +LDI R30 , LOW ( 0x7F7FFFFF )
001552 efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
001553 e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
001554 e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
001555 c062      	RJMP _0x20C0002
                 _0x2080011:
001556 940e 19ee 	CALL SUBOPT_0x90
                +
001558 e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
001559 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
00155a eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
00155b e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
00155c 940e 1b19 	CALL __MULF12
00155e 940e 1990 	CALL SUBOPT_0x81
001560 940e 19ee 	CALL SUBOPT_0x90
001562 df32      	RCALL _floor
001563 940e 1a58 	CALL __CFD1
001565 018f      	MOVW R16,R30
001566 01f8      	MOVW R30,R16
001567 940e 19ee 	CALL SUBOPT_0x90
001569 940e 17c7 	CALL SUBOPT_0x3D
00156b 940e 17d1 	CALL SUBOPT_0x3F
00156d 01df      	MOVW R26,R30
00156e 01cb      	MOVW R24,R22
                +
00156f e0e0     +LDI R30 , LOW ( 0x3F000000 )
001570 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
001571 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
001572 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
001573 940e 17d1 	CALL SUBOPT_0x3F
001575 940e 19da 	CALL SUBOPT_0x8C
001577 940e 19df 	CALL SUBOPT_0x8D
001579 940e 19e1 	CALL SUBOPT_0x8E
                +
00157b e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
00157c e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
00157d e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
00157e e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
00157f 940e 1b19 	CALL __MULF12
                +
001581 eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
001582 eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
001583 ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
001584 e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
001585 940e 1ac9 	CALL __ADDF12
001587 940e 19d0 	CALL SUBOPT_0x8A
001589 940e 1b19 	CALL __MULF12
00158b 940e 19da 	CALL SUBOPT_0x8C
00158d 940e 19e9 	CALL SUBOPT_0x8F
                +
00158f e2a8     +LDI R26 , LOW ( 0x41A68D28 )
001590 e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
001591 ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
001592 e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
001593 940e 1ac9 	CALL __ADDF12
001595 940e 1932 	CALL SUBOPT_0x71
001597 940e 19d5 	CALL SUBOPT_0x8B
001599 940e 1926 	CALL SUBOPT_0x6F
00159b 940e 1ac9 	CALL __ADDF12
                +
00159d efa3     +LDI R26 , LOW ( 0x3FB504F3 )
00159e e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
00159f eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
0015a0 e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
0015a1 940e 1b19 	CALL __MULF12
0015a3 937f      	PUSH R23
0015a4 936f      	PUSH R22
0015a5 93ff      	PUSH R31
0015a6 93ef      	PUSH R30
0015a7 940e 19d0 	CALL SUBOPT_0x8A
0015a9 940e 19e9 	CALL SUBOPT_0x8F
0015ab 940e 1ac2 	CALL __SUBF12
0015ad 91af      	POP  R26
0015ae 91bf      	POP  R27
0015af 918f      	POP  R24
0015b0 919f      	POP  R25
0015b1 940e 1b67 	CALL __DIVF21
0015b3 940e 1cce 	CALL __PUTPARD1
0015b5 01d8      	MOVW R26,R16
0015b6 940e 1a17 	CALL _ldexp
                 _0x20C0002:
0015b8 8119      	LDD  R17,Y+1
0015b9 8108      	LDD  R16,Y+0
0015ba 962e      	ADIW R28,14
0015bb 9508      	RET
                 _pow:
0015bc 940e 1cd3 	CALL __PUTPARD2
0015be 9724      	SBIW R28,4
0015bf 940e 183e 	CALL SUBOPT_0x50
0015c1 940e 1cf9 	CALL __CPD10
0015c3 f419      	BRNE _0x2080012
0015c4 940e 19f3 	CALL SUBOPT_0x91
0015c6 c043      	RJMP _0x20C0001
                 _0x2080012:
                +
0015c7 85a8     +LDD R26 , Y + 8
0015c8 85b9     +LDD R27 , Y + 8 + 1
0015c9 858a     +LDD R24 , Y + 8 + 2
0015ca 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0015cb 940e 1d01 	CALL __CPD02
0015cd f484      	BRGE _0x2080013
0015ce 940e 17e8 	CALL SUBOPT_0x44
0015d0 940e 1cf9 	CALL __CPD10
0015d2 f419      	BRNE _0x2080014
0015d3 940e 1672 	CALL SUBOPT_0xA
0015d5 c034      	RJMP _0x20C0001
                 _0x2080014:
                +
0015d6 85a8     +LDD R26 , Y + 8
0015d7 85b9     +LDD R27 , Y + 8 + 1
0015d8 858a     +LDD R24 , Y + 8 + 2
0015d9 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0015da 940e 19f8 	CALL SUBOPT_0x92
0015dc df4f      	RCALL _exp
0015dd c02c      	RJMP _0x20C0001
                 _0x2080013:
0015de 940e 17e8 	CALL SUBOPT_0x44
0015e0 01de      	MOVW R26,R28
0015e1 940e 1a58 	CALL __CFD1
0015e3 940e 1cb5 	CALL __PUTDP1
0015e5 940e 1843 	CALL SUBOPT_0x51
0015e7 940e 1a8f 	CALL __CDF1
0015e9 01df      	MOVW R26,R30
0015ea 01cb      	MOVW R24,R22
0015eb 940e 17e8 	CALL SUBOPT_0x44
0015ed 940e 1d07 	CALL __CPD12
0015ef f019      	BREQ _0x2080015
0015f0 940e 19f3 	CALL SUBOPT_0x91
0015f2 c017      	RJMP _0x20C0001
                 _0x2080015:
0015f3 940e 183e 	CALL SUBOPT_0x50
0015f5 940e 1a23 	CALL __ANEGF1
0015f7 01df      	MOVW R26,R30
0015f8 01cb      	MOVW R24,R22
0015f9 940e 19f8 	CALL SUBOPT_0x92
0015fb df30      	RCALL _exp
                +
0015fc 87e8     +STD Y + 8 , R30
0015fd 87f9     +STD Y + 8 + 1 , R31
0015fe 876a     +STD Y + 8 + 2 , R22
0015ff 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
001600 81e8      	LD   R30,Y
001601 70e1      	ANDI R30,LOW(0x1)
001602 f419      	BRNE _0x2080016
001603 940e 183e 	CALL SUBOPT_0x50
001605 c004      	RJMP _0x20C0001
                 _0x2080016:
001606 940e 183e 	CALL SUBOPT_0x50
001608 940e 1a23 	CALL __ANEGF1
                 _0x20C0001:
00160a 962c      	ADIW R28,12
00160b 9508      	RET
                 
                 	.CSEG
                 _isprint:
00160c 93aa      	ST   -Y,R26
00160d e0e1          ldi  r30,1
00160e 91f9          ld   r31,y+
00160f 32f0          cpi  r31,32
001610 f010          brlo isprint0
001611 38f0          cpi  r31,128
001612 f008          brlo isprint1
                 isprint0:
001613 27ee          clr  r30
                 isprint1:
001614 9508          ret
                 
                 	.DSEG
                 _SWITCH:
000600           	.BYTE 0x1
                 _CURRENT_VOLT:
000601           	.BYTE 0x4
                 _CURRENT_AMP:
000605           	.BYTE 0x4
                 
                 	.ESEG
                 _ADJ0_SENSOR5A:
000000 ec
000001 51
000002 b8
000003 3d        	.DB  0xEC,0x51,0xB8,0x3D
                 _ADJ0_SENSOR20A:
000004 ae
000005 47
000006 e1
000007 3d        	.DB  0xAE,0x47,0xE1,0x3D
                 _ADJ0_SENSOR30A:
000008 ae
000009 47
00000a e1
00000b 3d        	.DB  0xAE,0x47,0xE1,0x3D
                 
                 	.DSEG
                 __FlagPackageTerminate0:
000609           	.BYTE 0x1
                 _rxPackage0:
00060a           	.BYTE 0x20
                 _flag_state:
00062a           	.BYTE 0x2
                 _rx_rd_index1:
00062c           	.BYTE 0x2
                 _rx_counter1:
00062e           	.BYTE 0x2
                 _rx_buffer1:
000630           	.BYTE 0x200
                 _number:
000830           	.BYTE 0x2
                 _AMP_ADJ_ZERO:
000832           	.BYTE 0x4
                 _SENSOR_SENSITIVE:
000836           	.BYTE 0x4
                 _adcValue:
00083a           	.BYTE 0x2
                 _total:
00083c           	.BYTE 0x4
                 _avg:
000840           	.BYTE 0x4
                 _value:
000844           	.BYTE 0x4
                 _Viout:
000848           	.BYTE 0x4
                 _Vdif:
00084c           	.BYTE 0x4
                 _Vsq_avg:
000850           	.BYTE 0x4
                 _volt:
000854           	.BYTE 0x4
                 _amp:
000858           	.BYTE 0x4
                 _power:
00085c           	.BYTE 0x4
                 _whour:
000860           	.BYTE 0x4
                 _Vsum:
000864           	.BYTE 0x4
                 _Isum:
000868           	.BYTE 0x4
                 _Psum:
00086c           	.BYTE 0x4
                 _WHsum:
000870           	.BYTE 0x4
                 _Vavg:
000874           	.BYTE 0x4
                 _Iavg:
000878           	.BYTE 0x4
                 _Pavg:
00087c           	.BYTE 0x4
                 _countSampling:
000880           	.BYTE 0x2
                 _EndDevice_MacAddress:
000882           	.BYTE 0x8
                 _Gateway_MacAddress:
00088a           	.BYTE 0x8
                 _STATUS_DEVICE:
000892           	.BYTE 0x1
                 _EVENT:
000893           	.BYTE 0x2
                 _baseCounter:
000895           	.BYTE 0x4
                 _pressedBTCounter:
000899           	.BYTE 0x1
                 __FlagBT:
00089a           	.BYTE 0x1
                 __Flag05INT:
00089b           	.BYTE 0x1
                 __Flag0001INT:
00089c           	.BYTE 0x1
                 __BlinkLED_1Hz:
00089d           	.BYTE 0x1
                 _Eaddress:
00089e           	.BYTE 0x1
                 _input:
00089f           	.BYTE 0x3C
                 _count_input:
0008db           	.BYTE 0x2
                 _count_event:
0008dd           	.BYTE 0x2
                 _specData:
0008df           	.BYTE 0xD
                 _AI_COMMAND:
0008ec           	.BYTE 0x8
                 _SL_COMMAND:
0008f4           	.BYTE 0x8
                 _SH_COMMAND:
0008fc           	.BYTE 0x8
                 _JOIN_A1:
000904           	.BYTE 0x27
                 _PING_A4:
00092b           	.BYTE 0x27
                 _SEND_EVENT_:
000952           	.BYTE 0x29
                 _SEND_REPORT_:
00097b           	.BYTE 0x4C
                 __voltage:
0009c7           	.BYTE 0x8
                 __amp:
0009cf           	.BYTE 0x8
                 __power:
0009d7           	.BYTE 0x8
                 __watt:
0009df           	.BYTE 0x8
                 _Vreferent:
0009e7           	.BYTE 0x1
                 __seed_G100:
0009e8           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
001615 93ba      	ST   -Y,R27
001616 93aa      	ST   -Y,R26
001617 81e8      	LD   R30,Y
001618 81f9      	LDD  R31,Y+1
001619 9730      	SBIW R30,0
00161a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
00161b 91e0 0065 	LDS  R30,101
00161d 7feb      	ANDI R30,0xFB
00161e 93e0 0065 	STS  101,R30
001620 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
001621 91e0 0065 	LDS  R30,101
001623 60e4      	ORI  R30,4
001624 93e0 0065 	STS  101,R30
001626 98af      	CBI  0x15,7
001627 e0e1      	LDI  R30,LOW(1)
001628 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
001629 91a0 089e 	LDS  R26,_Eaddress
00162b 27bb      	CLR  R27
00162c 940e 0dbf 	CALL _EEPROM_read
00162e 93e0 0892 	STS  _STATUS_DEVICE,R30
001630 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x4:
001631 91e0 089e 	LDS  R30,_Eaddress
001633 e0f0      	LDI  R31,0
001634 93fa      	ST   -Y,R31
001635 93ea      	ST   -Y,R30
001636 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x5:
                +
001637 e0e0     +LDI R30 , LOW ( 0x43390000 )
001638 e0f0     +LDI R31 , HIGH ( 0x43390000 )
001639 e369     +LDI R22 , BYTE3 ( 0x43390000 )
00163a e473     +LDI R23 , BYTE4 ( 0x43390000 )
                 	__GETD1N 0x43390000
00163b 93e0 0836 	STS  _SENSOR_SENSITIVE,R30
00163d 93f0 0837 	STS  _SENSOR_SENSITIVE+1,R31
00163f 9360 0838 	STS  _SENSOR_SENSITIVE+2,R22
001641 9370 0839 	STS  _SENSOR_SENSITIVE+3,R23
001643 e0a0      	LDI  R26,LOW(_ADJ0_SENSOR5A)
001644 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR5A)
001645 940e 1ce5 	CALL __EEPROMRDD
001647 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
001648 01df      	MOVW R26,R30
001649 01cb      	MOVW R24,R22
00164a 940e 1d01 	CALL __CPD02
00164c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
00164d 93e0 0836 	STS  _SENSOR_SENSITIVE,R30
00164f 93f0 0837 	STS  _SENSOR_SENSITIVE+1,R31
001651 9360 0838 	STS  _SENSOR_SENSITIVE+2,R22
001653 9370 0839 	STS  _SENSOR_SENSITIVE+3,R23
001655 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x8:
001656 93fa      	ST   -Y,R31
001657 93ea      	ST   -Y,R30
001658 e080      	LDI  R24,0
001659 940e 0618 	CALL _printDebug
00165b 9622      	ADIW R28,2
                +
00165c ece9     +LDI R30 , LOW ( 2 * _0x0 + ( 39 ) )
00165d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 39 ) )
                 	__POINTW1FN _0x0,39
00165e 93fa      	ST   -Y,R31
00165f 93ea      	ST   -Y,R30
                +
001660 e0e0     +LDI R30 , LOW ( 0x3F800000 )
001661 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
001662 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
001663 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
001664 940e 1cce 	CALL __PUTPARD1
001666 e084      	LDI  R24,4
001667 940e 0618 	CALL _printDebug
001669 9626      	ADIW R28,6
00166a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 27 TIMES, CODE SIZE REDUCTION:101 WORDS
                 SUBOPT_0x9:
00166b 93fa      	ST   -Y,R31
00166c 93ea      	ST   -Y,R30
00166d e080      	LDI  R24,0
00166e 940e 0618 	CALL _printDebug
001670 9622      	ADIW R28,2
001671 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
                +
001672 e0e0     +LDI R30 , LOW ( 0x3F800000 )
001673 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
001674 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
001675 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
001676 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:69 WORDS
                 SUBOPT_0xB:
001677 940e 1cce 	CALL __PUTPARD1
001679 e084      	LDI  R24,4
00167a 940e 0618 	CALL _printDebug
00167c 9626      	ADIW R28,6
00167d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
00167e 91e0 0836 	LDS  R30,_SENSOR_SENSITIVE
001680 91f0 0837 	LDS  R31,_SENSOR_SENSITIVE+1
001682 9160 0838 	LDS  R22,_SENSOR_SENSITIVE+2
001684 9170 0839 	LDS  R23,_SENSOR_SENSITIVE+3
001686 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
001687 91e0 0832 	LDS  R30,_AMP_ADJ_ZERO
001689 91f0 0833 	LDS  R31,_AMP_ADJ_ZERO+1
00168b 9160 0834 	LDS  R22,_AMP_ADJ_ZERO+2
00168d 9170 0835 	LDS  R23,_AMP_ADJ_ZERO+3
00168f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xE:
001690 e0a0      	LDI  R26,LOW(0)
001691 e0b0      	LDI  R27,0
001692 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xF:
001693 940e 08a2 	CALL _xbee_sendATCommand
001695 e6a4      	LDI  R26,LOW(100)
001696 e0b0      	LDI  R27,0
001697 940c 19fc 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x10:
001699 e6a4      	LDI  R26,LOW(100)
00169a e0b0      	LDI  R27,0
00169b 940c 19fc 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x11:
00169d e0a1      	LDI  R26,LOW(1)
00169e e0b0      	LDI  R27,0
00169f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x12:
0016a0 940e 0431 	CALL _device_state
0016a2 cf8e      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x13:
0016a3 91a0 0892 	LDS  R26,_STATUS_DEVICE
0016a5 940c 0db2 	JMP  _EEPROM_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x14:
0016a7 e0a2      	LDI  R26,LOW(2)
0016a8 e0b0      	LDI  R27,0
0016a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x15:
0016aa 01f4      	MOVW R30,R8
0016ab 9631      	ADIW R30,1
0016ac 014f      	MOVW R8,R30
0016ad 01d4      	MOVW R26,R8
0016ae e0ea      	LDI  R30,LOW(10)
0016af e0f0      	LDI  R31,HIGH(10)
0016b0 940e 1c7a 	CALL __MODW21
0016b2 9730      	SBIW R30,0
0016b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
0016b4 eca8      	LDI  R26,LOW(200)
0016b5 e0b0      	LDI  R27,0
0016b6 940c 19fc 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x17:
0016b8 93e0 062a 	STS  _flag_state,R30
0016ba 93f0 062b 	STS  _flag_state+1,R31
0016bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
0016bd e0e4      	LDI  R30,LOW(4)
0016be e0f0      	LDI  R31,HIGH(4)
0016bf dff8      	RCALL SUBOPT_0x17
0016c0 efae      	LDI  R26,LOW(510)
0016c1 e0b1      	LDI  R27,HIGH(510)
0016c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
0016c3 01fe      	MOVW R30,R28
0016c4 9632      	ADIW R30,2
0016c5 93fa      	ST   -Y,R31
0016c6 93ea      	ST   -Y,R30
0016c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
0016c8 93ba      	ST   -Y,R27
0016c9 93aa      	ST   -Y,R26
0016ca 9724      	SBIW R28,4
0016cb e0e0      	LDI  R30,LOW(0)
0016cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1B:
0016cd 81ee      	LDD  R30,Y+6
0016ce 81ff      	LDD  R31,Y+6+1
0016cf 93fa      	ST   -Y,R31
0016d0 93ea      	ST   -Y,R30
0016d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
0016d2 85ac      	LDD  R26,Y+12
0016d3 85bd      	LDD  R27,Y+12+1
0016d4 940c 0685 	JMP  _print_hex_ascii_line
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
0016d6 85a8      	LDD  R26,Y+8
0016d7 85b9      	LDD  R27,Y+8+1
0016d8 0fea      	ADD  R30,R26
0016d9 1ffb      	ADC  R31,R27
0016da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
0016db 940e 1c19 	CALL __CWD1
0016dd cf99      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1F:
0016de 93fa      	ST   -Y,R31
0016df 93ea      	ST   -Y,R30
0016e0 01da      	MOVW R26,R20
0016e1 91ec      	LD   R30,X
0016e2 27ff      	CLR  R31
0016e3 2766      	CLR  R22
0016e4 2777      	CLR  R23
0016e5 cf91      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
0016e6 eaeb      	LDI  R30,LOW(171)
0016e7 93e0 0089 	STS  137,R30
0016e9 eae0      	LDI  R30,LOW(160)
0016ea 93e0 0088 	STS  136,R30
0016ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x21:
0016ed 920a      	ST   -Y,R0
0016ee 921a      	ST   -Y,R1
0016ef 92fa      	ST   -Y,R15
0016f0 936a      	ST   -Y,R22
0016f1 937a      	ST   -Y,R23
0016f2 938a      	ST   -Y,R24
0016f3 939a      	ST   -Y,R25
0016f4 93aa      	ST   -Y,R26
0016f5 93ba      	ST   -Y,R27
0016f6 93ea      	ST   -Y,R30
0016f7 93fa      	ST   -Y,R31
0016f8 b7ef      	IN   R30,SREG
0016f9 93ea      	ST   -Y,R30
0016fa 931a      	ST   -Y,R17
0016fb 930a      	ST   -Y,R16
0016fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x22:
0016fd 91ed      	LD   R30,X+
0016fe 91fd      	LD   R31,X+
0016ff 9631      	ADIW R30,1
001700 93fe      	ST   -X,R31
001701 93ee      	ST   -X,R30
001702 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
001703 2766      	CLR  R22
001704 2777      	CLR  R23
001705 cf71      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x24:
001706 81a9      	LDD  R26,Y+1
001707 81ba      	LDD  R27,Y+1+1
001708 27ee      	CLR  R30
001709 0fa1      	ADD  R26,R17
00170a 1fbe      	ADC  R27,R30
00170b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x25:
00170c 940e 1cbf 	CALL __GETD1S0
                +
00170e 36e0     +CPI R30 , LOW ( 0x960 )
00170f e0a9     +LDI R26 , HIGH ( 0x960 )
001710 07fa     +CPC R31 , R26
001711 e0a0     +LDI R26 , BYTE3 ( 0x960 )
001712 076a     +CPC R22 , R26
001713 e0a0     +LDI R26 , BYTE4 ( 0x960 )
001714 077a     +CPC R23 , R26
                 	__CPD1N 0x960
001715 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x26:
                +
001716 38e0     +CPI R30 , LOW ( 0x2580 )
001717 e2a5     +LDI R26 , HIGH ( 0x2580 )
001718 07fa     +CPC R31 , R26
001719 e0a0     +LDI R26 , BYTE3 ( 0x2580 )
00171a 076a     +CPC R22 , R26
00171b e0a0     +LDI R26 , BYTE4 ( 0x2580 )
00171c 077a     +CPC R23 , R26
                 	__CPD1N 0x2580
00171d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x27:
                +
00171e 34e0     +CPI R30 , LOW ( 0x3840 )
00171f e3a8     +LDI R26 , HIGH ( 0x3840 )
001720 07fa     +CPC R31 , R26
001721 e0a0     +LDI R26 , BYTE3 ( 0x3840 )
001722 076a     +CPC R22 , R26
001723 e0a0     +LDI R26 , BYTE4 ( 0x3840 )
001724 077a     +CPC R23 , R26
                 	__CPD1N 0x3840
001725 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x28:
                +
001726 30e0     +CPI R30 , LOW ( 0x4B00 )
001727 e4ab     +LDI R26 , HIGH ( 0x4B00 )
001728 07fa     +CPC R31 , R26
001729 e0a0     +LDI R26 , BYTE3 ( 0x4B00 )
00172a 076a     +CPC R22 , R26
00172b e0a0     +LDI R26 , BYTE4 ( 0x4B00 )
00172c 077a     +CPC R23 , R26
                 	__CPD1N 0x4B00
00172d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x29:
                +
00172e 30e0     +CPI R30 , LOW ( 0x9600 )
00172f e9a6     +LDI R26 , HIGH ( 0x9600 )
001730 07fa     +CPC R31 , R26
001731 e0a0     +LDI R26 , BYTE3 ( 0x9600 )
001732 076a     +CPC R22 , R26
001733 e0a0     +LDI R26 , BYTE4 ( 0x9600 )
001734 077a     +CPC R23 , R26
                 	__CPD1N 0x9600
001735 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2A:
                +
001736 30e0     +CPI R30 , LOW ( 0xE100 )
001737 eea1     +LDI R26 , HIGH ( 0xE100 )
001738 07fa     +CPC R31 , R26
001739 e0a0     +LDI R26 , BYTE3 ( 0xE100 )
00173a 076a     +CPC R22 , R26
00173b e0a0     +LDI R26 , BYTE4 ( 0xE100 )
00173c 077a     +CPC R23 , R26
                 	__CPD1N 0xE100
00173d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2B:
                +
00173e 30e0     +CPI R30 , LOW ( 0x1C200 )
00173f eca2     +LDI R26 , HIGH ( 0x1C200 )
001740 07fa     +CPC R31 , R26
001741 e0a1     +LDI R26 , BYTE3 ( 0x1C200 )
001742 076a     +CPC R22 , R26
001743 e0a0     +LDI R26 , BYTE4 ( 0x1C200 )
001744 077a     +CPC R23 , R26
                 	__CPD1N 0x1C200
001745 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2C:
001746 93fa      	ST   -Y,R31
001747 93ea      	ST   -Y,R30
001748 e0a8      	LDI  R26,LOW(8)
001749 e0b0      	LDI  R27,0
00174a 940c 063d 	JMP  _print_payload
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x2D:
00174c e0a8      	LDI  R26,LOW(8)
00174d e0b0      	LDI  R27,0
00174e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2E:
00174f 93ba      	ST   -Y,R27
001750 93aa      	ST   -Y,R26
001751 931a      	ST   -Y,R17
001752 930a      	ST   -Y,R16
001753 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2F:
001754 01f8      	MOVW R30,R16
001755 81ac      	LDD  R26,Y+4
001756 81bd      	LDD  R27,Y+4+1
001757 0fae      	ADD  R26,R30
001758 1fbf      	ADC  R27,R31
001759 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x30:
00175a 81a9      	LDD  R26,Y+1
00175b 81ba      	LDD  R27,Y+1+1
00175c 9612      	ADIW R26,2
00175d 91ac      	LD   R26,X
00175e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x31:
00175f 81a9      	LDD  R26,Y+1
001760 81ba      	LDD  R27,Y+1+1
001761 9613      	ADIW R26,3
001762 91ac      	LD   R26,X
001763 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x32:
001764 e8e2      	LDI  R30,LOW(_EndDevice_MacAddress)
001765 e0f8      	LDI  R31,HIGH(_EndDevice_MacAddress)
001766 93fa      	ST   -Y,R31
001767 93ea      	ST   -Y,R30
001768 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x33:
001769 81eb      	LDD  R30,Y+3
00176a 81fc      	LDD  R31,Y+3+1
00176b 9635      	ADIW R30,5
00176c 93fa      	ST   -Y,R31
00176d 93ea      	ST   -Y,R30
00176e e0a4      	LDI  R26,LOW(4)
00176f e0b0      	LDI  R27,0
001770 940c 142c 	JMP  _memcpy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x34:
001772 81a9      	LDD  R26,Y+1
001773 81ba      	LDD  R27,Y+1+1
001774 9690      	ADIW R26,32
001775 91ac      	LD   R26,X
001776 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x35:
001777 e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
001778 e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
001779 93fa      	ST   -Y,R31
00177a 93ea      	ST   -Y,R30
00177b 81eb      	LDD  R30,Y+3
00177c 81fc      	LDD  R31,Y+3+1
00177d 9631      	ADIW R30,1
00177e 93fa      	ST   -Y,R31
00177f 93ea      	ST   -Y,R30
001780 cfcb      	RJMP SUBOPT_0x2D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
001781 e0e4      	LDI  R30,LOW(4)
001782 e0f0      	LDI  R31,HIGH(4)
001783 cf34      	RJMP SUBOPT_0x17
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x37:
001784 940e 142c 	CALL _memcpy
001786 91e0 08db 	LDS  R30,_count_input
001788 91f0 08dc 	LDS  R31,_count_input+1
00178a e9af      	LDI  R26,LOW(_input)
00178b e0b8      	LDI  R27,HIGH(_input)
00178c 0fee      	LSL  R30
00178d 1fff      	ROL  R31
00178e 0fae      	ADD  R26,R30
00178f 1fbf      	ADC  R27,R31
001790 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x38:
001791 91e0 08db 	LDS  R30,_count_input
001793 91f0 08dc 	LDS  R31,_count_input+1
001795 e9af      	LDI  R26,LOW(_input)
001796 e0b8      	LDI  R27,HIGH(_input)
001797 0fee      	LSL  R30
001798 1fff      	ROL  R31
001799 0fae      	ADD  R26,R30
00179a 1fbf      	ADC  R27,R31
00179b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x39:
00179c e9af      	LDI  R26,LOW(_input)
00179d e0b8      	LDI  R27,HIGH(_input)
00179e 0fee      	LSL  R30
00179f 1fff      	ROL  R31
0017a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3A:
0017a1 93ea      	ST   -Y,R30
                +
0017a2 e0a0     +LDI R26 , LOW ( 0x9600 )
0017a3 e9b6     +LDI R27 , HIGH ( 0x9600 )
0017a4 e080     +LDI R24 , BYTE3 ( 0x9600 )
0017a5 e090     +LDI R25 , BYTE4 ( 0x9600 )
                 	__GETD2N 0x9600
0017a6 940c 0838 	JMP  _init_uart
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:20 WORDS
                 SUBOPT_0x3B:
0017a8 e0e0      	LDI  R30,0
0017a9 99cf      	SBIC 0x19,7
0017aa e0e1      	LDI  R30,1
0017ab 2e0e      	MOV  R0,R30
0017ac e0a0      	LDI  R26,0
0017ad 99ce      	SBIC 0x19,6
0017ae e0a1      	LDI  R26,1
0017af 2fea      	MOV  R30,R26
0017b0 0fee      	LSL  R30
0017b1 2a0e      	OR   R0,R30
0017b2 e0a0      	LDI  R26,0
0017b3 99cd      	SBIC 0x19,5
0017b4 e0a1      	LDI  R26,1
0017b5 2fea      	MOV  R30,R26
0017b6 0fee      	LSL  R30
0017b7 0fee      	LSL  R30
0017b8 2a0e      	OR   R0,R30
0017b9 e0a0      	LDI  R26,0
0017ba 99cc      	SBIC 0x19,4
0017bb e0a1      	LDI  R26,1
0017bc 2fea      	MOV  R30,R26
0017bd 0fee      	LSL  R30
0017be 0fee      	LSL  R30
0017bf 0fee      	LSL  R30
0017c0 29e0      	OR   R30,R0
0017c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3C:
                +
0017c2 85ec     +LDD R30 , Y + 12
0017c3 85fd     +LDD R31 , Y + 12 + 1
0017c4 856e     +LDD R22 , Y + 12 + 2
0017c5 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
0017c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3D:
0017c7 940e 1c19 	CALL __CWD1
0017c9 940e 1a8f 	CALL __CDF1
0017cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x3E:
                +
0017cc 85ac     +LDD R26 , Y + 12
0017cd 85bd     +LDD R27 , Y + 12 + 1
0017ce 858e     +LDD R24 , Y + 12 + 2
0017cf 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
0017d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3F:
0017d1 940e 1cd8 	CALL __SWAPD12
0017d3 940e 1ac2 	CALL __SUBF12
0017d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x40:
                +
0017d6 83ec     +STD Y + 4 , R30
0017d7 83fd     +STD Y + 4 + 1 , R31
0017d8 836e     +STD Y + 4 + 2 , R22
0017d9 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
0017da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x41:
                +
0017db e0e0     +LDI R30 , LOW ( 0x41200000 )
0017dc e0f0     +LDI R31 , HIGH ( 0x41200000 )
0017dd e260     +LDI R22 , BYTE3 ( 0x41200000 )
0017de e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0017df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x42:
                +
0017e0 81ac     +LDD R26 , Y + 4
0017e1 81bd     +LDD R27 , Y + 4 + 1
0017e2 818e     +LDD R24 , Y + 4 + 2
0017e3 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0017e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x43:
0017e5 940e 1b19 	CALL __MULF12
0017e7 cfee      	RJMP SUBOPT_0x40
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x44:
                +
0017e8 81ec     +LDD R30 , Y + 4
0017e9 81fd     +LDD R31 , Y + 4 + 1
0017ea 816e     +LDD R22 , Y + 4 + 2
0017eb 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0017ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x45:
0017ed 93aa      	ST   -Y,R26
                +
0017ee e5e7     +LDI R30 , LOW ( _SEND_EVENT_ + ( 5 ) )
0017ef e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 5 ) )
                 	__POINTW1MN _SEND_EVENT_,5
0017f0 93fa      	ST   -Y,R31
0017f1 93ea      	ST   -Y,R30
0017f2 e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
0017f3 e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
0017f4 93fa      	ST   -Y,R31
0017f5 93ea      	ST   -Y,R30
0017f6 cf55      	RJMP SUBOPT_0x2D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x46:
0017f7 940e 142c 	CALL _memcpy
                +
0017f9 e6e4     +LDI R30 , LOW ( _SEND_EVENT_ + ( 18 ) )
0017fa e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 18 ) )
                 	__POINTW1MN _SEND_EVENT_,18
0017fb 93fa      	ST   -Y,R31
0017fc 93ea      	ST   -Y,R30
0017fd cf66      	RJMP SUBOPT_0x32
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x47:
0017fe 940e 142c 	CALL _memcpy
                +
001800 e6ec     +LDI R30 , LOW ( _SEND_EVENT_ + ( 26 ) )
001801 e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 26 ) )
                 	__POINTW1MN _SEND_EVENT_,26
001802 93fa      	ST   -Y,R31
001803 93ea      	ST   -Y,R30
001804 e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
001805 e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
001806 93fa      	ST   -Y,R31
001807 93ea      	ST   -Y,R30
001808 cf43      	RJMP SUBOPT_0x2D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x48:
001809 940e 142c 	CALL _memcpy
                +
00180b e7e9     +LDI R30 , LOW ( _SEND_EVENT_ + ( 39 ) )
00180c e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 39 ) )
                 	__POINTW1MN _SEND_EVENT_,39
00180d 93fa      	ST   -Y,R31
00180e 93ea      	ST   -Y,R30
00180f ceb3      	RJMP SUBOPT_0x19
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x49:
                +
001810 93e0 0977+STS _SEND_EVENT_ + ( 37 ) , R30
                 	__PUTB1MN _SEND_EVENT_,37
001812 81e9      	LDD  R30,Y+1
                +
001813 93e0 0978+STS _SEND_EVENT_ + ( 38 ) , R30
                 	__PUTB1MN _SEND_EVENT_,38
                +
001815 e5e5     +LDI R30 , LOW ( _SEND_EVENT_ + ( 3 ) )
001816 e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 3 ) )
                 	__POINTW1MN _SEND_EVENT_,3
001817 93fa      	ST   -Y,R31
001818 93ea      	ST   -Y,R30
                +
001819 91a0 0954+LDS R26 , _SEND_EVENT_ + ( 2 )
                 	__GETB2MN _SEND_EVENT_,2
00181b e0b0      	LDI  R27,0
00181c 940e 08d4 	CALL _xbee_checksum
                +
00181e 93e0 097a+STS _SEND_EVENT_ + ( 40 ) , R30
                 	__PUTB1MN _SEND_EVENT_,40
001820 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x4A:
001821 e5e2      	LDI  R30,LOW(_SEND_EVENT_)
001822 e0f9      	LDI  R31,HIGH(_SEND_EVENT_)
001823 93fa      	ST   -Y,R31
001824 93ea      	ST   -Y,R30
001825 e2a9      	LDI  R26,LOW(41)
001826 e0b0      	LDI  R27,0
001827 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4B:
001828 93fa      	ST   -Y,R31
001829 93ea      	ST   -Y,R30
00182a cf39      	RJMP SUBOPT_0x32
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4C:
00182b e0b0      	LDI  R27,0
00182c 940c 08d4 	JMP  _xbee_checksum
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4D:
00182e 93fa      	ST   -Y,R31
00182f 93ea      	ST   -Y,R30
001830 e2a7      	LDI  R26,LOW(39)
001831 e0b0      	LDI  R27,0
001832 940c 063d 	JMP  _print_payload
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x4E:
001834 93fa      	ST   -Y,R31
001835 93ea      	ST   -Y,R30
001836 e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
001837 e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
001838 93fa      	ST   -Y,R31
001839 93ea      	ST   -Y,R30
00183a cf11      	RJMP SUBOPT_0x2D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4F:
00183b 93fa      	ST   -Y,R31
00183c 93ea      	ST   -Y,R30
00183d ce69      	RJMP SUBOPT_0x14
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x50:
                +
00183e 85e8     +LDD R30 , Y + 8
00183f 85f9     +LDD R31 , Y + 8 + 1
001840 856a     +LDD R22 , Y + 8 + 2
001841 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
001842 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x51:
001843 940e 1cbf 	CALL __GETD1S0
001845 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x52:
001846 93fa      	ST   -Y,R31
001847 93ea      	ST   -Y,R30
001848 cf03      	RJMP SUBOPT_0x2D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x53:
001849 e7eb      	LDI  R30,LOW(_SEND_REPORT_)
00184a e0f9      	LDI  R31,HIGH(_SEND_REPORT_)
00184b 93fa      	ST   -Y,R31
00184c 93ea      	ST   -Y,R30
00184d e4ac      	LDI  R26,LOW(76)
00184e e0b0      	LDI  R27,0
00184f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x54:
001850 91e0 0830 	LDS  R30,_number
001852 91f0 0831 	LDS  R31,_number+1
001854 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x55:
001855 91a0 0864 	LDS  R26,_Vsum
001857 91b0 0865 	LDS  R27,_Vsum+1
001859 9180 0866 	LDS  R24,_Vsum+2
00185b 9190 0867 	LDS  R25,_Vsum+3
00185d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x56:
00185e 2766      	CLR  R22
00185f 2777      	CLR  R23
001860 940e 1a8f 	CALL __CDF1
001862 940e 1b67 	CALL __DIVF21
001864 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x57:
001865 91a0 0868 	LDS  R26,_Isum
001867 91b0 0869 	LDS  R27,_Isum+1
001869 9180 086a 	LDS  R24,_Isum+2
00186b 9190 086b 	LDS  R25,_Isum+3
00186d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x58:
00186e 93e0 0878 	STS  _Iavg,R30
001870 93f0 0879 	STS  _Iavg+1,R31
001872 9360 087a 	STS  _Iavg+2,R22
001874 9370 087b 	STS  _Iavg+3,R23
001876 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x59:
001877 91a0 086c 	LDS  R26,_Psum
001879 91b0 086d 	LDS  R27,_Psum+1
00187b 9180 086e 	LDS  R24,_Psum+2
00187d 9190 086f 	LDS  R25,_Psum+3
00187f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5A:
001880 91e0 0874 	LDS  R30,_Vavg
001882 91f0 0875 	LDS  R31,_Vavg+1
001884 9160 0876 	LDS  R22,_Vavg+2
001886 9170 0877 	LDS  R23,_Vavg+3
001888 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5B:
001889 91e0 0878 	LDS  R30,_Iavg
00188b 91f0 0879 	LDS  R31,_Iavg+1
00188d 9160 087a 	LDS  R22,_Iavg+2
00188f 9170 087b 	LDS  R23,_Iavg+3
001891 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5C:
001892 91e0 087c 	LDS  R30,_Pavg
001894 91f0 087d 	LDS  R31,_Pavg+1
001896 9160 087e 	LDS  R22,_Pavg+2
001898 9170 087f 	LDS  R23,_Pavg+3
00189a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5D:
00189b 91a0 0878 	LDS  R26,_Iavg
00189d 91b0 0879 	LDS  R27,_Iavg+1
00189f 9180 087a 	LDS  R24,_Iavg+2
0018a1 9190 087b 	LDS  R25,_Iavg+3
                +
0018a3 e0e0     +LDI R30 , LOW ( 0x447A0000 )
0018a4 e0f0     +LDI R31 , HIGH ( 0x447A0000 )
0018a5 e76a     +LDI R22 , BYTE3 ( 0x447A0000 )
0018a6 e474     +LDI R23 , BYTE4 ( 0x447A0000 )
                 	__GETD1N 0x447A0000
0018a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5E:
0018a8 91a0 0870 	LDS  R26,_WHsum
0018aa 91b0 0871 	LDS  R27,_WHsum+1
0018ac 9180 0872 	LDS  R24,_WHsum+2
0018ae 9190 0873 	LDS  R25,_WHsum+3
0018b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5F:
0018b1 91a0 0836 	LDS  R26,_SENSOR_SENSITIVE
0018b3 91b0 0837 	LDS  R27,_SENSOR_SENSITIVE+1
0018b5 9180 0838 	LDS  R24,_SENSOR_SENSITIVE+2
0018b7 9190 0839 	LDS  R25,_SENSOR_SENSITIVE+3
0018b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x60:
0018ba 91a0 0878 	LDS  R26,_Iavg
0018bc 91b0 0879 	LDS  R27,_Iavg+1
0018be 9180 087a 	LDS  R24,_Iavg+2
0018c0 9190 087b 	LDS  R25,_Iavg+3
0018c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x61:
0018c3 940e 0d95 	CALL _read_adc
0018c5 93e0 083a 	STS  _adcValue,R30
0018c7 93f0 083b 	STS  _adcValue+1,R31
0018c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x62:
0018ca 91e0 083a 	LDS  R30,_adcValue
0018cc 91f0 083b 	LDS  R31,_adcValue+1
0018ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x63:
0018cf dffa      	RCALL SUBOPT_0x62
0018d0 2766      	CLR  R22
0018d1 2777      	CLR  R23
0018d2 940e 1a8f 	CALL __CDF1
0018d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x64:
0018d5 91e0 0840 	LDS  R30,_avg
0018d7 91f0 0841 	LDS  R31,_avg+1
0018d9 9160 0842 	LDS  R22,_avg+2
0018db 9170 0843 	LDS  R23,_avg+3
0018dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x65:
0018de 91a0 0844 	LDS  R26,_value
0018e0 91b0 0845 	LDS  R27,_value+1
0018e2 9180 0846 	LDS  R24,_value+2
0018e4 9190 0847 	LDS  R25,_value+3
0018e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x66:
0018e7 940e 1ac9 	CALL __ADDF12
0018e9 01df      	MOVW R26,R30
0018ea 01cb      	MOVW R24,R22
0018eb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x67:
0018ec dfe8      	RCALL SUBOPT_0x64
0018ed dff0      	RCALL SUBOPT_0x65
0018ee 940e 1bac 	CALL __CMPF12
0018f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x68:
0018f1 91a0 083c 	LDS  R26,_total
0018f3 91b0 083d 	LDS  R27,_total+1
0018f5 9180 083e 	LDS  R24,_total+2
0018f7 9190 083f 	LDS  R25,_total+3
0018f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x69:
0018fa 940e 1b19 	CALL __MULF12
0018fc 01df      	MOVW R26,R30
0018fd 01cb      	MOVW R24,R22
0018fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6A:
0018ff 91a0 0854 	LDS  R26,_volt
001901 91b0 0855 	LDS  R27,_volt+1
001903 9180 0856 	LDS  R24,_volt+2
001905 9190 0857 	LDS  R25,_volt+3
001907 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x6B:
001908 91e0 0854 	LDS  R30,_volt
00190a 91f0 0855 	LDS  R31,_volt+1
00190c 9160 0856 	LDS  R22,_volt+2
00190e 9170 0857 	LDS  R23,_volt+3
001910 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6C:
001911 91e0 0858 	LDS  R30,_amp
001913 91f0 0859 	LDS  R31,_amp+1
001915 9160 085a 	LDS  R22,_amp+2
001917 9170 085b 	LDS  R23,_amp+3
001919 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6D:
                +
00191a 87e9     +STD Y + 9 , R30
00191b 87fa     +STD Y + 9 + 1 , R31
00191c 876b     +STD Y + 9 + 2 , R22
00191d 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
00191e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6E:
00191f 81ae      	LDD  R26,Y+6
001920 81bf      	LDD  R27,Y+6+1
001921 9611      	ADIW R26,1
001922 83ae      	STD  Y+6,R26
001923 83bf      	STD  Y+6+1,R27
001924 9711      	SBIW R26,1
001925 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6F:
                +
001926 81aa     +LDD R26 , Y + 2
001927 81bb     +LDD R27 , Y + 2 + 1
001928 818c     +LDD R24 , Y + 2 + 2
001929 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00192a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x70:
                +
00192b eced     +LDI R30 , LOW ( 0x3DCCCCCD )
00192c ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
00192d ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
00192e e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
00192f 940e 1b19 	CALL __MULF12
001931 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x71:
                +
001932 83ea     +STD Y + 2 , R30
001933 83fb     +STD Y + 2 + 1 , R31
001934 836c     +STD Y + 2 + 2 , R22
001935 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
001936 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x72:
                +
001937 81ea     +LDD R30 , Y + 2
001938 81fb     +LDD R31 , Y + 2 + 1
001939 816c     +LDD R22 , Y + 2 + 2
00193a 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
00193b 85a9     +LDD R26 , Y + 9
00193c 85ba     +LDD R27 , Y + 9 + 1
00193d 858b     +LDD R24 , Y + 9 + 2
00193e 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
00193f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x73:
001940 de9a      	RCALL SUBOPT_0x41
001941 940e 1b19 	CALL __MULF12
001943 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x74:
                +
001944 e0a0     +LDI R26 , LOW ( 0x3F000000 )
001945 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
001946 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
001947 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
001948 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x75:
001949 2fe0      	MOV  R30,R16
00194a 5de0      	SUBI R30,-LOW(48)
00194b 93ec      	ST   X,R30
00194c 2fe0      	MOV  R30,R16
00194d e0f0      	LDI  R31,0
00194e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x76:
                +
00194f 85a9     +LDD R26 , Y + 9
001950 85ba     +LDD R27 , Y + 9 + 1
001951 858b     +LDD R24 , Y + 9 + 2
001952 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
001953 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x77:
001954 de8b      	RCALL SUBOPT_0x42
001955 de85      	RCALL SUBOPT_0x41
001956 ce8e      	RJMP SUBOPT_0x43
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x78:
001957 de90      	RCALL SUBOPT_0x44
001958 de73      	RCALL SUBOPT_0x3E
001959 940e 1bac 	CALL __CMPF12
00195b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x79:
                +
00195c 87ec     +STD Y + 12 , R30
00195d 87fd     +STD Y + 12 + 1 , R31
00195e 876e     +STD Y + 12 + 2 , R22
00195f 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
001960 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7A:
001961 85a8      	LDD  R26,Y+8
001962 85b9      	LDD  R27,Y+8+1
001963 9611      	ADIW R26,1
001964 87a8      	STD  Y+8,R26
001965 87b9      	STD  Y+8+1,R27
001966 9711      	SBIW R26,1
001967 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7B:
001968 85e8      	LDD  R30,Y+8
001969 85f9      	LDD  R31,Y+8+1
00196a 9631      	ADIW R30,1
00196b 87e8      	STD  Y+8,R30
00196c 87f9      	STD  Y+8+1,R31
00196d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x7C:
00196e 932a      	ST   -Y,R18
00196f 81af      	LDD  R26,Y+7
001970 85b8      	LDD  R27,Y+7+1
001971 85e9      	LDD  R30,Y+9
001972 85fa      	LDD  R31,Y+9+1
001973 9509      	ICALL
001974 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x7D:
                +
001975 01fe     +MOVW R30 , R28
001976 5ae6     +SUBI R30 , LOW ( - 90 )
001977 4fff     +SBCI R31 , HIGH ( - 90 )
001978 9001     +LD R0 , Z +
001979 81f0     +LD R31 , Z
00197a 2de0     +MOV R30 , R0
                 	__GETW1SX 90
00197b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x7E:
00197c 9734      	SBIW R30,4
                +
00197d 01de     +MOVW R26 , R28
00197e 5aa6     +SUBI R26 , LOW ( - 90 )
00197f 4fbf     +SBCI R27 , HIGH ( - 90 )
001980 93ed     +ST X + , R30
001981 93fc     +ST X , R31
                 	__PUTW1SX 90
001982 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7F:
001983 81af      	LDD  R26,Y+7
001984 85b8      	LDD  R27,Y+7+1
001985 85e9      	LDD  R30,Y+9
001986 85fa      	LDD  R31,Y+9+1
001987 9509      	ICALL
001988 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x80:
                +
001989 01de     +MOVW R26 , R28
00198a 5aa6     +SUBI R26 , LOW ( - 90 )
00198b 4fbf     +SBCI R27 , HIGH ( - 90 )
00198c 900d     +LD R0 , X +
00198d 91bc     +LD R27 , X
00198e 2da0     +MOV R26 , R0
                 	__GETW2SX 90
00198f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x81:
                +
001990 87ea     +STD Y + 10 , R30
001991 87fb     +STD Y + 10 + 1 , R31
001992 876c     +STD Y + 10 + 2 , R22
001993 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
001994 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x82:
001995 dfdf      	RCALL SUBOPT_0x7D
001996 cfe5      	RJMP SUBOPT_0x7E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x83:
                +
001997 85ea     +LDD R30 , Y + 10
001998 85fb     +LDD R31 , Y + 10 + 1
001999 856c     +LDD R22 , Y + 10 + 2
00199a 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
00199b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x84:
00199c 87ee      	STD  Y+14,R30
00199d 87ff      	STD  Y+14+1,R31
00199e 85ae      	LDD  R26,Y+14
00199f 85bf      	LDD  R27,Y+14+1
0019a0 940e 144b 	CALL _strlen
0019a2 2f1e      	MOV  R17,R30
0019a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x85:
0019a4 dfe4      	RCALL SUBOPT_0x80
0019a5 9614      	ADIW R26,4
0019a6 940e 1ca6 	CALL __GETW1P
0019a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x86:
                +
0019a9 8be8     +STD Y + 16 , R30
0019aa 8bf9     +STD Y + 16 + 1 , R31
0019ab 8b6a     +STD Y + 16 + 2 , R22
0019ac 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
0019ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x87:
0019ae 7f0b      	ANDI R16,LOW(251)
0019af 89ed      	LDD  R30,Y+21
0019b0 93ea      	ST   -Y,R30
                +
0019b1 01de     +MOVW R26 , R28
0019b2 5aa9     +SUBI R26 , LOW ( - 87 )
0019b3 4fbf     +SBCI R27 , HIGH ( - 87 )
0019b4 900d     +LD R0 , X +
0019b5 91bc     +LD R27 , X
0019b6 2da0     +MOV R26 , R0
                 	__GETW2SX 87
                +
0019b7 01fe     +MOVW R30 , R28
0019b8 5ae7     +SUBI R30 , LOW ( - 89 )
0019b9 4fff     +SBCI R31 , HIGH ( - 89 )
0019ba 9001     +LD R0 , Z +
0019bb 81f0     +LD R31 , Z
0019bc 2de0     +MOV R30 , R0
                 	__GETW1SX 89
0019bd 9509      	ICALL
0019be 3050      	CPI  R21,0
0019bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x88:
                +
0019c0 89e8     +LDD R30 , Y + 16
0019c1 89f9     +LDD R31 , Y + 16 + 1
0019c2 896a     +LDD R22 , Y + 16 + 2
0019c3 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
0019c4 85aa     +LDD R26 , Y + 10
0019c5 85bb     +LDD R27 , Y + 10 + 1
0019c6 858c     +LDD R24 , Y + 10 + 2
0019c7 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
0019c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x89:
                +
0019c9 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0019ca e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0019cb e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0019cc e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0019cd 940e 1ac2 	CALL __SUBF12
0019cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8A:
                +
0019d0 81ae     +LDD R26 , Y + 6
0019d1 81bf     +LDD R27 , Y + 6 + 1
0019d2 8588     +LDD R24 , Y + 6 + 2
0019d3 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
0019d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8B:
                +
0019d5 81ee     +LDD R30 , Y + 6
0019d6 81ff     +LDD R31 , Y + 6 + 1
0019d7 8568     +LDD R22 , Y + 6 + 2
0019d8 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
0019d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8C:
                +
0019da 83ee     +STD Y + 6 , R30
0019db 83ff     +STD Y + 6 + 1 , R31
0019dc 8768     +STD Y + 6 + 2 , R22
0019dd 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
0019de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8D:
0019df dff5      	RCALL SUBOPT_0x8B
0019e0 cfef      	RJMP SUBOPT_0x8A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8E:
0019e1 940e 1b19 	CALL __MULF12
0019e3 df4e      	RCALL SUBOPT_0x71
                +
0019e4 81ea     +LDD R30 , Y + 2
0019e5 81fb     +LDD R31 , Y + 2 + 1
0019e6 816c     +LDD R22 , Y + 2 + 2
0019e7 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0019e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8F:
                +
0019e9 81ea     +LDD R30 , Y + 2
0019ea 81fb     +LDD R31 , Y + 2 + 1
0019eb 816c     +LDD R22 , Y + 2 + 2
0019ec 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0019ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x90:
                +
0019ee 85aa     +LDD R26 , Y + 10
0019ef 85bb     +LDD R27 , Y + 10 + 1
0019f0 858c     +LDD R24 , Y + 10 + 2
0019f1 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
0019f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x91:
                +
0019f3 e0e0     +LDI R30 , LOW ( 0x0 )
0019f4 e0f0     +LDI R31 , HIGH ( 0x0 )
0019f5 e060     +LDI R22 , BYTE3 ( 0x0 )
0019f6 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0019f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x92:
0019f8 940e 14a8 	CALL _log
0019fa dde5      	RCALL SUBOPT_0x42
0019fb cefe      	RJMP SUBOPT_0x69
                 
                 
                 	.CSEG
                 _delay_ms:
0019fc 9610      	adiw r26,0
0019fd f039      	breq __delay_ms1
                 __delay_ms0:
                +
0019fe ec8d     +LDI R24 , LOW ( 0xACD )
0019ff e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
001a00 9701     +SBIW R24 , 1
001a01 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
001a02 95a8      	wdr
001a03 9711      	sbiw r26,1
001a04 f7c9      	brne __delay_ms0
                 __delay_ms1:
001a05 9508      	ret
                 
                 _frexp:
001a06 91e9      	LD   R30,Y+
001a07 91f9      	LD   R31,Y+
001a08 9169      	LD   R22,Y+
001a09 9179      	LD   R23,Y+
001a0a fb77      	BST  R23,7
001a0b 0f66      	LSL  R22
001a0c 1f77      	ROL  R23
001a0d 2788      	CLR  R24
001a0e 577e      	SUBI R23,0x7E
001a0f 0b88      	SBC  R24,R24
001a10 937d      	ST   X+,R23
001a11 938c      	ST   X,R24
001a12 e77e      	LDI  R23,0x7E
001a13 9576      	LSR  R23
001a14 9567      	ROR  R22
001a15 f06e      	BRTS __ANEGF1
001a16 9508      	RET
                 
                 _ldexp:
001a17 91e9      	LD   R30,Y+
001a18 91f9      	LD   R31,Y+
001a19 9169      	LD   R22,Y+
001a1a 9179      	LD   R23,Y+
001a1b fb77      	BST  R23,7
001a1c 0f66      	LSL  R22
001a1d 1f77      	ROL  R23
001a1e 0f7a      	ADD  R23,R26
001a1f 9576      	LSR  R23
001a20 9567      	ROR  R22
001a21 f00e      	BRTS __ANEGF1
001a22 9508      	RET
                 
                 __ANEGF1:
001a23 9730      	SBIW R30,0
001a24 4060      	SBCI R22,0
001a25 4070      	SBCI R23,0
001a26 f009      	BREQ __ANEGF10
001a27 5870      	SUBI R23,0x80
                 __ANEGF10:
001a28 9508      	RET
                 
                 __ROUND_REPACK:
001a29 2355      	TST  R21
001a2a f442      	BRPL __REPACK
001a2b 3850      	CPI  R21,0x80
001a2c f411      	BRNE __ROUND_REPACK0
001a2d ffe0      	SBRS R30,0
001a2e c004      	RJMP __REPACK
                 __ROUND_REPACK0:
001a2f 9631      	ADIW R30,1
001a30 1f69      	ADC  R22,R25
001a31 1f79      	ADC  R23,R25
001a32 f06b      	BRVS __REPACK1
                 
                 __REPACK:
001a33 e850      	LDI  R21,0x80
001a34 2757      	EOR  R21,R23
001a35 f411      	BRNE __REPACK0
001a36 935f      	PUSH R21
001a37 c0cf      	RJMP __ZERORES
                 __REPACK0:
001a38 3f5f      	CPI  R21,0xFF
001a39 f031      	BREQ __REPACK1
001a3a 0f66      	LSL  R22
001a3b 0c00      	LSL  R0
001a3c 9557      	ROR  R21
001a3d 9567      	ROR  R22
001a3e 2f75      	MOV  R23,R21
001a3f 9508      	RET
                 __REPACK1:
001a40 935f      	PUSH R21
001a41 2000      	TST  R0
001a42 f00a      	BRMI __REPACK2
001a43 c0cf      	RJMP __MAXRES
                 __REPACK2:
001a44 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
001a45 e850      	LDI  R21,0x80
001a46 2e19      	MOV  R1,R25
001a47 2215      	AND  R1,R21
001a48 0f88      	LSL  R24
001a49 1f99      	ROL  R25
001a4a 2795      	EOR  R25,R21
001a4b 0f55      	LSL  R21
001a4c 9587      	ROR  R24
                 
                 __UNPACK1:
001a4d e850      	LDI  R21,0x80
001a4e 2e07      	MOV  R0,R23
001a4f 2205      	AND  R0,R21
001a50 0f66      	LSL  R22
001a51 1f77      	ROL  R23
001a52 2775      	EOR  R23,R21
001a53 0f55      	LSL  R21
001a54 9567      	ROR  R22
001a55 9508      	RET
                 
                 __CFD1U:
001a56 9468      	SET
001a57 c001      	RJMP __CFD1U0
                 __CFD1:
001a58 94e8      	CLT
                 __CFD1U0:
001a59 935f      	PUSH R21
001a5a dff2      	RCALL __UNPACK1
001a5b 3870      	CPI  R23,0x80
001a5c f018      	BRLO __CFD10
001a5d 3f7f      	CPI  R23,0xFF
001a5e f408      	BRCC __CFD10
001a5f c0a7      	RJMP __ZERORES
                 __CFD10:
001a60 e156      	LDI  R21,22
001a61 1b57      	SUB  R21,R23
001a62 f4aa      	BRPL __CFD11
001a63 9551      	NEG  R21
001a64 3058      	CPI  R21,8
001a65 f40e      	BRTC __CFD19
001a66 3059      	CPI  R21,9
                 __CFD19:
001a67 f030      	BRLO __CFD17
001a68 efef      	SER  R30
001a69 efff      	SER  R31
001a6a ef6f      	SER  R22
001a6b e77f      	LDI  R23,0x7F
001a6c f977      	BLD  R23,7
001a6d c01a      	RJMP __CFD15
                 __CFD17:
001a6e 2777      	CLR  R23
001a6f 2355      	TST  R21
001a70 f0b9      	BREQ __CFD15
                 __CFD18:
001a71 0fee      	LSL  R30
001a72 1fff      	ROL  R31
001a73 1f66      	ROL  R22
001a74 1f77      	ROL  R23
001a75 955a      	DEC  R21
001a76 f7d1      	BRNE __CFD18
001a77 c010      	RJMP __CFD15
                 __CFD11:
001a78 2777      	CLR  R23
                 __CFD12:
001a79 3058      	CPI  R21,8
001a7a f028      	BRLO __CFD13
001a7b 2fef      	MOV  R30,R31
001a7c 2ff6      	MOV  R31,R22
001a7d 2f67      	MOV  R22,R23
001a7e 5058      	SUBI R21,8
001a7f cff9      	RJMP __CFD12
                 __CFD13:
001a80 2355      	TST  R21
001a81 f031      	BREQ __CFD15
                 __CFD14:
001a82 9576      	LSR  R23
001a83 9567      	ROR  R22
001a84 95f7      	ROR  R31
001a85 95e7      	ROR  R30
001a86 955a      	DEC  R21
001a87 f7d1      	BRNE __CFD14
                 __CFD15:
001a88 2000      	TST  R0
001a89 f40a      	BRPL __CFD16
001a8a d180      	RCALL __ANEGD1
                 __CFD16:
001a8b 915f      	POP  R21
001a8c 9508      	RET
                 
                 __CDF1U:
001a8d 9468      	SET
001a8e c001      	RJMP __CDF1U0
                 __CDF1:
001a8f 94e8      	CLT
                 __CDF1U0:
001a90 9730      	SBIW R30,0
001a91 4060      	SBCI R22,0
001a92 4070      	SBCI R23,0
001a93 f0b1      	BREQ __CDF10
001a94 2400      	CLR  R0
001a95 f026      	BRTS __CDF11
001a96 2377      	TST  R23
001a97 f412      	BRPL __CDF11
001a98 9400      	COM  R0
001a99 d171      	RCALL __ANEGD1
                 __CDF11:
001a9a 2e17      	MOV  R1,R23
001a9b e17e      	LDI  R23,30
001a9c 2011      	TST  R1
                 __CDF12:
001a9d f032      	BRMI __CDF13
001a9e 957a      	DEC  R23
001a9f 0fee      	LSL  R30
001aa0 1fff      	ROL  R31
001aa1 1f66      	ROL  R22
001aa2 1c11      	ROL  R1
001aa3 cff9      	RJMP __CDF12
                 __CDF13:
001aa4 2fef      	MOV  R30,R31
001aa5 2ff6      	MOV  R31,R22
001aa6 2d61      	MOV  R22,R1
001aa7 935f      	PUSH R21
001aa8 df8a      	RCALL __REPACK
001aa9 915f      	POP  R21
                 __CDF10:
001aaa 9508      	RET
                 
                 __SWAPACC:
001aab 934f      	PUSH R20
001aac 01af      	MOVW R20,R30
001aad 01fd      	MOVW R30,R26
001aae 01da      	MOVW R26,R20
001aaf 01ab      	MOVW R20,R22
001ab0 01bc      	MOVW R22,R24
001ab1 01ca      	MOVW R24,R20
001ab2 2d40      	MOV  R20,R0
001ab3 2c01      	MOV  R0,R1
001ab4 2e14      	MOV  R1,R20
001ab5 914f      	POP  R20
001ab6 9508      	RET
                 
                 __UADD12:
001ab7 0fea      	ADD  R30,R26
001ab8 1ffb      	ADC  R31,R27
001ab9 1f68      	ADC  R22,R24
001aba 9508      	RET
                 
                 __NEGMAN1:
001abb 95e0      	COM  R30
001abc 95f0      	COM  R31
001abd 9560      	COM  R22
001abe 5fef      	SUBI R30,-1
001abf 4fff      	SBCI R31,-1
001ac0 4f6f      	SBCI R22,-1
001ac1 9508      	RET
                 
                 __SUBF12:
001ac2 935f      	PUSH R21
001ac3 df81      	RCALL __UNPACK
001ac4 3890      	CPI  R25,0x80
001ac5 f171      	BREQ __ADDF129
001ac6 e850      	LDI  R21,0x80
001ac7 2615      	EOR  R1,R21
                 
001ac8 c004      	RJMP __ADDF120
                 
                 __ADDF12:
001ac9 935f      	PUSH R21
001aca df7a      	RCALL __UNPACK
001acb 3890      	CPI  R25,0x80
001acc f139      	BREQ __ADDF129
                 
                 __ADDF120:
001acd 3870      	CPI  R23,0x80
001ace f121      	BREQ __ADDF128
                 __ADDF121:
001acf 2f57      	MOV  R21,R23
001ad0 1b59      	SUB  R21,R25
001ad1 f12b      	BRVS __ADDF1211
001ad2 f412      	BRPL __ADDF122
001ad3 dfd7      	RCALL __SWAPACC
001ad4 cffa      	RJMP __ADDF121
                 __ADDF122:
001ad5 3158      	CPI  R21,24
001ad6 f018      	BRLO __ADDF123
001ad7 27aa      	CLR  R26
001ad8 27bb      	CLR  R27
001ad9 2788      	CLR  R24
                 __ADDF123:
001ada 3058      	CPI  R21,8
001adb f028      	BRLO __ADDF124
001adc 2fab      	MOV  R26,R27
001add 2fb8      	MOV  R27,R24
001ade 2788      	CLR  R24
001adf 5058      	SUBI R21,8
001ae0 cff9      	RJMP __ADDF123
                 __ADDF124:
001ae1 2355      	TST  R21
001ae2 f029      	BREQ __ADDF126
                 __ADDF125:
001ae3 9586      	LSR  R24
001ae4 95b7      	ROR  R27
001ae5 95a7      	ROR  R26
001ae6 955a      	DEC  R21
001ae7 f7d9      	BRNE __ADDF125
                 __ADDF126:
001ae8 2d50      	MOV  R21,R0
001ae9 2551      	EOR  R21,R1
001aea f072      	BRMI __ADDF127
001aeb dfcb      	RCALL __UADD12
001aec f438      	BRCC __ADDF129
001aed 9567      	ROR  R22
001aee 95f7      	ROR  R31
001aef 95e7      	ROR  R30
001af0 9573      	INC  R23
001af1 f413      	BRVC __ADDF129
001af2 c020      	RJMP __MAXRES
                 __ADDF128:
001af3 dfb7      	RCALL __SWAPACC
                 __ADDF129:
001af4 df3e      	RCALL __REPACK
001af5 915f      	POP  R21
001af6 9508      	RET
                 __ADDF1211:
001af7 f7d8      	BRCC __ADDF128
001af8 cffb      	RJMP __ADDF129
                 __ADDF127:
001af9 1bea      	SUB  R30,R26
001afa 0bfb      	SBC  R31,R27
001afb 0b68      	SBC  R22,R24
001afc f051      	BREQ __ZERORES
001afd f410      	BRCC __ADDF1210
001afe 9400      	COM  R0
001aff dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
001b00 2366      	TST  R22
001b01 f392      	BRMI __ADDF129
001b02 0fee      	LSL  R30
001b03 1fff      	ROL  R31
001b04 1f66      	ROL  R22
001b05 957a      	DEC  R23
001b06 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
001b07 27ee      	CLR  R30
001b08 27ff      	CLR  R31
001b09 2766      	CLR  R22
001b0a 2777      	CLR  R23
001b0b 915f      	POP  R21
001b0c 9508      	RET
                 
                 __MINRES:
001b0d efef      	SER  R30
001b0e efff      	SER  R31
001b0f e76f      	LDI  R22,0x7F
001b10 ef7f      	SER  R23
001b11 915f      	POP  R21
001b12 9508      	RET
                 
                 __MAXRES:
001b13 efef      	SER  R30
001b14 efff      	SER  R31
001b15 e76f      	LDI  R22,0x7F
001b16 e77f      	LDI  R23,0x7F
001b17 915f      	POP  R21
001b18 9508      	RET
                 
                 __MULF12:
001b19 935f      	PUSH R21
001b1a df2a      	RCALL __UNPACK
001b1b 3870      	CPI  R23,0x80
001b1c f351      	BREQ __ZERORES
001b1d 3890      	CPI  R25,0x80
001b1e f341      	BREQ __ZERORES
001b1f 2401      	EOR  R0,R1
001b20 9408      	SEC
001b21 1f79      	ADC  R23,R25
001b22 f423      	BRVC __MULF124
001b23 f31c      	BRLT __ZERORES
                 __MULF125:
001b24 2000      	TST  R0
001b25 f33a      	BRMI __MINRES
001b26 cfec      	RJMP __MAXRES
                 __MULF124:
001b27 920f      	PUSH R0
001b28 931f      	PUSH R17
001b29 932f      	PUSH R18
001b2a 933f      	PUSH R19
001b2b 934f      	PUSH R20
001b2c 2711      	CLR  R17
001b2d 2722      	CLR  R18
001b2e 2799      	CLR  R25
001b2f 9f68      	MUL  R22,R24
001b30 01a0      	MOVW R20,R0
001b31 9f8f      	MUL  R24,R31
001b32 2d30      	MOV  R19,R0
001b33 0d41      	ADD  R20,R1
001b34 1f59      	ADC  R21,R25
001b35 9f6b      	MUL  R22,R27
001b36 0d30      	ADD  R19,R0
001b37 1d41      	ADC  R20,R1
001b38 1f59      	ADC  R21,R25
001b39 9f8e      	MUL  R24,R30
001b3a d027      	RCALL __MULF126
001b3b 9fbf      	MUL  R27,R31
001b3c d025      	RCALL __MULF126
001b3d 9f6a      	MUL  R22,R26
001b3e d023      	RCALL __MULF126
001b3f 9fbe      	MUL  R27,R30
001b40 d01d      	RCALL __MULF127
001b41 9faf      	MUL  R26,R31
001b42 d01b      	RCALL __MULF127
001b43 9fae      	MUL  R26,R30
001b44 0d11      	ADD  R17,R1
001b45 1f29      	ADC  R18,R25
001b46 1f39      	ADC  R19,R25
001b47 1f49      	ADC  R20,R25
001b48 1f59      	ADC  R21,R25
001b49 2fe3      	MOV  R30,R19
001b4a 2ff4      	MOV  R31,R20
001b4b 2f65      	MOV  R22,R21
001b4c 2f52      	MOV  R21,R18
001b4d 914f      	POP  R20
001b4e 913f      	POP  R19
001b4f 912f      	POP  R18
001b50 911f      	POP  R17
001b51 900f      	POP  R0
001b52 2366      	TST  R22
001b53 f02a      	BRMI __MULF122
001b54 0f55      	LSL  R21
001b55 1fee      	ROL  R30
001b56 1fff      	ROL  R31
001b57 1f66      	ROL  R22
001b58 c002      	RJMP __MULF123
                 __MULF122:
001b59 9573      	INC  R23
001b5a f24b      	BRVS __MULF125
                 __MULF123:
001b5b decd      	RCALL __ROUND_REPACK
001b5c 915f      	POP  R21
001b5d 9508      	RET
                 
                 __MULF127:
001b5e 0d10      	ADD  R17,R0
001b5f 1d21      	ADC  R18,R1
001b60 1f39      	ADC  R19,R25
001b61 c002      	RJMP __MULF128
                 __MULF126:
001b62 0d20      	ADD  R18,R0
001b63 1d31      	ADC  R19,R1
                 __MULF128:
001b64 1f49      	ADC  R20,R25
001b65 1f59      	ADC  R21,R25
001b66 9508      	RET
                 
                 __DIVF21:
001b67 935f      	PUSH R21
001b68 dedc      	RCALL __UNPACK
001b69 3870      	CPI  R23,0x80
001b6a f421      	BRNE __DIVF210
001b6b 2011      	TST  R1
                 __DIVF211:
001b6c f40a      	BRPL __DIVF219
001b6d cf9f      	RJMP __MINRES
                 __DIVF219:
001b6e cfa4      	RJMP __MAXRES
                 __DIVF210:
001b6f 3890      	CPI  R25,0x80
001b70 f409      	BRNE __DIVF218
                 __DIVF217:
001b71 cf95      	RJMP __ZERORES
                 __DIVF218:
001b72 2401      	EOR  R0,R1
001b73 9408      	SEC
001b74 0b97      	SBC  R25,R23
001b75 f41b      	BRVC __DIVF216
001b76 f3d4      	BRLT __DIVF217
001b77 2000      	TST  R0
001b78 cff3      	RJMP __DIVF211
                 __DIVF216:
001b79 2f79      	MOV  R23,R25
001b7a 931f      	PUSH R17
001b7b 932f      	PUSH R18
001b7c 933f      	PUSH R19
001b7d 934f      	PUSH R20
001b7e 2411      	CLR  R1
001b7f 2711      	CLR  R17
001b80 2722      	CLR  R18
001b81 2733      	CLR  R19
001b82 2744      	CLR  R20
001b83 2755      	CLR  R21
001b84 e290      	LDI  R25,32
                 __DIVF212:
001b85 17ae      	CP   R26,R30
001b86 07bf      	CPC  R27,R31
001b87 0786      	CPC  R24,R22
001b88 0741      	CPC  R20,R17
001b89 f030      	BRLO __DIVF213
001b8a 1bae      	SUB  R26,R30
001b8b 0bbf      	SBC  R27,R31
001b8c 0b86      	SBC  R24,R22
001b8d 0b41      	SBC  R20,R17
001b8e 9408      	SEC
001b8f c001      	RJMP __DIVF214
                 __DIVF213:
001b90 9488      	CLC
                 __DIVF214:
001b91 1f55      	ROL  R21
001b92 1f22      	ROL  R18
001b93 1f33      	ROL  R19
001b94 1c11      	ROL  R1
001b95 1faa      	ROL  R26
001b96 1fbb      	ROL  R27
001b97 1f88      	ROL  R24
001b98 1f44      	ROL  R20
001b99 959a      	DEC  R25
001b9a f751      	BRNE __DIVF212
001b9b 01f9      	MOVW R30,R18
001b9c 2d61      	MOV  R22,R1
001b9d 914f      	POP  R20
001b9e 913f      	POP  R19
001b9f 912f      	POP  R18
001ba0 911f      	POP  R17
001ba1 2366      	TST  R22
001ba2 f032      	BRMI __DIVF215
001ba3 0f55      	LSL  R21
001ba4 1fee      	ROL  R30
001ba5 1fff      	ROL  R31
001ba6 1f66      	ROL  R22
001ba7 957a      	DEC  R23
001ba8 f243      	BRVS __DIVF217
                 __DIVF215:
001ba9 de7f      	RCALL __ROUND_REPACK
001baa 915f      	POP  R21
001bab 9508      	RET
                 
                 __CMPF12:
001bac 2399      	TST  R25
001bad f09a      	BRMI __CMPF120
001bae 2377      	TST  R23
001baf f042      	BRMI __CMPF121
001bb0 1797      	CP   R25,R23
001bb1 f048      	BRLO __CMPF122
001bb2 f429      	BRNE __CMPF121
001bb3 17ae      	CP   R26,R30
001bb4 07bf      	CPC  R27,R31
001bb5 0786      	CPC  R24,R22
001bb6 f020      	BRLO __CMPF122
001bb7 f031      	BREQ __CMPF123
                 __CMPF121:
001bb8 9498      	CLZ
001bb9 9488      	CLC
001bba 9508      	RET
                 __CMPF122:
001bbb 9498      	CLZ
001bbc 9408      	SEC
001bbd 9508      	RET
                 __CMPF123:
001bbe 9418      	SEZ
001bbf 9488      	CLC
001bc0 9508      	RET
                 __CMPF120:
001bc1 2377      	TST  R23
001bc2 f7c2      	BRPL __CMPF122
001bc3 1797      	CP   R25,R23
001bc4 f398      	BRLO __CMPF121
001bc5 f7a9      	BRNE __CMPF122
001bc6 17ea      	CP   R30,R26
001bc7 07fb      	CPC  R31,R27
001bc8 0768      	CPC  R22,R24
001bc9 f388      	BRLO __CMPF122
001bca f399      	BREQ __CMPF123
001bcb cfec      	RJMP __CMPF121
                 
                 _sqrt:
001bcc d106      	rcall __PUTPARD2
001bcd 9724      	sbiw r28,4
001bce 935f      	push r21
001bcf 819f      	ldd  r25,y+7
001bd0 2399      	tst  r25
001bd1 f411      	brne __sqrt0
001bd2 9628      	adiw r28,8
001bd3 cf33      	rjmp __zerores
                 __sqrt0:
001bd4 f412      	brpl __sqrt1
001bd5 9628      	adiw r28,8
001bd6 cf3c      	rjmp __maxres
                 __sqrt1:
001bd7 934f      	push r20
001bd8 e442      	ldi  r20,66
001bd9 818e      	ldd  r24,y+6
001bda 81bd      	ldd  r27,y+5
001bdb 81ac      	ldd  r26,y+4
                 __sqrt2:
001bdc 8388      	st   y,r24
001bdd 8399      	std  y+1,r25
001bde 83aa      	std  y+2,r26
001bdf 83bb      	std  y+3,r27
001be0 01fd      	movw r30,r26
001be1 01bc      	movw r22,r24
001be2 81ac      	ldd  r26,y+4
001be3 81bd      	ldd  r27,y+5
001be4 818e      	ldd  r24,y+6
001be5 819f      	ldd  r25,y+7
001be6 df80      	rcall __divf21
001be7 8188      	ld   r24,y
001be8 8199      	ldd  r25,y+1
001be9 81aa      	ldd  r26,y+2
001bea 81bb      	ldd  r27,y+3
001beb dedd      	rcall __addf12
001bec de60      	rcall __unpack1
001bed 957a      	dec  r23
001bee de44      	rcall __repack
001bef 8188      	ld   r24,y
001bf0 8199      	ldd  r25,y+1
001bf1 81aa      	ldd  r26,y+2
001bf2 81bb      	ldd  r27,y+3
001bf3 27ae      	eor  r26,r30
001bf4 7fa8      	andi r26,0xf8
001bf5 f421      	brne __sqrt4
001bf6 17bf      	cp   r27,r31
001bf7 0786      	cpc  r24,r22
001bf8 0797      	cpc  r25,r23
001bf9 f029      	breq __sqrt3
                 __sqrt4:
001bfa 954a      	dec  r20
001bfb f019      	breq __sqrt3
001bfc 01df      	movw r26,r30
001bfd 01cb      	movw r24,r22
001bfe cfdd      	rjmp __sqrt2
                 __sqrt3:
001bff 914f      	pop  r20
001c00 915f      	pop  r21
001c01 9628      	adiw r28,8
001c02 9508      	ret
                 
                 __ADDW2R15:
001c03 2400      	CLR  R0
001c04 0daf      	ADD  R26,R15
001c05 1db0      	ADC  R27,R0
001c06 9508      	RET
                 
                 __ANEGW1:
001c07 95f1      	NEG  R31
001c08 95e1      	NEG  R30
001c09 40f0      	SBCI R31,0
001c0a 9508      	RET
                 
                 __ANEGD1:
001c0b 95f0      	COM  R31
001c0c 9560      	COM  R22
001c0d 9570      	COM  R23
001c0e 95e1      	NEG  R30
001c0f 4fff      	SBCI R31,-1
001c10 4f6f      	SBCI R22,-1
001c11 4f7f      	SBCI R23,-1
001c12 9508      	RET
                 
                 __CBD1:
001c13 2ffe      	MOV  R31,R30
001c14 0fff      	ADD  R31,R31
001c15 0bff      	SBC  R31,R31
001c16 2f6f      	MOV  R22,R31
001c17 2f7f      	MOV  R23,R31
001c18 9508      	RET
                 
                 __CWD1:
001c19 2f6f      	MOV  R22,R31
001c1a 0f66      	ADD  R22,R22
001c1b 0b66      	SBC  R22,R22
001c1c 2f76      	MOV  R23,R22
001c1d 9508      	RET
                 
                 __DIVB21U:
001c1e 2400      	CLR  R0
001c1f e098      	LDI  R25,8
                 __DIVB21U1:
001c20 0faa      	LSL  R26
001c21 1c00      	ROL  R0
001c22 1a0e      	SUB  R0,R30
001c23 f410      	BRCC __DIVB21U2
001c24 0e0e      	ADD  R0,R30
001c25 c001      	RJMP __DIVB21U3
                 __DIVB21U2:
001c26 60a1      	SBR  R26,1
                 __DIVB21U3:
001c27 959a      	DEC  R25
001c28 f7b9      	BRNE __DIVB21U1
001c29 2fea      	MOV  R30,R26
001c2a 2da0      	MOV  R26,R0
001c2b 9508      	RET
                 
                 __DIVB21:
001c2c d05f      	RCALL __CHKSIGNB
001c2d dff0      	RCALL __DIVB21U
001c2e f40e      	BRTC __DIVB211
001c2f 95e1      	NEG  R30
                 __DIVB211:
001c30 9508      	RET
                 
                 __DIVW21U:
001c31 2400      	CLR  R0
001c32 2411      	CLR  R1
001c33 e190      	LDI  R25,16
                 __DIVW21U1:
001c34 0faa      	LSL  R26
001c35 1fbb      	ROL  R27
001c36 1c00      	ROL  R0
001c37 1c11      	ROL  R1
001c38 1a0e      	SUB  R0,R30
001c39 0a1f      	SBC  R1,R31
001c3a f418      	BRCC __DIVW21U2
001c3b 0e0e      	ADD  R0,R30
001c3c 1e1f      	ADC  R1,R31
001c3d c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001c3e 60a1      	SBR  R26,1
                 __DIVW21U3:
001c3f 959a      	DEC  R25
001c40 f799      	BRNE __DIVW21U1
001c41 01fd      	MOVW R30,R26
001c42 01d0      	MOVW R26,R0
001c43 9508      	RET
                 
                 __DIVW21:
001c44 d053      	RCALL __CHKSIGNW
001c45 dfeb      	RCALL __DIVW21U
001c46 f40e      	BRTC __DIVW211
001c47 dfbf      	RCALL __ANEGW1
                 __DIVW211:
001c48 9508      	RET
                 
                 __DIVD21U:
001c49 933f      	PUSH R19
001c4a 934f      	PUSH R20
001c4b 935f      	PUSH R21
001c4c 2400      	CLR  R0
001c4d 2411      	CLR  R1
001c4e 2744      	CLR  R20
001c4f 2755      	CLR  R21
001c50 e230      	LDI  R19,32
                 __DIVD21U1:
001c51 0faa      	LSL  R26
001c52 1fbb      	ROL  R27
001c53 1f88      	ROL  R24
001c54 1f99      	ROL  R25
001c55 1c00      	ROL  R0
001c56 1c11      	ROL  R1
001c57 1f44      	ROL  R20
001c58 1f55      	ROL  R21
001c59 1a0e      	SUB  R0,R30
001c5a 0a1f      	SBC  R1,R31
001c5b 0b46      	SBC  R20,R22
001c5c 0b57      	SBC  R21,R23
001c5d f428      	BRCC __DIVD21U2
001c5e 0e0e      	ADD  R0,R30
001c5f 1e1f      	ADC  R1,R31
001c60 1f46      	ADC  R20,R22
001c61 1f57      	ADC  R21,R23
001c62 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
001c63 60a1      	SBR  R26,1
                 __DIVD21U3:
001c64 953a      	DEC  R19
001c65 f759      	BRNE __DIVD21U1
001c66 01fd      	MOVW R30,R26
001c67 01bc      	MOVW R22,R24
001c68 01d0      	MOVW R26,R0
001c69 01ca      	MOVW R24,R20
001c6a 915f      	POP  R21
001c6b 914f      	POP  R20
001c6c 913f      	POP  R19
001c6d 9508      	RET
                 
                 __MODB21:
001c6e 94e8      	CLT
001c6f ffa7      	SBRS R26,7
001c70 c002      	RJMP __MODB211
001c71 95a1      	NEG  R26
001c72 9468      	SET
                 __MODB211:
001c73 fde7      	SBRC R30,7
001c74 95e1      	NEG  R30
001c75 dfa8      	RCALL __DIVB21U
001c76 2fea      	MOV  R30,R26
001c77 f40e      	BRTC __MODB212
001c78 95e1      	NEG  R30
                 __MODB212:
001c79 9508      	RET
                 
                 __MODW21:
001c7a 94e8      	CLT
001c7b ffb7      	SBRS R27,7
001c7c c004      	RJMP __MODW211
001c7d 95a0      	COM  R26
001c7e 95b0      	COM  R27
001c7f 9611      	ADIW R26,1
001c80 9468      	SET
                 __MODW211:
001c81 fdf7      	SBRC R31,7
001c82 df84      	RCALL __ANEGW1
001c83 dfad      	RCALL __DIVW21U
001c84 01fd      	MOVW R30,R26
001c85 f40e      	BRTC __MODW212
001c86 df80      	RCALL __ANEGW1
                 __MODW212:
001c87 9508      	RET
                 
                 __MODD21U:
001c88 dfc0      	RCALL __DIVD21U
001c89 01fd      	MOVW R30,R26
001c8a 01bc      	MOVW R22,R24
001c8b 9508      	RET
                 
                 __CHKSIGNB:
001c8c 94e8      	CLT
001c8d ffe7      	SBRS R30,7
001c8e c002      	RJMP __CHKSB1
001c8f 95e1      	NEG  R30
001c90 9468      	SET
                 __CHKSB1:
001c91 ffa7      	SBRS R26,7
001c92 c004      	RJMP __CHKSB2
001c93 95a1      	NEG  R26
001c94 f800      	BLD  R0,0
001c95 9403      	INC  R0
001c96 fa00      	BST  R0,0
                 __CHKSB2:
001c97 9508      	RET
                 
                 __CHKSIGNW:
001c98 94e8      	CLT
001c99 fff7      	SBRS R31,7
001c9a c002      	RJMP __CHKSW1
001c9b df6b      	RCALL __ANEGW1
001c9c 9468      	SET
                 __CHKSW1:
001c9d ffb7      	SBRS R27,7
001c9e c006      	RJMP __CHKSW2
001c9f 95a0      	COM  R26
001ca0 95b0      	COM  R27
001ca1 9611      	ADIW R26,1
001ca2 f800      	BLD  R0,0
001ca3 9403      	INC  R0
001ca4 fa00      	BST  R0,0
                 __CHKSW2:
001ca5 9508      	RET
                 
                 __GETW1P:
001ca6 91ed      	LD   R30,X+
001ca7 91fc      	LD   R31,X
001ca8 9711      	SBIW R26,1
001ca9 9508      	RET
                 
                 __GETD1P:
001caa 91ed      	LD   R30,X+
001cab 91fd      	LD   R31,X+
001cac 916d      	LD   R22,X+
001cad 917c      	LD   R23,X
001cae 9713      	SBIW R26,3
001caf 9508      	RET
                 
                 __GETD1P_INC:
001cb0 91ed      	LD   R30,X+
001cb1 91fd      	LD   R31,X+
001cb2 916d      	LD   R22,X+
001cb3 917d      	LD   R23,X+
001cb4 9508      	RET
                 
                 __PUTDP1:
001cb5 93ed      	ST   X+,R30
001cb6 93fd      	ST   X+,R31
001cb7 936d      	ST   X+,R22
001cb8 937c      	ST   X,R23
001cb9 9508      	RET
                 
                 __PUTDP1_DEC:
001cba 937e      	ST   -X,R23
001cbb 936e      	ST   -X,R22
001cbc 93fe      	ST   -X,R31
001cbd 93ee      	ST   -X,R30
001cbe 9508      	RET
                 
                 __GETD1S0:
001cbf 81e8      	LD   R30,Y
001cc0 81f9      	LDD  R31,Y+1
001cc1 816a      	LDD  R22,Y+2
001cc2 817b      	LDD  R23,Y+3
001cc3 9508      	RET
                 
                 __GETD2S0:
001cc4 81a8      	LD   R26,Y
001cc5 81b9      	LDD  R27,Y+1
001cc6 818a      	LDD  R24,Y+2
001cc7 819b      	LDD  R25,Y+3
001cc8 9508      	RET
                 
                 __PUTD1S0:
001cc9 83e8      	ST   Y,R30
001cca 83f9      	STD  Y+1,R31
001ccb 836a      	STD  Y+2,R22
001ccc 837b      	STD  Y+3,R23
001ccd 9508      	RET
                 
                 __PUTPARD1:
001cce 937a      	ST   -Y,R23
001ccf 936a      	ST   -Y,R22
001cd0 93fa      	ST   -Y,R31
001cd1 93ea      	ST   -Y,R30
001cd2 9508      	RET
                 
                 __PUTPARD2:
001cd3 939a      	ST   -Y,R25
001cd4 938a      	ST   -Y,R24
001cd5 93ba      	ST   -Y,R27
001cd6 93aa      	ST   -Y,R26
001cd7 9508      	RET
                 
                 __SWAPD12:
001cd8 2e18      	MOV  R1,R24
001cd9 2f86      	MOV  R24,R22
001cda 2d61      	MOV  R22,R1
001cdb 2e19      	MOV  R1,R25
001cdc 2f97      	MOV  R25,R23
001cdd 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
001cde 2e1b      	MOV  R1,R27
001cdf 2fbf      	MOV  R27,R31
001ce0 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
001ce1 2e1a      	MOV  R1,R26
001ce2 2fae      	MOV  R26,R30
001ce3 2de1      	MOV  R30,R1
001ce4 9508      	RET
                 
                 __EEPROMRDD:
001ce5 9612      	ADIW R26,2
001ce6 d002      	RCALL __EEPROMRDW
001ce7 01bf      	MOVW R22,R30
001ce8 9712      	SBIW R26,2
                 
                 __EEPROMRDW:
001ce9 9611      	ADIW R26,1
001cea d002      	RCALL __EEPROMRDB
001ceb 2ffe      	MOV  R31,R30
001cec 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
001ced 99e1      	SBIC EECR,EEWE
001cee cffe      	RJMP __EEPROMRDB
001cef 93ff      	PUSH R31
001cf0 b7ff      	IN   R31,SREG
001cf1 94f8      	CLI
001cf2 bbae      	OUT  EEARL,R26
001cf3 bbbf      	OUT  EEARH,R27
001cf4 9ae0      	SBI  EECR,EERE
001cf5 b3ed      	IN   R30,EEDR
001cf6 bfff      	OUT  SREG,R31
001cf7 91ff      	POP  R31
001cf8 9508      	RET
                 
                 __CPD10:
001cf9 9730      	SBIW R30,0
001cfa 4060      	SBCI R22,0
001cfb 4070      	SBCI R23,0
001cfc 9508      	RET
                 
                 __CPW02:
001cfd 2400      	CLR  R0
001cfe 160a      	CP   R0,R26
001cff 060b      	CPC  R0,R27
001d00 9508      	RET
                 
                 __CPD02:
001d01 2400      	CLR  R0
001d02 160a      	CP   R0,R26
001d03 060b      	CPC  R0,R27
001d04 0608      	CPC  R0,R24
001d05 0609      	CPC  R0,R25
001d06 9508      	RET
                 
                 __CPD12:
001d07 17ea      	CP   R30,R26
001d08 07fb      	CPC  R31,R27
001d09 0768      	CPC  R22,R24
001d0a 0779      	CPC  R23,R25
001d0b 9508      	RET
                 
                 __SAVELOCR6:
001d0c 935a      	ST   -Y,R21
                 __SAVELOCR5:
001d0d 934a      	ST   -Y,R20
                 __SAVELOCR4:
001d0e 933a      	ST   -Y,R19
                 __SAVELOCR3:
001d0f 932a      	ST   -Y,R18
                 __SAVELOCR2:
001d10 931a      	ST   -Y,R17
001d11 930a      	ST   -Y,R16
001d12 9508      	RET
                 
                 __LOADLOCR6:
001d13 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
001d14 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
001d15 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
001d16 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
001d17 8119      	LDD  R17,Y+1
001d18 8108      	LD   R16,Y
001d19 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  88 r1 :  40 r2 :   1 r3 :   0 r4 :   6 r5 :   2 r6 :   4 r7 :   3 
r8 :   3 r9 :   0 r10:   4 r11:   2 r12:   1 r13:   7 r14:   0 r15:   6 
r16: 137 r17: 130 r18:  66 r19:  48 r20:  69 r21: 101 r22: 223 r23: 200 
r24: 134 r25: 111 r26: 543 r27: 274 r28:  63 r29:   5 r30:1175 r31: 546 
x  :  90 y  : 802 z  :  34 
Registers used: 32 out of 35 (91.4%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  40 add   :  34 
adiw  :  72 and   :   5 andi  :  13 asr   :   0 bclr  :   0 bld   :   5 
brbc  :   0 brbs  :   0 brcc  :  15 brcs  :   1 break :   0 breq  :  74 
brge  :  16 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  32 
brlt  :   5 brmi  :  11 brne  : 140 brpl  :  10 brsh  :  14 brtc  :   6 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   6 call  : 750 
cbi   :   8 cbr   :   1 clc   :   3 clh   :   0 cli   :   3 cln   :   0 
clr   :  75 cls   :   0 clt   :   7 clv   :   0 clz   :   2 com   :  12 
cp    :  36 cpc   :  90 cpi   : 140 cpse  :   0 dec   :  15 des   :   0 
elpm  :   0 eor   :   8 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 
ijmp  :   0 in    :  15 inc   :   5 jmp   :  68 ld    : 121 ldd   : 368 
ldi   : 851 lds   : 180 lpm   :  12 lsl   :  26 lsr   :   5 mov   :  99 
movw  : 124 mul   :  11 muls  :   0 mulsu :   0 neg   :  11 nop   :   0 
or    :   8 ori   :  15 out   :  52 pop   :  43 push  :  43 rcall :  76 
ret   : 211 reti  :   3 rjmp  : 258 rol   :  40 ror   :  17 sbc   :  16 
sbci  :  43 sbi   :  17 sbic  :  10 sbis  :   3 sbiw  :  59 sbr   :   5 
sbrc  :   5 sbrs  :  23 sec   :   5 seh   :   0 sei   :   3 sen   :   0 
ser   :   8 ses   :   0 set   :   7 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    : 326 std   : 100 sts   : 215 sub   :  10 subi  :  78 
swap  :   0 tst   :  26 wdr   :   1 
Instructions used: 82 out of 117 (70.1%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x003a34  12996   1904  14900  131072  11.4%
[.dseg] 0x000100 0x0009ec      0   1004   1004    4351  23.1%
[.eseg] 0x000000 0x00000c      0     12     12    4096   0.3%

Assembly complete, 0 errors, 17 warnings
