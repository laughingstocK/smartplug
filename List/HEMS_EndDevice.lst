
AVRASM ver. 2.1.30  C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm Mon Oct 30 09:44:29 2017

C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1074): warning: Register r5 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1075): warning: Register r4 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1076): warning: Register r6 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1077): warning: Register r8 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1078): warning: Register r10 already defined by the .DEF directive
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1079): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128A
                 ;Program type             : Application
                 ;Clock frequency          : 11.059200 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : float, width, precision
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1280 byte(s)
                 ;Heap size                : 1024 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0500
                 	.EQU __HEAP_SIZE=0x0400
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _error=R5
                 	.DEF _read_D_SW=R4
                 	.DEF _start_event=R6
                 	.DEF _counter=R8
                 	.DEF _e=R10
                 	.DEF _rx_wr_index1=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 040d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 073a 	JMP  _timer1_ovf_isr
00001e 940c 0000 	JMP  0x00
000020 940c 072c 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 07de 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0759 	JMP  _timer3_ovf_isr
00003c 940c 0811 	JMP  _usart1_rx_isr
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000046 0000      	.DW  0x0000
                 
                 ;HEAP START MARKER INITIALIZATION
                 __HEAP_START_MARKER:
000047 0000
000048 0000      	.DW  0,0
                 
                 _0x3:
000049 0000
00004a 0000
00004b 0000
00004c 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004d ff00
00004e ffff
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1134): warning: .cseg .db misalignment - padding zero byte
00004f 00ff      	.DB  0x0,0xFF,0xFF,0xFF,0xFF
                 _0x4F:
000050 0000
000051 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x0:
000052 5645
000053 4e45
000054 2054
000055 203d      	.DB  0x45,0x56,0x45,0x4E,0x54,0x20,0x3D,0x20
000056 6425
000057 0a0d
000058 6300
000059 756f      	.DB  0x25,0x64,0xD,0xA,0x0,0x63,0x6F,0x75
00005a 746e
00005b 655f
00005c 6576
00005d 746e      	.DB  0x6E,0x74,0x5F,0x65,0x76,0x65,0x6E,0x74
00005e 3d20
00005f 2520
000060 0d64
000061 000a      	.DB  0x20,0x3D,0x20,0x25,0x64,0xD,0xA,0x0
000062 0a0d
000063 2b2b
000064 2b2b
000065 2b2b      	.DB  0xD,0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000066 2b2b
000067 2b2b
000068 5320
000069 616d      	.DB  0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x6D,0x61
00006a 7472
00006b 5320
00006c 6977
00006d 6374      	.DB  0x72,0x74,0x20,0x53,0x77,0x69,0x74,0x63
00006e 2068
00006f 2b2b
000070 2b2b
000071 2b2b      	.DB  0x68,0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000072 2b2b
000073 2b2b
000074 0a0d
000075 0d00      	.DB  0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0,0xD
000076 460a
000077 7269
000078 776d
000079 7261      	.DB  0xA,0x46,0x69,0x72,0x6D,0x77,0x61,0x72
00007a 2065
00007b 6556
00007c 7372
00007d 6f69      	.DB  0x65,0x20,0x56,0x65,0x72,0x73,0x69,0x6F
00007e 206e
00007f 203a
000080 3025
000081 312e      	.DB  0x6E,0x20,0x3A,0x20,0x25,0x30,0x2E,0x31
000082 0d66
000083 000a
000084 7543
000085 7272      	.DB  0x66,0xD,0xA,0x0,0x43,0x75,0x72,0x72
000086 6e65
000087 2074
000088 6553
000089 736e      	.DB  0x65,0x6E,0x74,0x20,0x53,0x65,0x6E,0x73
00008a 726f
00008b 2020
00008c 3a20
00008d 4120      	.DB  0x6F,0x72,0x20,0x20,0x20,0x3A,0x20,0x41
00008e 5343
00008f 3137
000090 4532
000091 434c      	.DB  0x43,0x53,0x37,0x31,0x32,0x45,0x4C,0x43
000092 5254
000093 302d
000094 4235
000095 542d      	.DB  0x54,0x52,0x2D,0x30,0x35,0x42,0x2D,0x54
000096 2820
000097 3025
000098 312e
000099 2066      	.DB  0x20,0x28,0x25,0x30,0x2E,0x31,0x66,0x20
00009a 566d
00009b 412f
00009c 706d
00009d 292e      	.DB  0x6D,0x56,0x2F,0x41,0x6D,0x70,0x2E,0x29
00009e 0a0d
00009f 0d00
0000a0 2b0a
0000a1 2b2b      	.DB  0xD,0xA,0x0,0xD,0xA,0x2B,0x2B,0x2B
0000a2 2b2b
0000a3 2b2b
0000a4 2b2b
0000a5 202b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
0000a6 6d53
0000a7 7261
0000a8 2074
0000a9 6c50      	.DB  0x53,0x6D,0x61,0x72,0x74,0x20,0x50,0x6C
0000aa 6775
0000ab 2b20
0000ac 2b2b
0000ad 2b2b      	.DB  0x75,0x67,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
0000ae 2b2b
0000af 2b2b
0000b0 0d2b
0000b1 000a      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0
0000b2 7543
0000b3 7272
0000b4 6e65
0000b5 2074      	.DB  0x43,0x75,0x72,0x72,0x65,0x6E,0x74,0x20
0000b6 6553
0000b7 736e
0000b8 726f
0000b9 2020      	.DB  0x53,0x65,0x6E,0x73,0x6F,0x72,0x20,0x20
0000ba 3a20
0000bb 4120
0000bc 5343
0000bd 3137      	.DB  0x20,0x3A,0x20,0x41,0x43,0x53,0x37,0x31
0000be 4532
0000bf 434c
0000c0 5254
0000c1 322d      	.DB  0x32,0x45,0x4C,0x43,0x54,0x52,0x2D,0x32
0000c2 4130
0000c3 542d
0000c4 2820
0000c5 3025      	.DB  0x30,0x41,0x2D,0x54,0x20,0x28,0x25,0x30
0000c6 312e
0000c7 2066
0000c8 566d
0000c9 412f      	.DB  0x2E,0x31,0x66,0x20,0x6D,0x56,0x2F,0x41
0000ca 706d
0000cb 292e
0000cc 0a0d
0000cd 0d00      	.DB  0x6D,0x70,0x2E,0x29,0xD,0xA,0x0,0xD
0000ce 2b0a
0000cf 2b2b
0000d0 2b2b
0000d1 2b2b      	.DB  0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000d2 2b2b
0000d3 202b
0000d4 6d53
0000d5 7261      	.DB  0x2B,0x2B,0x2B,0x20,0x53,0x6D,0x61,0x72
0000d6 2074
0000d7 7242
0000d8 6165
0000d9 656b      	.DB  0x74,0x20,0x42,0x72,0x65,0x61,0x6B,0x65
0000da 2072
0000db 2b2b
0000dc 2b2b
0000dd 2b2b      	.DB  0x72,0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0000de 2b2b
0000df 2b2b
0000e0 0a0d
0000e1 4300      	.DB  0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0,0x43
0000e2 7275
0000e3 6572
0000e4 746e
0000e5 5320      	.DB  0x75,0x72,0x72,0x65,0x6E,0x74,0x20,0x53
0000e6 6e65
0000e7 6f73
0000e8 2072
0000e9 2020      	.DB  0x65,0x6E,0x73,0x6F,0x72,0x20,0x20,0x20
0000ea 203a
0000eb 4341
0000ec 3753
0000ed 3231      	.DB  0x3A,0x20,0x41,0x43,0x53,0x37,0x31,0x32
0000ee 4c45
0000ef 5443
0000f0 2d52
0000f1 3033      	.DB  0x45,0x4C,0x43,0x54,0x52,0x2D,0x33,0x30
0000f2 2d41
0000f3 2054
0000f4 2528
0000f5 2e30      	.DB  0x41,0x2D,0x54,0x20,0x28,0x25,0x30,0x2E
0000f6 6631
0000f7 6d20
0000f8 2f56
0000f9 6d41      	.DB  0x31,0x66,0x20,0x6D,0x56,0x2F,0x41,0x6D
0000fa 2e70
0000fb 0d29
0000fc 000a
0000fd 6552      	.DB  0x70,0x2E,0x29,0xD,0xA,0x0,0x52,0x65
0000fe 6461
0000ff 4420
000100 7069
000101 532d      	.DB  0x61,0x64,0x20,0x44,0x69,0x70,0x2D,0x53
000102 6977
000103 6374
000104 2068
000105 5245      	.DB  0x77,0x69,0x74,0x63,0x68,0x20,0x45,0x52
000106 4f52
000107 2152
000108 0a0d
000109 0d00      	.DB  0x52,0x4F,0x52,0x21,0xD,0xA,0x0,0xD
00010a 2b0a
00010b 2b2b
00010c 2b2b
00010d 2b2b      	.DB  0xA,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
00010e 2b2b
00010f 202b
000110 6544
000111 6166      	.DB  0x2B,0x2B,0x2B,0x20,0x44,0x65,0x66,0x61
000112 6c75
000113 2074
000114 7954
000115 6570      	.DB  0x75,0x6C,0x74,0x20,0x54,0x79,0x70,0x65
000116 3a20
000117 5320
000118 616d
000119 7472      	.DB  0x20,0x3A,0x20,0x53,0x6D,0x61,0x72,0x74
00011a 5320
00011b 6977
00011c 6374
00011d 2068      	.DB  0x20,0x53,0x77,0x69,0x74,0x63,0x68,0x20
00011e 2b2b
00011f 2b2b
000120 2b2b
000121 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000122 2b2b
000123 0a0d
000124 4300
000125 7275      	.DB  0x2B,0x2B,0xD,0xA,0x0,0x43,0x75,0x72
000126 6572
000127 746e
000128 4d20
000129 6165      	.DB  0x72,0x65,0x6E,0x74,0x20,0x4D,0x65,0x61
00012a 7573
00012b 6572
00012c 2020
00012d 203a      	.DB  0x73,0x75,0x72,0x65,0x20,0x20,0x3A,0x20
00012e 203e
00012f 3025
000130 322e
000131 2066      	.DB  0x3E,0x20,0x25,0x30,0x2E,0x32,0x66,0x20
000132 6d41
000133 2e70
000134 0a0d
000135 0d00      	.DB  0x41,0x6D,0x70,0x2E,0xD,0xA,0x0,0xD
000136 2d0a
000137 2d2d
000138 2d2d
000139 2d2d      	.DB  0xA,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00013a 202d
00013b 6e49
00013c 7469
00013d 6169      	.DB  0x2D,0x20,0x49,0x6E,0x69,0x74,0x69,0x61
00013e 206c
00013f 6f43
000140 706d
000141 656c      	.DB  0x6C,0x20,0x43,0x6F,0x6D,0x70,0x6C,0x65
000142 6574
000143 2d20
000144 2d2d
000145 2d2d      	.DB  0x74,0x65,0x20,0x2D,0x2D,0x2D,0x2D,0x2D
000146 2d2d
000147 0d2d
000148 000a
000149 0a0d      	.DB  0x2D,0x2D,0x2D,0xD,0xA,0x0,0xD,0xA
00014a 2d2d
00014b 2d2d
00014c 2d2d
00014d 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00014e 5320
00014f 6174
000150 7472
000151 5020      	.DB  0x20,0x53,0x74,0x61,0x72,0x74,0x20,0x50
000152 6f72
000153 7267
000154 6d61
000155 2d20      	.DB  0x72,0x6F,0x67,0x72,0x61,0x6D,0x20,0x2D
000156 2d2d
000157 2d2d
000158 2d2d
000159 0d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD
00015a 000a
00015b 0a0d
00015c 2d2d
00015d 2d2d      	.DB  0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D,0x2D
00015e 2d2d
00015f 2d2d
000160 4920
000161 6c64      	.DB  0x2D,0x2D,0x2D,0x2D,0x20,0x49,0x64,0x6C
000162 2065
000163 2d2d
000164 2d2d
000165 2d2d      	.DB  0x65,0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000166 2d2d
000167 0a0d
000168 0d00
000169 2d0a      	.DB  0x2D,0x2D,0xD,0xA,0x0,0xD,0xA,0x2D
00016a 2d2d
00016b 2d2d
00016c 2d2d
00016d 202d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x20
00016e 4547
00016f 2054
000170 5645
000171 4e45      	.DB  0x47,0x45,0x54,0x20,0x45,0x56,0x45,0x4E
000172 2054
000173 2d2d
000174 2d2d
000175 2d2d      	.DB  0x54,0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000176 2d2d
000177 0a0d
000178 0d00
000179 2d0a      	.DB  0x2D,0x2D,0xD,0xA,0x0,0xD,0xA,0x2D
00017a 2d2d
00017b 2d2d
00017c 2d2d
00017d 202d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x20
00017e 6341
00017f 6974
000180 6576
000181 2d20      	.DB  0x41,0x63,0x74,0x69,0x76,0x65,0x20,0x2D
000182 2d2d
000183 2d2d
000184 2d2d
000185 0d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0xD
000186 000a
000187 6f63
000188 6e75
000189 5f74      	.DB  0xA,0x0,0x63,0x6F,0x75,0x6E,0x74,0x5F
00018a 6e69
00018b 7570
00018c 2074
00018d 203d      	.DB  0x69,0x6E,0x70,0x75,0x74,0x20,0x3D,0x20
00018e 6425
00018f 0a0d
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1217): warning: .cseg .db misalignment - padding zero byte
000190 0000      	.DB  0x25,0x64,0xD,0xA,0x0
                 _0x20000:
000191 3025
000192 6435
000193 2020
000194 0020      	.DB  0x25,0x30,0x35,0x64,0x20,0x20,0x20,0x0
000195 3025
000196 5832
000197 0020
000198 6325      	.DB  0x25,0x30,0x32,0x58,0x20,0x0,0x25,0x63
000199 2e00
00019a 0d00
00019b 000a      	.DB  0x0,0x2E,0x0,0xD,0xA,0x0
                 _0x60000:
00019c 4157
00019d 4e52
00019e 4e49
00019f 2047      	.DB  0x57,0x41,0x52,0x4E,0x49,0x4E,0x47,0x20
0001a0 203a
0001a1 4155
0001a2 5452
0001a3 2030      	.DB  0x3A,0x20,0x55,0x41,0x52,0x54,0x30,0x20
0001a4 5542
0001a5 4646
0001a6 5245
0001a7 4f20      	.DB  0x42,0x55,0x46,0x46,0x45,0x52,0x20,0x4F
0001a8 4556
0001a9 4652
0001aa 4f4c
0001ab 2057      	.DB  0x56,0x45,0x52,0x46,0x4C,0x4F,0x57,0x20
0001ac 6425
0001ad 0a0d
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1227): warning: .cseg .db misalignment - padding zero byte
0001ae 0000      	.DB  0x25,0x64,0xD,0xA,0x0
                 _0x80003:
0001af 007e
0001b0 0804
0001b1 4101
0001b2 6c49      	.DB  0x7E,0x0,0x4,0x8,0x1,0x41,0x49,0x6C
                 _0x80004:
0001b3 007e
0001b4 0804
0001b5 5301
0001b6 574c      	.DB  0x7E,0x0,0x4,0x8,0x1,0x53,0x4C,0x57
                 _0x80005:
0001b7 007e
0001b8 0804
0001b9 5301
0001ba 5b48      	.DB  0x7E,0x0,0x4,0x8,0x1,0x53,0x48,0x5B
                 _0x80006:
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1235): warning: .cseg .db misalignment - padding zero byte
0001bb 0003      	.DB  0x3
                 _0x80000:
0001bc 0a0d
0001bd 2b20
0001be 2b2b
0001bf 2b2b      	.DB  0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
0001c0 2b2b
0001c1 2b2b
0001c2 202b
0001c3 6553      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x65
0001c4 646e
0001c5 4120
0001c6 2049
0001c7 2b2b      	.DB  0x6E,0x64,0x20,0x41,0x49,0x20,0x2B,0x2B
0001c8 2b2b
0001c9 2b2b
0001ca 2b2b
0001cb 0a0d      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA
0001cc 0d00
0001cd 200a
0001ce 2b2b
0001cf 2b2b      	.DB  0x0,0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B
0001d0 2b2b
0001d1 2b2b
0001d2 2b2b
0001d3 5320      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53
0001d4 6e65
0001d5 2064
0001d6 4853
0001d7 2b20      	.DB  0x65,0x6E,0x64,0x20,0x53,0x48,0x20,0x2B
0001d8 2b2b
0001d9 2b2b
0001da 2b2b
0001db 0d2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD
0001dc 000a
0001dd 0a0d
0001de 2b20
0001df 2b2b      	.DB  0xA,0x0,0xD,0xA,0x20,0x2B,0x2B,0x2B
0001e0 2b2b
0001e1 2b2b
0001e2 2b2b
0001e3 202b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
0001e4 6553
0001e5 646e
0001e6 5320
0001e7 204c      	.DB  0x53,0x65,0x6E,0x64,0x20,0x53,0x4C,0x20
0001e8 2b2b
0001e9 2b2b
0001ea 2b2b
0001eb 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0001ec 0a0d
0001ed 0d00
0001ee 200a
0001ef 2b2b      	.DB  0xD,0xA,0x0,0xD,0xA,0x20,0x2B,0x2B
0001f0 2b2b
0001f1 2b2b
0001f2 2b2b
0001f3 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0001f4 5220
0001f5 6365
0001f6 6572
0001f7 7669      	.DB  0x20,0x52,0x65,0x63,0x72,0x65,0x69,0x76
0001f8 2065
0001f9 6144
0001fa 6174
0001fb 2b20      	.DB  0x65,0x20,0x44,0x61,0x74,0x61,0x20,0x2B
0001fc 2b2b
0001fd 2b2b
0001fe 2b2b
0001ff 0d2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD
000200 000a
000201 0a0d
000202 2d2d
000203 2d2d      	.DB  0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D,0x2D
000204 2d2d
000205 2d2d
000206 4a20
000207 494f      	.DB  0x2D,0x2D,0x2D,0x2D,0x20,0x4A,0x4F,0x49
000208 544e
000209 5320
00020a 4355
00020b 4543      	.DB  0x4E,0x54,0x20,0x53,0x55,0x43,0x43,0x45
00020c 5353
00020d 2d20
00020e 2d2d
00020f 2d2d      	.DB  0x53,0x53,0x20,0x2D,0x2D,0x2D,0x2D,0x2D
000210 2d2d
000211 0d2d
000212 000a
000213 0a0d      	.DB  0x2D,0x2D,0x2D,0xD,0xA,0x0,0xD,0xA
000214 2d2d
000215 2d2d
000216 2d2d
000217 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000218 5220
000219 4345
00021a 5649
00021b 2045      	.DB  0x20,0x52,0x45,0x43,0x49,0x56,0x45,0x20
00021c 4950
00021d 474e
00021e 2d20
00021f 2d2d      	.DB  0x50,0x49,0x4E,0x47,0x20,0x2D,0x2D,0x2D
000220 2d2d
000221 2d2d
000222 0d2d
000223 000a      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0xD,0xA,0x0
000224 0a0d
000225 2b20
000226 2b2b
000227 2b2b      	.DB  0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
000228 2b2b
000229 2b2b
00022a 202b
00022b 655f      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x5F,0x65
00022c 6576
00022d 746e
00022e 3d20
00022f 203d      	.DB  0x76,0x65,0x6E,0x74,0x20,0x3D,0x3D,0x20
000230 3135
000231 2030
000232 7c7c
000233 5f20      	.DB  0x35,0x31,0x30,0x20,0x7C,0x7C,0x20,0x5F
000234 7665
000235 6e65
000236 2074
000237 3d3d      	.DB  0x65,0x76,0x65,0x6E,0x74,0x20,0x3D,0x3D
000238 3520
000239 3131
00023a 2b20
00023b 2b2b      	.DB  0x20,0x35,0x31,0x31,0x20,0x2B,0x2B,0x2B
00023c 2b2b
00023d 2b2b
00023e 0d2b
00023f 000a      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0
000240 0a0d
000241 2d2d
000242 2d2d
000243 2d2d      	.DB  0xD,0xA,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000244 2d2d
000245 5220
000246 4345
000247 5649      	.DB  0x2D,0x2D,0x20,0x52,0x45,0x43,0x49,0x56
000248 2045
000249 5645
00024a 4e45
00024b 2054      	.DB  0x45,0x20,0x45,0x56,0x45,0x4E,0x54,0x20
00024c 2d2d
00024d 2d2d
00024e 2d2d
00024f 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000250 0a0d
000251 0d00
000252 2d0a
000253 2d2d      	.DB  0xD,0xA,0x0,0xD,0xA,0x2D,0x2D,0x2D
000254 2d2d
000255 2d2d
000256 202d
000257 4553      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x20,0x53,0x45
000258 444e
000259 4520
00025a 4556
00025b 544e      	.DB  0x4E,0x44,0x20,0x45,0x56,0x45,0x4E,0x54
00025c 5320
00025d 4355
00025e 4543
00025f 5353      	.DB  0x20,0x53,0x55,0x43,0x43,0x45,0x53,0x53
000260 2d20
000261 2d2d
000262 2d2d
000263 2d2d      	.DB  0x20,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000264 0d2d
000265 000a
000266 0a0d
000267 2d2d      	.DB  0x2D,0xD,0xA,0x0,0xD,0xA,0x2D,0x2D
000268 2d2d
000269 2d2d
00026a 2d2d
00026b 5320      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x20,0x53
00026c 4e45
00026d 2044
00026e 4552
00026f 4f50      	.DB  0x45,0x4E,0x44,0x20,0x52,0x45,0x50,0x4F
000270 5452
000271 5320
000272 4355
000273 4543      	.DB  0x52,0x54,0x20,0x53,0x55,0x43,0x43,0x45
000274 5353
000275 2d20
000276 2d2d
000277 2d2d      	.DB  0x53,0x53,0x20,0x2D,0x2D,0x2D,0x2D,0x2D
000278 2d2d
000279 0d2d
00027a 000a      	.DB  0x2D,0x2D,0x2D,0xD,0xA,0x0
                 _0xC0003:
00027b 007e
00027c 1023
00027d 0001
00027e 0000      	.DB  0x7E,0x0,0x23,0x10,0x1,0x0,0x0,0x0
00027f 0000
000280 0000
000281 ff00
000282 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
000283 3000
000284 0000
000285 0000
000286 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
000287 0000
000288 0000
000289 0000
00028a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00028b 0000
00028c 007e
00028d a101      	.DB  0x0,0x0,0x7E,0x0,0x1,0xA1
                 _0xC0004:
00028e 007e
00028f 1023
000290 0001
000291 0000      	.DB  0x7E,0x0,0x23,0x10,0x1,0x0,0x0,0x0
000292 0000
000293 0000
000294 ff00
000295 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
000296 3000
000297 0000
000298 0000
000299 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
00029a 0000
00029b 0000
00029c 0000
00029d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00029e 0000
00029f 007e
0002a0 a401      	.DB  0x0,0x0,0x7E,0x0,0x1,0xA4
                 _0xC0005:
0002a1 007e
0002a2 1025
0002a3 0001
0002a4 0000      	.DB  0x7E,0x0,0x25,0x10,0x1,0x0,0x0,0x0
0002a5 0000
0002a6 0000
0002a7 ff00
0002a8 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
0002a9 3000
0002aa 0000
0002ab 0000
0002ac 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
0002ad 0000
0002ae 0000
0002af 0000
0002b0 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0002b1 0000
0002b2 007e
0002b3 a501
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1302): warning: .cseg .db misalignment - padding zero byte
0002b4 0001      	.DB  0x0,0x0,0x7E,0x0,0x1,0xA5,0x1
                 _0xC0006:
0002b5 007e
0002b6 1048
0002b7 0001
0002b8 0000      	.DB  0x7E,0x0,0x48,0x10,0x1,0x0,0x0,0x0
0002b9 0000
0002ba 0000
0002bb ff00
0002bc 00fe      	.DB  0x0,0x0,0x0,0x0,0x0,0xFF,0xFE,0x0
0002bd 3000
0002be 0000
0002bf 0000
0002c0 0000      	.DB  0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0
0002c1 0000
0002c2 0000
0002c3 0000
0002c4 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0002c5 0000
0002c6 007e
0002c7 a726
0002c8 0101      	.DB  0x0,0x0,0x7E,0x0,0x26,0xA7,0x1,0x1
0002c9 0000
0002ca 0000
0002cb 0000
0002cc 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0002cd 0002
0002ce 0000
0002cf 0000
0002d0 0000      	.DB  0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0002d1 0300
0002d2 0000
0002d3 0000
0002d4 0000      	.DB  0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0
0002d5 0000
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1312): warning: .cseg .db misalignment - padding zero byte
0002d6 0004      	.DB  0x0,0x0,0x4
                 _0xC0000:
0002d7 0a0d
0002d8 2b20
0002d9 2b2b
0002da 2b2b      	.DB  0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
0002db 2b2b
0002dc 2b2b
0002dd 202b
0002de 6553      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x65
0002df 646e
0002e0 4c20
0002e1 4445
0002e2 2b20      	.DB  0x6E,0x64,0x20,0x4C,0x45,0x44,0x20,0x2B
0002e3 2b2b
0002e4 2b2b
0002e5 2b2b
0002e6 0d2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0xD
0002e7 000a
0002e8 0a0d
0002e9 2b20
0002ea 2b2b      	.DB  0xA,0x0,0xD,0xA,0x20,0x2B,0x2B,0x2B
0002eb 2b2b
0002ec 2b2b
0002ed 2b2b
0002ee 202b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x20
0002ef 6553
0002f0 646e
0002f1 4a20
0002f2 696f      	.DB  0x53,0x65,0x6E,0x64,0x20,0x4A,0x6F,0x69
0002f3 206e
0002f4 2b2b
0002f5 2b2b
0002f6 2b2b      	.DB  0x6E,0x20,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0002f7 2b2b
0002f8 0a0d
0002f9 0d00
0002fa 200a      	.DB  0x2B,0x2B,0xD,0xA,0x0,0xD,0xA,0x20
0002fb 2b2b
0002fc 2b2b
0002fd 2b2b
0002fe 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
0002ff 2b2b
000300 5320
000301 6e65
000302 2064      	.DB  0x2B,0x2B,0x20,0x53,0x65,0x6E,0x64,0x20
000303 6950
000304 676e
000305 2b20
000306 2b2b      	.DB  0x50,0x69,0x6E,0x67,0x20,0x2B,0x2B,0x2B
000307 2b2b
000308 2b2b
000309 0d2b
00030a 000a      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0
00030b 0a0d
00030c 2b20
00030d 2b2b
00030e 2b2b      	.DB  0xD,0xA,0x20,0x2B,0x2B,0x2B,0x2B,0x2B
00030f 2b2b
000310 2b2b
000311 202b
000312 6553      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x20,0x53,0x65
000313 646e
000314 4520
000315 4556
000316 544e      	.DB  0x6E,0x64,0x20,0x45,0x56,0x45,0x4E,0x54
000317 5220
000318 4345
000319 5649
00031a 2045      	.DB  0x20,0x52,0x45,0x43,0x49,0x56,0x45,0x20
00031b 2b2b
00031c 2b2b
00031d 2b2b
00031e 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
00031f 0a0d
000320 0d00
000321 200a
000322 2b2b      	.DB  0xD,0xA,0x0,0xD,0xA,0x20,0x2B,0x2B
000323 2b2b
000324 2b2b
000325 2b2b
000326 2b2b      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B,0x2B
000327 5320
000328 6e65
000329 2064
00032a 4552      	.DB  0x20,0x53,0x65,0x6E,0x64,0x20,0x52,0x45
00032b 4f50
00032c 5452
00032d 2b20
00032e 2b2b      	.DB  0x50,0x4F,0x52,0x54,0x20,0x2B,0x2B,0x2B
00032f 2b2b
000330 2b2b
000331 0d2b
000332 000a      	.DB  0x2B,0x2B,0x2B,0x2B,0x2B,0xD,0xA,0x0
000333 0a0d
000334 3d3d
000335 3d3d
000336 3d3d      	.DB  0xD,0xA,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000337 3d3d
000338 3d3d
000339 3d3d
00033a 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00033b 3d3d
00033c 3d3d
00033d 3d3d
00033e 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00033f 3d3d
000340 3d3d
000341 3d3d
000342 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000343 3d3d
000344 3d3d
000345 3d3d
000346 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
000347 3d3d
000348 3d3d
000349 3d3d
00034a 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00034b 3d3d
00034c 3d3d
00034d 3d3d
00034e 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00034f 0a0d
000350 5600
000351 7573
000352 206d      	.DB  0xD,0xA,0x0,0x56,0x73,0x75,0x6D,0x20
000353 203d
000354 3025
000355 342e
000356 2066      	.DB  0x3D,0x20,0x25,0x30,0x2E,0x34,0x66,0x20
000357 0020
000358 7349
000359 6d75
00035a 3d20      	.DB  0x20,0x0,0x49,0x73,0x75,0x6D,0x20,0x3D
00035b 2520
00035c 2e30
00035d 6634
00035e 2020      	.DB  0x20,0x25,0x30,0x2E,0x34,0x66,0x20,0x20
00035f 5000
000360 7573
000361 206d
000362 203d      	.DB  0x0,0x50,0x73,0x75,0x6D,0x20,0x3D,0x20
000363 3025
000364 342e
000365 0d66
000366 000a      	.DB  0x25,0x30,0x2E,0x34,0x66,0xD,0xA,0x0
000367 6156
000368 6776
000369 3d20
00036a 2520      	.DB  0x56,0x61,0x76,0x67,0x20,0x3D,0x20,0x25
00036b 2e30
00036c 6634
00036d 2020
00036e 0020      	.DB  0x30,0x2E,0x34,0x66,0x20,0x20,0x20,0x0
00036f 6149
000370 6776
000371 3d20
000372 2520      	.DB  0x49,0x61,0x76,0x67,0x20,0x3D,0x20,0x25
000373 2e30
000374 6634
000375 2020
000376 0020      	.DB  0x30,0x2E,0x34,0x66,0x20,0x20,0x20,0x0
000377 6150
000378 6776
000379 3d20
00037a 2520      	.DB  0x50,0x61,0x76,0x67,0x20,0x3D,0x20,0x25
00037b 2e30
00037c 6634
00037d 0a0d
00037e 5700      	.DB  0x30,0x2E,0x34,0x66,0xD,0xA,0x0,0x57
00037f 7461
000380 2d74
000381 6f48
000382 7275      	.DB  0x61,0x74,0x74,0x2D,0x48,0x6F,0x75,0x72
000383 5320
000384 6d75
000385 3d20
000386 2520      	.DB  0x20,0x53,0x75,0x6D,0x20,0x3D,0x20,0x25
000387 2e30
000388 6634
000389 0a0d
00038a 4e00      	.DB  0x30,0x2E,0x34,0x66,0xD,0xA,0x0,0x4E
00038b 6d75
00038c 6562
00038d 2072
00038e 6153      	.DB  0x75,0x6D,0x62,0x65,0x72,0x20,0x53,0x61
00038f 706d
000390 696c
000391 676e
000392 3d20      	.DB  0x6D,0x70,0x6C,0x69,0x6E,0x67,0x20,0x3D
000393 2520
000394 0d64
000395 000a
000396 3d3d      	.DB  0x20,0x25,0x64,0xD,0xA,0x0,0x3D,0x3D
000397 3d3d
000398 3d3d
000399 3d3d
00039a 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00039b 3d3d
00039c 3d3d
00039d 3d3d
00039e 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
00039f 3d3d
0003a0 3d3d
0003a1 3d3d
0003a2 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0003a3 3d3d
0003a4 3d3d
0003a5 3d3d
0003a6 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0003a7 3d3d
0003a8 3d3d
0003a9 3d3d
0003aa 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0003ab 3d3d
0003ac 3d3d
0003ad 3d3d
0003ae 3d3d      	.DB  0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D,0x3D
0003af 3d3d
0003b0 3d3d
0003b1 0a0d
0003b2 0a0d      	.DB  0x3D,0x3D,0x3D,0x3D,0xD,0xA,0xD,0xA
0003b3 4300
0003b4 7275
0003b5 6572
0003b6 746e      	.DB  0x0,0x43,0x75,0x72,0x72,0x65,0x6E,0x74
0003b7 4520
0003b8 6378
0003b9 6565
0003ba 2064      	.DB  0x20,0x45,0x78,0x63,0x65,0x65,0x64,0x20
0003bb 2d2d
0003bc 5753
0003bd 5449
0003be 4843      	.DB  0x2D,0x2D,0x53,0x57,0x49,0x54,0x43,0x48
0003bf 4f20
0003c0 4646
0003c1 0d21
0003c2 000a      	.DB  0x20,0x4F,0x46,0x46,0x21,0xD,0xA,0x0
                 _0xE0003:
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1374): warning: .cseg .db misalignment - padding zero byte
0003c3 0040      	.DB  0x40
                 _0x100003:
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1376): warning: .cseg .db misalignment - padding zero byte
0003c4 0005      	.DB  0x5
                 _0x120003:
0003c5 4000
0003c6 451c      	.DB  0x0,0x40,0x1C,0x45
                 _0x120000:
0003c7 4441
0003c8 2043
0003c9 203d
0003ca 6425      	.DB  0x41,0x44,0x43,0x20,0x3D,0x20,0x25,0x64
0003cb 0a0d
0003cc 5600
0003cd 6c6f
0003ce 2074      	.DB  0xD,0xA,0x0,0x56,0x6F,0x6C,0x74,0x20
0003cf 203d
0003d0 6625
0003d1 0a0d
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1382): warning: .cseg .db misalignment - padding zero byte
0003d2 0000      	.DB  0x3D,0x20,0x25,0x66,0xD,0xA,0x0
                 _0x2000060:
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1384): warning: .cseg .db misalignment - padding zero byte
0003d3 0001      	.DB  0x1
                 _0x2000000:
0003d4 4e2d
0003d5 4e41
0003d6 4900
0003d7 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1387): warning: .cseg .db misalignment - padding zero byte
0003d8 0000      	.DB  0x0
                 _0x2020000:
0003d9 4e2d
0003da 4e41
C:\Users\NextCrop\Downloads\Smart plug lastversion\Smart plug lastversion\HEMS.-SmartPlug by koon\List\HEMS_EndDevice.asm(1389): warning: .cseg .db misalignment - padding zero byte
0003db 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 
                 __GLOBAL_INI_TBL:
0003dc 0001      	.DW  0x01
0003dd 0002      	.DW  0x02
0003de 008c      	.DW  __REG_BIT_VARS*2
                 
0003df 0004      	.DW  0x04
0003e0 0d00      	.DW  0xD00
0003e1 008e      	.DW  __HEAP_START_MARKER*2
                 
0003e2 000d      	.DW  0x0D
0003e3 08df      	.DW  _specData
0003e4 0092      	.DW  _0x3*2
                 
0003e5 0004      	.DW  0x04
0003e6 0008      	.DW  0x08
0003e7 00a0      	.DW  _0x4F*2
                 
0003e8 0008      	.DW  0x08
0003e9 0914      	.DW  _AI_COMMAND
0003ea 035e      	.DW  _0x80003*2
                 
0003eb 0008      	.DW  0x08
0003ec 091c      	.DW  _SL_COMMAND
0003ed 0366      	.DW  _0x80004*2
                 
0003ee 0008      	.DW  0x08
0003ef 0924      	.DW  _SH_COMMAND
0003f0 036e      	.DW  _0x80005*2
                 
0003f1 0001      	.DW  0x01
0003f2 0893      	.DW  _event_state
0003f3 0376      	.DW  _0x80006*2
                 
0003f4 0026      	.DW  0x26
0003f5 092e      	.DW  _JOIN_A1
0003f6 04f6      	.DW  _0xC0003*2
                 
0003f7 0026      	.DW  0x26
0003f8 0955      	.DW  _PING_A4
0003f9 051c      	.DW  _0xC0004*2
                 
0003fa 0027      	.DW  0x27
0003fb 097c      	.DW  _SEND_EVENT_
0003fc 0542      	.DW  _0xC0005*2
                 
0003fd 0043      	.DW  0x43
0003fe 09a5      	.DW  _SEND_REPORT_
0003ff 056a      	.DW  _0xC0006*2
                 
000400 0001      	.DW  0x01
000401 0a11      	.DW  _Vreferent
000402 0786      	.DW  _0xE0003*2
                 
000403 0001      	.DW  0x01
000404 08de      	.DW  _Eaddress
000405 0788      	.DW  _0x100003*2
                 
000406 0004      	.DW  0x04
000407 0840      	.DW  _avg
000408 078a      	.DW  _0x120003*2
                 
000409 0001      	.DW  0x01
00040a 0a12      	.DW  __seed_G100
00040b 07a6      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
00040c 0000      	.DW  0
                 
                 __RESET:
00040d 94f8      	CLI
00040e 27ee      	CLR  R30
00040f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000410 e0f1      	LDI  R31,1
000411 bff5      	OUT  MCUCR,R31
000412 bfe5      	OUT  MCUCR,R30
000413 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000415 e1f8      	LDI  R31,0x18
000416 bdf1      	OUT  WDTCR,R31
000417 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000418 e08d      	LDI  R24,(14-2)+1
000419 e0a2      	LDI  R26,2
00041a 27bb      	CLR  R27
                 __CLEAR_REG:
00041b 93ed      	ST   X+,R30
00041c 958a      	DEC  R24
00041d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00041e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00041f e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000420 e0a0      	LDI  R26,LOW(__SRAM_START)
000421 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000422 93ed      	ST   X+,R30
000423 9701      	SBIW R24,1
000424 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000425 ebe8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000426 e0f7      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000427 9185      	LPM  R24,Z+
000428 9195      	LPM  R25,Z+
000429 9700      	SBIW R24,0
00042a f061      	BREQ __GLOBAL_INI_END
00042b 91a5      	LPM  R26,Z+
00042c 91b5      	LPM  R27,Z+
00042d 9005      	LPM  R0,Z+
00042e 9015      	LPM  R1,Z+
00042f 01bf      	MOVW R22,R30
000430 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000431 9005      	LPM  R0,Z+
000432 920d      	ST   X+,R0
000433 9701      	SBIW R24,1
000434 f7e1      	BRNE __GLOBAL_INI_LOOP
000435 01fb      	MOVW R30,R22
000436 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000437 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000438 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000439 bfed      	OUT  SPL,R30
00043a e0ec      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00043b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00043c e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00043d e0d6      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00043e 940c 0487 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x600
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Project         : HEMS - Smart_Plug
                 ;Date            : 13/06/2013
                 ;Author          : Tawan Srisang, Sirichakorn
                 ;Company         : Intelenics Co.,Ltd.
                 ;Comments        :
                 ;Version Format  :
                 ;Chip type       : ATmega128
                 ;Program type    : Application
                 ;Frequency       : 11.059200 MHz
                 ;*****************************************************/
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <sleep.h>
                 ;#include <io.h>
                 ;#include <math.h>
                 ;#include <initial_system.h>
                 ;#include <int_protocol.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <timer.h>
                 ;#include <adc.h>
                 ;#include <eeprom.h>
                 ;#include <meansure.h>
                 ;#define SWITCH_PRESSED !(PINC & (1<<PINC0))
                 ;
                 ;uint8_t SWITCH          = TURN_OFF;
                 ;uint8_t specData[]      = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF};   // Specific Stucture of Join Req packet
                 
                 	.DSEG
                 ;uint8_t error;
                 ;int8_t read_D_SW;
                 ;int start_event;
                 ;int counter = 0;
                 ;int e = 0;
                 ;uint8_t SEND_EVENT_TEST[38];
                 ;
                 ;void get_event(){
                 ; 0000 0029 void get_event(){
                 
                 	.CSEG
                 _get_event:
                 ; 0000 002A     int event = 0;
                 ; 0000 002B     event = input[count_event];
000440 940e 160a 	CALL SUBOPT_0x0
                 ;	event -> R16,R17
000442 91e0 08d3 	LDS  R30,_count_event
000444 91f0 08d4 	LDS  R31,_count_event+1
000446 940e 160f 	CALL SUBOPT_0x1
000448 0fae      	ADD  R26,R30
000449 1fbf      	ADC  R27,R31
00044a 910d      	LD   R16,X+
00044b 911c      	LD   R17,X
                 ; 0000 002C     printDebug("EVENT = %d\r\n", event);
                +
00044c eae4     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00044d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00044e 93fa      	ST   -Y,R31
00044f 93ea      	ST   -Y,R30
000450 01f8      	MOVW R30,R16
000451 940e 1614 	CALL SUBOPT_0x2
                 ; 0000 002D     if (event != 0) count_event++;
000453 2e00      	MOV  R0,R16
000454 2a01      	OR   R0,R17
000455 f021      	BREQ _0x4
000456 eda3      	LDI  R26,LOW(_count_event)
000457 e0b8      	LDI  R27,HIGH(_count_event)
000458 940e 161d 	CALL SUBOPT_0x3
                 ; 0000 002E     printDebug("count_event = %d\r\n", count_event);
                 _0x4:
                +
00045a ebe1     +LDI R30 , LOW ( 2 * _0x0 + ( 13 ) )
00045b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 13 ) )
                 	__POINTW1FN _0x0,13
00045c 93fa      	ST   -Y,R31
00045d 93ea      	ST   -Y,R30
00045e 91e0 08d3 	LDS  R30,_count_event
000460 91f0 08d4 	LDS  R31,_count_event+1
000462 940e 1614 	CALL SUBOPT_0x2
                 ; 0000 002F     if(count_event == 30 ) count_event = 0;
000464 91a0 08d3 	LDS  R26,_count_event
000466 91b0 08d4 	LDS  R27,_count_event+1
000468 975e      	SBIW R26,30
000469 f429      	BRNE _0x5
00046a e0e0      	LDI  R30,LOW(0)
00046b 93e0 08d3 	STS  _count_event,R30
00046d 93e0 08d4 	STS  _count_event+1,R30
                 ; 0000 0030     do_something(event);
                 _0x5:
00046f 01d8      	MOVW R26,R16
000470 940e 0a8e 	CALL _do_something
                 ; 0000 0031 }
000472 9109      	LD   R16,Y+
000473 9119      	LD   R17,Y+
000474 9508      	RET
                 ;
                 ;void put_event(int event){
                 ; 0000 0033 void put_event(int event){
                 _put_event:
                 ; 0000 0034     input[count_input] = event;
000475 93ba      	ST   -Y,R27
000476 93aa      	ST   -Y,R26
                 ;	event -> Y+0
000477 940e 1623 	CALL SUBOPT_0x4
000479 940e 160f 	CALL SUBOPT_0x1
00047b 0fea      	ADD  R30,R26
00047c 1ffb      	ADC  R31,R27
00047d 81a8      	LD   R26,Y
00047e 81b9      	LDD  R27,Y+1
00047f 83a0      	STD  Z+0,R26
000480 83b1      	STD  Z+1,R27
                 ; 0000 0035     count_input++;
000481 eda1      	LDI  R26,LOW(_count_input)
000482 e0b8      	LDI  R27,HIGH(_count_input)
000483 940e 161d 	CALL SUBOPT_0x3
                 ; 0000 0036 }
000485 940c 091d 	JMP  _0x20C000F
                 ;
                 ;void main(void) {
                 ; 0000 0038 void main(void) {
                 _main:
                 ; 0000 0039 
                 ; 0000 003A     start_event = 0;
000487 2466      	CLR  R6
000488 2477      	CLR  R7
                 ; 0000 003B     STATUS_DEVICE = EEPROM_read(Eaddress);
000489 940e 1628 	CALL SUBOPT_0x5
                 ; 0000 003C     if(STATUS_DEVICE == 0xFF){
00048b 91a0 0892 	LDS  R26,_STATUS_DEVICE
00048d 3faf      	CPI  R26,LOW(0xFF)
00048e f439      	BRNE _0x6
                 ; 0000 003D         EEPROM_write(Eaddress,0);
00048f 940e 1630 	CALL SUBOPT_0x6
000491 e0a0      	LDI  R26,LOW(0)
000492 940e 0e69 	CALL _EEPROM_write
                 ; 0000 003E         STATUS_DEVICE = EEPROM_read(Eaddress);
000494 940e 1628 	CALL SUBOPT_0x5
                 ; 0000 003F     }
                 ; 0000 0040 
                 ; 0000 0041     /*=============== System Initialize ===============*/
                 ; 0000 0042     do{ error = initial_system(); }while(error);
                 _0x6:
                 _0x8:
000496 940e 0b06 	CALL _initial_system
000498 2e5e      	MOV  R5,R30
000499 2055      	TST  R5
00049a f7d9      	BRNE _0x8
                 ; 0000 0043 
                 ; 0000 0044     /*=============== Select Device Type ===============*/
                 ; 0000 0045 
                 ; 0000 0046     do {
                 _0xB:
                 ; 0000 0047         read_D_SW = read_dSwitch();
00049b 940e 0b3c 	CALL _read_dSwitch
00049d 2e4e      	MOV  R4,R30
                 ; 0000 0048         if(read_D_SW == 0x0F) {
00049e e0ef      	LDI  R30,LOW(15)
00049f 15e4      	CP   R30,R4
0004a0 f531      	BRNE _0xD
                 ; 0000 0049             SENSOR_SENSITIVE = SENSOR5A;
0004a1 940e 1636 	CALL SUBOPT_0x7
                 ; 0000 004A             if((ADJ0_SENSOR5A > 0.0) && (ADJ0_SENSOR5A < 0.12)) {
0004a3 940e 1647 	CALL SUBOPT_0x8
0004a5 f44c      	BRGE _0xF
0004a6 01df      	MOVW R26,R30
0004a7 01cb      	MOVW R24,R22
                +
0004a8 e8ef     +LDI R30 , LOW ( 0x3DF5C28F )
0004a9 ecf2     +LDI R31 , HIGH ( 0x3DF5C28F )
0004aa ef65     +LDI R22 , BYTE3 ( 0x3DF5C28F )
0004ab e37d     +LDI R23 , BYTE4 ( 0x3DF5C28F )
                 	__GETD1N 0x3DF5C28F
0004ac 940e 1ba3 	CALL __CMPF12
0004ae f008      	BRLO _0x10
                 _0xF:
0004af c005      	RJMP _0xE
                 _0x10:
                 ; 0000 004B                 AMP_ADJ_ZERO = ADJ0_SENSOR5A;
0004b0 e0a0      	LDI  R26,LOW(_ADJ0_SENSOR5A)
0004b1 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR5A)
0004b2 940e 1cdc 	CALL __EEPROMRDD
0004b4 c004      	RJMP _0x47
                 ; 0000 004C             }else {AMP_ADJ_ZERO = 0.09;}
                 _0xE:
                +
0004b5 eeec     +LDI R30 , LOW ( 0x3DB851EC )
0004b6 e5f1     +LDI R31 , HIGH ( 0x3DB851EC )
0004b7 eb68     +LDI R22 , BYTE3 ( 0x3DB851EC )
0004b8 e37d     +LDI R23 , BYTE4 ( 0x3DB851EC )
                 	__GETD1N 0x3DB851EC
                 _0x47:
0004b9 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
0004bb 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
0004bd 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
0004bf 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 004D             specData[8] = TYPE_SMART_SWITCH;                             // Device Type
0004c1 e1e2      	LDI  R30,LOW(18)
                +
0004c2 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 004E             printDebug("\r\n++++++++++ Smart Switch ++++++++++\r\n");
                +
0004c4 ece4     +LDI R30 , LOW ( 2 * _0x0 + ( 32 ) )
0004c5 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 32 ) )
                 	__POINTW1FN _0x0,32
0004c6 c081      	RJMP _0x48
                 ; 0000 004F             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                 ; 0000 0050             printDebug("Current Sensor   : ACS712ELCTR-05B-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                 ; 0000 0051         }else if(read_D_SW == 0x0E) {
                 _0xD:
0004c7 e0ee      	LDI  R30,LOW(14)
0004c8 15e4      	CP   R30,R4
0004c9 f591      	BRNE _0x13
                 ; 0000 0052             SENSOR_SENSITIVE = SENSOR20A;
                +
0004ca e0e0     +LDI R30 , LOW ( 0x42C80000 )
0004cb e0f0     +LDI R31 , HIGH ( 0x42C80000 )
0004cc ec68     +LDI R22 , BYTE3 ( 0x42C80000 )
0004cd e472     +LDI R23 , BYTE4 ( 0x42C80000 )
                 	__GETD1N 0x42C80000
0004ce 940e 164c 	CALL SUBOPT_0x9
                 ; 0000 0053             if((ADJ0_SENSOR20A > 0.0) && (ADJ0_SENSOR20A < 0.14)) {
0004d0 e0a4      	LDI  R26,LOW(_ADJ0_SENSOR20A)
0004d1 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR20A)
0004d2 940e 1cdc 	CALL __EEPROMRDD
0004d4 940e 1647 	CALL SUBOPT_0x8
0004d6 f44c      	BRGE _0x15
0004d7 01df      	MOVW R26,R30
0004d8 01cb      	MOVW R24,R22
                +
0004d9 e2e9     +LDI R30 , LOW ( 0x3E0F5C29 )
0004da e5fc     +LDI R31 , HIGH ( 0x3E0F5C29 )
0004db e06f     +LDI R22 , BYTE3 ( 0x3E0F5C29 )
0004dc e37e     +LDI R23 , BYTE4 ( 0x3E0F5C29 )
                 	__GETD1N 0x3E0F5C29
0004dd 940e 1ba3 	CALL __CMPF12
0004df f008      	BRLO _0x16
                 _0x15:
0004e0 c005      	RJMP _0x14
                 _0x16:
                 ; 0000 0054                 AMP_ADJ_ZERO = ADJ0_SENSOR20A;
0004e1 e0a4      	LDI  R26,LOW(_ADJ0_SENSOR20A)
0004e2 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR20A)
0004e3 940e 1cdc 	CALL __EEPROMRDD
0004e5 c004      	RJMP _0x49
                 ; 0000 0055             }else {AMP_ADJ_ZERO = 0.11;}
                 _0x14:
                +
0004e6 eaee     +LDI R30 , LOW ( 0x3DE147AE )
0004e7 e4f7     +LDI R31 , HIGH ( 0x3DE147AE )
0004e8 ee61     +LDI R22 , BYTE3 ( 0x3DE147AE )
0004e9 e37d     +LDI R23 , BYTE4 ( 0x3DE147AE )
                 	__GETD1N 0x3DE147AE
                 _0x49:
0004ea 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
0004ec 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
0004ee 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
0004f0 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 0056             specData[8] = TYPE_SMART_PLUG;                               // Device Type
0004f2 e1e1      	LDI  R30,LOW(17)
                +
0004f3 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 0057             printDebug("\r\n++++++++++ Smart Plug ++++++++++\r\n");
                +
0004f5 e3ef     +LDI R30 , LOW ( 2 * _0x0 + ( 155 ) )
0004f6 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 155 ) )
                 	__POINTW1FN _0x0,155
0004f7 940e 1655 	CALL SUBOPT_0xA
                 ; 0000 0058             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                 ; 0000 0059             printDebug("Current Sensor   : ACS712ELCTR-20A-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
0004f9 e6e4     +LDI R30 , LOW ( 2 * _0x0 + ( 192 ) )
0004fa e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 192 ) )
                 	__POINTW1FN _0x0,192
0004fb c05b      	RJMP _0x4A
                 ; 0000 005A         }else if(read_D_SW == 0x0D) {
                 _0x13:
0004fc e0ed      	LDI  R30,LOW(13)
0004fd 15e4      	CP   R30,R4
0004fe f591      	BRNE _0x19
                 ; 0000 005B             SENSOR_SENSITIVE = SENSOR30A;
                +
0004ff e0e0     +LDI R30 , LOW ( 0x42840000 )
000500 e0f0     +LDI R31 , HIGH ( 0x42840000 )
000501 e864     +LDI R22 , BYTE3 ( 0x42840000 )
000502 e472     +LDI R23 , BYTE4 ( 0x42840000 )
                 	__GETD1N 0x42840000
000503 940e 164c 	CALL SUBOPT_0x9
                 ; 0000 005C             if((ADJ0_SENSOR30A > 0.0) && (ADJ0_SENSOR30A < 0.15)) {
000505 e0a8      	LDI  R26,LOW(_ADJ0_SENSOR30A)
000506 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR30A)
000507 940e 1cdc 	CALL __EEPROMRDD
000509 940e 1647 	CALL SUBOPT_0x8
00050b f44c      	BRGE _0x1B
00050c 01df      	MOVW R26,R30
00050d 01cb      	MOVW R24,R22
                +
00050e e9ea     +LDI R30 , LOW ( 0x3E19999A )
00050f e9f9     +LDI R31 , HIGH ( 0x3E19999A )
000510 e169     +LDI R22 , BYTE3 ( 0x3E19999A )
000511 e37e     +LDI R23 , BYTE4 ( 0x3E19999A )
                 	__GETD1N 0x3E19999A
000512 940e 1ba3 	CALL __CMPF12
000514 f008      	BRLO _0x1C
                 _0x1B:
000515 c005      	RJMP _0x1A
                 _0x1C:
                 ; 0000 005D                 AMP_ADJ_ZERO = ADJ0_SENSOR30A;
000516 e0a8      	LDI  R26,LOW(_ADJ0_SENSOR30A)
000517 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR30A)
000518 940e 1cdc 	CALL __EEPROMRDD
00051a c004      	RJMP _0x4B
                 ; 0000 005E             }else {AMP_ADJ_ZERO = 0.12;}
                 _0x1A:
                +
00051b e8ef     +LDI R30 , LOW ( 0x3DF5C28F )
00051c ecf2     +LDI R31 , HIGH ( 0x3DF5C28F )
00051d ef65     +LDI R22 , BYTE3 ( 0x3DF5C28F )
00051e e37d     +LDI R23 , BYTE4 ( 0x3DF5C28F )
                 	__GETD1N 0x3DF5C28F
                 _0x4B:
00051f 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
000521 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
000523 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
000525 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 005F             specData[8] = TYPE_SMART_BREAKER;                            // Device Type
000527 e1e3      	LDI  R30,LOW(19)
                +
000528 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 0060             printDebug("\r\n++++++++++ Smart Breaker ++++++++++\r\n");
                +
00052a e9eb     +LDI R30 , LOW ( 2 * _0x0 + ( 247 ) )
00052b e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 247 ) )
                 	__POINTW1FN _0x0,247
00052c 940e 1655 	CALL SUBOPT_0xA
                 ; 0000 0061             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                 ; 0000 0062             printDebug("Current Sensor   : ACS712ELCTR-30A-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
00052e ece3     +LDI R30 , LOW ( 2 * _0x0 + ( 287 ) )
00052f e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 287 ) )
                 	__POINTW1FN _0x0,287
000530 c026      	RJMP _0x4A
                 ; 0000 0063         }else if(read_D_SW < 0) {
                 _0x19:
000531 e0e0      	LDI  R30,LOW(0)
000532 164e      	CP   R4,R30
000533 f42c      	BRGE _0x1F
                 ; 0000 0064             printDebug("Read Dip-Switch ERROR!\r\n");
                +
000534 efea     +LDI R30 , LOW ( 2 * _0x0 + ( 342 ) )
000535 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 342 ) )
                 	__POINTW1FN _0x0,342
000536 940e 166a 	CALL SUBOPT_0xB
                 ; 0000 0065         }else {
000538 c024      	RJMP _0x20
                 _0x1F:
                 ; 0000 0066             SENSOR_SENSITIVE = SENSOR5A;
000539 940e 1636 	CALL SUBOPT_0x7
                 ; 0000 0067             AMP_ADJ_ZERO = ADJ0_SENSOR5A;
00053b 93e0 0832 	STS  _AMP_ADJ_ZERO,R30
00053d 93f0 0833 	STS  _AMP_ADJ_ZERO+1,R31
00053f 9360 0834 	STS  _AMP_ADJ_ZERO+2,R22
000541 9370 0835 	STS  _AMP_ADJ_ZERO+3,R23
                 ; 0000 0068             specData[8] = TYPE_SMART_SWITCH;
000543 e1e2      	LDI  R30,LOW(18)
                +
000544 93e0 08e7+STS _specData + ( 8 ) , R30
                 	__PUTB1MN _specData,8
                 ; 0000 0069             printDebug("\r\n++++++++++ Default Type : Smart Switch ++++++++++\r\n");
                +
000546 e1e3     +LDI R30 , LOW ( 2 * _0x0 + ( 367 ) )
000547 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 367 ) )
                 	__POINTW1FN _0x0,367
                 _0x48:
000548 93fa      	ST   -Y,R31
000549 93ea      	ST   -Y,R30
00054a e080      	LDI  R24,0
00054b d104      	RCALL _printDebug
00054c 9622      	ADIW R28,2
                 ; 0000 006A             printDebug("\r\nFirmware Version : %0.1f\r\n", FIRMWARE_VERSION);
                +
00054d eeeb     +LDI R30 , LOW ( 2 * _0x0 + ( 71 ) )
00054e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 71 ) )
                 	__POINTW1FN _0x0,71
00054f 93fa      	ST   -Y,R31
000550 93ea      	ST   -Y,R30
000551 940e 1671 	CALL SUBOPT_0xC
000553 940e 1676 	CALL SUBOPT_0xD
                 ; 0000 006B             printDebug("Current Sensor   : ACS712ELCTR-05B-T (%0.1f mV/Amp.)\r\n", SENSOR_SENSITIVE);
                +
000555 e0e8     +LDI R30 , LOW ( 2 * _0x0 + ( 100 ) )
000556 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW1FN _0x0,100
                 _0x4A:
000557 93fa      	ST   -Y,R31
000558 93ea      	ST   -Y,R30
000559 940e 167d 	CALL SUBOPT_0xE
00055b 940e 1676 	CALL SUBOPT_0xD
                 ; 0000 006C         }
                 _0x20:
                 ; 0000 006D     }while(read_D_SW < 0);
00055d e0e0      	LDI  R30,LOW(0)
00055e 164e      	CP   R4,R30
00055f f40c      	BRGE _0xC
000560 cf3a      	RJMP _0xB
                 _0xC:
                 ; 0000 006E 
                 ; 0000 006F     /*=============== Current Measurement ===============*/
                 ; 0000 0070     printDebug("Current Measure  : > %0.2f Amp.\r\n", AMP_ADJ_ZERO);
                +
000561 e4e9     +LDI R30 , LOW ( 2 * _0x0 + ( 421 ) )
000562 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 421 ) )
                 	__POINTW1FN _0x0,421
000563 93fa      	ST   -Y,R31
000564 93ea      	ST   -Y,R30
000565 940e 1686 	CALL SUBOPT_0xF
000567 940e 1676 	CALL SUBOPT_0xD
                 ; 0000 0071 
                 ; 0000 0072 
                 ; 0000 0073     #asm("sei")    // Global enable interrupts
000569 9478      	sei
                 ; 0000 0074 
                 ; 0000 0075     printDebug("\r\n-------- Initial Complete --------\r\n");
                +
00056a e6eb     +LDI R30 , LOW ( 2 * _0x0 + ( 455 ) )
00056b e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 455 ) )
                 	__POINTW1FN _0x0,455
00056c 940e 166a 	CALL SUBOPT_0xB
                 ; 0000 0076     delay_ms(5000);
00056e e8a8      	LDI  R26,LOW(5000)
00056f e1b3      	LDI  R27,HIGH(5000)
000570 940e 19f3 	CALL _delay_ms
                 ; 0000 0077 
                 ; 0000 0078     printDebug("\r\n-------- Start Program --------\r\n");
                +
000572 e9e2     +LDI R30 , LOW ( 2 * _0x0 + ( 494 ) )
000573 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 494 ) )
                 	__POINTW1FN _0x0,494
000574 940e 166a 	CALL SUBOPT_0xB
                 ; 0000 0079     while(1) {
                 _0x21:
                 ; 0000 007A         xbee_read();
000576 940e 0a4a 	CALL _xbee_read
                 ; 0000 007B 
                 ; 0000 007C         if(counter%111 == 0 && counter >= 111){
000578 01d4      	MOVW R26,R8
000579 e6ef      	LDI  R30,LOW(111)
00057a e0f0      	LDI  R31,HIGH(111)
00057b 940e 1c71 	CALL __MODW21
00057d 9730      	SBIW R30,0
00057e f429      	BRNE _0x25
00057f e6ef      	LDI  R30,LOW(111)
000580 e0f0      	LDI  R31,HIGH(111)
000581 168e      	CP   R8,R30
000582 069f      	CPC  R9,R31
000583 f40c      	BRGE _0x26
                 _0x25:
000584 c01b      	RJMP _0x24
                 _0x26:
                 ; 0000 007D         if(e%2 == 0){
000585 01d5      	MOVW R26,R10
000586 e0e2      	LDI  R30,LOW(2)
000587 e0f0      	LDI  R31,HIGH(2)
000588 940e 1c71 	CALL __MODW21
00058a 9730      	SBIW R30,0
00058b f421      	BRNE _0x27
                 ; 0000 007E             SEND_EVENT_TEST[2] = 0x90;
00058c 940e 168f 	CALL SUBOPT_0x10
                 ; 0000 007F             SEND_EVENT_TEST[3] = 0x90;
                 ; 0000 0080             SEND_EVENT_TEST[35] = 0xA5;
                 ; 0000 0081             SEND_EVENT_TEST[36] = 0x01;
                 ; 0000 0082             SEND_EVENT_TEST[37] = 0x01;
00058e e0e1      	LDI  R30,LOW(1)
00058f c003      	RJMP _0x4C
                 ; 0000 0083             xbee_receivePacket(SEND_EVENT_TEST,38);
                 ; 0000 0084         }else{
                 _0x27:
                 ; 0000 0085             SEND_EVENT_TEST[2] = 0x90;
000590 940e 168f 	CALL SUBOPT_0x10
                 ; 0000 0086             SEND_EVENT_TEST[3] = 0x90;
                 ; 0000 0087             SEND_EVENT_TEST[35] = 0xA5;
                 ; 0000 0088             SEND_EVENT_TEST[36] = 0x01;
                 ; 0000 0089             SEND_EVENT_TEST[37] = 0x00;
000592 e0e0      	LDI  R30,LOW(0)
                 _0x4C:
                +
000593 93e0 0911+STS _SEND_EVENT_TEST + ( 37 ) , R30
                 	__PUTB1MN _SEND_EVENT_TEST,37
                 ; 0000 008A             xbee_receivePacket(SEND_EVENT_TEST,38);
000595 eeec      	LDI  R30,LOW(_SEND_EVENT_TEST)
000596 e0f8      	LDI  R31,HIGH(_SEND_EVENT_TEST)
000597 93fa      	ST   -Y,R31
000598 93ea      	ST   -Y,R30
000599 e2a6      	LDI  R26,LOW(38)
00059a e0b0      	LDI  R27,0
00059b 940e 094d 	CALL _xbee_receivePacket
                 ; 0000 008B        }
                 ; 0000 008C        e++;
00059d 01f5      	MOVW R30,R10
00059e 9631      	ADIW R30,1
00059f 015f      	MOVW R10,R30
                 ; 0000 008D }
                 ; 0000 008E         switch (flag_state) {
                 _0x24:
0005a0 91e0 062a 	LDS  R30,_flag_state
0005a2 91f0 062b 	LDS  R31,_flag_state+1
                 ; 0000 008F 
                 ; 0000 0090             /*=============== Send AI ===============*/
                 ; 0000 0091             case 0 :
0005a4 9730      	SBIW R30,0
0005a5 f4b9      	BRNE _0x2C
                 ; 0000 0092                 xbee_sendATCommand(AI);
0005a6 940e 169b 	CALL SUBOPT_0x11
0005a8 940e 169e 	CALL SUBOPT_0x12
                 ; 0000 0093                 delay_ms(100);
                 ; 0000 0094 
                 ; 0000 0095                 /*=============== Check last state from eeprom ===============*/
                 ; 0000 0096 
                 ; 0000 0097                 if(STATUS_DEVICE == 1){
0005aa 91a0 0892 	LDS  R26,_STATUS_DEVICE
0005ac 30a1      	CPI  R26,LOW(0x1)
0005ad f471      	BRNE _0x2D
                 ; 0000 0098                     delay_ms(100);
0005ae 940e 16a4 	CALL SUBOPT_0x13
                 ; 0000 0099                     POWER_RELAY_ON;
0005b0 940e 16a8 	CALL SUBOPT_0x14
                 ; 0000 009A                     LED_STAT_ON;
                 ; 0000 009B                     EEPROM_write(Eaddress,STATUS_DEVICE);
0005b2 940e 1630 	CALL SUBOPT_0x6
0005b4 940e 16af 	CALL SUBOPT_0x15
                 ; 0000 009C                     start_event = 1;
0005b6 e0e1      	LDI  R30,LOW(1)
0005b7 e0f0      	LDI  R31,HIGH(1)
0005b8 013f      	MOVW R6,R30
                 ; 0000 009D                     put_event(511);
0005b9 efaf      	LDI  R26,LOW(511)
0005ba e0b1      	LDI  R27,HIGH(511)
0005bb deb9      	RCALL _put_event
                 ; 0000 009E                 }
                 ; 0000 009F             break;
                 _0x2D:
0005bc c091      	RJMP _0x2B
                 ; 0000 00A0 
                 ; 0000 00A1             /*=============== Send SH( High Bits MacAddress) ===============*/
                 ; 0000 00A2             case 1 :
                 _0x2C:
0005bd 30e1      	CPI  R30,LOW(0x1)
0005be e0a0      	LDI  R26,HIGH(0x1)
0005bf 07fa      	CPC  R31,R26
0005c0 f429      	BRNE _0x30
                 ; 0000 00A3                 xbee_sendATCommand(SH);
0005c1 940e 16b3 	CALL SUBOPT_0x16
0005c3 940e 169e 	CALL SUBOPT_0x12
                 ; 0000 00A4                 delay_ms(100);
                 ; 0000 00A5             break;
0005c5 c088      	RJMP _0x2B
                 ; 0000 00A6 
                 ; 0000 00A7             /*=============== Send SL( LOW Bits MacAddress) ===============*/
                 ; 0000 00A8             case 2 :
                 _0x30:
0005c6 30e2      	CPI  R30,LOW(0x2)
0005c7 e0a0      	LDI  R26,HIGH(0x2)
0005c8 07fa      	CPC  R31,R26
0005c9 f429      	BRNE _0x31
                 ; 0000 00A9                 xbee_sendATCommand(SL);
0005ca 940e 16b6 	CALL SUBOPT_0x17
0005cc 940e 169e 	CALL SUBOPT_0x12
                 ; 0000 00AA                 delay_ms(100);
                 ; 0000 00AB             break;
0005ce c07f      	RJMP _0x2B
                 ; 0000 00AC 
                 ; 0000 00AD             /*=============== Send Join ===============*/
                 ; 0000 00AE //            case 3 :
                 ; 0000 00AF //                delay_ms(2000);
                 ; 0000 00B0 //                send_join();
                 ; 0000 00B1 //                delay_ms(100);
                 ; 0000 00B2 //
                 ; 0000 00B3 //                if(SWITCH_PRESSED){
                 ; 0000 00B4 //                    delay_ms(100);
                 ; 0000 00B5 //                    if(STATUS_DEVICE == 0){
                 ; 0000 00B6 //                        POWER_RELAY_ON;
                 ; 0000 00B7 //                        LED_STAT_ON;
                 ; 0000 00B8 //                        STATUS_DEVICE = 1;
                 ; 0000 00B9 //                        EEPROM_write(Eaddress,STATUS_DEVICE);
                 ; 0000 00BA //                        event_state = 1;
                 ; 0000 00BB //                        put_event(511);
                 ; 0000 00BC 
                 ; 0000 00BD //                    }else if(STATUS_DEVICE == 1){
                 ; 0000 00BE //                        LED_STAT_OFF;
                 ; 0000 00BF //                        POWER_RELAY_OFF;
                 ; 0000 00C0 //                        STATUS_DEVICE = 0;
                 ; 0000 00C1 //                        EEPROM_write(Eaddress,STATUS_DEVICE);
                 ; 0000 00C2 //                        event_state = 1;
                 ; 0000 00C3 //                        put_event(510);
                 ; 0000 00C4 
                 ; 0000 00C5 //                    }
                 ; 0000 00C6 //                }
                 ; 0000 00C7 //            break;
                 ; 0000 00C8 
                 ; 0000 00C9             /*=============== Idle State ===============*/
                 ; 0000 00CA             case 3 :
                 _0x31:
0005cf 30e3      	CPI  R30,LOW(0x3)
0005d0 e0a0      	LDI  R26,HIGH(0x3)
0005d1 07fa      	CPC  R31,R26
0005d2 f011      	BREQ PC+3
0005d3 940c 061b 	JMP _0x32
                 ; 0000 00CB                 printDebug("\r\n-------- Idle --------\r\n");
                +
0005d5 ebe6     +LDI R30 , LOW ( 2 * _0x0 + ( 530 ) )
0005d6 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 530 ) )
                 	__POINTW1FN _0x0,530
0005d7 940e 166a 	CALL SUBOPT_0xB
                 ; 0000 00CC                 counter++;
0005d9 940e 16b9 	CALL SUBOPT_0x18
                 ; 0000 00CD                 if(counter%10 == 0 ){
0005db f429      	BRNE _0x33
                 ; 0000 00CE                     get_event();
0005dc de63      	RCALL _get_event
                 ; 0000 00CF                     printDebug("\r\n-------- GET EVENT --------\r\n");
                +
0005dd ede1     +LDI R30 , LOW ( 2 * _0x0 + ( 557 ) )
0005de e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 557 ) )
                 	__POINTW1FN _0x0,557
0005df 940e 166a 	CALL SUBOPT_0xB
                 ; 0000 00D0                 }
                 ; 0000 00D1 
                 ; 0000 00D2                 if(start_event == 1){
                 _0x33:
0005e1 e0e1      	LDI  R30,LOW(1)
0005e2 e0f0      	LDI  R31,HIGH(1)
0005e3 15e6      	CP   R30,R6
0005e4 05f7      	CPC  R31,R7
0005e5 f499      	BRNE _0x34
                 ; 0000 00D3                     if(STATUS_DEVICE == 1){
0005e6 91a0 0892 	LDS  R26,_STATUS_DEVICE
0005e8 30a1      	CPI  R26,LOW(0x1)
0005e9 f419      	BRNE _0x35
                 ; 0000 00D4                         flag_state = 4;
0005ea e0e4      	LDI  R30,LOW(4)
0005eb e0f0      	LDI  R31,HIGH(4)
0005ec c006      	RJMP _0x4D
                 ; 0000 00D5                     }else if(STATUS_DEVICE == 0){
                 _0x35:
0005ed 91e0 0892 	LDS  R30,_STATUS_DEVICE
0005ef 30e0      	CPI  R30,0
0005f0 f431      	BRNE _0x37
                 ; 0000 00D6                         flag_state = 3;
0005f1 e0e3      	LDI  R30,LOW(3)
0005f2 e0f0      	LDI  R31,HIGH(3)
                 _0x4D:
0005f3 93e0 062a 	STS  _flag_state,R30
0005f5 93f0 062b 	STS  _flag_state+1,R31
                 ; 0000 00D7                     }
                 ; 0000 00D8                     start_event = 0;
                 _0x37:
0005f7 2466      	CLR  R6
0005f8 2477      	CLR  R7
                 ; 0000 00D9                 }
                 ; 0000 00DA 
                 ; 0000 00DB 
                 ; 0000 00DC                 if(SWITCH_PRESSED){
                 _0x34:
0005f9 9998      	SBIC 0x13,0
0005fa c01f      	RJMP _0x38
                 ; 0000 00DD                     delay_ms(200);
0005fb 940e 16c3 	CALL SUBOPT_0x19
                 ; 0000 00DE                        if(STATUS_DEVICE == 0){
0005fd 91e0 0892 	LDS  R30,_STATUS_DEVICE
0005ff 30e0      	CPI  R30,0
000600 f461      	BRNE _0x39
                 ; 0000 00DF                             POWER_RELAY_ON;
000601 940e 16a8 	CALL SUBOPT_0x14
                 ; 0000 00E0                             LED_STAT_ON;
                 ; 0000 00E1                             STATUS_DEVICE = 1;
000603 e0e1      	LDI  R30,LOW(1)
000604 940e 16c7 	CALL SUBOPT_0x1A
                 ; 0000 00E2                             EEPROM_write(Eaddress,STATUS_DEVICE);
000606 940e 16af 	CALL SUBOPT_0x15
                 ; 0000 00E3                             flag_state = 4;
000608 940e 16ca 	CALL SUBOPT_0x1B
                 ; 0000 00E4                             //printDebug("count_input = %d\r\n", count_input);
                 ; 0000 00E5                             put_event(511);
00060a efaf      	LDI  R26,LOW(511)
00060b e0b1      	LDI  R27,HIGH(511)
00060c c00c      	RJMP _0x4E
                 ; 0000 00E6                        }else if(STATUS_DEVICE == 1){
                 _0x39:
00060d 91a0 0892 	LDS  R26,_STATUS_DEVICE
00060f 30a1      	CPI  R26,LOW(0x1)
000610 f449      	BRNE _0x3D
                 ; 0000 00E7                             POWER_RELAY_OFF;
000611 940e 16d1 	CALL SUBOPT_0x1C
                 ; 0000 00E8                             LED_STAT_OFF;
                 ; 0000 00E9                             STATUS_DEVICE = 0;
                 ; 0000 00EA                             EEPROM_write(Eaddress,STATUS_DEVICE);
000613 940e 16af 	CALL SUBOPT_0x15
                 ; 0000 00EB                             flag_state = 3;
000615 940e 16d9 	CALL SUBOPT_0x1D
                 ; 0000 00EC                             //printDebug("count_input = %d\r\n", count_input);
                 ; 0000 00ED                             put_event(510);
000617 efae      	LDI  R26,LOW(510)
000618 e0b1      	LDI  R27,HIGH(510)
                 _0x4E:
000619 de5b      	RCALL _put_event
                 ; 0000 00EE                        }
                 ; 0000 00EF                 }
                 _0x3D:
                 ; 0000 00F0             break;
                 _0x38:
00061a c033      	RJMP _0x2B
                 ; 0000 00F1 
                 ; 0000 00F2             /*=============== Active State ===============*/
                 ; 0000 00F3             case 4 :
                 _0x32:
00061b 30e4      	CPI  R30,LOW(0x4)
00061c e0a0      	LDI  R26,HIGH(0x4)
00061d 07fa      	CPC  R31,R26
00061e f579      	BRNE _0x2B
                 ; 0000 00F4             printDebug("\r\n-------- Active --------\r\n");
                +
00061f efe1     +LDI R30 , LOW ( 2 * _0x0 + ( 589 ) )
000620 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 589 ) )
                 	__POINTW1FN _0x0,589
000621 940e 166a 	CALL SUBOPT_0xB
                 ; 0000 00F5                 ReadCurrent();
000623 940e 0e82 	CALL _ReadCurrent
                 ; 0000 00F6                 ReadVoltage();
000625 940e 0ef8 	CALL _ReadVoltage
                 ; 0000 00F7 
                 ; 0000 00F8                 counter++;
000627 940e 16b9 	CALL SUBOPT_0x18
                 ; 0000 00F9                 if(counter%10 == 0 ){
000629 f429      	BRNE _0x41
                 ; 0000 00FA                     printDebug("\r\n-------- GET EVENT --------\r\n");
                +
00062a ede1     +LDI R30 , LOW ( 2 * _0x0 + ( 557 ) )
00062b e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 557 ) )
                 	__POINTW1FN _0x0,557
00062c 940e 166a 	CALL SUBOPT_0xB
                 ; 0000 00FB                     get_event();
00062e de11      	RCALL _get_event
                 ; 0000 00FC                 }
                 ; 0000 00FD 
                 ; 0000 00FE 
                 ; 0000 00FF                 if(number == 1000){
                 _0x41:
00062f 91a0 0830 	LDS  R26,_number
000631 91b0 0831 	LDS  R27,_number+1
000633 3ea8      	CPI  R26,LOW(0x3E8)
000634 e0e3      	LDI  R30,HIGH(0x3E8)
000635 07be      	CPC  R27,R30
000636 f411      	BRNE _0x42
                 ; 0000 0100                     SendStatusReport();
000637 940e 0d02 	CALL _SendStatusReport
                 ; 0000 0101                 }
                 ; 0000 0102 
                 ; 0000 0103                 if(SWITCH_PRESSED){
                 _0x42:
000639 9998      	SBIC 0x13,0
00063a c013      	RJMP _0x43
                 ; 0000 0104                     delay_ms(200);
00063b 940e 16c3 	CALL SUBOPT_0x19
                 ; 0000 0105                     POWER_RELAY_OFF;
00063d 940e 16d1 	CALL SUBOPT_0x1C
                 ; 0000 0106                     LED_STAT_OFF;
                 ; 0000 0107                     STATUS_DEVICE = 0;
                 ; 0000 0108                     EEPROM_write(Eaddress,STATUS_DEVICE);
00063f 940e 16af 	CALL SUBOPT_0x15
                 ; 0000 0109                     flag_state = 3;
000641 940e 16d9 	CALL SUBOPT_0x1D
                 ; 0000 010A                     printDebug("count_input = %d\r\n", count_input);
                +
000643 e0ee     +LDI R30 , LOW ( 2 * _0x0 + ( 618 ) )
000644 e0f3     +LDI R31 , HIGH ( 2 * _0x0 + ( 618 ) )
                 	__POINTW1FN _0x0,618
000645 93fa      	ST   -Y,R31
000646 93ea      	ST   -Y,R30
000647 940e 1623 	CALL SUBOPT_0x4
000649 940e 1614 	CALL SUBOPT_0x2
                 ; 0000 010B                     put_event(510);
00064b efae      	LDI  R26,LOW(510)
00064c e0b1      	LDI  R27,HIGH(510)
00064d de27      	RCALL _put_event
                 ; 0000 010C                 }
                 ; 0000 010D             break;
                 _0x43:
                 ; 0000 010E         }
                 _0x2B:
                 ; 0000 010F     }
00064e cf27      	RJMP _0x21
                 ; 0000 0110 }
                 _0x46:
00064f cfff      	RJMP _0x46
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <stdarg.h>
                 ;#include <ctype.h>
                 ;#include <stdint.h>
                 ;#include <debug.h>
                 ;#include <uart.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <adc.h>
                 ;#include <initial_system.h>
                 ;
                 ;/* ================================================================================= */
                 ;void printDebug(flash char *fmtstr, ...)
                 ; 0001 000E {
                 
                 	.CSEG
                 _printDebug:
000650 92ff      	PUSH R15
000651 2ef8      	MOV  R15,R24
                 ; 0001 000F     char textBuffer[256];
                 ; 0001 0010     va_list argptr;
                 ; 0001 0011 
                 ; 0001 0012     va_start(argptr, fmtstr);
000652 50d1      	SUBI R29,1
000653 931a      	ST   -Y,R17
000654 930a      	ST   -Y,R16
                 ;	*fmtstr -> Y+258
                 ;	textBuffer -> Y+2
                 ;	*argptr -> R16,R17
000655 01de      	MOVW R26,R28
000656 50a2      	SUBI R26,LOW(-(254))
000657 4fbf      	SBCI R27,HIGH(-(254))
000658 940e 1bfa 	CALL __ADDW2R15
00065a 018d      	MOVW R16,R26
                 ; 0001 0013     vsprintf(textBuffer,fmtstr,argptr);
00065b 940e 16e0 	CALL SUBOPT_0x1E
00065d 01de      	MOVW R26,R28
00065e 5fac      	SUBI R26,LOW(-(260))
00065f 4fbe      	SBCI R27,HIGH(-(260))
000660 940e 1bfa 	CALL __ADDW2R15
000662 940e 1c9d 	CALL __GETW1P
000664 93fa      	ST   -Y,R31
000665 93ea      	ST   -Y,R30
000666 01d8      	MOVW R26,R16
000667 940e 13f6 	CALL _vsprintf
                 ; 0001 0014     send_uart(0, textBuffer);
000669 e0e0      	LDI  R30,LOW(0)
00066a 93ea      	ST   -Y,R30
00066b 01de      	MOVW R26,R28
00066c 9613      	ADIW R26,3
00066d 940e 085b 	CALL _send_uart
                 ; 0001 0015     va_end(argptr);
                 ; 0001 0016 
                 ; 0001 0017     return;
00066f 8119      	LDD  R17,Y+1
000670 8108      	LDD  R16,Y+0
000671 9622      	ADIW R28,2
000672 5fdf      	SUBI R29,-1
000673 90ff      	POP  R15
000674 9508      	RET
                 ; 0001 0018 }
                 ;/* ================================================================================= */
                 ; void print_payload(const unsigned char *payload, int len) {
                 ; 0001 001A void print_payload(const unsigned char *payload, int len) {
                 _print_payload:
                 ; 0001 001B 
                 ; 0001 001C     int len_rem = len;
                 ; 0001 001D     int line_width = 16;            // number of bytes per line //
                 ; 0001 001E     int line_len;
                 ; 0001 001F     int offset = 0;                  // zero-based offset counter //
                 ; 0001 0020     const unsigned char *ch = payload;
                 ; 0001 0021 
                 ; 0001 0022     if (len <= 0)
000675 940e 16e5 	CALL SUBOPT_0x1F
000677 83ea      	STD  Y+2,R30
000678 e0e0      	LDI  R30,LOW(0)
000679 83eb      	STD  Y+3,R30
00067a 940e 1d03 	CALL __SAVELOCR6
                 ;	*payload -> Y+12
                 ;	len -> Y+10
                 ;	len_rem -> R16,R17
                 ;	line_width -> R18,R19
                 ;	line_len -> R20,R21
                 ;	offset -> Y+8
                 ;	*ch -> Y+6
                +
00067c 850a     +LDD R16 , Y + 10
00067d 851b     +LDD R17 , Y + 10 + 1
                 	__GETWRS 16,17,10
                +
00067e e120     +LDI R18 , LOW ( 16 )
00067f e030     +LDI R19 , HIGH ( 16 )
                 	__GETWRN 18,19,16
000680 85ec      	LDD  R30,Y+12
000681 85fd      	LDD  R31,Y+12+1
000682 83ee      	STD  Y+6,R30
000683 83ff      	STD  Y+6+1,R31
000684 85aa      	LDD  R26,Y+10
000685 85bb      	LDD  R27,Y+10+1
000686 940e 1cf4 	CALL __CPW02
000688 f584      	BRGE _0x20C0011
                 ; 0001 0023         return;
                 ; 0001 0024 
                 ; 0001 0025     // data fits on one line //
                 ; 0001 0026     if (len <= line_width) {
000689 172a      	CP   R18,R26
00068a 073b      	CPC  R19,R27
00068b f04c      	BRLT _0x20004
                 ; 0001 0027         print_hex_ascii_line(ch, len, offset);
00068c 940e 16ea 	CALL SUBOPT_0x20
00068e 85ec      	LDD  R30,Y+12
00068f 85fd      	LDD  R31,Y+12+1
000690 93fa      	ST   -Y,R31
000691 93ea      	ST   -Y,R30
000692 940e 16ef 	CALL SUBOPT_0x21
                 ; 0001 0028         return;
000694 c024      	RJMP _0x20C0011
                 ; 0001 0029     }
                 ; 0001 002A     // data spans multiple lines //
                 ; 0001 002B     for ( ;; ) {
                 _0x20004:
                 _0x20006:
                 ; 0001 002C         // compute current line length //
                 ; 0001 002D         line_len = line_width % len_rem;
000695 01f8      	MOVW R30,R16
000696 01d9      	MOVW R26,R18
000697 940e 1c71 	CALL __MODW21
000699 01af      	MOVW R20,R30
                 ; 0001 002E         // print line //
                 ; 0001 002F         print_hex_ascii_line(ch, line_len, offset);
00069a 940e 16ea 	CALL SUBOPT_0x20
00069c 935a      	ST   -Y,R21
00069d 934a      	ST   -Y,R20
00069e 940e 16ef 	CALL SUBOPT_0x21
                 ; 0001 0030         // compute total remaining //
                 ; 0001 0031         len_rem = len_rem - line_len;
                +
0006a0 1b04     +SUB R16 , R20
0006a1 0b15     +SBC R17 , R21
                 	__SUBWRR 16,17,20,21
                 ; 0001 0032         // shift pointer to remaining bytes to print //
                 ; 0001 0033         ch = ch + line_len;
0006a2 01fa      	MOVW R30,R20
0006a3 81ae      	LDD  R26,Y+6
0006a4 81bf      	LDD  R27,Y+6+1
0006a5 0fea      	ADD  R30,R26
0006a6 1ffb      	ADC  R31,R27
0006a7 83ee      	STD  Y+6,R30
0006a8 83ff      	STD  Y+6+1,R31
                 ; 0001 0034         // add offset //
                 ; 0001 0035         offset = offset + line_width;
0006a9 01f9      	MOVW R30,R18
0006aa 940e 16f3 	CALL SUBOPT_0x22
0006ac 87e8      	STD  Y+8,R30
0006ad 87f9      	STD  Y+8+1,R31
                 ; 0001 0036         // check if we have line width chars or less //
                 ; 0001 0037         if (len_rem <= line_width) {
                +
0006ae 1720     +CP R18 , R16
0006af 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
0006b0 f03c      	BRLT _0x20008
                 ; 0001 0038             // print last line and get out //
                 ; 0001 0039             print_hex_ascii_line(ch, len_rem, offset);
0006b1 940e 16ea 	CALL SUBOPT_0x20
0006b3 931a      	ST   -Y,R17
0006b4 930a      	ST   -Y,R16
0006b5 940e 16ef 	CALL SUBOPT_0x21
                 ; 0001 003A             break;
0006b7 c001      	RJMP _0x20007
                 ; 0001 003B         }
                 ; 0001 003C     }
                 _0x20008:
0006b8 cfdc      	RJMP _0x20006
                 _0x20007:
                 ; 0001 003D     return;
                 _0x20C0011:
0006b9 940e 1d0a 	CALL __LOADLOCR6
0006bb 962e      	ADIW R28,14
0006bc 9508      	RET
                 ; 0001 003E 
                 ; 0001 003F }
                 ;/* ================================================================================= */
                 ;void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
                 ; 0001 0041 void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {
                 _print_hex_ascii_line:
                 ; 0001 0042 
                 ; 0001 0043     int i;
                 ; 0001 0044     int gap;
                 ; 0001 0045     const unsigned char *ch;
                 ; 0001 0046 
                 ; 0001 0047     // offset //
                 ; 0001 0048     printDebug("%05d   ", offset);
0006bd 93ba      	ST   -Y,R27
0006be 93aa      	ST   -Y,R26
0006bf 940e 1d03 	CALL __SAVELOCR6
                 ;	*payload -> Y+10
                 ;	len -> Y+8
                 ;	offset -> Y+6
                 ;	i -> R16,R17
                 ;	gap -> R18,R19
                 ;	*ch -> R20,R21
                +
0006c1 e2e2     +LDI R30 , LOW ( 2 * _0x20000 + ( 0 ) )
0006c2 e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 0 ) )
                 	__POINTW1FN _0x20000,0
0006c3 93fa      	ST   -Y,R31
0006c4 93ea      	ST   -Y,R30
0006c5 85e8      	LDD  R30,Y+8
0006c6 85f9      	LDD  R31,Y+8+1
0006c7 940e 1614 	CALL SUBOPT_0x2
                 ; 0001 0049 
                 ; 0001 004A     // hex //
                 ; 0001 004B     ch = payload;
                +
0006c9 854a     +LDD R20 , Y + 10
0006ca 855b     +LDD R21 , Y + 10 + 1
                 	__GETWRS 20,21,10
                 ; 0001 004C     for(i = 0; i < len; i++) {
                +
0006cb e000     +LDI R16 , LOW ( 0 )
0006cc e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2000A:
0006cd 85e8      	LDD  R30,Y+8
0006ce 85f9      	LDD  R31,Y+8+1
0006cf 170e      	CP   R16,R30
0006d0 071f      	CPC  R17,R31
0006d1 f494      	BRGE _0x2000B
                 ; 0001 004D         printDebug("%02X ", *ch);
                +
0006d2 e2ea     +LDI R30 , LOW ( 2 * _0x20000 + ( 8 ) )
0006d3 e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 8 ) )
                 	__POINTW1FN _0x20000,8
0006d4 940e 16f8 	CALL SUBOPT_0x23
                 ; 0001 004E 
                 ; 0001 004F         ch++;
                +
0006d6 5f4f     +SUBI R20 , LOW ( - 1 )
0006d7 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0001 0050         // print extra space after 8th byte for visual aid //
                 ; 0001 0051         if (i == 7){
0006d8 e0e7      	LDI  R30,LOW(7)
0006d9 e0f0      	LDI  R31,HIGH(7)
0006da 17e0      	CP   R30,R16
0006db 07f1      	CPC  R31,R17
0006dc f421      	BRNE _0x2000C
                 ; 0001 0052             printDebug(" ");
                +
0006dd e2e8     +LDI R30 , LOW ( 2 * _0x20000 + ( 6 ) )
0006de e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 6 ) )
                 	__POINTW1FN _0x20000,6
0006df 940e 166a 	CALL SUBOPT_0xB
                 ; 0001 0053 
                 ; 0001 0054         }
                 ; 0001 0055     }
                 _0x2000C:
                +
0006e1 5f0f     +SUBI R16 , LOW ( - 1 )
0006e2 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0006e3 cfe9      	RJMP _0x2000A
                 _0x2000B:
                 ; 0001 0056     // print space to handle line less than 8 bytes //
                 ; 0001 0057     if (len < 8){
0006e4 85a8      	LDD  R26,Y+8
0006e5 85b9      	LDD  R27,Y+8+1
0006e6 9718      	SBIW R26,8
0006e7 f424      	BRGE _0x2000D
                 ; 0001 0058         printDebug(" ");
                +
0006e8 e2e8     +LDI R30 , LOW ( 2 * _0x20000 + ( 6 ) )
0006e9 e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 6 ) )
                 	__POINTW1FN _0x20000,6
0006ea 940e 166a 	CALL SUBOPT_0xB
                 ; 0001 0059 
                 ; 0001 005A     }
                 ; 0001 005B 
                 ; 0001 005C     // fill hex gap with spaces if not full line //
                 ; 0001 005D     if (len < 16) {
                 _0x2000D:
0006ec 85a8      	LDD  R26,Y+8
0006ed 85b9      	LDD  R27,Y+8+1
0006ee 9750      	SBIW R26,16
0006ef f49c      	BRGE _0x2000E
                 ; 0001 005E         gap = 16 - len;
0006f0 85a8      	LDD  R26,Y+8
0006f1 85b9      	LDD  R27,Y+8+1
0006f2 e1e0      	LDI  R30,LOW(16)
0006f3 e0f0      	LDI  R31,HIGH(16)
0006f4 1bea      	SUB  R30,R26
0006f5 0bfb      	SBC  R31,R27
0006f6 019f      	MOVW R18,R30
                 ; 0001 005F         for (i = 0; i < gap; i++) {
                +
0006f7 e000     +LDI R16 , LOW ( 0 )
0006f8 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20010:
                +
0006f9 1702     +CP R16 , R18
0006fa 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
0006fb f43c      	BRGE _0x20011
                 ; 0001 0060             printDebug("   ");
                +
0006fc e2e6     +LDI R30 , LOW ( 2 * _0x20000 + ( 4 ) )
0006fd e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 4 ) )
                 	__POINTW1FN _0x20000,4
0006fe 940e 166a 	CALL SUBOPT_0xB
                 ; 0001 0061 
                 ; 0001 0062         }
                +
000700 5f0f     +SUBI R16 , LOW ( - 1 )
000701 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000702 cff6      	RJMP _0x20010
                 _0x20011:
                 ; 0001 0063     }
                 ; 0001 0064     printDebug("   ");
                 _0x2000E:
                +
000703 e2e6     +LDI R30 , LOW ( 2 * _0x20000 + ( 4 ) )
000704 e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 4 ) )
                 	__POINTW1FN _0x20000,4
000705 940e 166a 	CALL SUBOPT_0xB
                 ; 0001 0065 
                 ; 0001 0066 
                 ; 0001 0067     // ascii (if printable) //
                 ; 0001 0068     ch = payload;
                +
000707 854a     +LDD R20 , Y + 10
000708 855b     +LDD R21 , Y + 10 + 1
                 	__GETWRS 20,21,10
                 ; 0001 0069     for(i = 0; i < len; i++) {
                +
000709 e000     +LDI R16 , LOW ( 0 )
00070a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20013:
00070b 85e8      	LDD  R30,Y+8
00070c 85f9      	LDD  R31,Y+8+1
00070d 170e      	CP   R16,R30
00070e 071f      	CPC  R17,R31
00070f f4a4      	BRGE _0x20014
                 ; 0001 006A         if (isprint(*ch)){
000710 01da      	MOVW R26,R20
000711 91ac      	LD   R26,X
000712 940e 1601 	CALL _isprint
000714 30e0      	CPI  R30,0
000715 f029      	BREQ _0x20015
                 ; 0001 006B             printDebug("%c", *ch);
                +
000716 e3e0     +LDI R30 , LOW ( 2 * _0x20000 + ( 14 ) )
000717 e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 14 ) )
                 	__POINTW1FN _0x20000,14
000718 940e 16f8 	CALL SUBOPT_0x23
                 ; 0001 006C 
                 ; 0001 006D         }
                 ; 0001 006E         else{
00071a c004      	RJMP _0x20016
                 _0x20015:
                 ; 0001 006F             printDebug(".");
                +
00071b e3e3     +LDI R30 , LOW ( 2 * _0x20000 + ( 17 ) )
00071c e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 17 ) )
                 	__POINTW1FN _0x20000,17
00071d 940e 166a 	CALL SUBOPT_0xB
                 ; 0001 0070 
                 ; 0001 0071         }
                 _0x20016:
                 ; 0001 0072         ch++;
                +
00071f 5f4f     +SUBI R20 , LOW ( - 1 )
000720 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0001 0073     }
                +
000721 5f0f     +SUBI R16 , LOW ( - 1 )
000722 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000723 cfe7      	RJMP _0x20013
                 _0x20014:
                 ; 0001 0074 
                 ; 0001 0075     printDebug("\r\n");
                +
000724 e3e5     +LDI R30 , LOW ( 2 * _0x20000 + ( 19 ) )
000725 e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 19 ) )
                 	__POINTW1FN _0x20000,19
000726 940e 166a 	CALL SUBOPT_0xB
                 ; 0001 0076     return;
000728 940e 1d0a 	CALL __LOADLOCR6
00072a 962c      	ADIW R28,12
00072b 9508      	RET
                 ; 0001 0077 }
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <timer.h>
                 ;#include <debug.h>
                 ;#include <int_protocol.h>
                 ;#include <initial_system.h>
                 ;
                 ;TIMER baseCounter = 0;    // -- increase continually by 1 second timer. use for timer comparison -- //
                 ;uint8_t pressedBTCounter = 0;
                 ;uint8_t _FlagBT = 0;
                 ;uint8_t _Flag05INT = 0;
                 ;uint8_t _Flag0001INT = 0;
                 ;uint8_t _BlinkLED_1Hz = 0;
                 ;
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/******************************* Software Timer Support ******************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;
                 ;/* ================================================================================= */
                 ;
                 ;/* ================================================================================= */
                 ;/* ================================================================================= */
                 ;/*************************************************************************************/
                 ;/********************************* Hardware Support **********************************/
                 ;/*************************************************************************************/
                 ;/* ================================================================================= */
                 ;// Timer 0 overflow interrupt service routine (1 ms.)
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) {
                 ; 0002 0021 interrupt [17] void timer0_ovf_isr(void) {
                 
                 	.CSEG
                 _timer0_ovf_isr:
00072c 93aa      	ST   -Y,R26
00072d 93ea      	ST   -Y,R30
00072e b7ef      	IN   R30,SREG
00072f 93ea      	ST   -Y,R30
                 ; 0002 0022 
                 ; 0002 0023     // Reinitialize Timer 0 value
                 ; 0002 0024     TCNT0 = 0xD7;
000730 ede7      	LDI  R30,LOW(215)
000731 bfe2      	OUT  0x32,R30
                 ; 0002 0025     // Place your code here
                 ; 0002 0026     if(SWITCH == TURN_ON /*&& _pired*/) {
000732 91a0 0600 	LDS  R26,_SWITCH
000734 30a1      	CPI  R26,LOW(0x1)
000735 f419      	BRNE _0x40003
                 ; 0002 0027         _Flag0001INT = 1;
000736 e0e1      	LDI  R30,LOW(1)
000737 93e0 08dc 	STS  __Flag0001INT,R30
                 ; 0002 0028     }
                 ; 0002 0029 
                 ; 0002 002A }
                 _0x40003:
000739 c03e      	RJMP _0x40015
                 ;/* ================================================================================= */
                 ;// Timer1 overflow interrupt service routine (1 sec.)
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void) {
                 ; 0002 002D interrupt [15] void timer1_ovf_isr(void) {
                 _timer1_ovf_isr:
00073a 936a      	ST   -Y,R22
00073b 937a      	ST   -Y,R23
00073c 93aa      	ST   -Y,R26
00073d 93ba      	ST   -Y,R27
00073e 93ea      	ST   -Y,R30
00073f 93fa      	ST   -Y,R31
000740 b7ef      	IN   R30,SREG
000741 93ea      	ST   -Y,R30
                 ; 0002 002E 
                 ; 0002 002F     //char i;
                 ; 0002 0030 
                 ; 0002 0031     // Reinitialize Timer1 value
                 ; 0002 0032     TCNT1H = 0x57;
000742 e5e7      	LDI  R30,LOW(87)
000743 bded      	OUT  0x2D,R30
                 ; 0002 0033     TCNT1L = 0x40;
000744 e4e0      	LDI  R30,LOW(64)
000745 bdec      	OUT  0x2C,R30
                 ; 0002 0034 
                 ; 0002 0035     baseCounter++;
000746 eda5      	LDI  R26,LOW(_baseCounter)
000747 e0b8      	LDI  R27,HIGH(_baseCounter)
000748 940e 1ca7 	CALL __GETD1P_INC
                +
00074a 5fef     +SUBI R30 , LOW ( - 1 )
00074b 4fff     +SBCI R31 , HIGH ( - 1 )
00074c 4f6f     +SBCI R22 , BYTE3 ( - 1 )
00074d 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
00074e 940e 1cb1 	CALL __PUTDP1_DEC
                 ; 0002 0036 }
000750 91e9      	LD   R30,Y+
000751 bfef      	OUT  SREG,R30
000752 91f9      	LD   R31,Y+
000753 91e9      	LD   R30,Y+
000754 91b9      	LD   R27,Y+
000755 91a9      	LD   R26,Y+
000756 9179      	LD   R23,Y+
000757 9169      	LD   R22,Y+
000758 9518      	RETI
                 ;/* ================================================================================= */
                 ;// Timer3 overflow interrupt service routine (0.5 sec.)
                 ;interrupt [TIM3_OVF] void timer3_ovf_isr(void) {
                 ; 0002 0039 interrupt [30] void timer3_ovf_isr(void) {
                 _timer3_ovf_isr:
000759 93aa      	ST   -Y,R26
00075a 93ea      	ST   -Y,R30
00075b b7ef      	IN   R30,SREG
00075c 93ea      	ST   -Y,R30
                 ; 0002 003A 
                 ; 0002 003B     // Reinitialize Timer3 value
                 ; 0002 003C     TCNT3H = 0xAB;
00075d 940e 1700 	CALL SUBOPT_0x24
                 ; 0002 003D     TCNT3L = 0xA0;
                 ; 0002 003E 
                 ; 0002 003F     /*----- Count time pressed button -----*/
                 ; 0002 0040     if(_FlagBT) {
00075f 91e0 08da 	LDS  R30,__FlagBT
000761 30e0      	CPI  R30,0
000762 f029      	BREQ _0x40004
                 ; 0002 0041         pressedBTCounter++;
000763 91e0 08d9 	LDS  R30,_pressedBTCounter
000765 5fef      	SUBI R30,-LOW(1)
000766 93e0 08d9 	STS  _pressedBTCounter,R30
                 ; 0002 0042     }
                 ; 0002 0043 
                 ; 0002 0044     /*----- 0.5 millisecond flag -----*/
                 ; 0002 0045     if(SWITCH == TURN_ON /*&& _pired*/) {
                 _0x40004:
000768 91a0 0600 	LDS  R26,_SWITCH
00076a 30a1      	CPI  R26,LOW(0x1)
00076b f419      	BRNE _0x40005
                 ; 0002 0046         _Flag05INT = 1;
00076c e0e1      	LDI  R30,LOW(1)
00076d 93e0 08db 	STS  __Flag05INT,R30
                 ; 0002 0047     }
                 ; 0002 0048 
                 ; 0002 0049     /*----- Blink Power LED 1 Hz -----*/
                 ; 0002 004A     if(_BlinkLED_1Hz) {
                 _0x40005:
00076f 91e0 08dd 	LDS  R30,__BlinkLED_1Hz
000771 30e0      	CPI  R30,0
000772 f029      	BREQ _0x40006
                 ; 0002 004B         if(LED_STAT_PIN == 1) {
000773 9b9f      	SBIS 0x13,7
000774 c002      	RJMP _0x40007
                 ; 0002 004C             LED_STAT_ON;
000775 98af      	CBI  0x15,7
                 ; 0002 004D         }else {
000776 c001      	RJMP _0x4000A
                 _0x40007:
                 ; 0002 004E             LED_STAT_OFF;
000777 9aaf      	SBI  0x15,7
                 ; 0002 004F         }
                 _0x4000A:
                 ; 0002 0050     }
                 ; 0002 0051 
                 ; 0002 0052 }
                 _0x40006:
                 _0x40015:
000778 91e9      	LD   R30,Y+
000779 bfef      	OUT  SREG,R30
00077a 91e9      	LD   R30,Y+
00077b 91a9      	LD   R26,Y+
00077c 9518      	RETI
                 ;/* ================================================================================= */
                 ;void init_timer(void) {
                 ; 0002 0054 void init_timer(void) {
                 _init_timer:
                 ; 0002 0055 
                 ; 0002 0056     // Timer/Counter 0 initialization (1 ms.)
                 ; 0002 0057     // Clock source: System Clock
                 ; 0002 0058     // Clock value: 43.200 kHz
                 ; 0002 0059     // Mode: Normal top=0xFF
                 ; 0002 005A     // OC0 output: Disconnected
                 ; 0002 005B     ASSR=0x00;
00077d e0e0      	LDI  R30,LOW(0)
00077e bfe0      	OUT  0x30,R30
                 ; 0002 005C     TCCR0=0x06;
00077f e0e6      	LDI  R30,LOW(6)
000780 bfe3      	OUT  0x33,R30
                 ; 0002 005D     TCNT0=0xD7;
000781 ede7      	LDI  R30,LOW(215)
000782 bfe2      	OUT  0x32,R30
                 ; 0002 005E     OCR0=0x00;
000783 e0e0      	LDI  R30,LOW(0)
000784 bfe1      	OUT  0x31,R30
                 ; 0002 005F 
                 ; 0002 0060     // Timer/Counter 1 initialization (1 sec.)
                 ; 0002 0061     // Clock source: System Clock
                 ; 0002 0062     // Clock value: 43.200 kHz
                 ; 0002 0063     // Mode: Normal top=0xFFFF
                 ; 0002 0064     // OC1A output: Discon.
                 ; 0002 0065     // OC1B output: Discon.
                 ; 0002 0066     // OC1C output: Discon.
                 ; 0002 0067     // Noise Canceler: Off
                 ; 0002 0068     // Input Capture on Falling Edge
                 ; 0002 0069     // Timer1 Overflow Interrupt: On
                 ; 0002 006A     // Input Capture Interrupt: Off
                 ; 0002 006B     // Compare A Match Interrupt: Off
                 ; 0002 006C     // Compare B Match Interrupt: Off
                 ; 0002 006D     // Compare C Match Interrupt: Off
                 ; 0002 006E     TCCR1A=0x00;
000785 bdef      	OUT  0x2F,R30
                 ; 0002 006F     TCCR1B=0x04;
000786 e0e4      	LDI  R30,LOW(4)
000787 bdee      	OUT  0x2E,R30
                 ; 0002 0070     TCNT1H=0x57;
000788 e5e7      	LDI  R30,LOW(87)
000789 bded      	OUT  0x2D,R30
                 ; 0002 0071     TCNT1L=0x40;
00078a e4e0      	LDI  R30,LOW(64)
00078b bdec      	OUT  0x2C,R30
                 ; 0002 0072     ICR1H=0x00;
00078c e0e0      	LDI  R30,LOW(0)
00078d bde7      	OUT  0x27,R30
                 ; 0002 0073     ICR1L=0x00;
00078e bde6      	OUT  0x26,R30
                 ; 0002 0074     OCR1AH=0x00;
00078f bdeb      	OUT  0x2B,R30
                 ; 0002 0075     OCR1AL=0x00;
000790 bdea      	OUT  0x2A,R30
                 ; 0002 0076     OCR1BH=0x00;
000791 bde9      	OUT  0x29,R30
                 ; 0002 0077     OCR1BL=0x00;
000792 bde8      	OUT  0x28,R30
                 ; 0002 0078     OCR1CH=0x00;
000793 93e0 0079 	STS  121,R30
                 ; 0002 0079     OCR1CL=0x00;
000795 93e0 0078 	STS  120,R30
                 ; 0002 007A 
                 ; 0002 007B     // Timer/Counter 2 initialization
                 ; 0002 007C     // Clock source: System Clock
                 ; 0002 007D     // Clock value: Timer2 Stopped
                 ; 0002 007E     // Mode: Normal top=0xFF
                 ; 0002 007F     // OC2 output: Disconnected
                 ; 0002 0080     TCCR2=0x00;
000797 bde5      	OUT  0x25,R30
                 ; 0002 0081     TCNT2=0x00;
000798 bde4      	OUT  0x24,R30
                 ; 0002 0082     OCR2=0x00;
000799 bde3      	OUT  0x23,R30
                 ; 0002 0083 
                 ; 0002 0084     // Timer/Counter 3 initialization (0.5 sec.)
                 ; 0002 0085     // Clock source: System Clock
                 ; 0002 0086     // Clock value: 43.200 kHz
                 ; 0002 0087     // Mode: Normal top=0xFFFF
                 ; 0002 0088     // OC3A output: Discon.
                 ; 0002 0089     // OC3B output: Discon.
                 ; 0002 008A     // OC3C output: Discon.
                 ; 0002 008B     // Noise Canceler: Off
                 ; 0002 008C     // Input Capture on Falling Edge
                 ; 0002 008D     // Timer3 Overflow Interrupt: On
                 ; 0002 008E     // Input Capture Interrupt: Off
                 ; 0002 008F     // Compare A Match Interrupt: Off
                 ; 0002 0090     // Compare B Match Interrupt: Off
                 ; 0002 0091     // Compare C Match Interrupt: Off
                 ; 0002 0092     TCCR3A=0x00;
00079a 93e0 008b 	STS  139,R30
                 ; 0002 0093     TCCR3B=0x04;
00079c e0e4      	LDI  R30,LOW(4)
00079d 93e0 008a 	STS  138,R30
                 ; 0002 0094     TCNT3H=0xAB;
00079f 940e 1700 	CALL SUBOPT_0x24
                 ; 0002 0095     TCNT3L=0xA0;
                 ; 0002 0096     ICR3H=0x00;
0007a1 e0e0      	LDI  R30,LOW(0)
0007a2 93e0 0081 	STS  129,R30
                 ; 0002 0097     ICR3L=0x00;
0007a4 93e0 0080 	STS  128,R30
                 ; 0002 0098     OCR3AH=0x00;
0007a6 93e0 0087 	STS  135,R30
                 ; 0002 0099     OCR3AL=0x00;
0007a8 93e0 0086 	STS  134,R30
                 ; 0002 009A     OCR3BH=0x00;
0007aa 93e0 0085 	STS  133,R30
                 ; 0002 009B     OCR3BL=0x00;
0007ac 93e0 0084 	STS  132,R30
                 ; 0002 009C     OCR3CH=0x00;
0007ae 93e0 0083 	STS  131,R30
                 ; 0002 009D     OCR3CL=0x00;
0007b0 93e0 0082 	STS  130,R30
                 ; 0002 009E 
                 ; 0002 009F     // Watchdog Timer initialization
                 ; 0002 00A0     // Watchdog Timer Prescaler: OSC/2048k
                 ; 0002 00A1     #pragma optsize-
                 ; 0002 00A2     WDTCR=0x1F;
0007b2 e1ef      	LDI  R30,LOW(31)
0007b3 bde1      	OUT  0x21,R30
                 ; 0002 00A3     WDTCR=0x0F;
0007b4 e0ef      	LDI  R30,LOW(15)
0007b5 bde1      	OUT  0x21,R30
                 ; 0002 00A4     #ifdef _OPTIMIZE_SIZE_
                 ; 0002 00A5     #pragma optsize+
                 ; 0002 00A6     #endif
                 ; 0002 00A7 
                 ; 0002 00A8     // Timer/Counter 0 Interrupt(s) initialization
                 ; 0002 00A9     TIMSK = 0x00;
0007b6 e0e0      	LDI  R30,LOW(0)
0007b7 bfe7      	OUT  0x37,R30
                 ; 0002 00AA 
                 ; 0002 00AB     // Timer/Counter 1 Interrupt(s) initialization
                 ; 0002 00AC     TIMSK = 0x00;
0007b8 bfe7      	OUT  0x37,R30
                 ; 0002 00AD 
                 ; 0002 00AE     // Timer/Counter 3 Interrupt(s) initialization
                 ; 0002 00AF     ETIMSK = 0x00;
0007b9 93e0 007d 	STS  125,R30
                 ; 0002 00B0 
                 ; 0002 00B1 }
0007bb 9508      	RET
                 ;/* ================================================================================= */
                 ;void enable_timerOverflow(int ch) {
                 ; 0002 00B3 void enable_timerOverflow(int ch) {
                 _enable_timerOverflow:
                 ; 0002 00B4 
                 ; 0002 00B5     /*-------------- enable timer ---------------*/
                 ; 0002 00B6     switch(ch){
0007bc 93ba      	ST   -Y,R27
0007bd 93aa      	ST   -Y,R26
                 ;	ch -> Y+0
0007be 81e8      	LD   R30,Y
0007bf 81f9      	LDD  R31,Y+1
                 ; 0002 00B7         case 0: // Timer/Counter 0 Interrupt(s) initialization
0007c0 9730      	SBIW R30,0
0007c1 f421      	BRNE _0x40010
                 ; 0002 00B8                 TIMSK |= 0x01;
0007c2 b7e7      	IN   R30,0x37
0007c3 60e1      	ORI  R30,1
0007c4 bfe7      	OUT  0x37,R30
                 ; 0002 00B9                 break;
0007c5 c015      	RJMP _0x4000F
                 ; 0002 00BA         case 1: // Timer/Counter 1 Interrupt(s) initialization
                 _0x40010:
0007c6 30e1      	CPI  R30,LOW(0x1)
0007c7 e0a0      	LDI  R26,HIGH(0x1)
0007c8 07fa      	CPC  R31,R26
0007c9 f421      	BRNE _0x40011
                 ; 0002 00BB                 TIMSK |= 0x04;
0007ca b7e7      	IN   R30,0x37
0007cb 60e4      	ORI  R30,4
0007cc bfe7      	OUT  0x37,R30
                 ; 0002 00BC                 break;
0007cd c00d      	RJMP _0x4000F
                 ; 0002 00BD         case 2: // Timer/Counter 2 Interrupt(s) initialization
                 _0x40011:
0007ce 30e2      	CPI  R30,LOW(0x2)
0007cf e0a0      	LDI  R26,HIGH(0x2)
0007d0 07fa      	CPC  R31,R26
0007d1 f049      	BREQ _0x4000F
                 ; 0002 00BE                 //TIMSK2=0x01;
                 ; 0002 00BF                 break;
                 ; 0002 00C0         case 3: // Timer/Counter 3 Interrupt(s) initialization
0007d2 30e3      	CPI  R30,LOW(0x3)
0007d3 e0a0      	LDI  R26,HIGH(0x3)
0007d4 07fa      	CPC  R31,R26
0007d5 f429      	BRNE _0x40013
                 ; 0002 00C1                 ETIMSK |= 0x04;
0007d6 91e0 007d 	LDS  R30,125
0007d8 60e4      	ORI  R30,4
0007d9 93e0 007d 	STS  125,R30
                 ; 0002 00C2                 break;
                 ; 0002 00C3         case 4: // Timer/Counter 4 Interrupt(s) initialization
                 _0x40013:
                 ; 0002 00C4                 //TIMSK4=0x01;
                 ; 0002 00C5                 break;
                 ; 0002 00C6     }
                 _0x4000F:
                 ; 0002 00C7     // Global enable interrupts
                 ; 0002 00C8     #asm("sei")
0007db 9478      	sei
                 ; 0002 00C9 }
0007dc 940c 091d 	JMP  _0x20C000F
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;
                 ;// UART 1
                 ;uint8_t rx_buffer1[RX_BUFFER_SIZE1];                                       // USART0 Receiver buffer
                 ;uint16_t rx_wr_index1, rx_rd_index1, rx_counter1;
                 ;bit rx_buffer_overflow1;                                                // This flag is set on USART0 Receiver buffer overflow
                 ;
                 ;// UART 0
                 ;flash uint8_t charHeader            = '$';
                 ;flash uint8_t charTerminate         = '#';
                 ;uint8_t _FlagPackageTerminate0      = 0;
                 ;uint8_t rxPackageIndex0;
                 ;uint8_t rxPackage0[RX_BUFFER_SIZE0];
                 ;uint8_t rxPackageIndexCount0;
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;#else
                 ;#endif
                 ;
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void) {
                 ; 0003 001B interrupt [19] void usart0_rx_isr(void) {
                 
                 	.CSEG
                 _usart0_rx_isr:
0007de 940e 1707 	CALL SUBOPT_0x25
                 ; 0003 001C 
                 ; 0003 001D     uint8_t status, data;
                 ; 0003 001E     status  = UCSR0A;
                 ;	status -> R17
                 ;	data -> R16
0007e0 b11b      	IN   R17,11
                 ; 0003 001F     data    = UDR0;
0007e1 b10c      	IN   R16,12
                 ; 0003 0020 
                 ; 0003 0021     if((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
0007e2 2fe1      	MOV  R30,R17
0007e3 71ec      	ANDI R30,LOW(0x1C)
0007e4 f529      	BRNE _0x60003
                 ; 0003 0022 
                 ; 0003 0023         putchar0(data);
0007e5 2fa0      	MOV  R26,R16
0007e6 d024      	RCALL _putchar0
                 ; 0003 0024         // Detect Package Header
                 ; 0003 0025         if(data == charHeader) {
0007e7 3204      	CPI  R16,36
0007e8 f419      	BRNE _0x60004
                 ; 0003 0026             rxPackageIndex0 = 0;
0007e9 e0e0      	LDI  R30,LOW(0)
0007ea 93e0 0912 	STS  _rxPackageIndex0,R30
                 ; 0003 0027         }
                 ; 0003 0028 
                 ; 0003 0029         rxPackage0[rxPackageIndex0++] = data;
                 _0x60004:
0007ec 91e0 0912 	LDS  R30,_rxPackageIndex0
0007ee 5fef      	SUBI R30,-LOW(1)
0007ef 93e0 0912 	STS  _rxPackageIndex0,R30
0007f1 50e1      	SUBI R30,LOW(1)
0007f2 e0f0      	LDI  R31,0
0007f3 5fe6      	SUBI R30,LOW(-_rxPackage0)
0007f4 4ff9      	SBCI R31,HIGH(-_rxPackage0)
0007f5 8300      	ST   Z,R16
                 ; 0003 002A 
                 ; 0003 002B         if(rxPackageIndex0 >= RX_BUFFER_SIZE0) {
0007f6 91a0 0912 	LDS  R26,_rxPackageIndex0
0007f8 32a0      	CPI  R26,LOW(0x20)
0007f9 f018      	BRLO _0x60005
                 ; 0003 002C             rxPackageIndex0 = 0;
0007fa e0e0      	LDI  R30,LOW(0)
0007fb 93e0 0912 	STS  _rxPackageIndex0,R30
                 ; 0003 002D         }
                 ; 0003 002E 
                 ; 0003 002F         if(data == charTerminate) {
                 _0x60005:
0007fd 3203      	CPI  R16,35
0007fe f459      	BRNE _0x60006
                 ; 0003 0030             rxPackageIndexCount0 = (rxPackageIndex0 - 1);
0007ff 91e0 0912 	LDS  R30,_rxPackageIndex0
000801 50e1      	SUBI R30,LOW(1)
000802 93e0 0913 	STS  _rxPackageIndexCount0,R30
                 ; 0003 0031             rxPackageIndex0 = 0;
000804 e0e0      	LDI  R30,LOW(0)
000805 93e0 0912 	STS  _rxPackageIndex0,R30
                 ; 0003 0032             _FlagPackageTerminate0 = 1;
000807 e0e1      	LDI  R30,LOW(1)
000808 93e0 0609 	STS  __FlagPackageTerminate0,R30
                 ; 0003 0033         }
                 ; 0003 0034     }
                 _0x60006:
                 ; 0003 0035 }
                 _0x60003:
00080a c036      	RJMP _0x6003E
                 ;/* ================================================================================= */
                 ;// Write a character to the USART0 Transmitter
                 ;#pragma used+
                 ;void putchar0(uint8_t c) {
                 ; 0003 0039 void putchar0(uint8_t c) {
                 _putchar0:
                 ; 0003 003A     while((UCSR0A & DATA_REGISTER_EMPTY) == 0);
00080b 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x60007:
00080c 9b5d      	SBIS 0xB,5
00080d cffe      	RJMP _0x60007
                 ; 0003 003B     UDR0 = c;
00080e 81e8      	LD   R30,Y
00080f b9ec      	OUT  0xC,R30
                 ; 0003 003C }
000810 c048      	RJMP _0x20C0010
                 ;#pragma used-
                 ;
                 ;interrupt [USART1_RXC] void usart1_rx_isr(void) {
                 ; 0003 003F interrupt [31] void usart1_rx_isr(void) {
                 _usart1_rx_isr:
000811 940e 1707 	CALL SUBOPT_0x25
                 ; 0003 0040 
                 ; 0003 0041     uint8_t status, data;
                 ; 0003 0042     status  = UCSR1A;
                 ;	status -> R17
                 ;	data -> R16
000813 9110 009b 	LDS  R17,155
                 ; 0003 0043     data    = UDR1;
000815 9100 009c 	LDS  R16,156
                 ; 0003 0044 
                 ; 0003 0045     if((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0) {
000817 2fe1      	MOV  R30,R17
000818 71ec      	ANDI R30,LOW(0x1C)
000819 f539      	BRNE _0x6000A
                 ; 0003 0046         rx_buffer1[rx_wr_index1++] = data;
00081a 01f6      	MOVW R30,R12
00081b 9631      	ADIW R30,1
00081c 016f      	MOVW R12,R30
00081d 9731      	SBIW R30,1
00081e 5de0      	SUBI R30,LOW(-_rx_buffer1)
00081f 4ff9      	SBCI R31,HIGH(-_rx_buffer1)
000820 8300      	ST   Z,R16
                 ; 0003 0047          //printDebug("%02X ",data);
                 ; 0003 0048         if (rx_wr_index1 == RX_BUFFER_SIZE1)
000821 e0e0      	LDI  R30,LOW(512)
000822 e0f2      	LDI  R31,HIGH(512)
000823 15ec      	CP   R30,R12
000824 05fd      	CPC  R31,R13
000825 f411      	BRNE _0x6000B
                 ; 0003 0049             rx_wr_index1 = 0;
000826 24cc      	CLR  R12
000827 24dd      	CLR  R13
                 ; 0003 004A         if (++rx_counter1 == RX_BUFFER_SIZE1) {
                 _0x6000B:
000828 e2ae      	LDI  R26,LOW(_rx_counter1)
000829 e0b6      	LDI  R27,HIGH(_rx_counter1)
00082a 940e 161d 	CALL SUBOPT_0x3
00082c 30e0      	CPI  R30,LOW(0x200)
00082d e0a2      	LDI  R26,HIGH(0x200)
00082e 07fa      	CPC  R31,R26
00082f f489      	BRNE _0x6000C
                 ; 0003 004B             printDebug("WARNING : UART0 BUFFER OVERFLOW %d\r\n", rx_counter1);
                +
000830 e3e8     +LDI R30 , LOW ( 2 * _0x60000 + ( 0 ) )
000831 e0f3     +LDI R31 , HIGH ( 2 * _0x60000 + ( 0 ) )
                 	__POINTW1FN _0x60000,0
000832 93fa      	ST   -Y,R31
000833 93ea      	ST   -Y,R30
000834 91e0 062e 	LDS  R30,_rx_counter1
000836 91f0 062f 	LDS  R31,_rx_counter1+1
000838 940e 1717 	CALL SUBOPT_0x26
                 ; 0003 004C             rx_counter1 = 0;
00083a e0e0      	LDI  R30,LOW(0)
00083b 93e0 062e 	STS  _rx_counter1,R30
00083d 93e0 062f 	STS  _rx_counter1+1,R30
                 ; 0003 004D             rx_buffer_overflow1 = 1;
00083f 9468      	SET
000840 f820      	BLD  R2,0
                 ; 0003 004E         }
                 ; 0003 004F     }
                 _0x6000C:
                 ; 0003 0050 }
                 _0x6000A:
                 _0x6003E:
000841 9109      	LD   R16,Y+
000842 9119      	LD   R17,Y+
000843 91e9      	LD   R30,Y+
000844 bfef      	OUT  SREG,R30
000845 91f9      	LD   R31,Y+
000846 91e9      	LD   R30,Y+
000847 91b9      	LD   R27,Y+
000848 91a9      	LD   R26,Y+
000849 9199      	LD   R25,Y+
00084a 9189      	LD   R24,Y+
00084b 9179      	LD   R23,Y+
00084c 9169      	LD   R22,Y+
00084d 90f9      	LD   R15,Y+
00084e 9019      	LD   R1,Y+
00084f 9009      	LD   R0,Y+
000850 9518      	RETI
                 ;
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART1 Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void) {
                 ; 0003 0057 char getchar(void) {
                 ; 0003 0058 
                 ; 0003 0059     uint8_t data;
                 ; 0003 005A 
                 ; 0003 005B     while (rx_counter1 == 0);
                 ;	data -> R17
                 ; 0003 005C     data = rx_buffer1[rx_rd_index1++];
                 ; 0003 005D     if(rx_rd_index1 == RX_BUFFER_SIZE1)
                 ; 0003 005E         rx_rd_index1 = 0;
                 ; 0003 005F     #asm("cli")
                 ; 0003 0060     --rx_counter1;
                 ; 0003 0061     #asm("sei")
                 ; 0003 0062     return data;
                 ; 0003 0063 }
                 ;
                 ;
                 ;#pragma used-
                 ;// Write a character to the USART1 Transmitter
                 ;#pragma used+
                 ;void putchar1(uint8_t c) {
                 ; 0003 0069 void putchar1(uint8_t c) {
                 _putchar1:
                 ; 0003 006A 
                 ; 0003 006B     while((UCSR1A & DATA_REGISTER_EMPTY) == 0);
000851 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x60011:
000852 91e0 009b 	LDS  R30,155
000854 72e0      	ANDI R30,LOW(0x20)
000855 f3e1      	BREQ _0x60011
                 ; 0003 006C     UDR1 = c;
000856 81e8      	LD   R30,Y
000857 93e0 009c 	STS  156,R30
                 ; 0003 006D }
                 _0x20C0010:
000859 9621      	ADIW R28,1
00085a 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;
                 ;void send_uart(uint8_t port, uint8_t *buffer) {
                 ; 0003 0071 void send_uart(uint8_t port, uint8_t *buffer) {
                 _send_uart:
                 ; 0003 0072 
                 ; 0003 0073     uint8_t i = 0;
                 ; 0003 0074 
                 ; 0003 0075     switch(port) {
00085b 93ba      	ST   -Y,R27
00085c 93aa      	ST   -Y,R26
00085d 931a      	ST   -Y,R17
                 ;	port -> Y+3
                 ;	*buffer -> Y+1
                 ;	i -> R17
00085e e010      	LDI  R17,0
00085f 81eb      	LDD  R30,Y+3
000860 e0f0      	LDI  R31,0
                 ; 0003 0076         case 0:
000861 9730      	SBIW R30,0
000862 f461      	BRNE _0x60017
                 ; 0003 0077             while(buffer[i] != 0) {
                 _0x60018:
000863 940e 171a 	CALL SUBOPT_0x27
000865 91ec      	LD   R30,X
000866 30e0      	CPI  R30,0
000867 f031      	BREQ _0x6001A
                 ; 0003 0078                 putchar0(buffer[i]);
000868 940e 171a 	CALL SUBOPT_0x27
00086a 91ac      	LD   R26,X
00086b df9f      	RCALL _putchar0
                 ; 0003 0079                 i++;
00086c 5f1f      	SUBI R17,-1
                 ; 0003 007A             }
00086d cff5      	RJMP _0x60018
                 _0x6001A:
                 ; 0003 007B             break;
00086e c00f      	RJMP _0x60016
                 ; 0003 007C         case 1:
                 _0x60017:
00086f 30e1      	CPI  R30,LOW(0x1)
000870 e0a0      	LDI  R26,HIGH(0x1)
000871 07fa      	CPC  R31,R26
000872 f459      	BRNE _0x60016
                 ; 0003 007D             while(buffer[i] != 0) {
                 _0x6001C:
000873 940e 171a 	CALL SUBOPT_0x27
000875 91ec      	LD   R30,X
000876 30e0      	CPI  R30,0
000877 f031      	BREQ _0x6001E
                 ; 0003 007E                 putchar1(buffer[i]);
000878 940e 171a 	CALL SUBOPT_0x27
00087a 91ac      	LD   R26,X
00087b dfd5      	RCALL _putchar1
                 ; 0003 007F                 i++;
00087c 5f1f      	SUBI R17,-1
                 ; 0003 0080             }
00087d cff5      	RJMP _0x6001C
                 _0x6001E:
                 ; 0003 0081             break;
                 ; 0003 0082     }
                 _0x60016:
                 ; 0003 0083 }
00087e 8118      	LDD  R17,Y+0
00087f c0cb      	RJMP _0x20C000E
                 ;
                 ;
                 ;void init_uart(uint8_t channel, uint32_t baud) {
                 ; 0003 0086 void init_uart(uint8_t channel, uint32_t baud) {
                 _init_uart:
                 ; 0003 0087 
                 ; 0003 0088     switch(channel) {
000880 940e 1cca 	CALL __PUTPARD2
                 ;	channel -> Y+4
                 ;	baud -> Y+0
000882 81ec      	LDD  R30,Y+4
000883 e0f0      	LDI  R31,0
                 ; 0003 0089     case 0:
000884 9730      	SBIW R30,0
000885 f571      	BRNE _0x60022
                 ; 0003 008A         // USART0 initialization
                 ; 0003 008B         // FOSC = 11.0592 MHz
                 ; 0003 008C         // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0003 008D         // USART0 Receiver: On
                 ; 0003 008E         // USART0 Transmitter: On
                 ; 0003 008F         // USART0 Mode: Asynchronous
                 ; 0003 0090         // USART0 Baud Rate: 9600
                 ; 0003 0091         UCSR0A=0x00;
000886 e0e0      	LDI  R30,LOW(0)
000887 b9eb      	OUT  0xB,R30
                 ; 0003 0092         UCSR0B=0x98;
000888 e9e8      	LDI  R30,LOW(152)
000889 b9ea      	OUT  0xA,R30
                 ; 0003 0093         UCSR0C=0x06;
00088a e0e6      	LDI  R30,LOW(6)
00088b 93e0 0095 	STS  149,R30
                 ; 0003 0094         UBRR0H=0x00;
00088d e0e0      	LDI  R30,LOW(0)
00088e 93e0 0090 	STS  144,R30
                 ; 0003 0095         switch (baud) {
000890 940e 1720 	CALL SUBOPT_0x28
                 ; 0003 0096         case 2400:
000892 f411      	BRNE _0x60026
                 ; 0003 0097             UBRR0L = 0x1F;
000893 e1ef      	LDI  R30,LOW(31)
000894 c01d      	RJMP _0x6003A
                 ; 0003 0098             break;
                 ; 0003 0099         case 9600:
                 _0x60026:
000895 940e 172a 	CALL SUBOPT_0x29
000897 f0c9      	BREQ _0x6003B
                 ; 0003 009A             UBRR0L = 0x47;
                 ; 0003 009B             break;
                 ; 0003 009C         case 14400:
000898 940e 1732 	CALL SUBOPT_0x2A
00089a f411      	BRNE _0x60028
                 ; 0003 009D             UBRR0L = 0x2F;
00089b e2ef      	LDI  R30,LOW(47)
00089c c015      	RJMP _0x6003A
                 ; 0003 009E             break;
                 ; 0003 009F         case 19200:
                 _0x60028:
00089d 940e 173a 	CALL SUBOPT_0x2B
00089f f411      	BRNE _0x60029
                 ; 0003 00A0             UBRR0L = 0x23;
0008a0 e2e3      	LDI  R30,LOW(35)
0008a1 c010      	RJMP _0x6003A
                 ; 0003 00A1             break;
                 ; 0003 00A2         case 38400:
                 _0x60029:
0008a2 940e 1742 	CALL SUBOPT_0x2C
0008a4 f411      	BRNE _0x6002A
                 ; 0003 00A3             UBRR0L = 0x11;
0008a5 e1e1      	LDI  R30,LOW(17)
0008a6 c00b      	RJMP _0x6003A
                 ; 0003 00A4             break;
                 ; 0003 00A5         case 57600:
                 _0x6002A:
0008a7 940e 174a 	CALL SUBOPT_0x2D
0008a9 f411      	BRNE _0x6002B
                 ; 0003 00A6             UBRR0L = 0x0B;
0008aa e0eb      	LDI  R30,LOW(11)
0008ab c006      	RJMP _0x6003A
                 ; 0003 00A7             break;
                 ; 0003 00A8         case 115200:
                 _0x6002B:
0008ac 940e 1752 	CALL SUBOPT_0x2E
0008ae f411      	BRNE _0x6002D
                 ; 0003 00A9             UBRR0L = 0x05;
0008af e0e5      	LDI  R30,LOW(5)
0008b0 c001      	RJMP _0x6003A
                 ; 0003 00AA             break;
                 ; 0003 00AB         default:
                 _0x6002D:
                 ; 0003 00AC             UBRR0L = 0x47;       // default baudrate is 9600
                 _0x6003B:
0008b1 e4e7      	LDI  R30,LOW(71)
                 _0x6003A:
0008b2 b9e9      	OUT  0x9,R30
                 ; 0003 00AD         }
                 ; 0003 00AE         break;
0008b3 c034      	RJMP _0x60021
                 ; 0003 00AF     case 1:
                 _0x60022:
0008b4 30e1      	CPI  R30,LOW(0x1)
0008b5 e0a0      	LDI  R26,HIGH(0x1)
0008b6 07fa      	CPC  R31,R26
0008b7 f581      	BRNE _0x60021
                 ; 0003 00B0         // USART1 initialization
                 ; 0003 00B1         // FOSC = 11.0592 MHz
                 ; 0003 00B2         // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0003 00B3         // USART1 Receiver: On
                 ; 0003 00B4         // USART1 Transmitter: On
                 ; 0003 00B5         // USART1 Mode: Asynchronous
                 ; 0003 00B6         // USART1 Baud Rate: 9600
                 ; 0003 00B7         UCSR1A=0x00;
0008b8 e0e0      	LDI  R30,LOW(0)
0008b9 93e0 009b 	STS  155,R30
                 ; 0003 00B8         UCSR1B=0x98;
0008bb e9e8      	LDI  R30,LOW(152)
0008bc 93e0 009a 	STS  154,R30
                 ; 0003 00B9         UCSR1C=0x06;
0008be e0e6      	LDI  R30,LOW(6)
0008bf 93e0 009d 	STS  157,R30
                 ; 0003 00BA         UBRR1H=0x00;
0008c1 e0e0      	LDI  R30,LOW(0)
0008c2 93e0 0098 	STS  152,R30
                 ; 0003 00BB         switch ( baud ) {
0008c4 940e 1720 	CALL SUBOPT_0x28
                 ; 0003 00BC         case 2400:
0008c6 f411      	BRNE _0x60032
                 ; 0003 00BD             UBRR1L = 0x1F;
0008c7 e1ef      	LDI  R30,LOW(31)
0008c8 c01d      	RJMP _0x6003C
                 ; 0003 00BE             break;
                 ; 0003 00BF         case 9600:
                 _0x60032:
0008c9 940e 172a 	CALL SUBOPT_0x29
0008cb f0c9      	BREQ _0x6003D
                 ; 0003 00C0             UBRR1L = 0x47;
                 ; 0003 00C1             break;
                 ; 0003 00C2         case 14400:
0008cc 940e 1732 	CALL SUBOPT_0x2A
0008ce f411      	BRNE _0x60034
                 ; 0003 00C3             UBRR1L = 0x2F;
0008cf e2ef      	LDI  R30,LOW(47)
0008d0 c015      	RJMP _0x6003C
                 ; 0003 00C4             break;
                 ; 0003 00C5         case 19200:
                 _0x60034:
0008d1 940e 173a 	CALL SUBOPT_0x2B
0008d3 f411      	BRNE _0x60035
                 ; 0003 00C6             UBRR1L = 0x23;
0008d4 e2e3      	LDI  R30,LOW(35)
0008d5 c010      	RJMP _0x6003C
                 ; 0003 00C7             break;
                 ; 0003 00C8         case 38400:
                 _0x60035:
0008d6 940e 1742 	CALL SUBOPT_0x2C
0008d8 f411      	BRNE _0x60036
                 ; 0003 00C9             UBRR1L = 0x11;
0008d9 e1e1      	LDI  R30,LOW(17)
0008da c00b      	RJMP _0x6003C
                 ; 0003 00CA             break;
                 ; 0003 00CB         case 57600:
                 _0x60036:
0008db 940e 174a 	CALL SUBOPT_0x2D
0008dd f411      	BRNE _0x60037
                 ; 0003 00CC             UBRR1L = 0x0B;
0008de e0eb      	LDI  R30,LOW(11)
0008df c006      	RJMP _0x6003C
                 ; 0003 00CD             break;
                 ; 0003 00CE         case 115200:
                 _0x60037:
0008e0 940e 1752 	CALL SUBOPT_0x2E
0008e2 f411      	BRNE _0x60039
                 ; 0003 00CF             UBRR1L = 0x05;
0008e3 e0e5      	LDI  R30,LOW(5)
0008e4 c001      	RJMP _0x6003C
                 ; 0003 00D0             break;
                 ; 0003 00D1         default:
                 _0x60039:
                 ; 0003 00D2             UBRR1L = 0x47;       // default baudrate is 9600
                 _0x6003D:
0008e5 e4e7      	LDI  R30,LOW(71)
                 _0x6003C:
0008e6 93e0 0099 	STS  153,R30
                 ; 0003 00D3         }
                 ; 0003 00D4         break;
                 ; 0003 00D5 
                 ; 0003 00D6     }
                 _0x60021:
                 ; 0003 00D7 
                 ; 0003 00D8 }
0008e8 9625      	ADIW R28,5
0008e9 9508      	RET
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <uart.h>
                 ;#include <xbee.h>
                 ;#include <debug.h>
                 ;#include <int_protocol.h>
                 ;#include <eeprom.h>
                 ;
                 ;
                 ;#define XBEE_RESET PORTE.2
                 ;
                 ;char EndDevice_MacAddress[8];
                 ;char Gateway_MacAddress[8];
                 ;int input[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                 ;int count_input = 0;
                 ;//int *ptr[30] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
                 ;int count_event = 0;
                 ;
                 ;uint8_t AI_COMMAND[]            = {0x7E,0x00,0x04,0x08,0x01,0x41,0x49,0x6C};
                 
                 	.DSEG
                 ;uint8_t SL_COMMAND[]            = {0x7E,0x00,0x04,0x08,0x01,0x53,0x4C,0x57};
                 ;uint8_t SH_COMMAND[]            = {0x7E,0x00,0x04,0x08,0x01,0x53,0x48,0x5B};
                 ;uint8_t EVENT[2]                = {0x00,0x00};
                 ;uint8_t STATUS_DEVICE           = 0;
                 ;int flag_state                  = 0;
                 ;int event_state                 = 3;
                 ;
                 ;
                 ;
                 ;void xbee_sendATCommand(int param){
                 ; 0004 0020 void xbee_sendATCommand(int param){
                 
                 	.CSEG
                 _xbee_sendATCommand:
                 ; 0004 0021      switch(param) {
0008ea 93ba      	ST   -Y,R27
0008eb 93aa      	ST   -Y,R26
                 ;	param -> Y+0
0008ec 81e8      	LD   R30,Y
0008ed 81f9      	LDD  R31,Y+1
                 ; 0004 0022         case 0  :
0008ee 9730      	SBIW R30,0
0008ef f459      	BRNE _0x8000A
                 ; 0004 0023             printDebug("\r\n ++++++++++ Send AI ++++++++\r\n");
                +
0008f0 e7e8     +LDI R30 , LOW ( 2 * _0x80000 + ( 0 ) )
0008f1 e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 0 ) )
                 	__POINTW1FN _0x80000,0
0008f2 940e 166a 	CALL SUBOPT_0xB
                 ; 0004 0024             print_payload(AI_COMMAND,8);
0008f4 e1e4      	LDI  R30,LOW(_AI_COMMAND)
0008f5 e0f9      	LDI  R31,HIGH(_AI_COMMAND)
0008f6 940e 175a 	CALL SUBOPT_0x2F
                 ; 0004 0025             xbee_send(AI_COMMAND,8);
0008f8 e1e4      	LDI  R30,LOW(_AI_COMMAND)
0008f9 e0f9      	LDI  R31,HIGH(_AI_COMMAND)
0008fa c01d      	RJMP _0x80048
                 ; 0004 0026 
                 ; 0004 0027         break;
                 ; 0004 0028 
                 ; 0004 0029         case 1  :
                 _0x8000A:
0008fb 30e1      	CPI  R30,LOW(0x1)
0008fc e0a0      	LDI  R26,HIGH(0x1)
0008fd 07fa      	CPC  R31,R26
0008fe f459      	BRNE _0x8000B
                 ; 0004 002A             printDebug("\r\n ++++++++++ Send SH ++++++++\r\n");
                +
0008ff e9e9     +LDI R30 , LOW ( 2 * _0x80000 + ( 33 ) )
000900 e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 33 ) )
                 	__POINTW1FN _0x80000,33
000901 940e 166a 	CALL SUBOPT_0xB
                 ; 0004 002B             print_payload(SH_COMMAND,8);
000903 e2e4      	LDI  R30,LOW(_SH_COMMAND)
000904 e0f9      	LDI  R31,HIGH(_SH_COMMAND)
000905 940e 175a 	CALL SUBOPT_0x2F
                 ; 0004 002C             xbee_send(SH_COMMAND,8);
000907 e2e4      	LDI  R30,LOW(_SH_COMMAND)
000908 e0f9      	LDI  R31,HIGH(_SH_COMMAND)
000909 c00e      	RJMP _0x80048
                 ; 0004 002D 
                 ; 0004 002E         break;
                 ; 0004 002F 
                 ; 0004 0030         case 2  :
                 _0x8000B:
00090a 30e2      	CPI  R30,LOW(0x2)
00090b e0a0      	LDI  R26,HIGH(0x2)
00090c 07fa      	CPC  R31,R26
00090d f479      	BRNE _0x80009
                 ; 0004 0031             printDebug("\r\n ++++++++++ Send SL ++++++++\r\n");
                +
00090e ebea     +LDI R30 , LOW ( 2 * _0x80000 + ( 66 ) )
00090f e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 66 ) )
                 	__POINTW1FN _0x80000,66
000910 940e 166a 	CALL SUBOPT_0xB
                 ; 0004 0032             print_payload(SL_COMMAND,8);
000912 e1ec      	LDI  R30,LOW(_SL_COMMAND)
000913 e0f9      	LDI  R31,HIGH(_SL_COMMAND)
000914 940e 175a 	CALL SUBOPT_0x2F
                 ; 0004 0033             xbee_send(SL_COMMAND,8);
000916 e1ec      	LDI  R30,LOW(_SL_COMMAND)
000917 e0f9      	LDI  R31,HIGH(_SL_COMMAND)
                 _0x80048:
000918 93fa      	ST   -Y,R31
000919 93ea      	ST   -Y,R30
00091a 940e 1760 	CALL SUBOPT_0x30
00091c d118      	RCALL _xbee_send
                 ; 0004 0034 
                 ; 0004 0035         break;
                 ; 0004 0036      }
                 _0x80009:
                 ; 0004 0037 }
                 _0x20C000F:
00091d 9622      	ADIW R28,2
00091e 9508      	RET
                 ;
                 ;int xbee_checksum(char buf[],int len) {
                 ; 0004 0039 int xbee_checksum(char buf[],int len) {
                 _xbee_checksum:
                 ; 0004 003A 
                 ; 0004 003B     int i;
                 ; 0004 003C     char sum = 0;
                 ; 0004 003D     for (i = 0; i < len; i++) {
00091f 93ba      	ST   -Y,R27
000920 93aa      	ST   -Y,R26
000921 940e 1d05 	CALL __SAVELOCR4
                 ;	buf -> Y+6
                 ;	len -> Y+4
                 ;	i -> R16,R17
                 ;	sum -> R19
000923 e030      	LDI  R19,0
                +
000924 e000     +LDI R16 , LOW ( 0 )
000925 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x8000E:
000926 81ec      	LDD  R30,Y+4
000927 81fd      	LDD  R31,Y+4+1
000928 170e      	CP   R16,R30
000929 071f      	CPC  R17,R31
00092a f454      	BRGE _0x8000F
                 ; 0004 003E         sum += buf[i];
00092b 01f8      	MOVW R30,R16
00092c 81ae      	LDD  R26,Y+6
00092d 81bf      	LDD  R27,Y+6+1
00092e 0fae      	ADD  R26,R30
00092f 1fbf      	ADC  R27,R31
000930 91ec      	LD   R30,X
000931 0f3e      	ADD  R19,R30
                 ; 0004 003F     }
                +
000932 5f0f     +SUBI R16 , LOW ( - 1 )
000933 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000934 cff1      	RJMP _0x8000E
                 _0x8000F:
                 ; 0004 0040     return (0xFF - (sum & 0xFF));
000935 2fe3      	MOV  R30,R19
000936 e0f0      	LDI  R31,0
000937 70f0      	ANDI R31,HIGH(0xFF)
000938 efaf      	LDI  R26,LOW(255)
000939 e0b0      	LDI  R27,HIGH(255)
00093a 940e 1cd5 	CALL __SWAPW12
00093c 1bea      	SUB  R30,R26
00093d 0bfb      	SBC  R31,R27
00093e 940e 1d0c 	CALL __LOADLOCR4
000940 940c 0bb8 	JMP  _0x20C000B
                 ; 0004 0041 }
                 ;
                 ;
                 ;void xbee_sendAPI(uint8_t buff[],uint16_t len){
                 ; 0004 0044 void xbee_sendAPI(uint8_t buff[],uint16_t len){
                 _xbee_sendAPI:
                 ; 0004 0045     xbee_send(buff,len);
000942 93ba      	ST   -Y,R27
000943 93aa      	ST   -Y,R26
                 ;	buff -> Y+2
                 ;	len -> Y+0
000944 81ea      	LDD  R30,Y+2
000945 81fb      	LDD  R31,Y+2+1
000946 93fa      	ST   -Y,R31
000947 93ea      	ST   -Y,R30
000948 81aa      	LDD  R26,Y+2
000949 81bb      	LDD  R27,Y+2+1
00094a d0ea      	RCALL _xbee_send
                 ; 0004 0046 }
                 _0x20C000E:
00094b 9624      	ADIW R28,4
00094c 9508      	RET
                 ;
                 ;
                 ;void xbee_receivePacket( uint8_t recvPacket[],uint16_t size){
                 ; 0004 0049 void xbee_receivePacket( uint8_t recvPacket[],uint16_t size){
                 _xbee_receivePacket:
                 ; 0004 004A 
                 ; 0004 004B     int start = 3;
                 ; 0004 004C     if(size <= 5)
00094d 93ba      	ST   -Y,R27
00094e 93aa      	ST   -Y,R26
00094f 931a      	ST   -Y,R17
000950 930a      	ST   -Y,R16
                 ;	recvPacket -> Y+4
                 ;	size -> Y+2
                 ;	start -> R16,R17
                +
000951 e003     +LDI R16 , LOW ( 3 )
000952 e010     +LDI R17 , HIGH ( 3 )
                 	__GETWRN 16,17,3
000953 81aa      	LDD  R26,Y+2
000954 81bb      	LDD  R27,Y+2+1
000955 9716      	SBIW R26,6
000956 f408      	BRSH _0x80010
                 ; 0004 004D         return;
000957 c0ee      	RJMP _0x20C000D
                 ; 0004 004E     printDebug("\r\n ++++++++++ Recreive Data ++++++++\r\n");
                 _0x80010:
                +
000958 edeb     +LDI R30 , LOW ( 2 * _0x80000 + ( 99 ) )
000959 e0f3     +LDI R31 , HIGH ( 2 * _0x80000 + ( 99 ) )
                 	__POINTW1FN _0x80000,99
00095a 940e 166a 	CALL SUBOPT_0xB
                 ; 0004 004F     print_payload(recvPacket, size);
00095c 81ec      	LDD  R30,Y+4
00095d 81fd      	LDD  R31,Y+4+1
00095e 93fa      	ST   -Y,R31
00095f 93ea      	ST   -Y,R30
000960 81ac      	LDD  R26,Y+4
000961 81bd      	LDD  R27,Y+4+1
000962 940e 0675 	CALL _print_payload
                 ; 0004 0050     xbee_processPacket(&recvPacket[start]);
000964 940e 1763 	CALL SUBOPT_0x31
000966 d001      	RCALL _xbee_processPacket
                 ; 0004 0051 
                 ; 0004 0052 }
000967 c0de      	RJMP _0x20C000D
                 ;
                 ;void xbee_processPacket(char *buf) {
                 ; 0004 0054 void xbee_processPacket(char *buf) {
                 _xbee_processPacket:
                 ; 0004 0055       uint8_t frameType;
                 ; 0004 0056       frameType = buf[0];
000968 93ba      	ST   -Y,R27
000969 93aa      	ST   -Y,R26
00096a 931a      	ST   -Y,R17
                 ;	*buf -> Y+1
                 ;	frameType -> R17
00096b 81a9      	LDD  R26,Y+1
00096c 81ba      	LDD  R27,Y+1+1
00096d 911c      	LD   R17,X
                 ; 0004 0057       switch(frameType) {
00096e 2fe1      	MOV  R30,R17
00096f e0f0      	LDI  R31,0
                 ; 0004 0058 
                 ; 0004 0059         /*=============== Recive AI ===============*/
                 ; 0004 005A         case 0x88  :
000970 38e8      	CPI  R30,LOW(0x88)
000971 e0a0      	LDI  R26,HIGH(0x88)
000972 07fa      	CPC  R31,R26
000973 f591      	BRNE _0x80014
                 ; 0004 005B             if(buf[2] == 0x41 && buf[3] == 0x49){
000974 940e 1769 	CALL SUBOPT_0x32
000976 34a1      	CPI  R26,LOW(0x41)
000977 f421      	BRNE _0x80016
000978 940e 176e 	CALL SUBOPT_0x33
00097a 34a9      	CPI  R26,LOW(0x49)
00097b f009      	BREQ _0x80017
                 _0x80016:
00097c c003      	RJMP _0x80015
                 _0x80017:
                 ; 0004 005C                 flag_state = 1;
00097d e0e1      	LDI  R30,LOW(1)
00097e e0f0      	LDI  R31,HIGH(1)
00097f c021      	RJMP _0x80049
                 ; 0004 005D             }
                 ; 0004 005E 
                 ; 0004 005F         /*=============== Recive SH ===============*/
                 ; 0004 0060 
                 ; 0004 0061             else if (buf[2] == 0x53 && buf[3] == 0x48){
                 _0x80015:
000980 940e 1769 	CALL SUBOPT_0x32
000982 35a3      	CPI  R26,LOW(0x53)
000983 f421      	BRNE _0x8001A
000984 940e 176e 	CALL SUBOPT_0x33
000986 34a8      	CPI  R26,LOW(0x48)
000987 f009      	BREQ _0x8001B
                 _0x8001A:
000988 c007      	RJMP _0x80019
                 _0x8001B:
                 ; 0004 0062                 memcpy(EndDevice_MacAddress,&buf[5],4);
000989 940e 1773 	CALL SUBOPT_0x34
00098b 940e 1778 	CALL SUBOPT_0x35
                 ; 0004 0063                 flag_state = 2;
00098d e0e2      	LDI  R30,LOW(2)
00098e e0f0      	LDI  R31,HIGH(2)
00098f c011      	RJMP _0x80049
                 ; 0004 0064             }
                 ; 0004 0065 
                 ; 0004 0066         /*=============== Recive SL ===============*/
                 ; 0004 0067 
                 ; 0004 0068             else if( buf[2] == 0x53 && buf[3] == 0x4C){
                 _0x80019:
000990 940e 1769 	CALL SUBOPT_0x32
000992 35a3      	CPI  R26,LOW(0x53)
000993 f421      	BRNE _0x8001E
000994 940e 176e 	CALL SUBOPT_0x33
000996 34ac      	CPI  R26,LOW(0x4C)
000997 f009      	BREQ _0x8001F
                 _0x8001E:
000998 c00c      	RJMP _0x8001D
                 _0x8001F:
                 ; 0004 0069                 memcpy(&EndDevice_MacAddress[4],&buf[5],4);
                +
000999 e8e6     +LDI R30 , LOW ( _EndDevice_MacAddress + ( 4 ) )
00099a e0f8     +LDI R31 , HIGH ( _EndDevice_MacAddress + ( 4 ) )
                 	__POINTW1MN _EndDevice_MacAddress,4
00099b 93fa      	ST   -Y,R31
00099c 93ea      	ST   -Y,R30
00099d 940e 1778 	CALL SUBOPT_0x35
                 ; 0004 006A                 flag_state = 3;
00099f e0e3      	LDI  R30,LOW(3)
0009a0 e0f0      	LDI  R31,HIGH(3)
                 _0x80049:
0009a1 93e0 062a 	STS  _flag_state,R30
0009a3 93f0 062b 	STS  _flag_state+1,R31
                 ; 0004 006B             }
                 ; 0004 006C 
                 ; 0004 006D         break;
                 _0x8001D:
0009a5 c06e      	RJMP _0x80013
                 ; 0004 006E 
                 ; 0004 006F         /*=============== Recive ACK ===============*/
                 ; 0004 0070         case 0x90  :
                 _0x80014:
0009a6 39e0      	CPI  R30,LOW(0x90)
0009a7 e0a0      	LDI  R26,HIGH(0x90)
0009a8 07fa      	CPC  R31,R26
0009a9 f011      	BREQ PC+3
0009aa 940c 0a14 	JMP _0x80013
                 ; 0004 0071 
                 ; 0004 0072         if(buf[32] == 0xA2){
0009ac 940e 1781 	CALL SUBOPT_0x36
0009ae 3aa2      	CPI  R26,LOW(0xA2)
0009af f459      	BRNE _0x80021
                 ; 0004 0073             memcpy(Gateway_MacAddress,&buf[1],8);
0009b0 940e 1786 	CALL SUBOPT_0x37
0009b2 940e 1790 	CALL SUBOPT_0x38
                 ; 0004 0074             input[count_input] = 2;
0009b4 0fae      	ADD  R26,R30
0009b5 1fbf      	ADC  R27,R31
0009b6 e0e2      	LDI  R30,LOW(2)
0009b7 e0f0      	LDI  R31,HIGH(2)
0009b8 93ed      	ST   X+,R30
0009b9 93fc      	ST   X,R31
                 ; 0004 0075         }
                 ; 0004 0076         else if(buf[32] == 0xA3){
0009ba c059      	RJMP _0x80022
                 _0x80021:
0009bb 940e 1781 	CALL SUBOPT_0x36
0009bd 3aa3      	CPI  R26,LOW(0xA3)
0009be f449      	BRNE _0x80023
                 ; 0004 0077             memcpy(Gateway_MacAddress,&buf[1],8);
0009bf 940e 1786 	CALL SUBOPT_0x37
0009c1 940e 1790 	CALL SUBOPT_0x38
                 ; 0004 0078             input[count_input] = 3;
0009c3 0fae      	ADD  R26,R30
0009c4 1fbf      	ADC  R27,R31
0009c5 e0e3      	LDI  R30,LOW(3)
0009c6 e0f0      	LDI  R31,HIGH(3)
0009c7 c046      	RJMP _0x8004A
                 ; 0004 0079             count_input++;
                 ; 0004 007A         }
                 ; 0004 007B         else if(buf[32] == 0xA5){
                 _0x80023:
0009c8 940e 1781 	CALL SUBOPT_0x36
0009ca 3aa5      	CPI  R26,LOW(0xA5)
0009cb f4f9      	BRNE _0x80025
                 ; 0004 007C             memcpy(Gateway_MacAddress,&buf[1],8);
0009cc 940e 1786 	CALL SUBOPT_0x37
0009ce 940e 1421 	CALL _memcpy
                 ; 0004 007D             if(buf[34] == 0x01)
0009d0 81a9      	LDD  R26,Y+1
0009d1 81ba      	LDD  R27,Y+1+1
0009d2 9692      	ADIW R26,34
0009d3 91ac      	LD   R26,X
0009d4 30a1      	CPI  R26,LOW(0x1)
0009d5 f439      	BRNE _0x80026
                 ; 0004 007E                 input[count_input] = 511;
0009d6 940e 1794 	CALL SUBOPT_0x39
0009d8 0fae      	ADD  R26,R30
0009d9 1fbf      	ADC  R27,R31
0009da efef      	LDI  R30,LOW(511)
0009db e0f1      	LDI  R31,HIGH(511)
0009dc c00b      	RJMP _0x8004B
                 ; 0004 007F             else if(buf[34] == 0x00)
                 _0x80026:
0009dd 81e9      	LDD  R30,Y+1
0009de 81fa      	LDD  R31,Y+1+1
0009df a1e2      	LDD  R30,Z+34
0009e0 30e0      	CPI  R30,0
0009e1 f441      	BRNE _0x80028
                 ; 0004 0080                 input[count_input] = 510;
0009e2 940e 1794 	CALL SUBOPT_0x39
0009e4 0fae      	ADD  R26,R30
0009e5 1fbf      	ADC  R27,R31
0009e6 efee      	LDI  R30,LOW(510)
0009e7 e0f1      	LDI  R31,HIGH(510)
                 _0x8004B:
0009e8 93ed      	ST   X+,R30
0009e9 93fc      	ST   X,R31
                 ; 0004 0081             count_input++;
                 _0x80028:
0009ea c025      	RJMP _0x8004C
                 ; 0004 0082         }
                 ; 0004 0083         else if(buf[32] == 0xA6){
                 _0x80025:
0009eb 940e 1781 	CALL SUBOPT_0x36
0009ed 3aa6      	CPI  R26,LOW(0xA6)
0009ee f499      	BRNE _0x8002A
                 ; 0004 0084             EVENT[0] = buf[33];
0009ef 81e9      	LDD  R30,Y+1
0009f0 81fa      	LDD  R31,Y+1+1
0009f1 a1e1      	LDD  R30,Z+33
0009f2 93e0 092c 	STS  _EVENT,R30
                 ; 0004 0085             EVENT[1] = buf[34];
0009f4 81e9      	LDD  R30,Y+1
0009f5 81fa      	LDD  R31,Y+1+1
0009f6 a1e2      	LDD  R30,Z+34
                +
0009f7 93e0 092d+STS _EVENT + ( 1 ) , R30
                 	__PUTB1MN _EVENT,1
                 ; 0004 0086             memcpy(Gateway_MacAddress,&buf[1],8);
0009f9 940e 1786 	CALL SUBOPT_0x37
0009fb 940e 1790 	CALL SUBOPT_0x38
                 ; 0004 0087             input[count_input] = 6;
0009fd 0fae      	ADD  R26,R30
0009fe 1fbf      	ADC  R27,R31
0009ff e0e6      	LDI  R30,LOW(6)
000a00 e0f0      	LDI  R31,HIGH(6)
000a01 c00c      	RJMP _0x8004A
                 ; 0004 0088             count_input++;
                 ; 0004 0089         }
                 ; 0004 008A         else if(buf[32] == 0xA8){
                 _0x8002A:
000a02 940e 1781 	CALL SUBOPT_0x36
000a04 3aa8      	CPI  R26,LOW(0xA8)
000a05 f471      	BRNE _0x8002C
                 ; 0004 008B             memcpy(Gateway_MacAddress,&buf[1],8);
000a06 940e 1786 	CALL SUBOPT_0x37
000a08 940e 1790 	CALL SUBOPT_0x38
                 ; 0004 008C             input[count_input] = 8;
000a0a 0fae      	ADD  R26,R30
000a0b 1fbf      	ADC  R27,R31
000a0c e0e8      	LDI  R30,LOW(8)
000a0d e0f0      	LDI  R31,HIGH(8)
                 _0x8004A:
000a0e 93ed      	ST   X+,R30
000a0f 93fc      	ST   X,R31
                 ; 0004 008D             count_input++;
                 _0x8004C:
000a10 eda1      	LDI  R26,LOW(_count_input)
000a11 e0b8      	LDI  R27,HIGH(_count_input)
000a12 940e 161d 	CALL SUBOPT_0x3
                 ; 0004 008E         }
                 ; 0004 008F 
                 ; 0004 0090         break;
                 _0x8002C:
                 _0x80022:
                 ; 0004 0091       }
                 _0x80013:
                 ; 0004 0092       if(input[count_input-1] != 0) do_something(input[count_input]);
000a14 940e 1623 	CALL SUBOPT_0x4
000a16 9731      	SBIW R30,1
000a17 940e 160f 	CALL SUBOPT_0x1
000a19 0fae      	ADD  R26,R30
000a1a 1fbf      	ADC  R27,R31
000a1b 940e 1c9d 	CALL __GETW1P
000a1d 9730      	SBIW R30,0
000a1e f041      	BREQ _0x8002D
000a1f 940e 1794 	CALL SUBOPT_0x39
000a21 0fae      	ADD  R26,R30
000a22 1fbf      	ADC  R27,R31
000a23 940e 1c9d 	CALL __GETW1P
000a25 01df      	MOVW R26,R30
000a26 d067      	RCALL _do_something
                 ; 0004 0093       if(count_input == 30)  count_input = 0;
                 _0x8002D:
000a27 91a0 08d1 	LDS  R26,_count_input
000a29 91b0 08d2 	LDS  R27,_count_input+1
000a2b 975e      	SBIW R26,30
000a2c f429      	BRNE _0x8002E
000a2d e0e0      	LDI  R30,LOW(0)
000a2e 93e0 08d1 	STS  _count_input,R30
000a30 93e0 08d2 	STS  _count_input+1,R30
                 ; 0004 0094 }
                 _0x8002E:
000a32 8118      	LDD  R17,Y+0
000a33 940c 0e74 	JMP  _0x20C000A
                 ;
                 ;uint16_t xbee_send(uint8_t buff[],uint16_t len){
                 ; 0004 0096 uint16_t xbee_send(uint8_t buff[],uint16_t len){
                 _xbee_send:
                 ; 0004 0097     uint16_t i;
                 ; 0004 0098     for(i = 0; i < len; i++) {
000a35 93ba      	ST   -Y,R27
000a36 93aa      	ST   -Y,R26
000a37 940e 160a 	CALL SUBOPT_0x0
                 ;	buff -> Y+4
                 ;	len -> Y+2
                 ;	i -> R16,R17
                 _0x80030:
000a39 81ea      	LDD  R30,Y+2
000a3a 81fb      	LDD  R31,Y+2+1
000a3b 170e      	CP   R16,R30
000a3c 071f      	CPC  R17,R31
000a3d f438      	BRSH _0x80031
                 ; 0004 0099         putchar1(buff[i]);
000a3e 940e 1763 	CALL SUBOPT_0x31
000a40 91ac      	LD   R26,X
000a41 de0f      	RCALL _putchar1
                 ; 0004 009A     }
                +
000a42 5f0f     +SUBI R16 , LOW ( - 1 )
000a43 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000a44 cff4      	RJMP _0x80030
                 _0x80031:
                 ; 0004 009B     return i;
000a45 01f8      	MOVW R30,R16
                 _0x20C000D:
000a46 8119      	LDD  R17,Y+1
000a47 8108      	LDD  R16,Y+0
000a48 9626      	ADIW R28,6
000a49 9508      	RET
                 ; 0004 009C }
                 ;
                 ;void xbee_read() {
                 ; 0004 009E void xbee_read() {
                 _xbee_read:
                 ; 0004 009F 
                 ; 0004 00A0     uint8_t readbuf[256];
                 ; 0004 00A1     uint8_t data;
                 ; 0004 00A2     uint16_t len = 0;
                 ; 0004 00A3     int i = 0;
                 ; 0004 00A4     delay_ms(100);
000a4a 50d1      	SUBI R29,1
000a4b 940e 1d03 	CALL __SAVELOCR6
                 ;	readbuf -> Y+6
                 ;	data -> R17
                 ;	len -> R18,R19
                 ;	i -> R20,R21
                +
000a4d e020     +LDI R18 , LOW ( 0 )
000a4e e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000a4f e040     +LDI R20 , LOW ( 0 )
000a50 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000a51 940e 16a4 	CALL SUBOPT_0x13
                 ; 0004 00A5 
                 ; 0004 00A6     while (rx_counter1>0){
                 _0x80032:
000a53 91a0 062e 	LDS  R26,_rx_counter1
000a55 91b0 062f 	LDS  R27,_rx_counter1+1
000a57 940e 1cf4 	CALL __CPW02
000a59 f548      	BRSH _0x80034
                 ; 0004 00A7         data=rx_buffer1[rx_rd_index1++];
000a5a e2ac      	LDI  R26,LOW(_rx_rd_index1)
000a5b e0b6      	LDI  R27,HIGH(_rx_rd_index1)
000a5c 940e 161d 	CALL SUBOPT_0x3
000a5e 9731      	SBIW R30,1
000a5f 5de0      	SUBI R30,LOW(-_rx_buffer1)
000a60 4ff9      	SBCI R31,HIGH(-_rx_buffer1)
000a61 8110      	LD   R17,Z
                 ; 0004 00A8         readbuf[i++] = data;
000a62 01fa      	MOVW R30,R20
                +
000a63 5f4f     +SUBI R20 , LOW ( - 1 )
000a64 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000a65 01de      	MOVW R26,R28
000a66 9616      	ADIW R26,6
000a67 0fea      	ADD  R30,R26
000a68 1ffb      	ADC  R31,R27
000a69 8310      	ST   Z,R17
                 ; 0004 00A9         len++;
                +
000a6a 5f2f     +SUBI R18 , LOW ( - 1 )
000a6b 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0004 00AA         #if RX_BUFFER_SIZE1 != 256
                 ; 0004 00AB         if (rx_rd_index1 == RX_BUFFER_SIZE1) rx_rd_index1=0;
000a6c 91a0 062c 	LDS  R26,_rx_rd_index1
000a6e 91b0 062d 	LDS  R27,_rx_rd_index1+1
000a70 30a0      	CPI  R26,LOW(0x200)
000a71 e0e2      	LDI  R30,HIGH(0x200)
000a72 07be      	CPC  R27,R30
000a73 f429      	BRNE _0x80035
000a74 e0e0      	LDI  R30,LOW(0)
000a75 93e0 062c 	STS  _rx_rd_index1,R30
000a77 93e0 062d 	STS  _rx_rd_index1+1,R30
                 ; 0004 00AC         #endif
                 ; 0004 00AD         #asm("cli")
                 _0x80035:
000a79 94f8      	cli
                 ; 0004 00AE         --rx_counter1;
000a7a e2ae      	LDI  R26,LOW(_rx_counter1)
000a7b e0b6      	LDI  R27,HIGH(_rx_counter1)
000a7c 91ed      	LD   R30,X+
000a7d 91fd      	LD   R31,X+
000a7e 9731      	SBIW R30,1
000a7f 93fe      	ST   -X,R31
000a80 93ee      	ST   -X,R30
                 ; 0004 00AF         #asm("sei")
000a81 9478      	sei
                 ; 0004 00B0     }
000a82 cfd0      	RJMP _0x80032
                 _0x80034:
                 ; 0004 00B1 
                 ; 0004 00B2     xbee_receivePacket(readbuf, len);
000a83 01fe      	MOVW R30,R28
000a84 9636      	ADIW R30,6
000a85 93fa      	ST   -Y,R31
000a86 93ea      	ST   -Y,R30
000a87 01d9      	MOVW R26,R18
000a88 dec4      	RCALL _xbee_receivePacket
                 ; 0004 00B3 }
000a89 940e 1d0a 	CALL __LOADLOCR6
000a8b 9626      	ADIW R28,6
000a8c 5fdf      	SUBI R29,-1
000a8d 9508      	RET
                 ;
                 ;void do_something(int _event){
                 ; 0004 00B5 void do_something(int _event){
                 _do_something:
                 ; 0004 00B6 
                 ; 0004 00B7             if(_event == 2){
000a8e 93ba      	ST   -Y,R27
000a8f 93aa      	ST   -Y,R26
                 ;	_event -> Y+0
000a90 81a8      	LD   R26,Y
000a91 81b9      	LDD  R27,Y+1
000a92 9712      	SBIW R26,2
000a93 f429      	BRNE _0x80036
                 ; 0004 00B8                 flag_state = 4;
000a94 940e 16ca 	CALL SUBOPT_0x1B
                 ; 0004 00B9                 printDebug("\r\n-------- JOINT SUCCESS --------\r\n");
                +
000a96 e0e2     +LDI R30 , LOW ( 2 * _0x80000 + ( 138 ) )
000a97 e0f4     +LDI R31 , HIGH ( 2 * _0x80000 + ( 138 ) )
                 	__POINTW1FN _0x80000,138
000a98 c065      	RJMP _0x8004D
                 ; 0004 00BA             }
                 ; 0004 00BB 
                 ; 0004 00BC         /*=============== Recive ACK ===============*/
                 ; 0004 00BD             else if(_event == 3){
                 _0x80036:
000a99 81a8      	LD   R26,Y
000a9a 81b9      	LDD  R27,Y+1
000a9b 9713      	SBIW R26,3
000a9c f439      	BRNE _0x80038
                 ; 0004 00BE                 printDebug("\r\n-------- RECIVE PING --------\r\n");
                +
000a9d e2e6     +LDI R30 , LOW ( 2 * _0x80000 + ( 174 ) )
000a9e e0f4     +LDI R31 , HIGH ( 2 * _0x80000 + ( 174 ) )
                 	__POINTW1FN _0x80000,174
000a9f 940e 166a 	CALL SUBOPT_0xB
                 ; 0004 00BF                 send_ping();
000aa1 940e 0c32 	CALL _send_ping
                 ; 0004 00C0             }
                 ; 0004 00C1 
                 ; 0004 00C2         /*=============== Recive EVENT ===============*/
                 ; 0004 00C3             else if(_event == 510 || _event == 511){
000aa3 c060      	RJMP _0x80039
                 _0x80038:
000aa4 81a8      	LD   R26,Y
000aa5 81b9      	LDD  R27,Y+1
000aa6 3fae      	CPI  R26,LOW(0x1FE)
000aa7 e0e1      	LDI  R30,HIGH(0x1FE)
000aa8 07be      	CPC  R27,R30
000aa9 f021      	BREQ _0x8003B
000aaa 3faf      	CPI  R26,LOW(0x1FF)
000aab e0e1      	LDI  R30,HIGH(0x1FF)
000aac 07be      	CPC  R27,R30
000aad f5f1      	BRNE _0x8003A
                 _0x8003B:
                 ; 0004 00C4             printDebug("\r\n ++++++++++ _event == 510 || _event == 511 ++++++++\r\n");
                +
000aae e4e8     +LDI R30 , LOW ( 2 * _0x80000 + ( 208 ) )
000aaf e0f4     +LDI R31 , HIGH ( 2 * _0x80000 + ( 208 ) )
                 	__POINTW1FN _0x80000,208
000ab0 940e 166a 	CALL SUBOPT_0xB
                 ; 0004 00C5                 if(_event == 511){
000ab2 81a8      	LD   R26,Y
000ab3 81b9      	LDD  R27,Y+1
000ab4 3faf      	CPI  R26,LOW(0x1FF)
000ab5 e0e1      	LDI  R30,HIGH(0x1FF)
000ab6 07be      	CPC  R27,R30
000ab7 f4a1      	BRNE _0x8003D
                 ; 0004 00C6                     EVENT[1] = 1;
000ab8 e0e1      	LDI  R30,LOW(1)
                +
000ab9 93e0 092d+STS _EVENT + ( 1 ) , R30
                 	__PUTB1MN _EVENT,1
                 ; 0004 00C7                     //flag_state = 5;
                 ; 0004 00C8                     flag_state = 4;
000abb 940e 16ca 	CALL SUBOPT_0x1B
                 ; 0004 00C9                     STATUS_DEVICE = 1;
000abd e0e1      	LDI  R30,LOW(1)
000abe 940e 16c7 	CALL SUBOPT_0x1A
                 ; 0004 00CA                     EEPROM_write(Eaddress,STATUS_DEVICE);
000ac0 940e 16af 	CALL SUBOPT_0x15
                 ; 0004 00CB                     LED_STAT_ON;
000ac2 98af      	CBI  0x15,7
                 ; 0004 00CC                     POWER_RELAY_ON;
000ac3 91e0 0065 	LDS  R30,101
000ac5 60e4      	ORI  R30,4
000ac6 93e0 0065 	STS  101,R30
                 ; 0004 00CD                     send_event(1,1);
000ac8 e0e1      	LDI  R30,LOW(1)
000ac9 93ea      	ST   -Y,R30
000aca e0a1      	LDI  R26,LOW(1)
000acb c015      	RJMP _0x8004E
                 ; 0004 00CE                 }else if(_event == 510){
                 _0x8003D:
000acc 81a8      	LD   R26,Y
000acd 81b9      	LDD  R27,Y+1
000ace 3fae      	CPI  R26,LOW(0x1FE)
000acf e0e1      	LDI  R30,HIGH(0x1FE)
000ad0 07be      	CPC  R27,R30
000ad1 f489      	BRNE _0x80041
                 ; 0004 00CF                     EVENT[1] = 0;
000ad2 e0e0      	LDI  R30,LOW(0)
                +
000ad3 93e0 092d+STS _EVENT + ( 1 ) , R30
                 	__PUTB1MN _EVENT,1
                 ; 0004 00D0                     //flag_state = 4;
                 ; 0004 00D1                     flag_state = 3;
000ad5 940e 16d9 	CALL SUBOPT_0x1D
                 ; 0004 00D2                     STATUS_DEVICE = 0;
000ad7 e0e0      	LDI  R30,LOW(0)
000ad8 940e 16c7 	CALL SUBOPT_0x1A
                 ; 0004 00D3                     EEPROM_write(Eaddress,STATUS_DEVICE);
000ada 940e 16af 	CALL SUBOPT_0x15
                 ; 0004 00D4                     LED_STAT_OFF;
000adc 940e 1796 	CALL SUBOPT_0x3A
                 ; 0004 00D5                     POWER_RELAY_OFF;
                 ; 0004 00D6                     send_event(1,0);
000ade e0e1      	LDI  R30,LOW(1)
000adf 93ea      	ST   -Y,R30
000ae0 e0a0      	LDI  R26,LOW(0)
                 _0x8004E:
000ae1 940e 0c13 	CALL _send_event
                 ; 0004 00D7                 }
                 ; 0004 00D8                 recive_event(1,EVENT[1]);
                 _0x80041:
000ae3 e0e1      	LDI  R30,LOW(1)
000ae4 93ea      	ST   -Y,R30
                +
000ae5 91a0 092d+LDS R26 , _EVENT + ( 1 )
                 	__GETB2MN _EVENT,1
000ae7 940e 0c60 	CALL _recive_event
                 ; 0004 00D9                 printDebug("\r\n-------- RECIVE EVENT --------\r\n");
                +
000ae9 e8e0     +LDI R30 , LOW ( 2 * _0x80000 + ( 264 ) )
000aea e0f4     +LDI R31 , HIGH ( 2 * _0x80000 + ( 264 ) )
                 	__POINTW1FN _0x80000,264
000aeb c012      	RJMP _0x8004D
                 ; 0004 00DA             }
                 ; 0004 00DB 
                 ; 0004 00DC             /*=============== Send EVENT Success ===============*/
                 ; 0004 00DD             else if(_event == 6){
                 _0x8003A:
000aec 81a8      	LD   R26,Y
000aed 81b9      	LDD  R27,Y+1
000aee 9716      	SBIW R26,6
000aef f441      	BRNE _0x80045
                 ; 0004 00DE                 event_state = 0;
000af0 e0e0      	LDI  R30,LOW(0)
000af1 93e0 0893 	STS  _event_state,R30
000af3 93e0 0894 	STS  _event_state+1,R30
                 ; 0004 00DF                 printDebug("\r\n-------- SEND EVENT SUCCESS --------\r\n");
                +
000af5 eae3     +LDI R30 , LOW ( 2 * _0x80000 + ( 299 ) )
000af6 e0f4     +LDI R31 , HIGH ( 2 * _0x80000 + ( 299 ) )
                 	__POINTW1FN _0x80000,299
000af7 c006      	RJMP _0x8004D
                 ; 0004 00E0             }
                 ; 0004 00E1 
                 ; 0004 00E2             /*=============== Send REPPORT Success ===============*/
                 ; 0004 00E3             else if(_event == 8){
                 _0x80045:
000af8 81a8      	LD   R26,Y
000af9 81b9      	LDD  R27,Y+1
000afa 9718      	SBIW R26,8
000afb f441      	BRNE _0x80047
                 ; 0004 00E4                 printDebug("\r\n-------- SEND REPORT SUCCESS --------\r\n");
                +
000afc ecec     +LDI R30 , LOW ( 2 * _0x80000 + ( 340 ) )
000afd e0f4     +LDI R31 , HIGH ( 2 * _0x80000 + ( 340 ) )
                 	__POINTW1FN _0x80000,340
                 _0x8004D:
000afe 93fa      	ST   -Y,R31
000aff 93ea      	ST   -Y,R30
000b00 e080      	LDI  R24,0
000b01 940e 0650 	CALL _printDebug
000b03 9622      	ADIW R28,2
                 ; 0004 00E5             }
                 ; 0004 00E6 
                 ; 0004 00E7 }
                 _0x80047:
                 _0x80039:
000b04 940c 0e80 	JMP  _0x20C0009
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;#include <io.h>
                 ;#include <initial_system.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <timer.h>
                 ;#include <int_protocol.h>
                 ;#include <adc.h>
                 ;
                 ;/* ================================================================================= */
                 ;int initial_system(void) {
                 ; 0005 000F int initial_system(void) {
                 
                 	.CSEG
                 _initial_system:
                 ; 0005 0010 
                 ; 0005 0011     init_IO();
000b06 d01a      	RCALL _init_IO
                 ; 0005 0012 
                 ; 0005 0013     //============ Uart Initial ============//
                 ; 0005 0014     init_uart(0, 38400);     // uart0 for printDebug
000b07 e0e0      	LDI  R30,LOW(0)
000b08 940e 179d 	CALL SUBOPT_0x3B
                 ; 0005 0015     init_uart(1, 38400);    // uart1 for xbee
000b0a e0e1      	LDI  R30,LOW(1)
000b0b 940e 179d 	CALL SUBOPT_0x3B
                 ; 0005 0016 
                 ; 0005 0017     //============ Timer Initial ============//
                 ; 0005 0018     init_timer();
000b0d 940e 077d 	CALL _init_timer
                 ; 0005 0019     enable_timerOverflow(0);      // interrupt every 0.021 sec.
000b0f 940e 169b 	CALL SUBOPT_0x11
000b11 940e 07bc 	CALL _enable_timerOverflow
                 ; 0005 001A     enable_timerOverflow(1);      // interrupt every 1 sec.
000b13 940e 16b3 	CALL SUBOPT_0x16
000b15 940e 07bc 	CALL _enable_timerOverflow
                 ; 0005 001B     enable_timerOverflow(3);      // interrupt every 0.5 sec.
000b17 e0a3      	LDI  R26,LOW(3)
000b18 e0b0      	LDI  R27,0
000b19 940e 07bc 	CALL _enable_timerOverflow
                 ; 0005 001C 
                 ; 0005 001D     //============ Module Initial ============//
                 ; 0005 001E     init_adc(VREF_AVCC);
000b1b e4a0      	LDI  R26,LOW(64)
000b1c 940e 0e45 	CALL _init_adc
                 ; 0005 001F 
                 ; 0005 0020     return 0;
000b1e e0e0      	LDI  R30,LOW(0)
000b1f e0f0      	LDI  R31,HIGH(0)
000b20 9508      	RET
                 ; 0005 0021 }
                 ;
                 ;/* ================================================================================= */
                 ;void init_IO(void) {
                 ; 0005 0024 void init_IO(void) {
                 _init_IO:
                 ; 0005 0025 
                 ; 0005 0026     /*----- Digital Input -----*/
                 ; 0005 0027     // Initial Direction
                 ; 0005 0028     SW_BUTTON_DDR;           // Switch Button, Join Button
000b21 98a0      	CBI  0x14,0
                 ; 0005 0029     // pull up
                 ; 0005 002A     SW_BUTTON_PORT = 1;
000b22 9aa8      	SBI  0x15,0
                 ; 0005 002B 
                 ; 0005 002C     D_SW1_DDR;
000b23 98d7      	CBI  0x1A,7
                 ; 0005 002D     D_SW2_DDR;
000b24 98d6      	CBI  0x1A,6
                 ; 0005 002E     D_SW3_DDR;
000b25 98d5      	CBI  0x1A,5
                 ; 0005 002F     D_SW4_DDR;
000b26 98d4      	CBI  0x1A,4
                 ; 0005 0030 
                 ; 0005 0031     /*----- Digital Output -----*/
                 ; 0005 0032     // Initial Direction
                 ; 0005 0033     LED_STAT_DDR;                   // LED Status
000b27 9aa7      	SBI  0x14,7
                 ; 0005 0034     POWER_RELAY_DDR;                // Drive relay
000b28 91e0 0064 	LDS  R30,100
000b2a 60e4      	ORI  R30,4
000b2b 93e0 0064 	STS  100,R30
                 ; 0005 0035     XBEE_RESET_DDR;
000b2d 9a12      	SBI  0x2,2
                 ; 0005 0036     XBEE_SLEEP_DDR;
000b2e 91e0 0064 	LDS  R30,100
000b30 60e8      	ORI  R30,8
000b31 93e0 0064 	STS  100,R30
                 ; 0005 0037 
                 ; 0005 0038     LED_STAT_OFF;
000b33 940e 1796 	CALL SUBOPT_0x3A
                 ; 0005 0039     POWER_RELAY_OFF;
                 ; 0005 003A     XBEE_RESET_HIGH;      // XBee Reset active low
000b35 9a1a      	SBI  0x3,2
                 ; 0005 003B     XBEE_SLEEP_LOW;
000b36 91e0 0065 	LDS  R30,101
000b38 7fe7      	ANDI R30,0XF7
000b39 93e0 0065 	STS  101,R30
                 ; 0005 003C 
                 ; 0005 003D }
000b3b 9508      	RET
                 ;/* ================================================================================= */
                 ;int8_t read_dSwitch() {
                 ; 0005 003F int8_t read_dSwitch() {
                 _read_dSwitch:
                 ; 0005 0040     int8_t read1, read2;
                 ; 0005 0041     read1 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
000b3c 931a      	ST   -Y,R17
000b3d 930a      	ST   -Y,R16
                 ;	read1 -> R17
                 ;	read2 -> R16
000b3e 940e 17a4 	CALL SUBOPT_0x3C
000b40 2f1e      	MOV  R17,R30
                 ; 0005 0042     delay_ms(100);
000b41 940e 16a4 	CALL SUBOPT_0x13
                 ; 0005 0043     read2 = D_SW1_PIN | (D_SW2_PIN<<1) | (D_SW3_PIN<<2) | (D_SW4_PIN<<3);
000b43 940e 17a4 	CALL SUBOPT_0x3C
000b45 2f0e      	MOV  R16,R30
                 ; 0005 0044     if(read1 == read2) {
000b46 1701      	CP   R16,R17
000b47 f411      	BRNE _0xA0017
                 ; 0005 0045         return read1;
000b48 2fe1      	MOV  R30,R17
000b49 c001      	RJMP _0x20C000C
                 ; 0005 0046     }else {
                 _0xA0017:
                 ; 0005 0047         return -1;
000b4a efef      	LDI  R30,LOW(255)
                 ; 0005 0048     }
                 ; 0005 0049 }
                 _0x20C000C:
000b4b 9109      	LD   R16,Y+
000b4c 9119      	LD   R17,Y+
000b4d 9508      	RET
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdint.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <delay.h>
                 ;#include <math.h>
                 ;#include <uart.h>
                 ;#include <debug.h>
                 ;#include <xbee.h>
                 ;#include <meansure.h>
                 ;
                 ;uint8_t JOIN_A1[]           = {0x7E,0x00,0x23,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x01,0xA1,0x00};
                 
                 	.DSEG
                 ;uint8_t PING_A4[]           = {0x7E,0x00,0x23,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x01,0xA4,0x00};
                 ;uint8_t SEND_EVENT_[]       = {0x7E,0x00,0x25,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x01,0xA5,0x01,0x00,0x00};
                 ;uint8_t SEND_REPORT_[]      = {0x7E,0x00,0x48,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x26,0xA7,0x01,0x01,0x00,0x00,0x00,0x00,0x0                 0,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _voltage[8]         = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _amp[8]             = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _power[8]           = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;uint8_t _watt[8]            = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;
                 ;void reverse(char *str, int len){
                 ; 0006 0016 void reverse(char *str, int len){
                 
                 	.CSEG
                 _reverse:
                 ; 0006 0017     int i=0,j=len-1,temp;
                 ; 0006 0018 
000b4e 93ba      ; 0006 0019     while (i<j){
000b4f 93aa      	ST   -Y,R27
000b50 940e 1d03 	ST   -Y,R26
                 	CALL __SAVELOCR6
                 ;	*str -> Y+8
                 ;	len -> Y+6
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                +
000b52 e000     +LDI R16 , LOW ( 0 )
000b53 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000b54 81ee      	LDD  R30,Y+6
000b55 81ff      	LDD  R31,Y+6+1
000b56 9731      	SBIW R30,1
000b57 019f      	MOVW R18,R30
                 _0xC0007:
                +
000b58 1702     +CP R16 , R18
000b59 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
000b5a f4dc      	BRGE _0xC0009
                 ; 0006 001A         temp = str[i];
000b5b 01f8      	MOVW R30,R16
000b5c 85a8      	LDD  R26,Y+8
000b5d 85b9      	LDD  R27,Y+8+1
000b5e 0fae      	ADD  R26,R30
000b5f 1fbf      	ADC  R27,R31
000b60 914c      	LD   R20,X
000b61 2755      	CLR  R21
                 ; 0006 001B         str[i] = str[j];
000b62 940e 16f3 	CALL SUBOPT_0x22
000b64 010f      	MOVW R0,R30
000b65 01f9      	MOVW R30,R18
000b66 85a8      	LDD  R26,Y+8
000b67 85b9      	LDD  R27,Y+8+1
000b68 0fae      	ADD  R26,R30
000b69 1fbf      	ADC  R27,R31
000b6a 91ec      	LD   R30,X
000b6b 01d0      	MOVW R26,R0
000b6c 93ec      	ST   X,R30
                 ; 0006 001C         str[j] = temp;
000b6d 01f9      	MOVW R30,R18
000b6e 940e 16f3 	CALL SUBOPT_0x22
000b70 8340      	ST   Z,R20
                 ; 0006 001D         i++; j--;
                +
000b71 5f0f     +SUBI R16 , LOW ( - 1 )
000b72 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                +
000b73 5021     +SUBI R18 , LOW ( 1 )
000b74 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0006 001E     }
000b75 cfe2      	RJMP _0xC0007
                 _0xC0009:
                 ; 0006 001F }
000b76 940e 1d0a 	CALL __LOADLOCR6
000b78 962a      	ADIW R28,10
000b79 9508      	RET
                 ;
                 ;// Converts a given integer x to string str[]. d is the number
                 ;// of digits required in output. If d is more than the number
                 ;// of digits in x, then 0s are added at the beginning.
                 ;
                 ;int intToStr(int x, char str[], int d){
                 ; 0006 0025 int intToStr(int x, char str[], int d){
                 _intToStr:
                 ; 0006 0026     int i = 0;
                 ; 0006 0027     while (x){
000b7a 93ba      	ST   -Y,R27
000b7b 93aa      	ST   -Y,R26
000b7c 940e 160a 	CALL SUBOPT_0x0
                 ;	x -> Y+6
                 ;	str -> Y+4
                 ;	d -> Y+2
                 ;	i -> R16,R17
                 _0xC000A:
000b7e 81ee      	LDD  R30,Y+6
000b7f 81ff      	LDD  R31,Y+6+1
000b80 9730      	SBIW R30,0
000b81 f0d1      	BREQ _0xC000C
                 ; 0006 0028         str[i++] = (x%10) + '0';
000b82 01f8      	MOVW R30,R16
                +
000b83 5f0f     +SUBI R16 , LOW ( - 1 )
000b84 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000b85 81ac      	LDD  R26,Y+4
000b86 81bd      	LDD  R27,Y+4+1
000b87 0fea      	ADD  R30,R26
000b88 1ffb      	ADC  R31,R27
000b89 01bf      	MOVW R22,R30
000b8a 81ae      	LDD  R26,Y+6
000b8b 81bf      	LDD  R27,Y+6+1
000b8c e0ea      	LDI  R30,LOW(10)
000b8d e0f0      	LDI  R31,HIGH(10)
000b8e 940e 1c71 	CALL __MODW21
000b90 5de0      	SUBI R30,-LOW(48)
000b91 01db      	MOVW R26,R22
000b92 93ec      	ST   X,R30
                 ; 0006 0029         x = x/10;
000b93 81ae      	LDD  R26,Y+6
000b94 81bf      	LDD  R27,Y+6+1
000b95 e0ea      	LDI  R30,LOW(10)
000b96 e0f0      	LDI  R31,HIGH(10)
000b97 940e 1c3b 	CALL __DIVW21
000b99 83ee      	STD  Y+6,R30
000b9a 83ff      	STD  Y+6+1,R31
                 ; 0006 002A     }
000b9b cfe2      	RJMP _0xC000A
                 _0xC000C:
                 ; 0006 002B 
                 ; 0006 002C     // If number of digits required is more, then
                 ; 0006 002D     // add 0s at the beginning
                 ; 0006 002E     while (i < d)
                 _0xC000D:
000b9c 81ea      	LDD  R30,Y+2
000b9d 81fb      	LDD  R31,Y+2+1
000b9e 170e      	CP   R16,R30
000b9f 071f      	CPC  R17,R31
000ba0 f454      	BRGE _0xC000F
                 ; 0006 002F         str[i++] = '0';
000ba1 01f8      	MOVW R30,R16
                +
000ba2 5f0f     +SUBI R16 , LOW ( - 1 )
000ba3 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000ba4 81ac      	LDD  R26,Y+4
000ba5 81bd      	LDD  R27,Y+4+1
000ba6 0fae      	ADD  R26,R30
000ba7 1fbf      	ADC  R27,R31
000ba8 e3e0      	LDI  R30,LOW(48)
000ba9 93ec      	ST   X,R30
000baa cff1      	RJMP _0xC000D
                 _0xC000F:
                 ; 0006 0031 reverse(str, i);
000bab 81ec      	LDD  R30,Y+4
000bac 81fd      	LDD  R31,Y+4+1
000bad 93fa      	ST   -Y,R31
000bae 93ea      	ST   -Y,R30
000baf 01d8      	MOVW R26,R16
000bb0 df9d      	RCALL _reverse
                 ; 0006 0032     str[i] = '\0';
000bb1 940e 1763 	CALL SUBOPT_0x31
000bb3 e0e0      	LDI  R30,LOW(0)
000bb4 93ec      	ST   X,R30
                 ; 0006 0033     return i;
000bb5 01f8      	MOVW R30,R16
000bb6 8119      	LDD  R17,Y+1
000bb7 8108      	LDD  R16,Y+0
                 _0x20C000B:
000bb8 9628      	ADIW R28,8
000bb9 9508      	RET
                 ; 0006 0034 }
                 ;
                 ;void _ftoa(float n, char *res, int afterpoint){
                 ; 0006 0036 void _ftoa(float n, char *res, int afterpoint){
                 __ftoa:
                 ; 0006 0037     // Extract integer part
                 ; 0006 0038     int ipart = (int)n;
                 ; 0006 0039 
                 ; 0006 003A     // Extract floating part
                 ; 0006 003B     float fpart = n - (float)ipart;
                 ; 0006 003C 
                 ; 0006 003D     // convert integer part to string
                 ; 0006 003E     int i = intToStr(ipart, res, 0);
                 ; 0006 003F     if(ipart == 0){
000bba 93ba      	ST   -Y,R27
000bbb 93aa      	ST   -Y,R26
000bbc 9724      	SBIW R28,4
000bbd 940e 1d05 	CALL __SAVELOCR4
                 ;	n -> Y+12
                 ;	*res -> Y+10
                 ;	afterpoint -> Y+8
                 ;	ipart -> R16,R17
                 ;	fpart -> Y+4
                 ;	i -> R18,R19
000bbf 940e 17be 	CALL SUBOPT_0x3D
000bc1 940e 1a4f 	CALL __CFD1
000bc3 018f      	MOVW R16,R30
000bc4 01f8      	MOVW R30,R16
000bc5 940e 17c3 	CALL SUBOPT_0x3E
000bc7 940e 17c8 	CALL SUBOPT_0x3F
000bc9 940e 17cd 	CALL SUBOPT_0x40
000bcb 940e 17d2 	CALL SUBOPT_0x41
000bcd 931a      	ST   -Y,R17
000bce 930a      	ST   -Y,R16
000bcf 85ec      	LDD  R30,Y+12
000bd0 85fd      	LDD  R31,Y+12+1
000bd1 93fa      	ST   -Y,R31
000bd2 93ea      	ST   -Y,R30
000bd3 940e 169b 	CALL SUBOPT_0x11
000bd5 dfa4      	RCALL _intToStr
000bd6 019f      	MOVW R18,R30
000bd7 2e00      	MOV  R0,R16
000bd8 2a01      	OR   R0,R17
000bd9 f449      	BRNE _0xC0010
                 ; 0006 0040        res[i] = '0';
000bda 01f9      	MOVW R30,R18
000bdb 85aa      	LDD  R26,Y+10
000bdc 85bb      	LDD  R27,Y+10+1
000bdd 0fae      	ADD  R26,R30
000bde 1fbf      	ADC  R27,R31
000bdf e3e0      	LDI  R30,LOW(48)
000be0 93ec      	ST   X,R30
                 ; 0006 0041        i++;
                +
000be1 5f2f     +SUBI R18 , LOW ( - 1 )
000be2 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0006 0042     }
                 ; 0006 0043     // check for display option after point
                 ; 0006 0044     if (afterpoint != 0){
                 _0xC0010:
000be3 85e8      	LDD  R30,Y+8
000be4 85f9      	LDD  R31,Y+8+1
000be5 9730      	SBIW R30,0
000be6 f141      	BREQ _0xC0011
                 ; 0006 0045         res[i] = '.'; // add dot
000be7 01f9      	MOVW R30,R18
000be8 85aa      	LDD  R26,Y+10
000be9 85bb      	LDD  R27,Y+10+1
000bea 0fae      	ADD  R26,R30
000beb 1fbf      	ADC  R27,R31
000bec e2ee      	LDI  R30,LOW(46)
000bed 93ec      	ST   X,R30
                 ; 0006 0046 
                 ; 0006 0047         // Get the value of fraction part upto given no.
                 ; 0006 0048         // of points after dot. The third parameter is needed
                 ; 0006 0049         // to handle cases like 233.007
                 ; 0006 004A         fpart = fpart * pow(10, afterpoint);
000bee 940e 17d7 	CALL SUBOPT_0x42
000bf0 940e 1cc5 	CALL __PUTPARD1
000bf2 85ec      	LDD  R30,Y+12
000bf3 85fd      	LDD  R31,Y+12+1
000bf4 940e 17c3 	CALL SUBOPT_0x3E
000bf6 01df      	MOVW R26,R30
000bf7 01cb      	MOVW R24,R22
000bf8 940e 15b1 	CALL _pow
000bfa 940e 17dc 	CALL SUBOPT_0x43
000bfc 940e 17e1 	CALL SUBOPT_0x44
                 ; 0006 004B 
                 ; 0006 004C         intToStr((int)fpart, res + i + 1, afterpoint);
000bfe 940e 17e4 	CALL SUBOPT_0x45
000c00 940e 1a4f 	CALL __CFD1
000c02 93fa      	ST   -Y,R31
000c03 93ea      	ST   -Y,R30
000c04 01f9      	MOVW R30,R18
000c05 85ac      	LDD  R26,Y+12
000c06 85bd      	LDD  R27,Y+12+1
000c07 0fea      	ADD  R30,R26
000c08 1ffb      	ADC  R31,R27
000c09 9631      	ADIW R30,1
000c0a 93fa      	ST   -Y,R31
000c0b 93ea      	ST   -Y,R30
000c0c 85ac      	LDD  R26,Y+12
000c0d 85bd      	LDD  R27,Y+12+1
000c0e df6b      	RCALL _intToStr
                 ; 0006 004D     }
                 ; 0006 004E }
                 _0xC0011:
000c0f 940e 1d0c 	CALL __LOADLOCR4
000c11 9660      	ADIW R28,16
000c12 9508      	RET
                 ;
                 ;
                 ;void send_event(uint8_t led,uint8_t state){
                 ; 0006 0051 void send_event(uint8_t led,uint8_t state){
                 _send_event:
                 ; 0006 0052 
                 ; 0006 0053     memcpy(&SEND_EVENT_[5],Gateway_MacAddress,8);
000c13 940e 17e9 	CALL SUBOPT_0x46
                 ;	led -> Y+1
                 ;	state -> Y+0
000c15 940e 17f3 	CALL SUBOPT_0x47
                 ; 0006 0054     memcpy(&SEND_EVENT_[18],EndDevice_MacAddress,8);
000c17 940e 1760 	CALL SUBOPT_0x30
000c19 940e 17fa 	CALL SUBOPT_0x48
                 ; 0006 0055     memcpy(&SEND_EVENT_[26],Gateway_MacAddress,8);
000c1b 940e 1805 	CALL SUBOPT_0x49
                 ; 0006 0056     memcpy(&SEND_EVENT_[39],&state,1);
000c1d 940e 16b3 	CALL SUBOPT_0x16
000c1f 940e 1421 	CALL _memcpy
                 ; 0006 0057     SEND_EVENT_[37] = 0xA5;
000c21 eae5      	LDI  R30,LOW(165)
000c22 940e 180c 	CALL SUBOPT_0x4A
                 ; 0006 0058     SEND_EVENT_[38] = led;
                 ; 0006 0059     SEND_EVENT_[40] = xbee_checksum(&SEND_EVENT_[3],SEND_EVENT_[2]);
                 ; 0006 005A     printDebug("\r\n ++++++++++ Send LED ++++++++\r\n");
                +
000c24 eaee     +LDI R30 , LOW ( 2 * _0xC0000 + ( 0 ) )
000c25 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 0 ) )
                 	__POINTW1FN _0xC0000,0
000c26 940e 166a 	CALL SUBOPT_0xB
                 ; 0006 005B     print_payload(SEND_EVENT_,41);
000c28 940e 181d 	CALL SUBOPT_0x4B
000c2a 940e 0675 	CALL _print_payload
                 ; 0006 005C     xbee_sendAPI(SEND_EVENT_,41);
000c2c 940e 181d 	CALL SUBOPT_0x4B
000c2e 940e 0942 	CALL _xbee_sendAPI
                 ; 0006 005D 
                 ; 0006 005E }
000c30 940c 0e80 	JMP  _0x20C0009
                 ;
                 ;void send_join(){
                 ; 0006 0060 void send_join(){
                 ; 0006 0061 
                 ; 0006 0062     memcpy(&JOIN_A1[18],EndDevice_MacAddress,8);
                 ; 0006 0063     JOIN_A1[38] = xbee_checksum(&JOIN_A1[3],JOIN_A1[2]);
                 ; 0006 0064     printDebug("\r\n ++++++++++ Send Join ++++++++\r\n");
                 ; 0006 0065     print_payload(JOIN_A1, 39);
                 ; 0006 0066     xbee_sendAPI(JOIN_A1,39);
                 ; 0006 0067 
                 ; 0006 0068 }
                 ;
                 ;void send_ping(){
                 ; 0006 006A void send_ping(){
                 _send_ping:
                 ; 0006 006B 
                 ; 0006 006C     memcpy(&PING_A4[5],Gateway_MacAddress,8);
                +
000c32 e5ea     +LDI R30 , LOW ( _PING_A4 + ( 5 ) )
000c33 e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 5 ) )
                 	__POINTW1MN _PING_A4,5
000c34 940e 1824 	CALL SUBOPT_0x4C
000c36 940e 1421 	CALL _memcpy
                 ; 0006 006D     memcpy(&PING_A4[18],EndDevice_MacAddress,8);
                +
000c38 e6e7     +LDI R30 , LOW ( _PING_A4 + ( 18 ) )
000c39 e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 18 ) )
                 	__POINTW1MN _PING_A4,18
000c3a 93fa      	ST   -Y,R31
000c3b 93ea      	ST   -Y,R30
000c3c 940e 1773 	CALL SUBOPT_0x34
000c3e 940e 1760 	CALL SUBOPT_0x30
000c40 940e 1421 	CALL _memcpy
                 ; 0006 006E     memcpy(&PING_A4[26],Gateway_MacAddress,8);
                +
000c42 e6ef     +LDI R30 , LOW ( _PING_A4 + ( 26 ) )
000c43 e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 26 ) )
                 	__POINTW1MN _PING_A4,26
000c44 940e 1824 	CALL SUBOPT_0x4C
000c46 940e 1421 	CALL _memcpy
                 ; 0006 006F     PING_A4[38] = xbee_checksum(&PING_A4[3],PING_A4[2]);
                +
000c48 e5e8     +LDI R30 , LOW ( _PING_A4 + ( 3 ) )
000c49 e0f9     +LDI R31 , HIGH ( _PING_A4 + ( 3 ) )
                 	__POINTW1MN _PING_A4,3
000c4a 93fa      	ST   -Y,R31
000c4b 93ea      	ST   -Y,R30
                +
000c4c 91a0 0957+LDS R26 , _PING_A4 + ( 2 )
                 	__GETB2MN _PING_A4,2
000c4e e0b0      	LDI  R27,0
000c4f 940e 091f 	CALL _xbee_checksum
                +
000c51 93e0 097b+STS _PING_A4 + ( 38 ) , R30
                 	__PUTB1MN _PING_A4,38
                 ; 0006 0070     printDebug("\r\n ++++++++++ Send Ping ++++++++\r\n");
                +
000c53 efe3     +LDI R30 , LOW ( 2 * _0xC0000 + ( 69 ) )
000c54 e0f5     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 69 ) )
                 	__POINTW1FN _0xC0000,69
000c55 940e 166a 	CALL SUBOPT_0xB
                 ; 0006 0071     print_payload(PING_A4, 39);
000c57 940e 182b 	CALL SUBOPT_0x4D
000c59 940e 0675 	CALL _print_payload
                 ; 0006 0072     xbee_sendAPI(PING_A4,39);
000c5b 940e 182b 	CALL SUBOPT_0x4D
000c5d 940e 0942 	CALL _xbee_sendAPI
                 ; 0006 0073 
                 ; 0006 0074 }
000c5f 9508      	RET
                 ;
                 ;void recive_event(uint8_t led,uint8_t state){
                 ; 0006 0076 void recive_event(uint8_t led,uint8_t state){
                 _recive_event:
                 ; 0006 0077 
                 ; 0006 0078     memcpy(&SEND_EVENT_[5],Gateway_MacAddress,8);
000c60 940e 17e9 	CALL SUBOPT_0x46
                 ;	led -> Y+1
                 ;	state -> Y+0
000c62 940e 17f3 	CALL SUBOPT_0x47
                 ; 0006 0079     memcpy(&SEND_EVENT_[18],EndDevice_MacAddress,8);
000c64 940e 1760 	CALL SUBOPT_0x30
000c66 940e 17fa 	CALL SUBOPT_0x48
                 ; 0006 007A     memcpy(&SEND_EVENT_[26],Gateway_MacAddress,8);
000c68 940e 1805 	CALL SUBOPT_0x49
                 ; 0006 007B     memcpy(&SEND_EVENT_[39],&state,1);
000c6a 940e 16b3 	CALL SUBOPT_0x16
000c6c 940e 1421 	CALL _memcpy
                 ; 0006 007C     SEND_EVENT_[37] = 0xA6;
000c6e eae6      	LDI  R30,LOW(166)
000c6f 940e 180c 	CALL SUBOPT_0x4A
                 ; 0006 007D     SEND_EVENT_[38] = led;
                 ; 0006 007E     SEND_EVENT_[40] = xbee_checksum(&SEND_EVENT_[3],SEND_EVENT_[2]);
                 ; 0006 007F     printDebug("\r\n ++++++++++ Send EVENT RECIVE ++++++++\r\n");
                +
000c71 e1e6     +LDI R30 , LOW ( 2 * _0xC0000 + ( 104 ) )
000c72 e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 104 ) )
                 	__POINTW1FN _0xC0000,104
000c73 940e 166a 	CALL SUBOPT_0xB
                 ; 0006 0080     print_payload(SEND_EVENT_,41);
000c75 940e 181d 	CALL SUBOPT_0x4B
000c77 940e 0675 	CALL _print_payload
                 ; 0006 0081     xbee_sendAPI(SEND_EVENT_,41);
000c79 940e 181d 	CALL SUBOPT_0x4B
000c7b 940e 0942 	CALL _xbee_sendAPI
                 ; 0006 0082 
                 ; 0006 0083 }
000c7d 940c 0e80 	JMP  _0x20C0009
                 ;
                 ;void send_report(uint8_t data_id,float Vavg,float Iavg,float Pavg,float WHsum){
                 ; 0006 0085 void send_report(uint8_t data_id,float Vavg,float Iavg,float Pavg,float WHsum){
                 _send_report:
                 ; 0006 0086 
                 ; 0006 0087     memcpy(&SEND_REPORT_[5],Gateway_MacAddress,8);
000c7f 940e 1cca 	CALL __PUTPARD2
                 ;	data_id -> Y+16
                 ;	Vavg -> Y+12
                 ;	Iavg -> Y+8
                 ;	Pavg -> Y+4
                 ;	WHsum -> Y+0
                +
000c81 eaea     +LDI R30 , LOW ( _SEND_REPORT_ + ( 5 ) )
000c82 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 5 ) )
                 	__POINTW1MN _SEND_REPORT_,5
000c83 940e 1824 	CALL SUBOPT_0x4C
000c85 940e 1421 	CALL _memcpy
                 ; 0006 0088     memcpy(&SEND_REPORT_[18],EndDevice_MacAddress,8);
                +
000c87 ebe7     +LDI R30 , LOW ( _SEND_REPORT_ + ( 18 ) )
000c88 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 18 ) )
                 	__POINTW1MN _SEND_REPORT_,18
000c89 93fa      	ST   -Y,R31
000c8a 93ea      	ST   -Y,R30
000c8b 940e 1773 	CALL SUBOPT_0x34
000c8d 940e 1760 	CALL SUBOPT_0x30
000c8f 940e 1421 	CALL _memcpy
                 ; 0006 0089     memcpy(&SEND_REPORT_[26],Gateway_MacAddress,8);
                +
000c91 ebef     +LDI R30 , LOW ( _SEND_REPORT_ + ( 26 ) )
000c92 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 26 ) )
                 	__POINTW1MN _SEND_REPORT_,26
000c93 940e 1824 	CALL SUBOPT_0x4C
000c95 940e 1421 	CALL _memcpy
                 ; 0006 008A 
                 ; 0006 008B     /*=============== Convert Data from float to ASCII ===============*/
                 ; 0006 008C     _ftoa(Vavg, _voltage,2);
000c97 940e 17be 	CALL SUBOPT_0x3D
000c99 940e 1cc5 	CALL __PUTPARD1
000c9b efe1      	LDI  R30,LOW(__voltage)
000c9c e0f9      	LDI  R31,HIGH(__voltage)
000c9d 940e 1832 	CALL SUBOPT_0x4E
000c9f df1a      	RCALL __ftoa
                 ; 0006 008D     _ftoa(Iavg, _amp,2);
000ca0 940e 1835 	CALL SUBOPT_0x4F
000ca2 940e 1cc5 	CALL __PUTPARD1
000ca4 efe9      	LDI  R30,LOW(__amp)
000ca5 e0f9      	LDI  R31,HIGH(__amp)
000ca6 940e 1832 	CALL SUBOPT_0x4E
000ca8 df11      	RCALL __ftoa
                 ; 0006 008E     _ftoa(Pavg, _power,2);
000ca9 940e 17e4 	CALL SUBOPT_0x45
000cab 940e 1cc5 	CALL __PUTPARD1
000cad e0e1      	LDI  R30,LOW(__power)
000cae e0fa      	LDI  R31,HIGH(__power)
000caf 940e 1832 	CALL SUBOPT_0x4E
000cb1 df08      	RCALL __ftoa
                 ; 0006 008F     _ftoa(WHsum, _watt,2);
000cb2 940e 183a 	CALL SUBOPT_0x50
000cb4 940e 1cc5 	CALL __PUTPARD1
000cb6 e0e9      	LDI  R30,LOW(__watt)
000cb7 e0fa      	LDI  R31,HIGH(__watt)
000cb8 940e 1832 	CALL SUBOPT_0x4E
000cba deff      	RCALL __ftoa
                 ; 0006 0090 
                 ; 0006 0091     SEND_REPORT_[37] = 0xA7;
000cbb eae7      	LDI  R30,LOW(167)
                +
000cbc 93e0 09ca+STS _SEND_REPORT_ + ( 37 ) , R30
                 	__PUTB1MN _SEND_REPORT_,37
                 ; 0006 0092     SEND_REPORT_[38] = data_id;
000cbe 89e8      	LDD  R30,Y+16
                +
000cbf 93e0 09cb+STS _SEND_REPORT_ + ( 38 ) , R30
                 	__PUTB1MN _SEND_REPORT_,38
                 ; 0006 0093     memcpy(&SEND_REPORT_[40],_voltage,8);
                +
000cc1 eced     +LDI R30 , LOW ( _SEND_REPORT_ + ( 40 ) )
000cc2 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 40 ) )
                 	__POINTW1MN _SEND_REPORT_,40
000cc3 93fa      	ST   -Y,R31
000cc4 93ea      	ST   -Y,R30
000cc5 efe1      	LDI  R30,LOW(__voltage)
000cc6 e0f9      	LDI  R31,HIGH(__voltage)
000cc7 940e 183d 	CALL SUBOPT_0x51
000cc9 940e 1421 	CALL _memcpy
                 ; 0006 0094     memcpy(&SEND_REPORT_[49],_amp,8);
                +
000ccb ede6     +LDI R30 , LOW ( _SEND_REPORT_ + ( 49 ) )
000ccc e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 49 ) )
                 	__POINTW1MN _SEND_REPORT_,49
000ccd 93fa      	ST   -Y,R31
000cce 93ea      	ST   -Y,R30
000ccf efe9      	LDI  R30,LOW(__amp)
000cd0 e0f9      	LDI  R31,HIGH(__amp)
000cd1 940e 183d 	CALL SUBOPT_0x51
000cd3 940e 1421 	CALL _memcpy
                 ; 0006 0095     memcpy(&SEND_REPORT_[58],_power,8);
                +
000cd5 edef     +LDI R30 , LOW ( _SEND_REPORT_ + ( 58 ) )
000cd6 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 58 ) )
                 	__POINTW1MN _SEND_REPORT_,58
000cd7 93fa      	ST   -Y,R31
000cd8 93ea      	ST   -Y,R30
000cd9 e0e1      	LDI  R30,LOW(__power)
000cda e0fa      	LDI  R31,HIGH(__power)
000cdb 940e 183d 	CALL SUBOPT_0x51
000cdd 940e 1421 	CALL _memcpy
                 ; 0006 0096     memcpy(&SEND_REPORT_[67],_watt,8);
                +
000cdf eee8     +LDI R30 , LOW ( _SEND_REPORT_ + ( 67 ) )
000ce0 e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 67 ) )
                 	__POINTW1MN _SEND_REPORT_,67
000ce1 93fa      	ST   -Y,R31
000ce2 93ea      	ST   -Y,R30
000ce3 e0e9      	LDI  R30,LOW(__watt)
000ce4 e0fa      	LDI  R31,HIGH(__watt)
000ce5 940e 183d 	CALL SUBOPT_0x51
000ce7 940e 1421 	CALL _memcpy
                 ; 0006 0097 
                 ; 0006 0098     SEND_REPORT_[75] = xbee_checksum(&SEND_REPORT_[3],SEND_REPORT_[2]);
                +
000ce9 eae8     +LDI R30 , LOW ( _SEND_REPORT_ + ( 3 ) )
000cea e0f9     +LDI R31 , HIGH ( _SEND_REPORT_ + ( 3 ) )
                 	__POINTW1MN _SEND_REPORT_,3
000ceb 93fa      	ST   -Y,R31
000cec 93ea      	ST   -Y,R30
                +
000ced 91a0 09a7+LDS R26 , _SEND_REPORT_ + ( 2 )
                 	__GETB2MN _SEND_REPORT_,2
000cef e0b0      	LDI  R27,0
000cf0 940e 091f 	CALL _xbee_checksum
                +
000cf2 93e0 09f0+STS _SEND_REPORT_ + ( 75 ) , R30
                 	__PUTB1MN _SEND_REPORT_,75
                 ; 0006 0099     printDebug("\r\n ++++++++++ Send REPORT ++++++++\r\n");
                +
000cf4 e4e1     +LDI R30 , LOW ( 2 * _0xC0000 + ( 147 ) )
000cf5 e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 147 ) )
                 	__POINTW1FN _0xC0000,147
000cf6 940e 166a 	CALL SUBOPT_0xB
                 ; 0006 009A     print_payload(SEND_REPORT_,76);
000cf8 940e 1840 	CALL SUBOPT_0x52
000cfa 940e 0675 	CALL _print_payload
                 ; 0006 009B     xbee_sendAPI(SEND_REPORT_,76);
000cfc 940e 1840 	CALL SUBOPT_0x52
000cfe 940e 0942 	CALL _xbee_sendAPI
                 ; 0006 009C 
                 ; 0006 009D }
000d00 9661      	ADIW R28,17
000d01 9508      	RET
                 ;
                 ;void SendStatusReport(void){
                 ; 0006 009F void SendStatusReport(void){
                 _SendStatusReport:
                 ; 0006 00A0 
                 ; 0006 00A1     Vavg = Vsum/number;      // Voltage
000d02 940e 1847 	CALL SUBOPT_0x53
000d04 940e 184c 	CALL SUBOPT_0x54
000d06 940e 1855 	CALL SUBOPT_0x55
000d08 93e0 0874 	STS  _Vavg,R30
000d0a 93f0 0875 	STS  _Vavg+1,R31
000d0c 9360 0876 	STS  _Vavg+2,R22
000d0e 9370 0877 	STS  _Vavg+3,R23
                 ; 0006 00A2     Iavg = Isum/number;      // Current
000d10 940e 1847 	CALL SUBOPT_0x53
000d12 940e 185c 	CALL SUBOPT_0x56
000d14 940e 1855 	CALL SUBOPT_0x55
000d16 940e 1865 	CALL SUBOPT_0x57
                 ; 0006 00A3     Pavg = Psum/number;      // Power
000d18 940e 1847 	CALL SUBOPT_0x53
000d1a 940e 186e 	CALL SUBOPT_0x58
000d1c 940e 1855 	CALL SUBOPT_0x55
000d1e 93e0 087c 	STS  _Pavg,R30
000d20 93f0 087d 	STS  _Pavg+1,R31
000d22 9360 087e 	STS  _Pavg+2,R22
000d24 9370 087f 	STS  _Pavg+3,R23
                 ; 0006 00A4 
                 ; 0006 00A5     CURRENT_VOLT = Vavg;
000d26 940e 1877 	CALL SUBOPT_0x59
000d28 93e0 0601 	STS  _CURRENT_VOLT,R30
000d2a 93f0 0602 	STS  _CURRENT_VOLT+1,R31
000d2c 9360 0603 	STS  _CURRENT_VOLT+2,R22
000d2e 9370 0604 	STS  _CURRENT_VOLT+3,R23
                 ; 0006 00A6     CURRENT_AMP = Iavg;
000d30 940e 1880 	CALL SUBOPT_0x5A
000d32 93e0 0605 	STS  _CURRENT_AMP,R30
000d34 93f0 0606 	STS  _CURRENT_AMP+1,R31
000d36 9360 0607 	STS  _CURRENT_AMP+2,R22
000d38 9370 0608 	STS  _CURRENT_AMP+3,R23
                 ; 0006 00A7 
                 ; 0006 00A8     printDebug("\r\n======================================================\r\n");
                +
000d3a e6e6     +LDI R30 , LOW ( 2 * _0xC0000 + ( 184 ) )
000d3b e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 184 ) )
                 	__POINTW1FN _0xC0000,184
000d3c 940e 166a 	CALL SUBOPT_0xB
                 ; 0006 00A9     printDebug("Vsum = %0.4f  ", Vsum); printDebug("Isum = %0.4f  ", Isum); printDebug("Psum = %0.4f\r\n", Psum);
                +
000d3e eae1     +LDI R30 , LOW ( 2 * _0xC0000 + ( 243 ) )
000d3f e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 243 ) )
                 	__POINTW1FN _0xC0000,243
000d40 93fa      	ST   -Y,R31
000d41 93ea      	ST   -Y,R30
000d42 91e0 0864 	LDS  R30,_Vsum
000d44 91f0 0865 	LDS  R31,_Vsum+1
000d46 9160 0866 	LDS  R22,_Vsum+2
000d48 9170 0867 	LDS  R23,_Vsum+3
000d4a 940e 1676 	CALL SUBOPT_0xD
                +
000d4c ebe0     +LDI R30 , LOW ( 2 * _0xC0000 + ( 258 ) )
000d4d e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 258 ) )
                 	__POINTW1FN _0xC0000,258
000d4e 93fa      	ST   -Y,R31
000d4f 93ea      	ST   -Y,R30
000d50 91e0 0868 	LDS  R30,_Isum
000d52 91f0 0869 	LDS  R31,_Isum+1
000d54 9160 086a 	LDS  R22,_Isum+2
000d56 9170 086b 	LDS  R23,_Isum+3
000d58 940e 1676 	CALL SUBOPT_0xD
                +
000d5a ebef     +LDI R30 , LOW ( 2 * _0xC0000 + ( 273 ) )
000d5b e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 273 ) )
                 	__POINTW1FN _0xC0000,273
000d5c 93fa      	ST   -Y,R31
000d5d 93ea      	ST   -Y,R30
000d5e 91e0 086c 	LDS  R30,_Psum
000d60 91f0 086d 	LDS  R31,_Psum+1
000d62 9160 086e 	LDS  R22,_Psum+2
000d64 9170 086f 	LDS  R23,_Psum+3
000d66 940e 1676 	CALL SUBOPT_0xD
                 ; 0006 00AA     printDebug("Vavg = %0.4f   ", Vavg); printDebug("Iavg = %0.4f   ", Iavg); printDebug("Pavg = %0.4f\r\n", Pavg);
                +
000d68 ecee     +LDI R30 , LOW ( 2 * _0xC0000 + ( 288 ) )
000d69 e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 288 ) )
                 	__POINTW1FN _0xC0000,288
000d6a 93fa      	ST   -Y,R31
000d6b 93ea      	ST   -Y,R30
000d6c 940e 1877 	CALL SUBOPT_0x59
000d6e 940e 1676 	CALL SUBOPT_0xD
                +
000d70 edee     +LDI R30 , LOW ( 2 * _0xC0000 + ( 304 ) )
000d71 e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 304 ) )
                 	__POINTW1FN _0xC0000,304
000d72 93fa      	ST   -Y,R31
000d73 93ea      	ST   -Y,R30
000d74 940e 1880 	CALL SUBOPT_0x5A
000d76 940e 1676 	CALL SUBOPT_0xD
                +
000d78 eeee     +LDI R30 , LOW ( 2 * _0xC0000 + ( 320 ) )
000d79 e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 320 ) )
                 	__POINTW1FN _0xC0000,320
000d7a 93fa      	ST   -Y,R31
000d7b 93ea      	ST   -Y,R30
000d7c 940e 1889 	CALL SUBOPT_0x5B
000d7e 940e 1676 	CALL SUBOPT_0xD
                 ; 0006 00AB     printDebug("Watt-Hour Sum = %0.4f\r\n", WHsum);
                +
000d80 efed     +LDI R30 , LOW ( 2 * _0xC0000 + ( 335 ) )
000d81 e0f6     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 335 ) )
                 	__POINTW1FN _0xC0000,335
000d82 93fa      	ST   -Y,R31
000d83 93ea      	ST   -Y,R30
000d84 91e0 0870 	LDS  R30,_WHsum
000d86 91f0 0871 	LDS  R31,_WHsum+1
000d88 9160 0872 	LDS  R22,_WHsum+2
000d8a 9170 0873 	LDS  R23,_WHsum+3
000d8c 940e 1676 	CALL SUBOPT_0xD
                 ; 0006 00AC     printDebug("Number Sampling = %d\r\n", number);
                +
000d8e e1e5     +LDI R30 , LOW ( 2 * _0xC0000 + ( 359 ) )
000d8f e0f7     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 359 ) )
                 	__POINTW1FN _0xC0000,359
000d90 93fa      	ST   -Y,R31
000d91 93ea      	ST   -Y,R30
000d92 940e 1847 	CALL SUBOPT_0x53
000d94 940e 1717 	CALL SUBOPT_0x26
                 ; 0006 00AD     printDebug("======================================================\r\n\r\n");
                +
000d96 e2ec     +LDI R30 , LOW ( 2 * _0xC0000 + ( 382 ) )
000d97 e0f7     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 382 ) )
                 	__POINTW1FN _0xC0000,382
000d98 940e 166a 	CALL SUBOPT_0xB
                 ; 0006 00AE 
                 ; 0006 00AF     Iavg *= 1000.0;
000d9a 940e 1892 	CALL SUBOPT_0x5C
000d9c 940e 1b10 	CALL __MULF12
000d9e 940e 1865 	CALL SUBOPT_0x57
                 ; 0006 00B0     send_report(01,Vavg,Iavg,Pavg,WHsum);
000da0 e0e1      	LDI  R30,LOW(1)
000da1 93ea      	ST   -Y,R30
000da2 940e 1877 	CALL SUBOPT_0x59
000da4 940e 1cc5 	CALL __PUTPARD1
000da6 940e 1880 	CALL SUBOPT_0x5A
000da8 940e 1cc5 	CALL __PUTPARD1
000daa 940e 1889 	CALL SUBOPT_0x5B
000dac 940e 1cc5 	CALL __PUTPARD1
000dae 940e 189f 	CALL SUBOPT_0x5D
000db0 dece      	RCALL _send_report
                 ; 0006 00B1     Iavg /= 1000.0;
000db1 940e 1892 	CALL SUBOPT_0x5C
000db3 940e 1b5e 	CALL __DIVF21
000db5 940e 1865 	CALL SUBOPT_0x57
                 ; 0006 00B2     /* Safety Current Sensor */
                 ; 0006 00B3     if((SENSOR_SENSITIVE == SENSOR5A) && (Iavg > 4.9)) {
000db7 940e 18a8 	CALL SUBOPT_0x5E
                +
000db9 30a0     +CPI R26 , LOW ( 0x43390000 )
000dba e0e0     +LDI R30 , HIGH ( 0x43390000 )
000dbb 07be     +CPC R27 , R30
000dbc e3e9     +LDI R30 , BYTE3 ( 0x43390000 )
000dbd 078e     +CPC R24 , R30
000dbe e4e3     +LDI R30 , BYTE4 ( 0x43390000 )
000dbf 079e     +CPC R25 , R30
                 	__CPD2N 0x43390000
000dc0 f469      	BRNE _0xC0013
000dc1 940e 18b1 	CALL SUBOPT_0x5F
                +
000dc3 eced     +LDI R30 , LOW ( 0x409CCCCD )
000dc4 ecfc     +LDI R31 , HIGH ( 0x409CCCCD )
000dc5 e96c     +LDI R22 , BYTE3 ( 0x409CCCCD )
000dc6 e470     +LDI R23 , BYTE4 ( 0x409CCCCD )
                 	__GETD1N 0x409CCCCD
000dc7 940e 1ba3 	CALL __CMPF12
000dc9 f009      	BREQ PC+2
000dca f410      	BRCC PC+3
000dcb 940c 0dce 	JMP  _0xC0013
000dcd c001      	RJMP _0xC0014
                 _0xC0013:
000dce c001      	RJMP _0xC0012
                 _0xC0014:
                 ; 0006 00B4         SWITCH = TURN_OFF;
000dcf c031      	RJMP _0xC0023
                 ; 0006 00B5         POWER_RELAY_OFF;
                 ; 0006 00B6         LED_STAT_OFF;
                 ; 0006 00B7         CURRENT_VOLT = 0.0;
                 ; 0006 00B8         CURRENT_AMP = 0.0;
                 ; 0006 00B9         printDebug("Current Exceed --SWITCH OFF!\r\n");
                 ; 0006 00BA     }else if((SENSOR_SENSITIVE == SENSOR20A) && (Iavg > 19.9)) {
                 _0xC0012:
000dd0 940e 18a8 	CALL SUBOPT_0x5E
                +
000dd2 30a0     +CPI R26 , LOW ( 0x42C80000 )
000dd3 e0e0     +LDI R30 , HIGH ( 0x42C80000 )
000dd4 07be     +CPC R27 , R30
000dd5 ece8     +LDI R30 , BYTE3 ( 0x42C80000 )
000dd6 078e     +CPC R24 , R30
000dd7 e4e2     +LDI R30 , BYTE4 ( 0x42C80000 )
000dd8 079e     +CPC R25 , R30
                 	__CPD2N 0x42C80000
000dd9 f469      	BRNE _0xC0019
000dda 940e 18b1 	CALL SUBOPT_0x5F
                +
000ddc e3e3     +LDI R30 , LOW ( 0x419F3333 )
000ddd e3f3     +LDI R31 , HIGH ( 0x419F3333 )
000dde e96f     +LDI R22 , BYTE3 ( 0x419F3333 )
000ddf e471     +LDI R23 , BYTE4 ( 0x419F3333 )
                 	__GETD1N 0x419F3333
000de0 940e 1ba3 	CALL __CMPF12
000de2 f009      	BREQ PC+2
000de3 f410      	BRCC PC+3
000de4 940c 0de7 	JMP  _0xC0019
000de6 c001      	RJMP _0xC001A
                 _0xC0019:
000de7 c001      	RJMP _0xC0018
                 _0xC001A:
                 ; 0006 00BB         SWITCH = TURN_OFF;
000de8 c018      	RJMP _0xC0023
                 ; 0006 00BC         POWER_RELAY_OFF;
                 ; 0006 00BD         LED_STAT_OFF;
                 ; 0006 00BE         CURRENT_VOLT = 0.0;
                 ; 0006 00BF         CURRENT_AMP = 0.0;
                 ; 0006 00C0         printDebug("Current Exceed --SWITCH OFF!\r\n");
                 ; 0006 00C1     }else if((SENSOR_SENSITIVE == SENSOR30A) && (Iavg > 29.9)) {
                 _0xC0018:
000de9 940e 18a8 	CALL SUBOPT_0x5E
                +
000deb 30a0     +CPI R26 , LOW ( 0x42840000 )
000dec e0e0     +LDI R30 , HIGH ( 0x42840000 )
000ded 07be     +CPC R27 , R30
000dee e8e4     +LDI R30 , BYTE3 ( 0x42840000 )
000def 078e     +CPC R24 , R30
000df0 e4e2     +LDI R30 , BYTE4 ( 0x42840000 )
000df1 079e     +CPC R25 , R30
                 	__CPD2N 0x42840000
000df2 f469      	BRNE _0xC001F
000df3 940e 18b1 	CALL SUBOPT_0x5F
                +
000df5 e3e3     +LDI R30 , LOW ( 0x41EF3333 )
000df6 e3f3     +LDI R31 , HIGH ( 0x41EF3333 )
000df7 ee6f     +LDI R22 , BYTE3 ( 0x41EF3333 )
000df8 e471     +LDI R23 , BYTE4 ( 0x41EF3333 )
                 	__GETD1N 0x41EF3333
000df9 940e 1ba3 	CALL __CMPF12
000dfb f009      	BREQ PC+2
000dfc f410      	BRCC PC+3
000dfd 940c 0e00 	JMP  _0xC001F
000dff c001      	RJMP _0xC0020
                 _0xC001F:
000e00 c01e      	RJMP _0xC001E
                 _0xC0020:
                 ; 0006 00C2         SWITCH = TURN_OFF;
                 _0xC0023:
000e01 e0e0      	LDI  R30,LOW(0)
000e02 93e0 0600 	STS  _SWITCH,R30
                 ; 0006 00C3         POWER_RELAY_OFF;
000e04 91e0 0065 	LDS  R30,101
000e06 7feb      	ANDI R30,0xFB
000e07 93e0 0065 	STS  101,R30
                 ; 0006 00C4         LED_STAT_OFF;
000e09 9aaf      	SBI  0x15,7
                 ; 0006 00C5         CURRENT_VOLT = 0.0;
000e0a e0e0      	LDI  R30,LOW(0)
000e0b 93e0 0601 	STS  _CURRENT_VOLT,R30
000e0d 93e0 0602 	STS  _CURRENT_VOLT+1,R30
000e0f 93e0 0603 	STS  _CURRENT_VOLT+2,R30
000e11 93e0 0604 	STS  _CURRENT_VOLT+3,R30
                 ; 0006 00C6         CURRENT_AMP = 0.0;
000e13 93e0 0605 	STS  _CURRENT_AMP,R30
000e15 93e0 0606 	STS  _CURRENT_AMP+1,R30
000e17 93e0 0607 	STS  _CURRENT_AMP+2,R30
000e19 93e0 0608 	STS  _CURRENT_AMP+3,R30
                 ; 0006 00C7         printDebug("Current Exceed --SWITCH OFF!\r\n");
                +
000e1b e6e7     +LDI R30 , LOW ( 2 * _0xC0000 + ( 441 ) )
000e1c e0f7     +LDI R31 , HIGH ( 2 * _0xC0000 + ( 441 ) )
                 	__POINTW1FN _0xC0000,441
000e1d 940e 166a 	CALL SUBOPT_0xB
                 ; 0006 00C8     }
                 ; 0006 00C9 
                 ; 0006 00CA     /* Reset value */
                 ; 0006 00CB     number = 0;
                 _0xC001E:
000e1f e0e0      	LDI  R30,LOW(0)
000e20 93e0 0830 	STS  _number,R30
000e22 93e0 0831 	STS  _number+1,R30
                 ; 0006 00CC     Vsum = 0.0;
000e24 93e0 0864 	STS  _Vsum,R30
000e26 93e0 0865 	STS  _Vsum+1,R30
000e28 93e0 0866 	STS  _Vsum+2,R30
000e2a 93e0 0867 	STS  _Vsum+3,R30
                 ; 0006 00CD     Isum = 0.0;
000e2c 93e0 0868 	STS  _Isum,R30
000e2e 93e0 0869 	STS  _Isum+1,R30
000e30 93e0 086a 	STS  _Isum+2,R30
000e32 93e0 086b 	STS  _Isum+3,R30
                 ; 0006 00CE     Psum = 0.0;
000e34 93e0 086c 	STS  _Psum,R30
000e36 93e0 086d 	STS  _Psum+1,R30
000e38 93e0 086e 	STS  _Psum+2,R30
000e3a 93e0 086f 	STS  _Psum+3,R30
                 ; 0006 00CF     WHsum = 0.0;
000e3c 93e0 0870 	STS  _WHsum,R30
000e3e 93e0 0871 	STS  _WHsum+1,R30
000e40 93e0 0872 	STS  _WHsum+2,R30
000e42 93e0 0873 	STS  _WHsum+3,R30
                 ; 0006 00D0 
                 ; 0006 00D1 }
000e44 9508      	RET
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <adc.h>
                 ;#include <debug.h>
                 ;
                 ;char Vreferent = VREF_AVCC;
                 
                 	.DSEG
                 ;
                 ;
                 ;void init_adc(unsigned char vrff) {
                 ; 0007 000C void init_adc(unsigned char vrff) {
                 
                 	.CSEG
                 _init_adc:
                 ; 0007 000D 
                 ; 0007 000E     // ADC initialization
                 ; 0007 000F     // ADC Clock frequency: 691.200 kHz
                 ; 0007 0010     // ADC Voltage Reference: vrff
                 ; 0007 0011     Vreferent = vrff;
000e45 93aa      	ST   -Y,R26
                 ;	vrff -> Y+0
000e46 81e8      	LD   R30,Y
000e47 93e0 0a11 	STS  _Vreferent,R30
                 ; 0007 0012     ADMUX = Vreferent & 0xff;
000e49 b9e7      	OUT  0x7,R30
                 ; 0007 0013     ADCSRA = 0xA4;
000e4a eae4      	LDI  R30,LOW(164)
000e4b b9e6      	OUT  0x6,R30
                 ; 0007 0014     //printDebug("ADMUX = %02X\r\n", ADMUX);
                 ; 0007 0015 
                 ; 0007 0016 }
000e4c 9621      	ADIW R28,1
000e4d 9508      	RET
                 ;
                 ;// Read the AD conversion result
                 ;uint16_t read_adc(unsigned char adc_input) {
                 ; 0007 0019 uint16_t read_adc(unsigned char adc_input) {
                 _read_adc:
                 ; 0007 001A 
                 ; 0007 001B     unsigned int adc_data = 0x0000;
                 ; 0007 001C 
                 ; 0007 001D     ADMUX = (Vreferent | adc_input);
000e4e 93aa      	ST   -Y,R26
000e4f 940e 160a 	CALL SUBOPT_0x0
                 ;	adc_input -> Y+2
                 ;	adc_data -> R16,R17
000e51 81ea      	LDD  R30,Y+2
000e52 91a0 0a11 	LDS  R26,_Vreferent
000e54 2bea      	OR   R30,R26
000e55 b9e7      	OUT  0x7,R30
                 ; 0007 001E     //printDebug("ADMUX = %02X\r\n", ADMUX);
                 ; 0007 001F 
                 ; 0007 0020     // Delay needed for the stabilization of the ADC input voltage
                 ; 0007 0021     delay_us(50);
                +
000e56 eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
000e57 958a     +DEC R24
000e58 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
                 ; 0007 0022 
                 ; 0007 0023     // Start the AD conversion
                 ; 0007 0024     ADCSRA |= 0x80; // ENABLE ADC
000e59 9a37      	SBI  0x6,7
                 ; 0007 0025     ADCSRA |= 0x40;  // Start convert
000e5a 9a36      	SBI  0x6,6
                 ; 0007 0026 
                 ; 0007 0027     // Wait for the AD conversion to complete
                 ; 0007 0028     while((ADCSRA & 0x10) == 0);
                 _0xE0004:
000e5b 9b34      	SBIS 0x6,4
000e5c cffe      	RJMP _0xE0004
                 ; 0007 0029     adc_data = ADCL;
000e5d b104      	IN   R16,4
000e5e 2711      	CLR  R17
                 ; 0007 002A     adc_data |= (ADCH & 0x00ff) << 8;
000e5f b1e5      	IN   R30,0x5
000e60 2ffe      	MOV  R31,R30
000e61 e0e0      	LDI  R30,0
                +
000e62 2b0e     +OR R16 , R30
000e63 2b1f     +OR R17 , R31
                 	__ORWRR 16,17,30,31
                 ; 0007 002B 
                 ; 0007 002C     ADCSRA |= 0x10;
000e64 9a34      	SBI  0x6,4
                 ; 0007 002D 
                 ; 0007 002E     return adc_data;
000e65 01f8      	MOVW R30,R16
000e66 8119      	LDD  R17,Y+1
000e67 8108      	LDD  R16,Y+0
000e68 c00b      	RJMP _0x20C000A
                 ; 0007 002F }
                 ;
                 ;
                 ;
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <uart.h>
                 ;#include <int_protocol.h>
                 ;#include <debug.h>
                 ;
                 ;uint8_t Eaddress        = 5;
                 
                 	.DSEG
                 ;
                 ;void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
                 ; 0008 000C void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
                 
                 	.CSEG
                 _EEPROM_write:
                 ; 0008 000D     while(EECR & (1<<EEWE))
000e69 93aa      	ST   -Y,R26
                 ;	uiAddress -> Y+1
                 ;	ucData -> Y+0
                 _0x100004:
000e6a 99e1      	SBIC 0x1C,1
                 ; 0008 000E     ;
000e6b cffe      	RJMP _0x100004
                 ; 0008 000F     EEAR = uiAddress;
000e6c 81e9      	LDD  R30,Y+1
000e6d 81fa      	LDD  R31,Y+1+1
000e6e bbff      	OUT  0x1E+1,R31
000e6f bbee      	OUT  0x1E,R30
                 ; 0008 0010     EEDR = ucData;
000e70 81e8      	LD   R30,Y
000e71 bbed      	OUT  0x1D,R30
                 ; 0008 0011     EECR |= (1<<EEMWE);
000e72 9ae2      	SBI  0x1C,2
                 ; 0008 0012     EECR |= (1<<EEWE);
000e73 9ae1      	SBI  0x1C,1
                 ; 0008 0013 }
                 _0x20C000A:
000e74 9623      	ADIW R28,3
000e75 9508      	RET
                 ;
                 ;
                 ;unsigned char EEPROM_read(unsigned int uiAddress){
                 ; 0008 0016 unsigned char EEPROM_read(unsigned int uiAddress){
                 _EEPROM_read:
                 ; 0008 0017     while(EECR & (1<<EEWE))
000e76 93ba      	ST   -Y,R27
000e77 93aa      	ST   -Y,R26
                 ;	uiAddress -> Y+0
                 _0x100007:
000e78 99e1      	SBIC 0x1C,1
                 ; 0008 0018     ;
000e79 cffe      	RJMP _0x100007
                 ; 0008 0019     EEAR = uiAddress;
000e7a 81e8      	LD   R30,Y
000e7b 81f9      	LDD  R31,Y+1
000e7c bbff      	OUT  0x1E+1,R31
000e7d bbee      	OUT  0x1E,R30
                 ; 0008 001A     EECR |= (1<<EERE);
000e7e 9ae0      	SBI  0x1C,0
                 ; 0008 001B     return EEDR;
000e7f b3ed      	IN   R30,0x1D
                 _0x20C0009:
000e80 9622      	ADIW R28,2
000e81 9508      	RET
                 ; 0008 001C }
                 ;
                 ;
                 ;#include <mega128a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <uart.h>
                 ;#include <int_protocol.h>
                 ;#include <debug.h>
                 ;#include <adc.h>
                 ;#include <math.h>
                 ;#include <meansure.h>
                 ;
                 ;float SENSOR_SENSITIVE;
                 ;float AMP_ADJ_ZERO;
                 ;float total                 = 0.0;
                 ;float avg                   = 2500.0;
                 
                 	.DSEG
                 ;float value                 = 0.0;
                 ;float Viout                 = 0.0;
                 ;float Vdif                  = 0.0;
                 ;float Vsq_avg               = 0.0;
                 ;float volt                  = 0.0;
                 ;float amp                   = 0.0;
                 ;float power                 = 0.0;
                 ;float whour                 = 0.0;
                 ;float Vsum                  = 0.0;
                 ;float Isum                  = 0.0;
                 ;float Psum                  = 0.0;
                 ;float WHsum                 = 0.0;
                 ;float Vavg                  = 0.0;
                 ;float Iavg                  = 0.0;
                 ;float Pavg                  = 0.0;
                 ;float CURRENT_VOLT          = 0.0;
                 ;float CURRENT_AMP           = 0.0;
                 ;uint16_t number             = 0;
                 ;uint16_t adcValue           = 0;
                 ;uint16_t countSampling      = 0;
                 ;eeprom float ADJ0_SENSOR5A  = 0.090;
                 ;eeprom float ADJ0_SENSOR20A = 0.11;
                 ;eeprom float ADJ0_SENSOR30A = 0.11;
                 ;
                 ;void ReadCurrent(void){
                 ; 0009 0029 void ReadCurrent(void){
                 
                 	.CSEG
                 _ReadCurrent:
                 ; 0009 002A     adcValue = read_adc(ADC1);
000e82 e0a1      	LDI  R26,LOW(1)
000e83 940e 18ba 	CALL SUBOPT_0x60
                 ; 0009 002B     printDebug("ADC = %d\r\n", adcValue);
                +
000e85 e8ee     +LDI R30 , LOW ( 2 * _0x120000 + ( 0 ) )
000e86 e0f7     +LDI R31 , HIGH ( 2 * _0x120000 + ( 0 ) )
                 	__POINTW1FN _0x120000,0
000e87 93fa      	ST   -Y,R31
000e88 93ea      	ST   -Y,R30
000e89 940e 18c1 	CALL SUBOPT_0x61
000e8b 940e 1717 	CALL SUBOPT_0x26
                 ; 0009 002C     value = adcValue * (5000.0 / 1023.0);
000e8d 940e 18c6 	CALL SUBOPT_0x62
                +
000e8f e1aa     +LDI R26 , LOW ( 0x409C671A )
000e90 e6b7     +LDI R27 , HIGH ( 0x409C671A )
000e91 e98c     +LDI R24 , BYTE3 ( 0x409C671A )
000e92 e490     +LDI R25 , BYTE4 ( 0x409C671A )
                 	__GETD2N 0x409C671A
000e93 940e 1b10 	CALL __MULF12
000e95 93e0 0844 	STS  _value,R30
000e97 93f0 0845 	STS  _value+1,R31
000e99 9360 0846 	STS  _value+2,R22
000e9b 9370 0847 	STS  _value+3,R23
                 ; 0009 002D 
                 ; 0009 002E     // Keep track of the moving average
                 ; 0009 002F     // See more : http://jeelabs.org/2011/09/15/power-measurement-acs-code/
                 ; 0009 0030     avg = (499.0*avg + value) / 500.0;
000e9d 940e 18cc 	CALL SUBOPT_0x63
                +
000e9f e0a0     +LDI R26 , LOW ( 0x43F98000 )
000ea0 e8b0     +LDI R27 , HIGH ( 0x43F98000 )
000ea1 ef89     +LDI R24 , BYTE3 ( 0x43F98000 )
000ea2 e493     +LDI R25 , BYTE4 ( 0x43F98000 )
                 	__GETD2N 0x43F98000
000ea3 940e 1b10 	CALL __MULF12
000ea5 940e 18d5 	CALL SUBOPT_0x64
000ea7 940e 18de 	CALL SUBOPT_0x65
                +
000ea9 e0e0     +LDI R30 , LOW ( 0x43FA0000 )
000eaa e0f0     +LDI R31 , HIGH ( 0x43FA0000 )
000eab ef6a     +LDI R22 , BYTE3 ( 0x43FA0000 )
000eac e473     +LDI R23 , BYTE4 ( 0x43FA0000 )
                 	__GETD1N 0x43FA0000
000ead 940e 1b5e 	CALL __DIVF21
000eaf 93e0 0840 	STS  _avg,R30
000eb1 93f0 0841 	STS  _avg+1,R31
000eb3 9360 0842 	STS  _avg+2,R22
000eb5 9370 0843 	STS  _avg+3,R23
                 ; 0009 0031 
                 ; 0009 0032     if(value > avg){
000eb7 940e 18e3 	CALL SUBOPT_0x66
000eb9 f009      	BREQ PC+2
000eba f410      	BRCC PC+3
000ebb 940c 0ece 	JMP  _0x120004
                 ; 0009 0033         Vdif = value - avg;
000ebd 91a0 0840 	LDS  R26,_avg
000ebf 91b0 0841 	LDS  R27,_avg+1
000ec1 9180 0842 	LDS  R24,_avg+2
000ec3 9190 0843 	LDS  R25,_avg+3
000ec5 91e0 0844 	LDS  R30,_value
000ec7 91f0 0845 	LDS  R31,_value+1
000ec9 9160 0846 	LDS  R22,_value+2
000ecb 9170 0847 	LDS  R23,_value+3
000ecd c007      	RJMP _0x12000B
                 ; 0009 0034         total += (Vdif*Vdif);
                 ; 0009 0035     }else if(value < avg) {
                 _0x120004:
000ece 940e 18e3 	CALL SUBOPT_0x66
000ed0 f520      	BRSH _0x120006
                 ; 0009 0036         Vdif = avg - value;
000ed1 940e 18d5 	CALL SUBOPT_0x64
000ed3 940e 18cc 	CALL SUBOPT_0x63
                 _0x12000B:
000ed5 940e 1ab9 	CALL __SUBF12
000ed7 93e0 084c 	STS  _Vdif,R30
000ed9 93f0 084d 	STS  _Vdif+1,R31
000edb 9360 084e 	STS  _Vdif+2,R22
000edd 9370 084f 	STS  _Vdif+3,R23
                 ; 0009 0037         total += (Vdif*Vdif);
000edf 91a0 084c 	LDS  R26,_Vdif
000ee1 91b0 084d 	LDS  R27,_Vdif+1
000ee3 9180 084e 	LDS  R24,_Vdif+2
000ee5 9190 084f 	LDS  R25,_Vdif+3
000ee7 940e 1b10 	CALL __MULF12
000ee9 940e 18e8 	CALL SUBOPT_0x67
000eeb 940e 1ac0 	CALL __ADDF12
000eed 93e0 083c 	STS  _total,R30
000eef 93f0 083d 	STS  _total+1,R31
000ef1 9360 083e 	STS  _total+2,R22
000ef3 9370 083f 	STS  _total+3,R23
                 ; 0009 0038     }
                 ; 0009 0039     countSampling++;
                 _0x120006:
000ef5 e8a0      	LDI  R26,LOW(_countSampling)
000ef6 e0b8      	LDI  R27,HIGH(_countSampling)
000ef7 c10a      	RJMP _0x20C0008
                 ; 0009 003A }
                 ;
                 ;void ReadVoltage(void){
                 ; 0009 003C void ReadVoltage(void){
                 _ReadVoltage:
                 ; 0009 003D    /*---------- Voltage ----------*/
                 ; 0009 003E     adcValue = read_adc(ADC0);
000ef8 e0a0      	LDI  R26,LOW(0)
000ef9 940e 18ba 	CALL SUBOPT_0x60
                 ; 0009 003F     volt = (((adcValue*5.0)/1023.0)/0.01);
000efb 940e 18c6 	CALL SUBOPT_0x62
                +
000efd e0a0     +LDI R26 , LOW ( 0x40A00000 )
000efe e0b0     +LDI R27 , HIGH ( 0x40A00000 )
000eff ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
000f00 e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
000f01 940e 18f1 	CALL SUBOPT_0x68
                +
000f03 e0e0     +LDI R30 , LOW ( 0x447FC000 )
000f04 ecf0     +LDI R31 , HIGH ( 0x447FC000 )
000f05 e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
000f06 e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
000f07 940e 1b5e 	CALL __DIVF21
000f09 01df      	MOVW R26,R30
000f0a 01cb      	MOVW R24,R22
                +
000f0b e0ea     +LDI R30 , LOW ( 0x3C23D70A )
000f0c edf7     +LDI R31 , HIGH ( 0x3C23D70A )
000f0d e263     +LDI R22 , BYTE3 ( 0x3C23D70A )
000f0e e37c     +LDI R23 , BYTE4 ( 0x3C23D70A )
                 	__GETD1N 0x3C23D70A
000f0f 940e 1b5e 	CALL __DIVF21
000f11 93e0 0854 	STS  _volt,R30
000f13 93f0 0855 	STS  _volt+1,R31
000f15 9360 0856 	STS  _volt+2,R22
000f17 9370 0857 	STS  _volt+3,R23
                 ; 0009 0040     if(volt < 223.0) {
000f19 940e 18f6 	CALL SUBOPT_0x69
                +
000f1b e0e0     +LDI R30 , LOW ( 0x435F0000 )
000f1c e0f0     +LDI R31 , HIGH ( 0x435F0000 )
000f1d e56f     +LDI R22 , BYTE3 ( 0x435F0000 )
000f1e e473     +LDI R23 , BYTE4 ( 0x435F0000 )
                 	__GETD1N 0x435F0000
000f1f 940e 1ba3 	CALL __CMPF12
000f21 f448      	BRSH _0x120007
                 ; 0009 0041         volt += 9.0;
000f22 940e 18ff 	CALL SUBOPT_0x6A
                +
000f24 e0a0     +LDI R26 , LOW ( 0x41100000 )
000f25 e0b0     +LDI R27 , HIGH ( 0x41100000 )
000f26 e180     +LDI R24 , BYTE3 ( 0x41100000 )
000f27 e491     +LDI R25 , BYTE4 ( 0x41100000 )
                 	__GETD2N 0x41100000
000f28 940e 1ac0 	CALL __ADDF12
000f2a c014      	RJMP _0x12000C
                 ; 0009 0042     }else if(volt > 233.0) {
                 _0x120007:
000f2b 940e 18f6 	CALL SUBOPT_0x69
                +
000f2d e0e0     +LDI R30 , LOW ( 0x43690000 )
000f2e e0f0     +LDI R31 , HIGH ( 0x43690000 )
000f2f e669     +LDI R22 , BYTE3 ( 0x43690000 )
000f30 e473     +LDI R23 , BYTE4 ( 0x43690000 )
                 	__GETD1N 0x43690000
000f31 940e 1ba3 	CALL __CMPF12
000f33 f009      	BREQ PC+2
000f34 f410      	BRCC PC+3
000f35 940c 0f47 	JMP  _0x120009
                 ; 0009 0043         volt -= 4.0;
000f37 940e 18ff 	CALL SUBOPT_0x6A
                +
000f39 e0a0     +LDI R26 , LOW ( 0x40800000 )
000f3a e0b0     +LDI R27 , HIGH ( 0x40800000 )
000f3b e880     +LDI R24 , BYTE3 ( 0x40800000 )
000f3c e490     +LDI R25 , BYTE4 ( 0x40800000 )
                 	__GETD2N 0x40800000
000f3d 940e 1ab9 	CALL __SUBF12
                 _0x12000C:
000f3f 93e0 0854 	STS  _volt,R30
000f41 93f0 0855 	STS  _volt+1,R31
000f43 9360 0856 	STS  _volt+2,R22
000f45 9370 0857 	STS  _volt+3,R23
                 ; 0009 0044     }
                 ; 0009 0045     printDebug("Volt = %f\r\n", volt);
                 _0x120009:
                +
000f47 e9e9     +LDI R30 , LOW ( 2 * _0x120000 + ( 11 ) )
000f48 e0f7     +LDI R31 , HIGH ( 2 * _0x120000 + ( 11 ) )
                 	__POINTW1FN _0x120000,11
000f49 93fa      	ST   -Y,R31
000f4a 93ea      	ST   -Y,R30
000f4b 940e 18ff 	CALL SUBOPT_0x6A
000f4d 940e 1676 	CALL SUBOPT_0xD
                 ; 0009 0046     Vsum += volt;
000f4f 940e 18ff 	CALL SUBOPT_0x6A
000f51 940e 184c 	CALL SUBOPT_0x54
000f53 940e 1ac0 	CALL __ADDF12
000f55 93e0 0864 	STS  _Vsum,R30
000f57 93f0 0865 	STS  _Vsum+1,R31
000f59 9360 0866 	STS  _Vsum+2,R22
000f5b 9370 0867 	STS  _Vsum+3,R23
                 ; 0009 0047 
                 ; 0009 0048     /*---------- Current ----------*/
                 ; 0009 0049     // V-rms
                 ; 0009 004A     // See more : http://www.electronics-tutorials.ws/blog/rms-voltage.html
                 ; 0009 004B     Vsq_avg = total / countSampling;
000f5d 91e0 0880 	LDS  R30,_countSampling
000f5f 91f0 0881 	LDS  R31,_countSampling+1
000f61 940e 18e8 	CALL SUBOPT_0x67
000f63 940e 1855 	CALL SUBOPT_0x55
000f65 93e0 0850 	STS  _Vsq_avg,R30
000f67 93f0 0851 	STS  _Vsq_avg+1,R31
000f69 9360 0852 	STS  _Vsq_avg+2,R22
000f6b 9370 0853 	STS  _Vsq_avg+3,R23
                 ; 0009 004C     Viout = sqrt(Vsq_avg);
000f6d 91a0 0850 	LDS  R26,_Vsq_avg
000f6f 91b0 0851 	LDS  R27,_Vsq_avg+1
000f71 9180 0852 	LDS  R24,_Vsq_avg+2
000f73 9190 0853 	LDS  R25,_Vsq_avg+3
000f75 940e 1bc3 	CALL _sqrt
000f77 93e0 0848 	STS  _Viout,R30
000f79 93f0 0849 	STS  _Viout+1,R31
000f7b 9360 084a 	STS  _Viout+2,R22
000f7d 9370 084b 	STS  _Viout+3,R23
                 ; 0009 004D     amp = Viout / SENSOR_SENSITIVE;                  // ACS712 +-5 or +-20 or +-30 Amp.
000f7f 940e 167d 	CALL SUBOPT_0xE
000f81 91a0 0848 	LDS  R26,_Viout
000f83 91b0 0849 	LDS  R27,_Viout+1
000f85 9180 084a 	LDS  R24,_Viout+2
000f87 9190 084b 	LDS  R25,_Viout+3
000f89 940e 1b5e 	CALL __DIVF21
000f8b 93e0 0858 	STS  _amp,R30
000f8d 93f0 0859 	STS  _amp+1,R31
000f8f 9360 085a 	STS  _amp+2,R22
000f91 9370 085b 	STS  _amp+3,R23
                 ; 0009 004E 
                 ; 0009 004F     /* Adjust Current to 0 */
                 ; 0009 0050     if(amp < AMP_ADJ_ZERO) {
000f93 940e 1686 	CALL SUBOPT_0xF
000f95 91a0 0858 	LDS  R26,_amp
000f97 91b0 0859 	LDS  R27,_amp+1
000f99 9180 085a 	LDS  R24,_amp+2
000f9b 9190 085b 	LDS  R25,_amp+3
000f9d 940e 1ba3 	CALL __CMPF12
000f9f f448      	BRSH _0x12000A
                 ; 0009 0051         amp = 0.0;
000fa0 e0e0      	LDI  R30,LOW(0)
000fa1 93e0 0858 	STS  _amp,R30
000fa3 93e0 0859 	STS  _amp+1,R30
000fa5 93e0 085a 	STS  _amp+2,R30
000fa7 93e0 085b 	STS  _amp+3,R30
                 ; 0009 0052     }
                 ; 0009 0053 
                 ; 0009 0054     total = 0.0;
                 _0x12000A:
000fa9 e0e0      	LDI  R30,LOW(0)
000faa 93e0 083c 	STS  _total,R30
000fac 93e0 083d 	STS  _total+1,R30
000fae 93e0 083e 	STS  _total+2,R30
000fb0 93e0 083f 	STS  _total+3,R30
                 ; 0009 0055     countSampling = 0;
000fb2 93e0 0880 	STS  _countSampling,R30
000fb4 93e0 0881 	STS  _countSampling+1,R30
                 ; 0009 0056     Isum += amp;
000fb6 940e 1908 	CALL SUBOPT_0x6B
000fb8 940e 185c 	CALL SUBOPT_0x56
000fba 940e 1ac0 	CALL __ADDF12
000fbc 93e0 0868 	STS  _Isum,R30
000fbe 93f0 0869 	STS  _Isum+1,R31
000fc0 9360 086a 	STS  _Isum+2,R22
000fc2 9370 086b 	STS  _Isum+3,R23
                 ; 0009 0057 
                 ; 0009 0058     /*---------- Power ----------*/
                 ; 0009 0059     power = volt*amp;
000fc4 940e 1908 	CALL SUBOPT_0x6B
000fc6 940e 18f6 	CALL SUBOPT_0x69
000fc8 940e 1b10 	CALL __MULF12
000fca 93e0 085c 	STS  _power,R30
000fcc 93f0 085d 	STS  _power+1,R31
000fce 9360 085e 	STS  _power+2,R22
000fd0 9370 085f 	STS  _power+3,R23
                 ; 0009 005A     Psum += power;
000fd2 940e 186e 	CALL SUBOPT_0x58
000fd4 940e 1ac0 	CALL __ADDF12
000fd6 93e0 086c 	STS  _Psum,R30
000fd8 93f0 086d 	STS  _Psum+1,R31
000fda 9360 086e 	STS  _Psum+2,R22
000fdc 9370 086f 	STS  _Psum+3,R23
                 ; 0009 005B 
                 ; 0009 005C     /*----------  Watt-hour ----------*/
                 ; 0009 005D     whour = power*(0.5/3600.0);
000fde 91a0 085c 	LDS  R26,_power
000fe0 91b0 085d 	LDS  R27,_power+1
000fe2 9180 085e 	LDS  R24,_power+2
000fe4 9190 085f 	LDS  R25,_power+3
                +
000fe6 ebe4     +LDI R30 , LOW ( 0x3911A2B4 )
000fe7 eaf2     +LDI R31 , HIGH ( 0x3911A2B4 )
000fe8 e161     +LDI R22 , BYTE3 ( 0x3911A2B4 )
000fe9 e379     +LDI R23 , BYTE4 ( 0x3911A2B4 )
                 	__GETD1N 0x3911A2B4
000fea 940e 1b10 	CALL __MULF12
000fec 93e0 0860 	STS  _whour,R30
000fee 93f0 0861 	STS  _whour+1,R31
000ff0 9360 0862 	STS  _whour+2,R22
000ff2 9370 0863 	STS  _whour+3,R23
                 ; 0009 005E     WHsum += whour;
000ff4 940e 189f 	CALL SUBOPT_0x5D
000ff6 940e 1ac0 	CALL __ADDF12
000ff8 93e0 0870 	STS  _WHsum,R30
000ffa 93f0 0871 	STS  _WHsum+1,R31
000ffc 9360 0872 	STS  _WHsum+2,R22
000ffe 9370 0873 	STS  _WHsum+3,R23
                 ; 0009 005F     number++;
001000 e3a0      	LDI  R26,LOW(_number)
001001 e0b8      	LDI  R27,HIGH(_number)
                 _0x20C0008:
001002 91ed      	LD   R30,X+
001003 91fd      	LD   R31,X+
001004 9631      	ADIW R30,1
001005 93fe      	ST   -X,R31
001006 93ee      	ST   -X,R30
                 ; 0009 0060 }
001007 9508      	RET
                 
                 	.CSEG
                 _ftoa:
001008 940e 16e5 	CALL SUBOPT_0x1F
00100a 83e8      	ST   Y,R30
00100b e0e0      	LDI  R30,LOW(0)
00100c 83e9      	STD  Y+1,R30
00100d 83ea      	STD  Y+2,R30
00100e e3ef      	LDI  R30,LOW(63)
00100f 83eb      	STD  Y+3,R30
001010 931a      	ST   -Y,R17
001011 930a      	ST   -Y,R16
001012 85eb      	LDD  R30,Y+11
001013 85fc      	LDD  R31,Y+11+1
001014 3fef      	CPI  R30,LOW(0xFFFF)
001015 efaf      	LDI  R26,HIGH(0xFFFF)
001016 07fa      	CPC  R31,R26
001017 f439      	BRNE _0x200000D
001018 940e 16ea 	CALL SUBOPT_0x20
                +
00101a eaa8     +LDI R26 , LOW ( 2 * _0x2000000 + ( 0 ) )
00101b e0b7     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 0 ) )
                 	__POINTW2FN _0x2000000,0
00101c 940e 1433 	CALL _strcpyf
00101e c0a5      	RJMP _0x20C0007
                 _0x200000D:
00101f 3fef      	CPI  R30,LOW(0x7FFF)
001020 e7af      	LDI  R26,HIGH(0x7FFF)
001021 07fa      	CPC  R31,R26
001022 f439      	BRNE _0x200000C
001023 940e 16ea 	CALL SUBOPT_0x20
                +
001025 eaa9     +LDI R26 , LOW ( 2 * _0x2000000 + ( 1 ) )
001026 e0b7     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 1 ) )
                 	__POINTW2FN _0x2000000,1
001027 940e 1433 	CALL _strcpyf
001029 c09a      	RJMP _0x20C0007
                 _0x200000C:
00102a 85ac      	LDD  R26,Y+12
00102b 23aa      	TST  R26
00102c f462      	BRPL _0x200000F
                +
00102d 85e9     +LDD R30 , Y + 9
00102e 85fa     +LDD R31 , Y + 9 + 1
00102f 856b     +LDD R22 , Y + 9 + 2
001030 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
001031 940e 1a1a 	CALL __ANEGF1
001033 940e 1911 	CALL SUBOPT_0x6C
001035 940e 1916 	CALL SUBOPT_0x6D
001037 e2ed      	LDI  R30,LOW(45)
001038 93ec      	ST   X,R30
                 _0x200000F:
001039 85a8      	LDD  R26,Y+8
00103a 30a7      	CPI  R26,LOW(0x7)
00103b f010      	BRLO _0x2000010
00103c e0e6      	LDI  R30,LOW(6)
00103d 87e8      	STD  Y+8,R30
                 _0x2000010:
00103e 8518      	LDD  R17,Y+8
                 _0x2000011:
00103f 2fe1      	MOV  R30,R17
001040 5011      	SUBI R17,1
001041 30e0      	CPI  R30,0
001042 f039      	BREQ _0x2000013
001043 940e 191d 	CALL SUBOPT_0x6E
001045 940e 1922 	CALL SUBOPT_0x6F
001047 940e 1929 	CALL SUBOPT_0x70
001049 cff5      	RJMP _0x2000011
                 _0x2000013:
00104a 940e 192e 	CALL SUBOPT_0x71
00104c 940e 1ac0 	CALL __ADDF12
00104e 940e 1911 	CALL SUBOPT_0x6C
001050 e010      	LDI  R17,LOW(0)
001051 940e 1671 	CALL SUBOPT_0xC
001053 940e 1929 	CALL SUBOPT_0x70
                 _0x2000014:
001055 940e 192e 	CALL SUBOPT_0x71
001057 940e 1ba3 	CALL __CMPF12
001059 f088      	BRLO _0x2000016
00105a 940e 191d 	CALL SUBOPT_0x6E
00105c 940e 1937 	CALL SUBOPT_0x72
00105e 940e 1929 	CALL SUBOPT_0x70
001060 5f1f      	SUBI R17,-LOW(1)
001061 3217      	CPI  R17,39
001062 f038      	BRLO _0x2000017
001063 940e 16ea 	CALL SUBOPT_0x20
                +
001065 eaad     +LDI R26 , LOW ( 2 * _0x2000000 + ( 5 ) )
001066 e0b7     +LDI R27 , HIGH ( 2 * _0x2000000 + ( 5 ) )
                 	__POINTW2FN _0x2000000,5
001067 940e 1433 	CALL _strcpyf
001069 c05a      	RJMP _0x20C0007
                 _0x2000017:
00106a cfea      	RJMP _0x2000014
                 _0x2000016:
00106b 3010      	CPI  R17,0
00106c f429      	BRNE _0x2000018
00106d 940e 1916 	CALL SUBOPT_0x6D
00106f e3e0      	LDI  R30,LOW(48)
001070 93ec      	ST   X,R30
001071 c028      	RJMP _0x2000019
                 _0x2000018:
                 _0x200001A:
001072 2fe1      	MOV  R30,R17
001073 5011      	SUBI R17,1
001074 30e0      	CPI  R30,0
001075 f121      	BREQ _0x200001C
001076 940e 191d 	CALL SUBOPT_0x6E
001078 940e 1922 	CALL SUBOPT_0x6F
00107a 940e 193b 	CALL SUBOPT_0x73
00107c 940e 18de 	CALL SUBOPT_0x65
00107e 940e 148a 	CALL _floor
001080 940e 1929 	CALL SUBOPT_0x70
001082 940e 192e 	CALL SUBOPT_0x71
001084 940e 1b5e 	CALL __DIVF21
001086 940e 1a4d 	CALL __CFD1U
001088 2f0e      	MOV  R16,R30
001089 940e 1916 	CALL SUBOPT_0x6D
00108b 940e 1940 	CALL SUBOPT_0x74
00108d 940e 191d 	CALL SUBOPT_0x6E
00108f 940e 17c3 	CALL SUBOPT_0x3E
001091 940e 1b10 	CALL __MULF12
001093 940e 1946 	CALL SUBOPT_0x75
001095 940e 17cd 	CALL SUBOPT_0x40
001097 940e 1911 	CALL SUBOPT_0x6C
001099 cfd8      	RJMP _0x200001A
                 _0x200001C:
                 _0x2000019:
00109a 85e8      	LDD  R30,Y+8
00109b 30e0      	CPI  R30,0
00109c f119      	BREQ _0x20C0006
00109d 940e 1916 	CALL SUBOPT_0x6D
00109f e2ee      	LDI  R30,LOW(46)
0010a0 93ec      	ST   X,R30
                 _0x200001E:
0010a1 85e8      	LDD  R30,Y+8
0010a2 50e1      	SUBI R30,LOW(1)
0010a3 87e8      	STD  Y+8,R30
0010a4 5fef      	SUBI R30,-LOW(1)
0010a5 f0d1      	BREQ _0x2000020
0010a6 940e 1946 	CALL SUBOPT_0x75
0010a8 940e 1937 	CALL SUBOPT_0x72
0010aa 940e 1911 	CALL SUBOPT_0x6C
                +
0010ac 85e9     +LDD R30 , Y + 9
0010ad 85fa     +LDD R31 , Y + 9 + 1
0010ae 856b     +LDD R22 , Y + 9 + 2
0010af 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0010b0 940e 1a4d 	CALL __CFD1U
0010b2 2f0e      	MOV  R16,R30
0010b3 940e 1916 	CALL SUBOPT_0x6D
0010b5 940e 1940 	CALL SUBOPT_0x74
0010b7 940e 1946 	CALL SUBOPT_0x75
0010b9 940e 17c3 	CALL SUBOPT_0x3E
0010bb 940e 17cd 	CALL SUBOPT_0x40
0010bd 940e 1911 	CALL SUBOPT_0x6C
0010bf cfe1      	RJMP _0x200001E
                 _0x2000020:
                 _0x20C0006:
0010c0 81ae      	LDD  R26,Y+6
0010c1 81bf      	LDD  R27,Y+6+1
0010c2 e0e0      	LDI  R30,LOW(0)
0010c3 93ec      	ST   X,R30
                 _0x20C0007:
0010c4 8119      	LDD  R17,Y+1
0010c5 8108      	LDD  R16,Y+0
0010c6 962d      	ADIW R28,13
0010c7 9508      	RET
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
0010c8 93ba      	ST   -Y,R27
0010c9 93aa      	ST   -Y,R26
0010ca 931a      	ST   -Y,R17
0010cb 930a      	ST   -Y,R16
0010cc 81aa      	LDD  R26,Y+2
0010cd 81bb      	LDD  R27,Y+2+1
0010ce 9612      	ADIW R26,2
0010cf 940e 1c9d 	CALL __GETW1P
0010d1 9730      	SBIW R30,0
0010d2 f129      	BREQ _0x2020010
0010d3 81aa      	LDD  R26,Y+2
0010d4 81bb      	LDD  R27,Y+2+1
0010d5 9614      	ADIW R26,4
0010d6 940e 1c9d 	CALL __GETW1P
0010d8 018f      	MOVW R16,R30
0010d9 9730      	SBIW R30,0
0010da f061      	BREQ _0x2020012
                +
0010db 3002     +CPI R16 , LOW ( 2 )
0010dc e0e0     +LDI R30 , HIGH ( 2 )
0010dd 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0010de f0c0      	BRLO _0x2020013
0010df 01f8      	MOVW R30,R16
0010e0 9731      	SBIW R30,1
0010e1 018f      	MOVW R16,R30
                +
0010e2 81aa     +LDD R26 , Y + 2
0010e3 81bb     +LDD R27 , Y + 2 + 1
0010e4 9614     +ADIW R26 , 4
0010e5 93ed     +ST X + , R30
0010e6 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0010e7 81aa      	LDD  R26,Y+2
0010e8 81bb      	LDD  R27,Y+2+1
0010e9 9612      	ADIW R26,2
0010ea 940e 161d 	CALL SUBOPT_0x3
0010ec 9731      	SBIW R30,1
0010ed 81ac      	LDD  R26,Y+4
0010ee 83a0      	STD  Z+0,R26
0010ef 81aa      	LDD  R26,Y+2
0010f0 81bb      	LDD  R27,Y+2+1
0010f1 940e 1c9d 	CALL __GETW1P
0010f3 23ff      	TST  R31
0010f4 f012      	BRMI _0x2020014
0010f5 940e 161d 	CALL SUBOPT_0x3
                 _0x2020014:
                 _0x2020013:
0010f7 c006      	RJMP _0x2020015
                 _0x2020010:
0010f8 81aa      	LDD  R26,Y+2
0010f9 81bb      	LDD  R27,Y+2+1
0010fa efef      	LDI  R30,LOW(65535)
0010fb efff      	LDI  R31,HIGH(65535)
0010fc 93ed      	ST   X+,R30
0010fd 93fc      	ST   X,R31
                 _0x2020015:
0010fe 8119      	LDD  R17,Y+1
0010ff 8108      	LDD  R16,Y+0
001100 9625      	ADIW R28,5
001101 9508      	RET
                 __ftoe_G101:
001102 940e 16e5 	CALL SUBOPT_0x1F
001104 83e8      	ST   Y,R30
001105 e0e0      	LDI  R30,LOW(0)
001106 83e9      	STD  Y+1,R30
001107 e8e0      	LDI  R30,LOW(128)
001108 83ea      	STD  Y+2,R30
001109 e3ef      	LDI  R30,LOW(63)
00110a 83eb      	STD  Y+3,R30
00110b 940e 1d05 	CALL __SAVELOCR4
00110d 85ee      	LDD  R30,Y+14
00110e 85ff      	LDD  R31,Y+14+1
00110f 3fef      	CPI  R30,LOW(0xFFFF)
001110 efaf      	LDI  R26,HIGH(0xFFFF)
001111 07fa      	CPC  R31,R26
001112 f449      	BRNE _0x2020019
001113 85e8      	LDD  R30,Y+8
001114 85f9      	LDD  R31,Y+8+1
001115 93fa      	ST   -Y,R31
001116 93ea      	ST   -Y,R30
                +
001117 eba2     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
001118 e0b7     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
001119 940e 1433 	CALL _strcpyf
00111b c0ba      	RJMP _0x20C0005
                 _0x2020019:
00111c 3fef      	CPI  R30,LOW(0x7FFF)
00111d e7af      	LDI  R26,HIGH(0x7FFF)
00111e 07fa      	CPC  R31,R26
00111f f449      	BRNE _0x2020018
001120 85e8      	LDD  R30,Y+8
001121 85f9      	LDD  R31,Y+8+1
001122 93fa      	ST   -Y,R31
001123 93ea      	ST   -Y,R30
                +
001124 eba3     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
001125 e0b7     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
001126 940e 1433 	CALL _strcpyf
001128 c0ad      	RJMP _0x20C0005
                 _0x2020018:
001129 85ab      	LDD  R26,Y+11
00112a 30a7      	CPI  R26,LOW(0x7)
00112b f010      	BRLO _0x202001B
00112c e0e6      	LDI  R30,LOW(6)
00112d 87eb      	STD  Y+11,R30
                 _0x202001B:
00112e 851b      	LDD  R17,Y+11
                 _0x202001C:
00112f 2fe1      	MOV  R30,R17
001130 5011      	SUBI R17,1
001131 30e0      	CPI  R30,0
001132 f019      	BREQ _0x202001E
001133 940e 194b 	CALL SUBOPT_0x76
001135 cff9      	RJMP _0x202001C
                 _0x202001E:
001136 940e 17be 	CALL SUBOPT_0x3D
001138 940e 1cf0 	CALL __CPD10
00113a f421      	BRNE _0x202001F
00113b e030      	LDI  R19,LOW(0)
00113c 940e 194b 	CALL SUBOPT_0x76
00113e c034      	RJMP _0x2020020
                 _0x202001F:
00113f 853b      	LDD  R19,Y+11
001140 940e 194e 	CALL SUBOPT_0x77
001142 f009      	BREQ PC+2
001143 f410      	BRCC PC+3
001144 940c 1154 	JMP  _0x2020021
001146 940e 194b 	CALL SUBOPT_0x76
                 _0x2020022:
001148 940e 194e 	CALL SUBOPT_0x77
00114a f040      	BRLO _0x2020024
00114b 940e 17c8 	CALL SUBOPT_0x3F
00114d 940e 1922 	CALL SUBOPT_0x6F
00114f 940e 1953 	CALL SUBOPT_0x78
001151 5f3f      	SUBI R19,-LOW(1)
001152 cff5      	RJMP _0x2020022
                 _0x2020024:
001153 c00d      	RJMP _0x2020025
                 _0x2020021:
                 _0x2020026:
001154 940e 194e 	CALL SUBOPT_0x77
001156 f440      	BRSH _0x2020028
001157 940e 17c8 	CALL SUBOPT_0x3F
001159 940e 1937 	CALL SUBOPT_0x72
00115b 940e 1953 	CALL SUBOPT_0x78
00115d 5031      	SUBI R19,LOW(1)
00115e cff5      	RJMP _0x2020026
                 _0x2020028:
00115f 940e 194b 	CALL SUBOPT_0x76
                 _0x2020025:
001161 940e 17be 	CALL SUBOPT_0x3D
001163 940e 193b 	CALL SUBOPT_0x73
001165 940e 1ac0 	CALL __ADDF12
001167 940e 1953 	CALL SUBOPT_0x78
001169 940e 194e 	CALL SUBOPT_0x77
00116b f038      	BRLO _0x2020029
00116c 940e 17c8 	CALL SUBOPT_0x3F
00116e 940e 1922 	CALL SUBOPT_0x6F
001170 940e 1953 	CALL SUBOPT_0x78
001172 5f3f      	SUBI R19,-LOW(1)
                 _0x2020029:
                 _0x2020020:
001173 e010      	LDI  R17,LOW(0)
                 _0x202002A:
001174 85eb      	LDD  R30,Y+11
001175 17e1      	CP   R30,R17
001176 f198      	BRLO _0x202002C
001177 940e 17dc 	CALL SUBOPT_0x43
001179 940e 1922 	CALL SUBOPT_0x6F
00117b 940e 193b 	CALL SUBOPT_0x73
00117d 940e 18de 	CALL SUBOPT_0x65
00117f 940e 148a 	CALL _floor
001181 940e 17d2 	CALL SUBOPT_0x41
001183 940e 17e4 	CALL SUBOPT_0x45
001185 940e 17c8 	CALL SUBOPT_0x3F
001187 940e 1b5e 	CALL __DIVF21
001189 940e 1a4d 	CALL __CFD1U
00118b 2f0e      	MOV  R16,R30
00118c 940e 1958 	CALL SUBOPT_0x79
00118e 2fe0      	MOV  R30,R16
00118f 5de0      	SUBI R30,-LOW(48)
001190 93ec      	ST   X,R30
001191 2fe0      	MOV  R30,R16
001192 27ff      	CLR  R31
001193 2766      	CLR  R22
001194 2777      	CLR  R23
001195 940e 1a86 	CALL __CDF1
001197 940e 17dc 	CALL SUBOPT_0x43
001199 940e 1b10 	CALL __MULF12
00119b 940e 17c8 	CALL SUBOPT_0x3F
00119d 940e 17cd 	CALL SUBOPT_0x40
00119f 940e 1953 	CALL SUBOPT_0x78
0011a1 2fe1      	MOV  R30,R17
0011a2 5f1f      	SUBI R17,-1
0011a3 30e0      	CPI  R30,0
0011a4 f679      	BRNE _0x202002A
0011a5 940e 1958 	CALL SUBOPT_0x79
0011a7 e2ee      	LDI  R30,LOW(46)
0011a8 93ec      	ST   X,R30
0011a9 cfca      	RJMP _0x202002A
                 _0x202002C:
0011aa 940e 195f 	CALL SUBOPT_0x7A
0011ac 9731      	SBIW R30,1
0011ad 85aa      	LDD  R26,Y+10
0011ae 83a0      	STD  Z+0,R26
0011af 3030      	CPI  R19,0
0011b0 f42c      	BRGE _0x202002E
0011b1 9531      	NEG  R19
0011b2 85a8      	LDD  R26,Y+8
0011b3 85b9      	LDD  R27,Y+8+1
0011b4 e2ed      	LDI  R30,LOW(45)
0011b5 c003      	RJMP _0x202010E
                 _0x202002E:
0011b6 85a8      	LDD  R26,Y+8
0011b7 85b9      	LDD  R27,Y+8+1
0011b8 e2eb      	LDI  R30,LOW(43)
                 _0x202010E:
0011b9 93ec      	ST   X,R30
0011ba 940e 195f 	CALL SUBOPT_0x7A
0011bc 940e 195f 	CALL SUBOPT_0x7A
0011be 9731      	SBIW R30,1
0011bf 01bf      	MOVW R22,R30
0011c0 2fa3      	MOV  R26,R19
0011c1 e0ea      	LDI  R30,LOW(10)
0011c2 940e 1c23 	CALL __DIVB21
0011c4 5de0      	SUBI R30,-LOW(48)
0011c5 01db      	MOVW R26,R22
0011c6 93ec      	ST   X,R30
0011c7 940e 195f 	CALL SUBOPT_0x7A
0011c9 9731      	SBIW R30,1
0011ca 01bf      	MOVW R22,R30
0011cb 2fa3      	MOV  R26,R19
0011cc e0ea      	LDI  R30,LOW(10)
0011cd 940e 1c65 	CALL __MODB21
0011cf 5de0      	SUBI R30,-LOW(48)
0011d0 01db      	MOVW R26,R22
0011d1 93ec      	ST   X,R30
0011d2 85a8      	LDD  R26,Y+8
0011d3 85b9      	LDD  R27,Y+8+1
0011d4 e0e0      	LDI  R30,LOW(0)
0011d5 93ec      	ST   X,R30
                 _0x20C0005:
0011d6 940e 1d0c 	CALL __LOADLOCR4
0011d8 9660      	ADIW R28,16
0011d9 9508      	RET
                 __print_G101:
0011da 93ba      	ST   -Y,R27
0011db 93aa      	ST   -Y,R26
0011dc 97ef      	SBIW R28,63
0011dd 9761      	SBIW R28,17
0011de 940e 1d03 	CALL __SAVELOCR6
0011e0 e010      	LDI  R17,0
                +
0011e1 01fe     +MOVW R30 , R28
0011e2 5ae8     +SUBI R30 , LOW ( - 88 )
0011e3 4fff     +SBCI R31 , HIGH ( - 88 )
0011e4 9001     +LD R0 , Z +
0011e5 81f0     +LD R31 , Z
0011e6 2de0     +MOV R30 , R0
                 	__GETW1SX 88
0011e7 87e8      	STD  Y+8,R30
0011e8 87f9      	STD  Y+8+1,R31
                +
0011e9 01fe     +MOVW R30 , R28
0011ea 5aea     +SUBI R30 , LOW ( - 86 )
0011eb 4fff     +SBCI R31 , HIGH ( - 86 )
0011ec 9001     +LD R0 , Z +
0011ed 81f0     +LD R31 , Z
0011ee 2de0     +MOV R30 , R0
                 	__GETW1SX 86
0011ef 83ee      	STD  Y+6,R30
0011f0 83ff      	STD  Y+6+1,R31
0011f1 81ae      	LDD  R26,Y+6
0011f2 81bf      	LDD  R27,Y+6+1
0011f3 e0e0      	LDI  R30,LOW(0)
0011f4 e0f0      	LDI  R31,HIGH(0)
0011f5 93ed      	ST   X+,R30
0011f6 93fc      	ST   X,R31
                 _0x2020030:
0011f7 01de      	MOVW R26,R28
0011f8 5aa4      	SUBI R26,LOW(-(92))
0011f9 4fbf      	SBCI R27,HIGH(-(92))
0011fa 940e 161d 	CALL SUBOPT_0x3
0011fc 9731      	SBIW R30,1
0011fd 91e4      	LPM  R30,Z
0011fe 2f2e      	MOV  R18,R30
0011ff 30e0      	CPI  R30,0
001200 f411      	BRNE PC+3
001201 940c 13ed 	JMP _0x2020032
001203 2fe1      	MOV  R30,R17
001204 30e0      	CPI  R30,0
001205 f439      	BRNE _0x2020036
001206 3225      	CPI  R18,37
001207 f411      	BRNE _0x2020037
001208 e011      	LDI  R17,LOW(1)
001209 c002      	RJMP _0x2020038
                 _0x2020037:
00120a 940e 1965 	CALL SUBOPT_0x7B
                 _0x2020038:
00120c c1df      	RJMP _0x2020035
                 _0x2020036:
00120d 30e1      	CPI  R30,LOW(0x1)
00120e f4c1      	BRNE _0x2020039
00120f 3225      	CPI  R18,37
001210 f419      	BRNE _0x202003A
001211 940e 1965 	CALL SUBOPT_0x7B
001213 c1d7      	RJMP _0x202010F
                 _0x202003A:
001214 e012      	LDI  R17,LOW(2)
001215 e0e0      	LDI  R30,LOW(0)
001216 8bed      	STD  Y+21,R30
001217 e000      	LDI  R16,LOW(0)
001218 322d      	CPI  R18,45
001219 f411      	BRNE _0x202003B
00121a e001      	LDI  R16,LOW(1)
00121b c1d0      	RJMP _0x2020035
                 _0x202003B:
00121c 322b      	CPI  R18,43
00121d f419      	BRNE _0x202003C
00121e e2eb      	LDI  R30,LOW(43)
00121f 8bed      	STD  Y+21,R30
001220 c1cb      	RJMP _0x2020035
                 _0x202003C:
001221 3220      	CPI  R18,32
001222 f419      	BRNE _0x202003D
001223 e2e0      	LDI  R30,LOW(32)
001224 8bed      	STD  Y+21,R30
001225 c1c6      	RJMP _0x2020035
                 _0x202003D:
001226 c002      	RJMP _0x202003E
                 _0x2020039:
001227 30e2      	CPI  R30,LOW(0x2)
001228 f439      	BRNE _0x202003F
                 _0x202003E:
001229 e050      	LDI  R21,LOW(0)
00122a e013      	LDI  R17,LOW(3)
00122b 3320      	CPI  R18,48
00122c f411      	BRNE _0x2020040
00122d 6800      	ORI  R16,LOW(128)
00122e c1bd      	RJMP _0x2020035
                 _0x2020040:
00122f c002      	RJMP _0x2020041
                 _0x202003F:
001230 30e3      	CPI  R30,LOW(0x3)
001231 f491      	BRNE _0x2020042
                 _0x2020041:
001232 3320      	CPI  R18,48
001233 f010      	BRLO _0x2020044
001234 332a      	CPI  R18,58
001235 f008      	BRLO _0x2020045
                 _0x2020044:
001236 c007      	RJMP _0x2020043
                 _0x2020045:
001237 e0aa      	LDI  R26,LOW(10)
001238 9f5a      	MUL  R21,R26
001239 2d50      	MOV  R21,R0
00123a 2fe2      	MOV  R30,R18
00123b 53e0      	SUBI R30,LOW(48)
00123c 0f5e      	ADD  R21,R30
00123d c1ae      	RJMP _0x2020035
                 _0x2020043:
00123e e040      	LDI  R20,LOW(0)
00123f 322e      	CPI  R18,46
001240 f411      	BRNE _0x2020046
001241 e014      	LDI  R17,LOW(4)
001242 c1a9      	RJMP _0x2020035
                 _0x2020046:
001243 c00f      	RJMP _0x2020047
                 _0x2020042:
001244 30e4      	CPI  R30,LOW(0x4)
001245 f499      	BRNE _0x2020049
001246 3320      	CPI  R18,48
001247 f010      	BRLO _0x202004B
001248 332a      	CPI  R18,58
001249 f008      	BRLO _0x202004C
                 _0x202004B:
00124a c008      	RJMP _0x202004A
                 _0x202004C:
00124b 6200      	ORI  R16,LOW(32)
00124c e0aa      	LDI  R26,LOW(10)
00124d 9f4a      	MUL  R20,R26
00124e 2d40      	MOV  R20,R0
00124f 2fe2      	MOV  R30,R18
001250 53e0      	SUBI R30,LOW(48)
001251 0f4e      	ADD  R20,R30
001252 c199      	RJMP _0x2020035
                 _0x202004A:
                 _0x2020047:
001253 362c      	CPI  R18,108
001254 f419      	BRNE _0x202004D
001255 6002      	ORI  R16,LOW(2)
001256 e015      	LDI  R17,LOW(5)
001257 c194      	RJMP _0x2020035
                 _0x202004D:
001258 c004      	RJMP _0x202004E
                 _0x2020049:
001259 30e5      	CPI  R30,LOW(0x5)
00125a f011      	BREQ PC+3
00125b 940c 13ec 	JMP _0x2020035
                 _0x202004E:
00125d 2fe2      	MOV  R30,R18
00125e 36e3      	CPI  R30,LOW(0x63)
00125f f459      	BRNE _0x2020053
001260 940e 196c 	CALL SUBOPT_0x7C
001262 940e 1973 	CALL SUBOPT_0x7D
001264 940e 196c 	CALL SUBOPT_0x7C
001266 81a4      	LDD  R26,Z+4
001267 93aa      	ST   -Y,R26
001268 940e 197a 	CALL SUBOPT_0x7E
00126a c180      	RJMP _0x2020054
                 _0x2020053:
00126b 34e5      	CPI  R30,LOW(0x45)
00126c f011      	BREQ _0x2020057
00126d 36e5      	CPI  R30,LOW(0x65)
00126e f409      	BRNE _0x2020058
                 _0x2020057:
00126f c004      	RJMP _0x2020059
                 _0x2020058:
001270 36e6      	CPI  R30,LOW(0x66)
001271 f011      	BREQ PC+3
001272 940c 12ba 	JMP _0x202005A
                 _0x2020059:
001274 01fe      	MOVW R30,R28
001275 9676      	ADIW R30,22
001276 87ee      	STD  Y+14,R30
001277 87ff      	STD  Y+14+1,R31
001278 940e 1980 	CALL SUBOPT_0x7F
00127a 940e 1ca1 	CALL __GETD1P
00127c 940e 1987 	CALL SUBOPT_0x80
00127e 940e 198c 	CALL SUBOPT_0x81
001280 85ad      	LDD  R26,Y+13
001281 23aa      	TST  R26
001282 f022      	BRMI _0x202005B
001283 89ad      	LDD  R26,Y+21
001284 32ab      	CPI  R26,LOW(0x2B)
001285 f049      	BREQ _0x202005D
001286 c017      	RJMP _0x202005E
                 _0x202005B:
001287 940e 198e 	CALL SUBOPT_0x82
001289 940e 1a1a 	CALL __ANEGF1
00128b 940e 1987 	CALL SUBOPT_0x80
00128d e2ed      	LDI  R30,LOW(45)
00128e 8bed      	STD  Y+21,R30
                 _0x202005D:
00128f ff07      	SBRS R16,7
001290 c005      	RJMP _0x202005F
001291 89ed      	LDD  R30,Y+21
001292 93ea      	ST   -Y,R30
001293 940e 197a 	CALL SUBOPT_0x7E
001295 c008      	RJMP _0x2020060
                 _0x202005F:
001296 85ee      	LDD  R30,Y+14
001297 85ff      	LDD  R31,Y+14+1
001298 9631      	ADIW R30,1
001299 87ee      	STD  Y+14,R30
00129a 87ff      	STD  Y+14+1,R31
00129b 9731      	SBIW R30,1
00129c 89ad      	LDD  R26,Y+21
00129d 83a0      	STD  Z+0,R26
                 _0x2020060:
                 _0x202005E:
00129e ff05      	SBRS R16,5
00129f e046      	LDI  R20,LOW(6)
0012a0 3626      	CPI  R18,102
0012a1 f451      	BRNE _0x2020062
0012a2 940e 198e 	CALL SUBOPT_0x82
0012a4 940e 1cc5 	CALL __PUTPARD1
0012a6 934a      	ST   -Y,R20
0012a7 89ab      	LDD  R26,Y+19
0012a8 89bc      	LDD  R27,Y+19+1
0012a9 940e 1008 	CALL _ftoa
0012ab c009      	RJMP _0x2020063
                 _0x2020062:
0012ac 940e 198e 	CALL SUBOPT_0x82
0012ae 940e 1cc5 	CALL __PUTPARD1
0012b0 934a      	ST   -Y,R20
0012b1 932a      	ST   -Y,R18
0012b2 89ac      	LDD  R26,Y+20
0012b3 89bd      	LDD  R27,Y+20+1
0012b4 de4d      	RCALL __ftoe_G101
                 _0x2020063:
0012b5 01fe      	MOVW R30,R28
0012b6 9676      	ADIW R30,22
0012b7 940e 1993 	CALL SUBOPT_0x83
0012b9 c01e      	RJMP _0x2020064
                 _0x202005A:
0012ba 37e3      	CPI  R30,LOW(0x73)
0012bb f439      	BRNE _0x2020066
0012bc 940e 198c 	CALL SUBOPT_0x81
0012be 940e 199b 	CALL SUBOPT_0x84
0012c0 940e 1993 	CALL SUBOPT_0x83
0012c2 c00e      	RJMP _0x2020067
                 _0x2020066:
0012c3 37e0      	CPI  R30,LOW(0x70)
0012c4 f4c1      	BRNE _0x2020069
0012c5 940e 198c 	CALL SUBOPT_0x81
0012c7 940e 199b 	CALL SUBOPT_0x84
0012c9 87ee      	STD  Y+14,R30
0012ca 87ff      	STD  Y+14+1,R31
0012cb 85ae      	LDD  R26,Y+14
0012cc 85bf      	LDD  R27,Y+14+1
0012cd 940e 144c 	CALL _strlenf
0012cf 2f1e      	MOV  R17,R30
0012d0 6008      	ORI  R16,LOW(8)
                 _0x2020067:
0012d1 770f      	ANDI R16,LOW(127)
0012d2 3040      	CPI  R20,0
0012d3 f011      	BREQ _0x202006B
0012d4 1741      	CP   R20,R17
0012d5 f008      	BRLO _0x202006C
                 _0x202006B:
0012d6 c001      	RJMP _0x202006A
                 _0x202006C:
0012d7 2f14      	MOV  R17,R20
                 _0x202006A:
                 _0x2020064:
0012d8 e040      	LDI  R20,LOW(0)
0012d9 e0e0      	LDI  R30,LOW(0)
0012da 8bec      	STD  Y+20,R30
0012db e030      	LDI  R19,LOW(0)
0012dc c06e      	RJMP _0x202006D
                 _0x2020069:
0012dd 36e4      	CPI  R30,LOW(0x64)
0012de f011      	BREQ _0x2020070
0012df 36e9      	CPI  R30,LOW(0x69)
0012e0 f411      	BRNE _0x2020071
                 _0x2020070:
0012e1 6004      	ORI  R16,LOW(4)
0012e2 c002      	RJMP _0x2020072
                 _0x2020071:
0012e3 37e5      	CPI  R30,LOW(0x75)
0012e4 f4a1      	BRNE _0x2020073
                 _0x2020072:
0012e5 e0ea      	LDI  R30,LOW(10)
0012e6 8bec      	STD  Y+20,R30
0012e7 ff01      	SBRS R16,1
0012e8 c008      	RJMP _0x2020074
                +
0012e9 e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
0012ea ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
0012eb e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
0012ec e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
0012ed 940e 19a0 	CALL SUBOPT_0x85
0012ef e01a      	LDI  R17,LOW(10)
0012f0 c023      	RJMP _0x2020075
                 _0x2020074:
                +
0012f1 e1e0     +LDI R30 , LOW ( 0x2710 )
0012f2 e2f7     +LDI R31 , HIGH ( 0x2710 )
0012f3 e060     +LDI R22 , BYTE3 ( 0x2710 )
0012f4 e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
0012f5 940e 19a0 	CALL SUBOPT_0x85
0012f7 e015      	LDI  R17,LOW(5)
0012f8 c01b      	RJMP _0x2020075
                 _0x2020073:
0012f9 35e8      	CPI  R30,LOW(0x58)
0012fa f411      	BRNE _0x2020077
0012fb 6008      	ORI  R16,LOW(8)
0012fc c004      	RJMP _0x2020078
                 _0x2020077:
0012fd 37e8      	CPI  R30,LOW(0x78)
0012fe f011      	BREQ PC+3
0012ff 940c 13eb 	JMP _0x20200B6
                 _0x2020078:
001301 e1e0      	LDI  R30,LOW(16)
001302 8bec      	STD  Y+20,R30
001303 ff01      	SBRS R16,1
001304 c008      	RJMP _0x202007A
                +
001305 e0e0     +LDI R30 , LOW ( 0x10000000 )
001306 e0f0     +LDI R31 , HIGH ( 0x10000000 )
001307 e060     +LDI R22 , BYTE3 ( 0x10000000 )
001308 e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
001309 940e 19a0 	CALL SUBOPT_0x85
00130b e018      	LDI  R17,LOW(8)
00130c c007      	RJMP _0x2020075
                 _0x202007A:
                +
00130d e0e0     +LDI R30 , LOW ( 0x1000 )
00130e e1f0     +LDI R31 , HIGH ( 0x1000 )
00130f e060     +LDI R22 , BYTE3 ( 0x1000 )
001310 e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
001311 940e 19a0 	CALL SUBOPT_0x85
001313 e014      	LDI  R17,LOW(4)
                 _0x2020075:
001314 3040      	CPI  R20,0
001315 f011      	BREQ _0x202007B
001316 770f      	ANDI R16,LOW(127)
001317 c001      	RJMP _0x202007C
                 _0x202007B:
001318 e041      	LDI  R20,LOW(1)
                 _0x202007C:
001319 ff01      	SBRS R16,1
00131a c008      	RJMP _0x202007D
00131b 940e 198c 	CALL SUBOPT_0x81
00131d 940e 1980 	CALL SUBOPT_0x7F
00131f 9614      	ADIW R26,4
001320 940e 1ca1 	CALL __GETD1P
001322 c00f      	RJMP _0x2020110
                 _0x202007D:
001323 ff02      	SBRS R16,2
001324 c007      	RJMP _0x202007F
001325 940e 198c 	CALL SUBOPT_0x81
001327 940e 199b 	CALL SUBOPT_0x84
001329 940e 1c10 	CALL __CWD1
00132b c006      	RJMP _0x2020110
                 _0x202007F:
00132c 940e 198c 	CALL SUBOPT_0x81
00132e 940e 199b 	CALL SUBOPT_0x84
001330 2766      	CLR  R22
001331 2777      	CLR  R23
                 _0x2020110:
                +
001332 87ea     +STD Y + 10 , R30
001333 87fb     +STD Y + 10 + 1 , R31
001334 876c     +STD Y + 10 + 2 , R22
001335 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
001336 ff02      	SBRS R16,2
001337 c012      	RJMP _0x2020081
001338 85ad      	LDD  R26,Y+13
001339 23aa      	TST  R26
00133a f442      	BRPL _0x2020082
00133b 940e 198e 	CALL SUBOPT_0x82
00133d 940e 1c02 	CALL __ANEGD1
00133f 940e 1987 	CALL SUBOPT_0x80
001341 e2ed      	LDI  R30,LOW(45)
001342 8bed      	STD  Y+21,R30
                 _0x2020082:
001343 89ed      	LDD  R30,Y+21
001344 30e0      	CPI  R30,0
001345 f019      	BREQ _0x2020083
001346 5f1f      	SUBI R17,-LOW(1)
001347 5f4f      	SUBI R20,-LOW(1)
001348 c001      	RJMP _0x2020084
                 _0x2020083:
001349 7f0b      	ANDI R16,LOW(251)
                 _0x2020084:
                 _0x2020081:
00134a 2f34      	MOV  R19,R20
                 _0x202006D:
00134b fd00      	SBRC R16,0
00134c c014      	RJMP _0x2020085
                 _0x2020086:
00134d 1715      	CP   R17,R21
00134e f410      	BRSH _0x2020089
00134f 1735      	CP   R19,R21
001350 f008      	BRLO _0x202008A
                 _0x2020089:
001351 c00f      	RJMP _0x2020088
                 _0x202008A:
001352 ff07      	SBRS R16,7
001353 c008      	RJMP _0x202008B
001354 ff02      	SBRS R16,2
001355 c004      	RJMP _0x202008C
001356 7f0b      	ANDI R16,LOW(251)
001357 892d      	LDD  R18,Y+21
001358 5011      	SUBI R17,LOW(1)
001359 c001      	RJMP _0x202008D
                 _0x202008C:
00135a e320      	LDI  R18,LOW(48)
                 _0x202008D:
00135b c001      	RJMP _0x202008E
                 _0x202008B:
00135c e220      	LDI  R18,LOW(32)
                 _0x202008E:
00135d 940e 1965 	CALL SUBOPT_0x7B
00135f 5051      	SUBI R21,LOW(1)
001360 cfec      	RJMP _0x2020086
                 _0x2020088:
                 _0x2020085:
                 _0x202008F:
001361 1714      	CP   R17,R20
001362 f490      	BRSH _0x2020091
001363 6100      	ORI  R16,LOW(16)
001364 ff02      	SBRS R16,2
001365 c006      	RJMP _0x2020092
001366 940e 19a5 	CALL SUBOPT_0x86
001368 f009      	BREQ _0x2020093
001369 5051      	SUBI R21,LOW(1)
                 _0x2020093:
00136a 5011      	SUBI R17,LOW(1)
00136b 5041      	SUBI R20,LOW(1)
                 _0x2020092:
00136c e3e0      	LDI  R30,LOW(48)
00136d 93ea      	ST   -Y,R30
00136e 940e 197a 	CALL SUBOPT_0x7E
001370 3050      	CPI  R21,0
001371 f009      	BREQ _0x2020094
001372 5051      	SUBI R21,LOW(1)
                 _0x2020094:
001373 5041      	SUBI R20,LOW(1)
001374 cfec      	RJMP _0x202008F
                 _0x2020091:
001375 2f31      	MOV  R19,R17
001376 89ec      	LDD  R30,Y+20
001377 30e0      	CPI  R30,0
001378 f4b9      	BRNE _0x2020095
                 _0x2020096:
001379 3030      	CPI  R19,0
00137a f0a1      	BREQ _0x2020098
00137b ff03      	SBRS R16,3
00137c c006      	RJMP _0x2020099
00137d 85ee      	LDD  R30,Y+14
00137e 85ff      	LDD  R31,Y+14+1
00137f 9125      	LPM  R18,Z+
001380 87ee      	STD  Y+14,R30
001381 87ff      	STD  Y+14+1,R31
001382 c005      	RJMP _0x202009A
                 _0x2020099:
001383 85ae      	LDD  R26,Y+14
001384 85bf      	LDD  R27,Y+14+1
001385 912d      	LD   R18,X+
001386 87ae      	STD  Y+14,R26
001387 87bf      	STD  Y+14+1,R27
                 _0x202009A:
001388 940e 1965 	CALL SUBOPT_0x7B
00138a 3050      	CPI  R21,0
00138b f009      	BREQ _0x202009B
00138c 5051      	SUBI R21,LOW(1)
                 _0x202009B:
00138d 5031      	SUBI R19,LOW(1)
00138e cfea      	RJMP _0x2020096
                 _0x2020098:
00138f c051      	RJMP _0x202009C
                 _0x2020095:
                 _0x202009E:
001390 940e 19b7 	CALL SUBOPT_0x87
001392 940e 1c40 	CALL __DIVD21U
001394 2f2e      	MOV  R18,R30
001395 302a      	CPI  R18,10
001396 f030      	BRLO _0x20200A0
001397 ff03      	SBRS R16,3
001398 c002      	RJMP _0x20200A1
001399 5c29      	SUBI R18,-LOW(55)
00139a c001      	RJMP _0x20200A2
                 _0x20200A1:
00139b 5a29      	SUBI R18,-LOW(87)
                 _0x20200A2:
00139c c001      	RJMP _0x20200A3
                 _0x20200A0:
00139d 5d20      	SUBI R18,-LOW(48)
                 _0x20200A3:
00139e fd04      	SBRC R16,4
00139f c021      	RJMP _0x20200A5
0013a0 3321      	CPI  R18,49
0013a1 f460      	BRSH _0x20200A7
                +
0013a2 89a8     +LDD R26 , Y + 16
0013a3 89b9     +LDD R27 , Y + 16 + 1
0013a4 898a     +LDD R24 , Y + 16 + 2
0013a5 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
0013a6 30a1     +CPI R26 , LOW ( 0x1 )
0013a7 e0e0     +LDI R30 , HIGH ( 0x1 )
0013a8 07be     +CPC R27 , R30
0013a9 e0e0     +LDI R30 , BYTE3 ( 0x1 )
0013aa 078e     +CPC R24 , R30
0013ab e0e0     +LDI R30 , BYTE4 ( 0x1 )
0013ac 079e     +CPC R25 , R30
                 	__CPD2N 0x1
0013ad f409      	BRNE _0x20200A6
                 _0x20200A7:
0013ae c00b      	RJMP _0x20200A9
                 _0x20200A6:
0013af 1743      	CP   R20,R19
0013b0 f440      	BRSH _0x2020111
0013b1 1753      	CP   R21,R19
0013b2 f010      	BRLO _0x20200AC
0013b3 ff00      	SBRS R16,0
0013b4 c001      	RJMP _0x20200AD
                 _0x20200AC:
0013b5 c010      	RJMP _0x20200AB
                 _0x20200AD:
0013b6 e220      	LDI  R18,LOW(32)
0013b7 ff07      	SBRS R16,7
0013b8 c008      	RJMP _0x20200AE
                 _0x2020111:
0013b9 e320      	LDI  R18,LOW(48)
                 _0x20200A9:
0013ba 6100      	ORI  R16,LOW(16)
0013bb ff02      	SBRS R16,2
0013bc c004      	RJMP _0x20200AF
0013bd 940e 19a5 	CALL SUBOPT_0x86
0013bf f009      	BREQ _0x20200B0
0013c0 5051      	SUBI R21,LOW(1)
                 _0x20200B0:
                 _0x20200AF:
                 _0x20200AE:
                 _0x20200A5:
0013c1 940e 1965 	CALL SUBOPT_0x7B
0013c3 3050      	CPI  R21,0
0013c4 f009      	BREQ _0x20200B1
0013c5 5051      	SUBI R21,LOW(1)
                 _0x20200B1:
                 _0x20200AB:
0013c6 5031      	SUBI R19,LOW(1)
0013c7 940e 19b7 	CALL SUBOPT_0x87
0013c9 940e 1c7f 	CALL __MODD21U
0013cb 940e 1987 	CALL SUBOPT_0x80
0013cd 89ec      	LDD  R30,Y+20
                +
0013ce 89a8     +LDD R26 , Y + 16
0013cf 89b9     +LDD R27 , Y + 16 + 1
0013d0 898a     +LDD R24 , Y + 16 + 2
0013d1 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
0013d2 27ff      	CLR  R31
0013d3 2766      	CLR  R22
0013d4 2777      	CLR  R23
0013d5 940e 1c40 	CALL __DIVD21U
0013d7 940e 19a0 	CALL SUBOPT_0x85
                +
0013d9 89e8     +LDD R30 , Y + 16
0013da 89f9     +LDD R31 , Y + 16 + 1
0013db 896a     +LDD R22 , Y + 16 + 2
0013dc 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
0013dd 940e 1cf0 	CALL __CPD10
0013df f009      	BREQ _0x202009F
0013e0 cfaf      	RJMP _0x202009E
                 _0x202009F:
                 _0x202009C:
0013e1 ff00      	SBRS R16,0
0013e2 c008      	RJMP _0x20200B2
                 _0x20200B3:
0013e3 3050      	CPI  R21,0
0013e4 f031      	BREQ _0x20200B5
0013e5 5051      	SUBI R21,LOW(1)
0013e6 e2e0      	LDI  R30,LOW(32)
0013e7 93ea      	ST   -Y,R30
0013e8 940e 197a 	CALL SUBOPT_0x7E
0013ea cff8      	RJMP _0x20200B3
                 _0x20200B5:
                 _0x20200B2:
                 _0x20200B6:
                 _0x2020054:
                 _0x202010F:
0013eb e010      	LDI  R17,LOW(0)
                 _0x2020035:
0013ec ce0a      	RJMP _0x2020030
                 _0x2020032:
0013ed 81ae      	LDD  R26,Y+6
0013ee 81bf      	LDD  R27,Y+6+1
0013ef 940e 1c9d 	CALL __GETW1P
0013f1 940e 1d0a 	CALL __LOADLOCR6
0013f3 96ef      	ADIW R28,63
0013f4 966f      	ADIW R28,31
0013f5 9508      	RET
                 _vsprintf:
0013f6 93ba      	ST   -Y,R27
0013f7 93aa      	ST   -Y,R26
0013f8 9726      	SBIW R28,6
0013f9 931a      	ST   -Y,R17
0013fa 930a      	ST   -Y,R16
0013fb 85ec      	LDD  R30,Y+12
0013fc 85fd      	LDD  R31,Y+12+1
0013fd 9730      	SBIW R30,0
0013fe f421      	BRNE _0x20200BA
0013ff efef      	LDI  R30,LOW(65535)
001400 efff      	LDI  R31,HIGH(65535)
001401 940c 15ad 	JMP  _0x20C0002
                 _0x20200BA:
001403 85ec      	LDD  R30,Y+12
001404 85fd      	LDD  R31,Y+12+1
001405 83ec      	STD  Y+4,R30
001406 83fd      	STD  Y+4+1,R31
001407 e0e0      	LDI  R30,LOW(0)
001408 83ee      	STD  Y+6,R30
001409 83ef      	STD  Y+6+1,R30
00140a 85ea      	LDD  R30,Y+10
00140b 85fb      	LDD  R31,Y+10+1
00140c 93fa      	ST   -Y,R31
00140d 93ea      	ST   -Y,R30
00140e 85ea      	LDD  R30,Y+10
00140f 85fb      	LDD  R31,Y+10+1
001410 93fa      	ST   -Y,R31
001411 93ea      	ST   -Y,R30
001412 ece8      	LDI  R30,LOW(_put_buff_G101)
001413 e1f0      	LDI  R31,HIGH(_put_buff_G101)
001414 93fa      	ST   -Y,R31
001415 93ea      	ST   -Y,R30
001416 01de      	MOVW R26,R28
001417 9618      	ADIW R26,8
001418 ddc1      	RCALL __print_G101
001419 018f      	MOVW R16,R30
00141a 81ac      	LDD  R26,Y+4
00141b 81bd      	LDD  R27,Y+4+1
00141c e0e0      	LDI  R30,LOW(0)
00141d 93ec      	ST   X,R30
00141e 01f8      	MOVW R30,R16
00141f 940c 15ad 	JMP  _0x20C0002
                 
                 	.CSEG
                 _memcpy:
001421 93ba      	ST   -Y,R27
001422 93aa      	ST   -Y,R26
001423 8199          ldd  r25,y+1
001424 8188          ld   r24,y
001425 9600          adiw r24,0
001426 f041          breq memcpy1
001427 81bd          ldd  r27,y+5
001428 81ac          ldd  r26,y+4
001429 81fb          ldd  r31,y+3
00142a 81ea          ldd  r30,y+2
                 memcpy0:
00142b 9161          ld   r22,z+
00142c 936d          st   x+,r22
00142d 9701          sbiw r24,1
00142e f7e1          brne memcpy0
                 memcpy1:
00142f 81fd          ldd  r31,y+5
001430 81ec          ldd  r30,y+4
001431 9626      	ADIW R28,6
001432 9508      	RET
                 _strcpyf:
001433 93ba      	ST   -Y,R27
001434 93aa      	ST   -Y,R26
001435 91e9          ld   r30,y+
001436 91f9          ld   r31,y+
001437 91a9          ld   r26,y+
001438 91b9          ld   r27,y+
001439 01cd          movw r24,r26
                 strcpyf0:
00143a 9005      	lpm  r0,z+
00143b 920d          st   x+,r0
00143c 2000          tst  r0
00143d f7e1          brne strcpyf0
00143e 01fc          movw r30,r24
00143f 9508          ret
                 _strlen:
001440 93ba      	ST   -Y,R27
001441 93aa      	ST   -Y,R26
001442 91a9          ld   r26,y+
001443 91b9          ld   r27,y+
001444 27ee          clr  r30
001445 27ff          clr  r31
                 strlen0:
001446 916d          ld   r22,x+
001447 2366          tst  r22
001448 f011          breq strlen1
001449 9631          adiw r30,1
00144a cffb          rjmp strlen0
                 strlen1:
00144b 9508          ret
                 _strlenf:
00144c 93ba      	ST   -Y,R27
00144d 93aa      	ST   -Y,R26
00144e 27aa          clr  r26
00144f 27bb          clr  r27
001450 91e9          ld   r30,y+
001451 91f9          ld   r31,y+
                 strlenf0:
001452 9005      	lpm  r0,z+
001453 2000          tst  r0
001454 f011          breq strlenf1
001455 9611          adiw r26,1
001456 cffb          rjmp strlenf0
                 strlenf1:
001457 01fd          movw r30,r26
001458 9508          ret
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
001459 940e 1cca 	CALL __PUTPARD2
00145b 817b         ldd  r23,y+3
00145c 816a         ldd  r22,y+2
00145d 81f9         ldd  r31,y+1
00145e 81e8         ld   r30,y
00145f fb77         bst  r23,7
001460 0f77         lsl  r23
001461 fd67         sbrc r22,7
001462 6071         sbr  r23,1
001463 2f97         mov  r25,r23
001464 579e         subi r25,0x7e
001465 f081         breq __ftrunc0
001466 f078         brcs __ftrunc0
001467 3198         cpi  r25,24
001468 f490         brsh __ftrunc1
001469 27aa         clr  r26
00146a 27bb         clr  r27
00146b 2788         clr  r24
                 __ftrunc2:
00146c 9408         sec
00146d 9587         ror  r24
00146e 95b7         ror  r27
00146f 95a7         ror  r26
001470 959a         dec  r25
001471 f7d1         brne __ftrunc2
001472 23ea         and  r30,r26
001473 23fb         and  r31,r27
001474 2368         and  r22,r24
001475 c005         rjmp __ftrunc1
                 __ftrunc0:
001476 94e8         clt
001477 2777         clr  r23
001478 27ee         clr  r30
001479 27ff         clr  r31
00147a 2766         clr  r22
                 __ftrunc1:
00147b 776f         cbr  r22,0x80
00147c 9576         lsr  r23
00147d f408         brcc __ftrunc3
00147e 6860         sbr  r22,0x80
                 __ftrunc3:
00147f f977         bld  r23,7
001480 91a9         ld   r26,y+
001481 91b9         ld   r27,y+
001482 9189         ld   r24,y+
001483 9199         ld   r25,y+
001484 17ea         cp   r30,r26
001485 07fb         cpc  r31,r27
001486 0768         cpc  r22,r24
001487 0779         cpc  r23,r25
001488 fb97         bst  r25,7
001489 9508         ret
                 _floor:
00148a 940e 1cca 	CALL __PUTPARD2
00148c 940e 1cbb 	CALL __GETD2S0
00148e 940e 1459 	CALL _ftrunc
001490 940e 1cc0 	CALL __PUTD1S0
001492 f419          brne __floor1
                 __floor0:
001493 940e 183a 	CALL SUBOPT_0x50
001495 c005      	RJMP _0x20C0004
                 __floor1:
001496 f7e6          brtc __floor0
001497 940e 183a 	CALL SUBOPT_0x50
001499 940e 19c0 	CALL SUBOPT_0x88
                 _0x20C0004:
00149b 9624      	ADIW R28,4
00149c 9508      	RET
                 _log:
00149d 940e 1cca 	CALL __PUTPARD2
00149f 9724      	SBIW R28,4
0014a0 931a      	ST   -Y,R17
0014a1 930a      	ST   -Y,R16
0014a2 940e 19c7 	CALL SUBOPT_0x89
0014a4 940e 1cf8 	CALL __CPD02
0014a6 f02c      	BRLT _0x208000C
                +
0014a7 efef     +LDI R30 , LOW ( 0xFF7FFFFF )
0014a8 efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
0014a9 e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
0014aa ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
0014ab c071      	RJMP _0x20C0003
                 _0x208000C:
0014ac 940e 19cc 	CALL SUBOPT_0x8A
0014ae 940e 1cc5 	CALL __PUTPARD1
0014b0 b7ad      	IN   R26,SPL
0014b1 b7be      	IN   R27,SPH
0014b2 9711      	SBIW R26,1
0014b3 931f      	PUSH R17
0014b4 930f      	PUSH R16
0014b5 940e 19fd 	CALL _frexp
0014b7 910f      	POP  R16
0014b8 911f      	POP  R17
0014b9 940e 19d1 	CALL SUBOPT_0x8B
0014bb 940e 19c7 	CALL SUBOPT_0x89
                +
0014bd efe3     +LDI R30 , LOW ( 0x3F3504F3 )
0014be e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
0014bf e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
0014c0 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
0014c1 940e 1ba3 	CALL __CMPF12
0014c3 f440      	BRSH _0x208000D
0014c4 940e 19d6 	CALL SUBOPT_0x8C
0014c6 940e 1ac0 	CALL __ADDF12
0014c8 940e 19d1 	CALL SUBOPT_0x8B
                +
0014ca 5001     +SUBI R16 , LOW ( 1 )
0014cb 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x208000D:
0014cc 940e 19cc 	CALL SUBOPT_0x8A
0014ce 940e 19c0 	CALL SUBOPT_0x88
0014d0 937f      	PUSH R23
0014d1 936f      	PUSH R22
0014d2 93ff      	PUSH R31
0014d3 93ef      	PUSH R30
0014d4 940e 19cc 	CALL SUBOPT_0x8A
                +
0014d6 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0014d7 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0014d8 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0014d9 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0014da 940e 1ac0 	CALL __ADDF12
0014dc 91af      	POP  R26
0014dd 91bf      	POP  R27
0014de 918f      	POP  R24
0014df 919f      	POP  R25
0014e0 940e 1b5e 	CALL __DIVF21
0014e2 940e 19d1 	CALL SUBOPT_0x8B
0014e4 940e 19d6 	CALL SUBOPT_0x8C
0014e6 940e 19d8 	CALL SUBOPT_0x8D
                +
0014e8 e2a6     +LDI R26 , LOW ( 0x3F654226 )
0014e9 e4b2     +LDI R27 , HIGH ( 0x3F654226 )
0014ea e685     +LDI R24 , BYTE3 ( 0x3F654226 )
0014eb e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
0014ec 940e 18f1 	CALL SUBOPT_0x68
                +
0014ee e4ee     +LDI R30 , LOW ( 0x4054114E )
0014ef e1f1     +LDI R31 , HIGH ( 0x4054114E )
0014f0 e564     +LDI R22 , BYTE3 ( 0x4054114E )
0014f1 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
0014f2 940e 17cd 	CALL SUBOPT_0x40
0014f4 940e 19c7 	CALL SUBOPT_0x89
0014f6 940e 1b10 	CALL __MULF12
0014f8 937f      	PUSH R23
0014f9 936f      	PUSH R22
0014fa 93ff      	PUSH R31
0014fb 93ef      	PUSH R30
0014fc 940e 19e0 	CALL SUBOPT_0x8E
                +
0014fe e4ad     +LDI R26 , LOW ( 0x3FD4114D )
0014ff e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
001500 ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
001501 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
001502 940e 1ab9 	CALL __SUBF12
001504 91af      	POP  R26
001505 91bf      	POP  R27
001506 918f      	POP  R24
001507 919f      	POP  R25
001508 940e 1b5e 	CALL __DIVF21
00150a 937f      	PUSH R23
00150b 936f      	PUSH R22
00150c 93ff      	PUSH R31
00150d 93ef      	PUSH R30
00150e 01f8      	MOVW R30,R16
00150f 940e 17c3 	CALL SUBOPT_0x3E
                +
001511 e1a8     +LDI R26 , LOW ( 0x3F317218 )
001512 e7b2     +LDI R27 , HIGH ( 0x3F317218 )
001513 e381     +LDI R24 , BYTE3 ( 0x3F317218 )
001514 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
001515 940e 1b10 	CALL __MULF12
001517 91af      	POP  R26
001518 91bf      	POP  R27
001519 918f      	POP  R24
00151a 919f      	POP  R25
00151b 940e 1ac0 	CALL __ADDF12
                 _0x20C0003:
00151d 8119      	LDD  R17,Y+1
00151e 8108      	LDD  R16,Y+0
00151f 962a      	ADIW R28,10
001520 9508      	RET
                 _exp:
001521 940e 1cca 	CALL __PUTPARD2
001523 9728      	SBIW R28,8
001524 931a      	ST   -Y,R17
001525 930a      	ST   -Y,R16
001526 940e 19e5 	CALL SUBOPT_0x8F
                +
001528 e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
001529 eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
00152a ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
00152b ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
00152c 940e 1ba3 	CALL __CMPF12
00152e f418      	BRSH _0x208000F
00152f 940e 19ea 	CALL SUBOPT_0x90
001531 c07b      	RJMP _0x20C0002
                 _0x208000F:
001532 940e 198e 	CALL SUBOPT_0x82
001534 940e 1cf0 	CALL __CPD10
001536 f419      	BRNE _0x2080010
001537 940e 1671 	CALL SUBOPT_0xC
001539 c073      	RJMP _0x20C0002
                 _0x2080010:
00153a 940e 19e5 	CALL SUBOPT_0x8F
                +
00153c e1e8     +LDI R30 , LOW ( 0x42B17218 )
00153d e7f2     +LDI R31 , HIGH ( 0x42B17218 )
00153e eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
00153f e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
001540 940e 1ba3 	CALL __CMPF12
001542 f009      	BREQ PC+2
001543 f410      	BRCC PC+3
001544 940c 154b 	JMP  _0x2080011
                +
001546 efef     +LDI R30 , LOW ( 0x7F7FFFFF )
001547 efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
001548 e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
001549 e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
00154a c062      	RJMP _0x20C0002
                 _0x2080011:
00154b 940e 19e5 	CALL SUBOPT_0x8F
                +
00154d e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
00154e eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
00154f eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
001550 e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
001551 940e 1b10 	CALL __MULF12
001553 940e 1987 	CALL SUBOPT_0x80
001555 940e 19e5 	CALL SUBOPT_0x8F
001557 df32      	RCALL _floor
001558 940e 1a4f 	CALL __CFD1
00155a 018f      	MOVW R16,R30
00155b 01f8      	MOVW R30,R16
00155c 940e 19e5 	CALL SUBOPT_0x8F
00155e 940e 17c3 	CALL SUBOPT_0x3E
001560 940e 17cd 	CALL SUBOPT_0x40
001562 01df      	MOVW R26,R30
001563 01cb      	MOVW R24,R22
                +
001564 e0e0     +LDI R30 , LOW ( 0x3F000000 )
001565 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
001566 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
001567 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
001568 940e 17cd 	CALL SUBOPT_0x40
00156a 940e 19d1 	CALL SUBOPT_0x8B
00156c 940e 19d6 	CALL SUBOPT_0x8C
00156e 940e 19d8 	CALL SUBOPT_0x8D
                +
001570 e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
001571 e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
001572 e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
001573 e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
001574 940e 1b10 	CALL __MULF12
                +
001576 eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
001577 eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
001578 ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
001579 e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
00157a 940e 1ac0 	CALL __ADDF12
00157c 940e 19c7 	CALL SUBOPT_0x89
00157e 940e 1b10 	CALL __MULF12
001580 940e 19d1 	CALL SUBOPT_0x8B
001582 940e 19e0 	CALL SUBOPT_0x8E
                +
001584 e2a8     +LDI R26 , LOW ( 0x41A68D28 )
001585 e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
001586 ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
001587 e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
001588 940e 1ac0 	CALL __ADDF12
00158a 940e 1929 	CALL SUBOPT_0x70
00158c 940e 19cc 	CALL SUBOPT_0x8A
00158e 940e 191d 	CALL SUBOPT_0x6E
001590 940e 1ac0 	CALL __ADDF12
                +
001592 efa3     +LDI R26 , LOW ( 0x3FB504F3 )
001593 e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
001594 eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
001595 e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
001596 940e 1b10 	CALL __MULF12
001598 937f      	PUSH R23
001599 936f      	PUSH R22
00159a 93ff      	PUSH R31
00159b 93ef      	PUSH R30
00159c 940e 19c7 	CALL SUBOPT_0x89
00159e 940e 19e0 	CALL SUBOPT_0x8E
0015a0 940e 1ab9 	CALL __SUBF12
0015a2 91af      	POP  R26
0015a3 91bf      	POP  R27
0015a4 918f      	POP  R24
0015a5 919f      	POP  R25
0015a6 940e 1b5e 	CALL __DIVF21
0015a8 940e 1cc5 	CALL __PUTPARD1
0015aa 01d8      	MOVW R26,R16
0015ab 940e 1a0e 	CALL _ldexp
                 _0x20C0002:
0015ad 8119      	LDD  R17,Y+1
0015ae 8108      	LDD  R16,Y+0
0015af 962e      	ADIW R28,14
0015b0 9508      	RET
                 _pow:
0015b1 940e 1cca 	CALL __PUTPARD2
0015b3 9724      	SBIW R28,4
0015b4 940e 1835 	CALL SUBOPT_0x4F
0015b6 940e 1cf0 	CALL __CPD10
0015b8 f419      	BRNE _0x2080012
0015b9 940e 19ea 	CALL SUBOPT_0x90
0015bb c043      	RJMP _0x20C0001
                 _0x2080012:
                +
0015bc 85a8     +LDD R26 , Y + 8
0015bd 85b9     +LDD R27 , Y + 8 + 1
0015be 858a     +LDD R24 , Y + 8 + 2
0015bf 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0015c0 940e 1cf8 	CALL __CPD02
0015c2 f484      	BRGE _0x2080013
0015c3 940e 17e4 	CALL SUBOPT_0x45
0015c5 940e 1cf0 	CALL __CPD10
0015c7 f419      	BRNE _0x2080014
0015c8 940e 1671 	CALL SUBOPT_0xC
0015ca c034      	RJMP _0x20C0001
                 _0x2080014:
                +
0015cb 85a8     +LDD R26 , Y + 8
0015cc 85b9     +LDD R27 , Y + 8 + 1
0015cd 858a     +LDD R24 , Y + 8 + 2
0015ce 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0015cf 940e 19ef 	CALL SUBOPT_0x91
0015d1 df4f      	RCALL _exp
0015d2 c02c      	RJMP _0x20C0001
                 _0x2080013:
0015d3 940e 17e4 	CALL SUBOPT_0x45
0015d5 01de      	MOVW R26,R28
0015d6 940e 1a4f 	CALL __CFD1
0015d8 940e 1cac 	CALL __PUTDP1
0015da 940e 183a 	CALL SUBOPT_0x50
0015dc 940e 1a86 	CALL __CDF1
0015de 01df      	MOVW R26,R30
0015df 01cb      	MOVW R24,R22
0015e0 940e 17e4 	CALL SUBOPT_0x45
0015e2 940e 1cfe 	CALL __CPD12
0015e4 f019      	BREQ _0x2080015
0015e5 940e 19ea 	CALL SUBOPT_0x90
0015e7 c017      	RJMP _0x20C0001
                 _0x2080015:
0015e8 940e 1835 	CALL SUBOPT_0x4F
0015ea 940e 1a1a 	CALL __ANEGF1
0015ec 01df      	MOVW R26,R30
0015ed 01cb      	MOVW R24,R22
0015ee 940e 19ef 	CALL SUBOPT_0x91
0015f0 df30      	RCALL _exp
                +
0015f1 87e8     +STD Y + 8 , R30
0015f2 87f9     +STD Y + 8 + 1 , R31
0015f3 876a     +STD Y + 8 + 2 , R22
0015f4 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
0015f5 81e8      	LD   R30,Y
0015f6 70e1      	ANDI R30,LOW(0x1)
0015f7 f419      	BRNE _0x2080016
0015f8 940e 1835 	CALL SUBOPT_0x4F
0015fa c004      	RJMP _0x20C0001
                 _0x2080016:
0015fb 940e 1835 	CALL SUBOPT_0x4F
0015fd 940e 1a1a 	CALL __ANEGF1
                 _0x20C0001:
0015ff 962c      	ADIW R28,12
001600 9508      	RET
                 
                 	.CSEG
                 _isprint:
001601 93aa      	ST   -Y,R26
001602 e0e1          ldi  r30,1
001603 91f9          ld   r31,y+
001604 32f0          cpi  r31,32
001605 f010          brlo isprint0
001606 38f0          cpi  r31,128
001607 f008          brlo isprint1
                 isprint0:
001608 27ee          clr  r30
                 isprint1:
001609 9508          ret
                 
                 	.DSEG
                 _SWITCH:
000600           	.BYTE 0x1
                 _CURRENT_VOLT:
000601           	.BYTE 0x4
                 _CURRENT_AMP:
000605           	.BYTE 0x4
                 
                 	.ESEG
                 _ADJ0_SENSOR5A:
000000 ec
000001 51
000002 b8
000003 3d        	.DB  0xEC,0x51,0xB8,0x3D
                 _ADJ0_SENSOR20A:
000004 ae
000005 47
000006 e1
000007 3d        	.DB  0xAE,0x47,0xE1,0x3D
                 _ADJ0_SENSOR30A:
000008 ae
000009 47
00000a e1
00000b 3d        	.DB  0xAE,0x47,0xE1,0x3D
                 
                 	.DSEG
                 __FlagPackageTerminate0:
000609           	.BYTE 0x1
                 _rxPackage0:
00060a           	.BYTE 0x20
                 _flag_state:
00062a           	.BYTE 0x2
                 _rx_rd_index1:
00062c           	.BYTE 0x2
                 _rx_counter1:
00062e           	.BYTE 0x2
                 _rx_buffer1:
000630           	.BYTE 0x200
                 _number:
000830           	.BYTE 0x2
                 _AMP_ADJ_ZERO:
000832           	.BYTE 0x4
                 _SENSOR_SENSITIVE:
000836           	.BYTE 0x4
                 _adcValue:
00083a           	.BYTE 0x2
                 _total:
00083c           	.BYTE 0x4
                 _avg:
000840           	.BYTE 0x4
                 _value:
000844           	.BYTE 0x4
                 _Viout:
000848           	.BYTE 0x4
                 _Vdif:
00084c           	.BYTE 0x4
                 _Vsq_avg:
000850           	.BYTE 0x4
                 _volt:
000854           	.BYTE 0x4
                 _amp:
000858           	.BYTE 0x4
                 _power:
00085c           	.BYTE 0x4
                 _whour:
000860           	.BYTE 0x4
                 _Vsum:
000864           	.BYTE 0x4
                 _Isum:
000868           	.BYTE 0x4
                 _Psum:
00086c           	.BYTE 0x4
                 _WHsum:
000870           	.BYTE 0x4
                 _Vavg:
000874           	.BYTE 0x4
                 _Iavg:
000878           	.BYTE 0x4
                 _Pavg:
00087c           	.BYTE 0x4
                 _countSampling:
000880           	.BYTE 0x2
                 _EndDevice_MacAddress:
000882           	.BYTE 0x8
                 _Gateway_MacAddress:
00088a           	.BYTE 0x8
                 _STATUS_DEVICE:
000892           	.BYTE 0x1
                 _event_state:
000893           	.BYTE 0x2
                 _input:
000895           	.BYTE 0x3C
                 _count_input:
0008d1           	.BYTE 0x2
                 _count_event:
0008d3           	.BYTE 0x2
                 _baseCounter:
0008d5           	.BYTE 0x4
                 _pressedBTCounter:
0008d9           	.BYTE 0x1
                 __FlagBT:
0008da           	.BYTE 0x1
                 __Flag05INT:
0008db           	.BYTE 0x1
                 __Flag0001INT:
0008dc           	.BYTE 0x1
                 __BlinkLED_1Hz:
0008dd           	.BYTE 0x1
                 _Eaddress:
0008de           	.BYTE 0x1
                 _specData:
0008df           	.BYTE 0xD
                 _SEND_EVENT_TEST:
0008ec           	.BYTE 0x26
                 _rxPackageIndex0:
000912           	.BYTE 0x1
                 _rxPackageIndexCount0:
000913           	.BYTE 0x1
                 _AI_COMMAND:
000914           	.BYTE 0x8
                 _SL_COMMAND:
00091c           	.BYTE 0x8
                 _SH_COMMAND:
000924           	.BYTE 0x8
                 _EVENT:
00092c           	.BYTE 0x2
                 _JOIN_A1:
00092e           	.BYTE 0x27
                 _PING_A4:
000955           	.BYTE 0x27
                 _SEND_EVENT_:
00097c           	.BYTE 0x29
                 _SEND_REPORT_:
0009a5           	.BYTE 0x4C
                 __voltage:
0009f1           	.BYTE 0x8
                 __amp:
0009f9           	.BYTE 0x8
                 __power:
000a01           	.BYTE 0x8
                 __watt:
000a09           	.BYTE 0x8
                 _Vreferent:
000a11           	.BYTE 0x1
                 __seed_G100:
000a12           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00160a 931a      	ST   -Y,R17
00160b 930a      	ST   -Y,R16
                +
00160c e000     +LDI R16 , LOW ( 0 )
00160d e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
00160e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1:
00160f e9a5      	LDI  R26,LOW(_input)
001610 e0b8      	LDI  R27,HIGH(_input)
001611 0fee      	LSL  R30
001612 1fff      	ROL  R31
001613 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2:
001614 940e 1c10 	CALL __CWD1
001616 940e 1cc5 	CALL __PUTPARD1
001618 e084      	LDI  R24,4
001619 940e 0650 	CALL _printDebug
00161b 9626      	ADIW R28,6
00161c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x3:
00161d 91ed      	LD   R30,X+
00161e 91fd      	LD   R31,X+
00161f 9631      	ADIW R30,1
001620 93fe      	ST   -X,R31
001621 93ee      	ST   -X,R30
001622 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x4:
001623 91e0 08d1 	LDS  R30,_count_input
001625 91f0 08d2 	LDS  R31,_count_input+1
001627 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
001628 91a0 08de 	LDS  R26,_Eaddress
00162a 27bb      	CLR  R27
00162b 940e 0e76 	CALL _EEPROM_read
00162d 93e0 0892 	STS  _STATUS_DEVICE,R30
00162f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x6:
001630 91e0 08de 	LDS  R30,_Eaddress
001632 e0f0      	LDI  R31,0
001633 93fa      	ST   -Y,R31
001634 93ea      	ST   -Y,R30
001635 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x7:
                +
001636 e0e0     +LDI R30 , LOW ( 0x43390000 )
001637 e0f0     +LDI R31 , HIGH ( 0x43390000 )
001638 e369     +LDI R22 , BYTE3 ( 0x43390000 )
001639 e473     +LDI R23 , BYTE4 ( 0x43390000 )
                 	__GETD1N 0x43390000
00163a 93e0 0836 	STS  _SENSOR_SENSITIVE,R30
00163c 93f0 0837 	STS  _SENSOR_SENSITIVE+1,R31
00163e 9360 0838 	STS  _SENSOR_SENSITIVE+2,R22
001640 9370 0839 	STS  _SENSOR_SENSITIVE+3,R23
001642 e0a0      	LDI  R26,LOW(_ADJ0_SENSOR5A)
001643 e0b0      	LDI  R27,HIGH(_ADJ0_SENSOR5A)
001644 940e 1cdc 	CALL __EEPROMRDD
001646 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
001647 01df      	MOVW R26,R30
001648 01cb      	MOVW R24,R22
001649 940e 1cf8 	CALL __CPD02
00164b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
00164c 93e0 0836 	STS  _SENSOR_SENSITIVE,R30
00164e 93f0 0837 	STS  _SENSOR_SENSITIVE+1,R31
001650 9360 0838 	STS  _SENSOR_SENSITIVE+2,R22
001652 9370 0839 	STS  _SENSOR_SENSITIVE+3,R23
001654 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xA:
001655 93fa      	ST   -Y,R31
001656 93ea      	ST   -Y,R30
001657 e080      	LDI  R24,0
001658 940e 0650 	CALL _printDebug
00165a 9622      	ADIW R28,2
                +
00165b eeeb     +LDI R30 , LOW ( 2 * _0x0 + ( 71 ) )
00165c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 71 ) )
                 	__POINTW1FN _0x0,71
00165d 93fa      	ST   -Y,R31
00165e 93ea      	ST   -Y,R30
                +
00165f e0e0     +LDI R30 , LOW ( 0x3F800000 )
001660 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
001661 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
001662 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
001663 940e 1cc5 	CALL __PUTPARD1
001665 e084      	LDI  R24,4
001666 940e 0650 	CALL _printDebug
001668 9626      	ADIW R28,6
001669 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 26 TIMES, CODE SIZE REDUCTION:97 WORDS
                 SUBOPT_0xB:
00166a 93fa      	ST   -Y,R31
00166b 93ea      	ST   -Y,R30
00166c e080      	LDI  R24,0
00166d 940e 0650 	CALL _printDebug
00166f 9622      	ADIW R28,2
001670 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
                +
001671 e0e0     +LDI R30 , LOW ( 0x3F800000 )
001672 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
001673 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
001674 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
001675 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:57 WORDS
                 SUBOPT_0xD:
001676 940e 1cc5 	CALL __PUTPARD1
001678 e084      	LDI  R24,4
001679 940e 0650 	CALL _printDebug
00167b 9626      	ADIW R28,6
00167c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
00167d 91e0 0836 	LDS  R30,_SENSOR_SENSITIVE
00167f 91f0 0837 	LDS  R31,_SENSOR_SENSITIVE+1
001681 9160 0838 	LDS  R22,_SENSOR_SENSITIVE+2
001683 9170 0839 	LDS  R23,_SENSOR_SENSITIVE+3
001685 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
001686 91e0 0832 	LDS  R30,_AMP_ADJ_ZERO
001688 91f0 0833 	LDS  R31,_AMP_ADJ_ZERO+1
00168a 9160 0834 	LDS  R22,_AMP_ADJ_ZERO+2
00168c 9170 0835 	LDS  R23,_AMP_ADJ_ZERO+3
00168e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x10:
00168f e9e0      	LDI  R30,LOW(144)
                +
001690 93e0 08ee+STS _SEND_EVENT_TEST + ( 2 ) , R30
                 	__PUTB1MN _SEND_EVENT_TEST,2
                +
001692 93e0 08ef+STS _SEND_EVENT_TEST + ( 3 ) , R30
                 	__PUTB1MN _SEND_EVENT_TEST,3
001694 eae5      	LDI  R30,LOW(165)
                +
001695 93e0 090f+STS _SEND_EVENT_TEST + ( 35 ) , R30
                 	__PUTB1MN _SEND_EVENT_TEST,35
001697 e0e1      	LDI  R30,LOW(1)
                +
001698 93e0 0910+STS _SEND_EVENT_TEST + ( 36 ) , R30
                 	__PUTB1MN _SEND_EVENT_TEST,36
00169a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
00169b e0a0      	LDI  R26,LOW(0)
00169c e0b0      	LDI  R27,0
00169d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x12:
00169e 940e 08ea 	CALL _xbee_sendATCommand
0016a0 e6a4      	LDI  R26,LOW(100)
0016a1 e0b0      	LDI  R27,0
0016a2 940c 19f3 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x13:
0016a4 e6a4      	LDI  R26,LOW(100)
0016a5 e0b0      	LDI  R27,0
0016a6 940c 19f3 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
0016a8 91e0 0065 	LDS  R30,101
0016aa 60e4      	ORI  R30,4
0016ab 93e0 0065 	STS  101,R30
0016ad 98af      	CBI  0x15,7
0016ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x15:
0016af 91a0 0892 	LDS  R26,_STATUS_DEVICE
0016b1 940c 0e69 	JMP  _EEPROM_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
0016b3 e0a1      	LDI  R26,LOW(1)
0016b4 e0b0      	LDI  R27,0
0016b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x17:
0016b6 e0a2      	LDI  R26,LOW(2)
0016b7 e0b0      	LDI  R27,0
0016b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x18:
0016b9 01f4      	MOVW R30,R8
0016ba 9631      	ADIW R30,1
0016bb 014f      	MOVW R8,R30
0016bc 01d4      	MOVW R26,R8
0016bd e0ea      	LDI  R30,LOW(10)
0016be e0f0      	LDI  R31,HIGH(10)
0016bf 940e 1c71 	CALL __MODW21
0016c1 9730      	SBIW R30,0
0016c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
0016c3 eca8      	LDI  R26,LOW(200)
0016c4 e0b0      	LDI  R27,0
0016c5 940c 19f3 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1A:
0016c7 93e0 0892 	STS  _STATUS_DEVICE,R30
0016c9 cf66      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1B:
0016ca e0e4      	LDI  R30,LOW(4)
0016cb e0f0      	LDI  R31,HIGH(4)
0016cc 93e0 062a 	STS  _flag_state,R30
0016ce 93f0 062b 	STS  _flag_state+1,R31
0016d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1C:
0016d1 91e0 0065 	LDS  R30,101
0016d3 7feb      	ANDI R30,0xFB
0016d4 93e0 0065 	STS  101,R30
0016d6 9aaf      	SBI  0x15,7
0016d7 e0e0      	LDI  R30,LOW(0)
0016d8 cfee      	RJMP SUBOPT_0x1A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1D:
0016d9 e0e3      	LDI  R30,LOW(3)
0016da e0f0      	LDI  R31,HIGH(3)
0016db 93e0 062a 	STS  _flag_state,R30
0016dd 93f0 062b 	STS  _flag_state+1,R31
0016df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
0016e0 01fe      	MOVW R30,R28
0016e1 9632      	ADIW R30,2
0016e2 93fa      	ST   -Y,R31
0016e3 93ea      	ST   -Y,R30
0016e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
0016e5 93ba      	ST   -Y,R27
0016e6 93aa      	ST   -Y,R26
0016e7 9724      	SBIW R28,4
0016e8 e0e0      	LDI  R30,LOW(0)
0016e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x20:
0016ea 81ee      	LDD  R30,Y+6
0016eb 81ff      	LDD  R31,Y+6+1
0016ec 93fa      	ST   -Y,R31
0016ed 93ea      	ST   -Y,R30
0016ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
0016ef 85ac      	LDD  R26,Y+12
0016f0 85bd      	LDD  R27,Y+12+1
0016f1 940c 06bd 	JMP  _print_hex_ascii_line
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
0016f3 85a8      	LDD  R26,Y+8
0016f4 85b9      	LDD  R27,Y+8+1
0016f5 0fea      	ADD  R30,R26
0016f6 1ffb      	ADC  R31,R27
0016f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x23:
0016f8 93fa      	ST   -Y,R31
0016f9 93ea      	ST   -Y,R30
0016fa 01da      	MOVW R26,R20
0016fb 91ec      	LD   R30,X
0016fc 27ff      	CLR  R31
0016fd 2766      	CLR  R22
0016fe 2777      	CLR  R23
0016ff cf76      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x24:
001700 eaeb      	LDI  R30,LOW(171)
001701 93e0 0089 	STS  137,R30
001703 eae0      	LDI  R30,LOW(160)
001704 93e0 0088 	STS  136,R30
001706 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x25:
001707 920a      	ST   -Y,R0
001708 921a      	ST   -Y,R1
001709 92fa      	ST   -Y,R15
00170a 936a      	ST   -Y,R22
00170b 937a      	ST   -Y,R23
00170c 938a      	ST   -Y,R24
00170d 939a      	ST   -Y,R25
00170e 93aa      	ST   -Y,R26
00170f 93ba      	ST   -Y,R27
001710 93ea      	ST   -Y,R30
001711 93fa      	ST   -Y,R31
001712 b7ef      	IN   R30,SREG
001713 93ea      	ST   -Y,R30
001714 931a      	ST   -Y,R17
001715 930a      	ST   -Y,R16
001716 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
001717 2766      	CLR  R22
001718 2777      	CLR  R23
001719 cf5c      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x27:
00171a 81a9      	LDD  R26,Y+1
00171b 81ba      	LDD  R27,Y+1+1
00171c 27ee      	CLR  R30
00171d 0fa1      	ADD  R26,R17
00171e 1fbe      	ADC  R27,R30
00171f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x28:
001720 940e 1cb6 	CALL __GETD1S0
                +
001722 36e0     +CPI R30 , LOW ( 0x960 )
001723 e0a9     +LDI R26 , HIGH ( 0x960 )
001724 07fa     +CPC R31 , R26
001725 e0a0     +LDI R26 , BYTE3 ( 0x960 )
001726 076a     +CPC R22 , R26
001727 e0a0     +LDI R26 , BYTE4 ( 0x960 )
001728 077a     +CPC R23 , R26
                 	__CPD1N 0x960
001729 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x29:
                +
00172a 38e0     +CPI R30 , LOW ( 0x2580 )
00172b e2a5     +LDI R26 , HIGH ( 0x2580 )
00172c 07fa     +CPC R31 , R26
00172d e0a0     +LDI R26 , BYTE3 ( 0x2580 )
00172e 076a     +CPC R22 , R26
00172f e0a0     +LDI R26 , BYTE4 ( 0x2580 )
001730 077a     +CPC R23 , R26
                 	__CPD1N 0x2580
001731 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2A:
                +
001732 34e0     +CPI R30 , LOW ( 0x3840 )
001733 e3a8     +LDI R26 , HIGH ( 0x3840 )
001734 07fa     +CPC R31 , R26
001735 e0a0     +LDI R26 , BYTE3 ( 0x3840 )
001736 076a     +CPC R22 , R26
001737 e0a0     +LDI R26 , BYTE4 ( 0x3840 )
001738 077a     +CPC R23 , R26
                 	__CPD1N 0x3840
001739 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2B:
                +
00173a 30e0     +CPI R30 , LOW ( 0x4B00 )
00173b e4ab     +LDI R26 , HIGH ( 0x4B00 )
00173c 07fa     +CPC R31 , R26
00173d e0a0     +LDI R26 , BYTE3 ( 0x4B00 )
00173e 076a     +CPC R22 , R26
00173f e0a0     +LDI R26 , BYTE4 ( 0x4B00 )
001740 077a     +CPC R23 , R26
                 	__CPD1N 0x4B00
001741 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2C:
                +
001742 30e0     +CPI R30 , LOW ( 0x9600 )
001743 e9a6     +LDI R26 , HIGH ( 0x9600 )
001744 07fa     +CPC R31 , R26
001745 e0a0     +LDI R26 , BYTE3 ( 0x9600 )
001746 076a     +CPC R22 , R26
001747 e0a0     +LDI R26 , BYTE4 ( 0x9600 )
001748 077a     +CPC R23 , R26
                 	__CPD1N 0x9600
001749 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2D:
                +
00174a 30e0     +CPI R30 , LOW ( 0xE100 )
00174b eea1     +LDI R26 , HIGH ( 0xE100 )
00174c 07fa     +CPC R31 , R26
00174d e0a0     +LDI R26 , BYTE3 ( 0xE100 )
00174e 076a     +CPC R22 , R26
00174f e0a0     +LDI R26 , BYTE4 ( 0xE100 )
001750 077a     +CPC R23 , R26
                 	__CPD1N 0xE100
001751 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2E:
                +
001752 30e0     +CPI R30 , LOW ( 0x1C200 )
001753 eca2     +LDI R26 , HIGH ( 0x1C200 )
001754 07fa     +CPC R31 , R26
001755 e0a1     +LDI R26 , BYTE3 ( 0x1C200 )
001756 076a     +CPC R22 , R26
001757 e0a0     +LDI R26 , BYTE4 ( 0x1C200 )
001758 077a     +CPC R23 , R26
                 	__CPD1N 0x1C200
001759 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2F:
00175a 93fa      	ST   -Y,R31
00175b 93ea      	ST   -Y,R30
00175c e0a8      	LDI  R26,LOW(8)
00175d e0b0      	LDI  R27,0
00175e 940c 0675 	JMP  _print_payload
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 22 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x30:
001760 e0a8      	LDI  R26,LOW(8)
001761 e0b0      	LDI  R27,0
001762 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x31:
001763 01f8      	MOVW R30,R16
001764 81ac      	LDD  R26,Y+4
001765 81bd      	LDD  R27,Y+4+1
001766 0fae      	ADD  R26,R30
001767 1fbf      	ADC  R27,R31
001768 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x32:
001769 81a9      	LDD  R26,Y+1
00176a 81ba      	LDD  R27,Y+1+1
00176b 9612      	ADIW R26,2
00176c 91ac      	LD   R26,X
00176d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x33:
00176e 81a9      	LDD  R26,Y+1
00176f 81ba      	LDD  R27,Y+1+1
001770 9613      	ADIW R26,3
001771 91ac      	LD   R26,X
001772 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x34:
001773 e8e2      	LDI  R30,LOW(_EndDevice_MacAddress)
001774 e0f8      	LDI  R31,HIGH(_EndDevice_MacAddress)
001775 93fa      	ST   -Y,R31
001776 93ea      	ST   -Y,R30
001777 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x35:
001778 81eb      	LDD  R30,Y+3
001779 81fc      	LDD  R31,Y+3+1
00177a 9635      	ADIW R30,5
00177b 93fa      	ST   -Y,R31
00177c 93ea      	ST   -Y,R30
00177d e0a4      	LDI  R26,LOW(4)
00177e e0b0      	LDI  R27,0
00177f 940c 1421 	JMP  _memcpy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x36:
001781 81a9      	LDD  R26,Y+1
001782 81ba      	LDD  R27,Y+1+1
001783 9690      	ADIW R26,32
001784 91ac      	LD   R26,X
001785 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x37:
001786 e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
001787 e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
001788 93fa      	ST   -Y,R31
001789 93ea      	ST   -Y,R30
00178a 81eb      	LDD  R30,Y+3
00178b 81fc      	LDD  R31,Y+3+1
00178c 9631      	ADIW R30,1
00178d 93fa      	ST   -Y,R31
00178e 93ea      	ST   -Y,R30
00178f cfd0      	RJMP SUBOPT_0x30
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x38:
001790 940e 1421 	CALL _memcpy
001792 de90      	RCALL SUBOPT_0x4
001793 ce7b      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x39:
001794 de8e      	RCALL SUBOPT_0x4
001795 ce79      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
001796 9aaf      	SBI  0x15,7
001797 91e0 0065 	LDS  R30,101
001799 7feb      	ANDI R30,0xFB
00179a 93e0 0065 	STS  101,R30
00179c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3B:
00179d 93ea      	ST   -Y,R30
                +
00179e e0a0     +LDI R26 , LOW ( 0x9600 )
00179f e9b6     +LDI R27 , HIGH ( 0x9600 )
0017a0 e080     +LDI R24 , BYTE3 ( 0x9600 )
0017a1 e090     +LDI R25 , BYTE4 ( 0x9600 )
                 	__GETD2N 0x9600
0017a2 940c 0880 	JMP  _init_uart
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:20 WORDS
                 SUBOPT_0x3C:
0017a4 e0e0      	LDI  R30,0
0017a5 99cf      	SBIC 0x19,7
0017a6 e0e1      	LDI  R30,1
0017a7 2e0e      	MOV  R0,R30
0017a8 e0a0      	LDI  R26,0
0017a9 99ce      	SBIC 0x19,6
0017aa e0a1      	LDI  R26,1
0017ab 2fea      	MOV  R30,R26
0017ac 0fee      	LSL  R30
0017ad 2a0e      	OR   R0,R30
0017ae e0a0      	LDI  R26,0
0017af 99cd      	SBIC 0x19,5
0017b0 e0a1      	LDI  R26,1
0017b1 2fea      	MOV  R30,R26
0017b2 0fee      	LSL  R30
0017b3 0fee      	LSL  R30
0017b4 2a0e      	OR   R0,R30
0017b5 e0a0      	LDI  R26,0
0017b6 99cc      	SBIC 0x19,4
0017b7 e0a1      	LDI  R26,1
0017b8 2fea      	MOV  R30,R26
0017b9 0fee      	LSL  R30
0017ba 0fee      	LSL  R30
0017bb 0fee      	LSL  R30
0017bc 29e0      	OR   R30,R0
0017bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3D:
                +
0017be 85ec     +LDD R30 , Y + 12
0017bf 85fd     +LDD R31 , Y + 12 + 1
0017c0 856e     +LDD R22 , Y + 12 + 2
0017c1 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
0017c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3E:
0017c3 940e 1c10 	CALL __CWD1
0017c5 940e 1a86 	CALL __CDF1
0017c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x3F:
                +
0017c8 85ac     +LDD R26 , Y + 12
0017c9 85bd     +LDD R27 , Y + 12 + 1
0017ca 858e     +LDD R24 , Y + 12 + 2
0017cb 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
0017cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x40:
0017cd 940e 1ccf 	CALL __SWAPD12
0017cf 940e 1ab9 	CALL __SUBF12
0017d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x41:
                +
0017d2 83ec     +STD Y + 4 , R30
0017d3 83fd     +STD Y + 4 + 1 , R31
0017d4 836e     +STD Y + 4 + 2 , R22
0017d5 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
0017d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x42:
                +
0017d7 e0e0     +LDI R30 , LOW ( 0x41200000 )
0017d8 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0017d9 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0017da e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0017db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x43:
                +
0017dc 81ac     +LDD R26 , Y + 4
0017dd 81bd     +LDD R27 , Y + 4 + 1
0017de 818e     +LDD R24 , Y + 4 + 2
0017df 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0017e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x44:
0017e1 940e 1b10 	CALL __MULF12
0017e3 cfee      	RJMP SUBOPT_0x41
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x45:
                +
0017e4 81ec     +LDD R30 , Y + 4
0017e5 81fd     +LDD R31 , Y + 4 + 1
0017e6 816e     +LDD R22 , Y + 4 + 2
0017e7 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0017e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x46:
0017e9 93aa      	ST   -Y,R26
                +
0017ea e8e1     +LDI R30 , LOW ( _SEND_EVENT_ + ( 5 ) )
0017eb e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 5 ) )
                 	__POINTW1MN _SEND_EVENT_,5
0017ec 93fa      	ST   -Y,R31
0017ed 93ea      	ST   -Y,R30
0017ee e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
0017ef e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
0017f0 93fa      	ST   -Y,R31
0017f1 93ea      	ST   -Y,R30
0017f2 cf6d      	RJMP SUBOPT_0x30
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x47:
0017f3 940e 1421 	CALL _memcpy
                +
0017f5 e8ee     +LDI R30 , LOW ( _SEND_EVENT_ + ( 18 ) )
0017f6 e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 18 ) )
                 	__POINTW1MN _SEND_EVENT_,18
0017f7 93fa      	ST   -Y,R31
0017f8 93ea      	ST   -Y,R30
0017f9 cf79      	RJMP SUBOPT_0x34
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x48:
0017fa 940e 1421 	CALL _memcpy
                +
0017fc e9e6     +LDI R30 , LOW ( _SEND_EVENT_ + ( 26 ) )
0017fd e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 26 ) )
                 	__POINTW1MN _SEND_EVENT_,26
0017fe 93fa      	ST   -Y,R31
0017ff 93ea      	ST   -Y,R30
001800 e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
001801 e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
001802 93fa      	ST   -Y,R31
001803 93ea      	ST   -Y,R30
001804 cf5b      	RJMP SUBOPT_0x30
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x49:
001805 940e 1421 	CALL _memcpy
                +
001807 eae3     +LDI R30 , LOW ( _SEND_EVENT_ + ( 39 ) )
001808 e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 39 ) )
                 	__POINTW1MN _SEND_EVENT_,39
001809 93fa      	ST   -Y,R31
00180a 93ea      	ST   -Y,R30
00180b ced4      	RJMP SUBOPT_0x1E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4A:
                +
00180c 93e0 09a1+STS _SEND_EVENT_ + ( 37 ) , R30
                 	__PUTB1MN _SEND_EVENT_,37
00180e 81e9      	LDD  R30,Y+1
                +
00180f 93e0 09a2+STS _SEND_EVENT_ + ( 38 ) , R30
                 	__PUTB1MN _SEND_EVENT_,38
                +
001811 e7ef     +LDI R30 , LOW ( _SEND_EVENT_ + ( 3 ) )
001812 e0f9     +LDI R31 , HIGH ( _SEND_EVENT_ + ( 3 ) )
                 	__POINTW1MN _SEND_EVENT_,3
001813 93fa      	ST   -Y,R31
001814 93ea      	ST   -Y,R30
                +
001815 91a0 097e+LDS R26 , _SEND_EVENT_ + ( 2 )
                 	__GETB2MN _SEND_EVENT_,2
001817 e0b0      	LDI  R27,0
001818 940e 091f 	CALL _xbee_checksum
                +
00181a 93e0 09a4+STS _SEND_EVENT_ + ( 40 ) , R30
                 	__PUTB1MN _SEND_EVENT_,40
00181c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x4B:
00181d e7ec      	LDI  R30,LOW(_SEND_EVENT_)
00181e e0f9      	LDI  R31,HIGH(_SEND_EVENT_)
00181f 93fa      	ST   -Y,R31
001820 93ea      	ST   -Y,R30
001821 e2a9      	LDI  R26,LOW(41)
001822 e0b0      	LDI  R27,0
001823 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x4C:
001824 93fa      	ST   -Y,R31
001825 93ea      	ST   -Y,R30
001826 e8ea      	LDI  R30,LOW(_Gateway_MacAddress)
001827 e0f8      	LDI  R31,HIGH(_Gateway_MacAddress)
001828 93fa      	ST   -Y,R31
001829 93ea      	ST   -Y,R30
00182a cf35      	RJMP SUBOPT_0x30
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4D:
00182b e5e5      	LDI  R30,LOW(_PING_A4)
00182c e0f9      	LDI  R31,HIGH(_PING_A4)
00182d 93fa      	ST   -Y,R31
00182e 93ea      	ST   -Y,R30
00182f e2a7      	LDI  R26,LOW(39)
001830 e0b0      	LDI  R27,0
001831 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4E:
001832 93fa      	ST   -Y,R31
001833 93ea      	ST   -Y,R30
001834 ce81      	RJMP SUBOPT_0x17
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4F:
                +
001835 85e8     +LDD R30 , Y + 8
001836 85f9     +LDD R31 , Y + 8 + 1
001837 856a     +LDD R22 , Y + 8 + 2
001838 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
001839 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x50:
00183a 940e 1cb6 	CALL __GETD1S0
00183c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x51:
00183d 93fa      	ST   -Y,R31
00183e 93ea      	ST   -Y,R30
00183f cf20      	RJMP SUBOPT_0x30
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x52:
001840 eae5      	LDI  R30,LOW(_SEND_REPORT_)
001841 e0f9      	LDI  R31,HIGH(_SEND_REPORT_)
001842 93fa      	ST   -Y,R31
001843 93ea      	ST   -Y,R30
001844 e4ac      	LDI  R26,LOW(76)
001845 e0b0      	LDI  R27,0
001846 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x53:
001847 91e0 0830 	LDS  R30,_number
001849 91f0 0831 	LDS  R31,_number+1
00184b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x54:
00184c 91a0 0864 	LDS  R26,_Vsum
00184e 91b0 0865 	LDS  R27,_Vsum+1
001850 9180 0866 	LDS  R24,_Vsum+2
001852 9190 0867 	LDS  R25,_Vsum+3
001854 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x55:
001855 2766      	CLR  R22
001856 2777      	CLR  R23
001857 940e 1a86 	CALL __CDF1
001859 940e 1b5e 	CALL __DIVF21
00185b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x56:
00185c 91a0 0868 	LDS  R26,_Isum
00185e 91b0 0869 	LDS  R27,_Isum+1
001860 9180 086a 	LDS  R24,_Isum+2
001862 9190 086b 	LDS  R25,_Isum+3
001864 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x57:
001865 93e0 0878 	STS  _Iavg,R30
001867 93f0 0879 	STS  _Iavg+1,R31
001869 9360 087a 	STS  _Iavg+2,R22
00186b 9370 087b 	STS  _Iavg+3,R23
00186d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x58:
00186e 91a0 086c 	LDS  R26,_Psum
001870 91b0 086d 	LDS  R27,_Psum+1
001872 9180 086e 	LDS  R24,_Psum+2
001874 9190 086f 	LDS  R25,_Psum+3
001876 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x59:
001877 91e0 0874 	LDS  R30,_Vavg
001879 91f0 0875 	LDS  R31,_Vavg+1
00187b 9160 0876 	LDS  R22,_Vavg+2
00187d 9170 0877 	LDS  R23,_Vavg+3
00187f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5A:
001880 91e0 0878 	LDS  R30,_Iavg
001882 91f0 0879 	LDS  R31,_Iavg+1
001884 9160 087a 	LDS  R22,_Iavg+2
001886 9170 087b 	LDS  R23,_Iavg+3
001888 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5B:
001889 91e0 087c 	LDS  R30,_Pavg
00188b 91f0 087d 	LDS  R31,_Pavg+1
00188d 9160 087e 	LDS  R22,_Pavg+2
00188f 9170 087f 	LDS  R23,_Pavg+3
001891 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5C:
001892 91a0 0878 	LDS  R26,_Iavg
001894 91b0 0879 	LDS  R27,_Iavg+1
001896 9180 087a 	LDS  R24,_Iavg+2
001898 9190 087b 	LDS  R25,_Iavg+3
                +
00189a e0e0     +LDI R30 , LOW ( 0x447A0000 )
00189b e0f0     +LDI R31 , HIGH ( 0x447A0000 )
00189c e76a     +LDI R22 , BYTE3 ( 0x447A0000 )
00189d e474     +LDI R23 , BYTE4 ( 0x447A0000 )
                 	__GETD1N 0x447A0000
00189e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5D:
00189f 91a0 0870 	LDS  R26,_WHsum
0018a1 91b0 0871 	LDS  R27,_WHsum+1
0018a3 9180 0872 	LDS  R24,_WHsum+2
0018a5 9190 0873 	LDS  R25,_WHsum+3
0018a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5E:
0018a8 91a0 0836 	LDS  R26,_SENSOR_SENSITIVE
0018aa 91b0 0837 	LDS  R27,_SENSOR_SENSITIVE+1
0018ac 9180 0838 	LDS  R24,_SENSOR_SENSITIVE+2
0018ae 9190 0839 	LDS  R25,_SENSOR_SENSITIVE+3
0018b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5F:
0018b1 91a0 0878 	LDS  R26,_Iavg
0018b3 91b0 0879 	LDS  R27,_Iavg+1
0018b5 9180 087a 	LDS  R24,_Iavg+2
0018b7 9190 087b 	LDS  R25,_Iavg+3
0018b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x60:
0018ba 940e 0e4e 	CALL _read_adc
0018bc 93e0 083a 	STS  _adcValue,R30
0018be 93f0 083b 	STS  _adcValue+1,R31
0018c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x61:
0018c1 91e0 083a 	LDS  R30,_adcValue
0018c3 91f0 083b 	LDS  R31,_adcValue+1
0018c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x62:
0018c6 dffa      	RCALL SUBOPT_0x61
0018c7 2766      	CLR  R22
0018c8 2777      	CLR  R23
0018c9 940e 1a86 	CALL __CDF1
0018cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x63:
0018cc 91e0 0840 	LDS  R30,_avg
0018ce 91f0 0841 	LDS  R31,_avg+1
0018d0 9160 0842 	LDS  R22,_avg+2
0018d2 9170 0843 	LDS  R23,_avg+3
0018d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x64:
0018d5 91a0 0844 	LDS  R26,_value
0018d7 91b0 0845 	LDS  R27,_value+1
0018d9 9180 0846 	LDS  R24,_value+2
0018db 9190 0847 	LDS  R25,_value+3
0018dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x65:
0018de 940e 1ac0 	CALL __ADDF12
0018e0 01df      	MOVW R26,R30
0018e1 01cb      	MOVW R24,R22
0018e2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x66:
0018e3 dfe8      	RCALL SUBOPT_0x63
0018e4 dff0      	RCALL SUBOPT_0x64
0018e5 940e 1ba3 	CALL __CMPF12
0018e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x67:
0018e8 91a0 083c 	LDS  R26,_total
0018ea 91b0 083d 	LDS  R27,_total+1
0018ec 9180 083e 	LDS  R24,_total+2
0018ee 9190 083f 	LDS  R25,_total+3
0018f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x68:
0018f1 940e 1b10 	CALL __MULF12
0018f3 01df      	MOVW R26,R30
0018f4 01cb      	MOVW R24,R22
0018f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x69:
0018f6 91a0 0854 	LDS  R26,_volt
0018f8 91b0 0855 	LDS  R27,_volt+1
0018fa 9180 0856 	LDS  R24,_volt+2
0018fc 9190 0857 	LDS  R25,_volt+3
0018fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x6A:
0018ff 91e0 0854 	LDS  R30,_volt
001901 91f0 0855 	LDS  R31,_volt+1
001903 9160 0856 	LDS  R22,_volt+2
001905 9170 0857 	LDS  R23,_volt+3
001907 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6B:
001908 91e0 0858 	LDS  R30,_amp
00190a 91f0 0859 	LDS  R31,_amp+1
00190c 9160 085a 	LDS  R22,_amp+2
00190e 9170 085b 	LDS  R23,_amp+3
001910 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6C:
                +
001911 87e9     +STD Y + 9 , R30
001912 87fa     +STD Y + 9 + 1 , R31
001913 876b     +STD Y + 9 + 2 , R22
001914 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
001915 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6D:
001916 81ae      	LDD  R26,Y+6
001917 81bf      	LDD  R27,Y+6+1
001918 9611      	ADIW R26,1
001919 83ae      	STD  Y+6,R26
00191a 83bf      	STD  Y+6+1,R27
00191b 9711      	SBIW R26,1
00191c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6E:
                +
00191d 81aa     +LDD R26 , Y + 2
00191e 81bb     +LDD R27 , Y + 2 + 1
00191f 818c     +LDD R24 , Y + 2 + 2
001920 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
001921 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6F:
                +
001922 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
001923 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
001924 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
001925 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
001926 940e 1b10 	CALL __MULF12
001928 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x70:
                +
001929 83ea     +STD Y + 2 , R30
00192a 83fb     +STD Y + 2 + 1 , R31
00192b 836c     +STD Y + 2 + 2 , R22
00192c 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
00192d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x71:
                +
00192e 81ea     +LDD R30 , Y + 2
00192f 81fb     +LDD R31 , Y + 2 + 1
001930 816c     +LDD R22 , Y + 2 + 2
001931 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
001932 85a9     +LDD R26 , Y + 9
001933 85ba     +LDD R27 , Y + 9 + 1
001934 858b     +LDD R24 , Y + 9 + 2
001935 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
001936 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x72:
001937 de9f      	RCALL SUBOPT_0x42
001938 940e 1b10 	CALL __MULF12
00193a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x73:
                +
00193b e0a0     +LDI R26 , LOW ( 0x3F000000 )
00193c e0b0     +LDI R27 , HIGH ( 0x3F000000 )
00193d e080     +LDI R24 , BYTE3 ( 0x3F000000 )
00193e e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
00193f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x74:
001940 2fe0      	MOV  R30,R16
001941 5de0      	SUBI R30,-LOW(48)
001942 93ec      	ST   X,R30
001943 2fe0      	MOV  R30,R16
001944 e0f0      	LDI  R31,0
001945 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x75:
                +
001946 85a9     +LDD R26 , Y + 9
001947 85ba     +LDD R27 , Y + 9 + 1
001948 858b     +LDD R24 , Y + 9 + 2
001949 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
00194a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x76:
00194b de90      	RCALL SUBOPT_0x43
00194c de8a      	RCALL SUBOPT_0x42
00194d ce93      	RJMP SUBOPT_0x44
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x77:
00194e de95      	RCALL SUBOPT_0x45
00194f de78      	RCALL SUBOPT_0x3F
001950 940e 1ba3 	CALL __CMPF12
001952 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x78:
                +
001953 87ec     +STD Y + 12 , R30
001954 87fd     +STD Y + 12 + 1 , R31
001955 876e     +STD Y + 12 + 2 , R22
001956 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
001957 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x79:
001958 85a8      	LDD  R26,Y+8
001959 85b9      	LDD  R27,Y+8+1
00195a 9611      	ADIW R26,1
00195b 87a8      	STD  Y+8,R26
00195c 87b9      	STD  Y+8+1,R27
00195d 9711      	SBIW R26,1
00195e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7A:
00195f 85e8      	LDD  R30,Y+8
001960 85f9      	LDD  R31,Y+8+1
001961 9631      	ADIW R30,1
001962 87e8      	STD  Y+8,R30
001963 87f9      	STD  Y+8+1,R31
001964 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x7B:
001965 932a      	ST   -Y,R18
001966 81af      	LDD  R26,Y+7
001967 85b8      	LDD  R27,Y+7+1
001968 85e9      	LDD  R30,Y+9
001969 85fa      	LDD  R31,Y+9+1
00196a 9509      	ICALL
00196b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x7C:
                +
00196c 01fe     +MOVW R30 , R28
00196d 5ae6     +SUBI R30 , LOW ( - 90 )
00196e 4fff     +SBCI R31 , HIGH ( - 90 )
00196f 9001     +LD R0 , Z +
001970 81f0     +LD R31 , Z
001971 2de0     +MOV R30 , R0
                 	__GETW1SX 90
001972 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x7D:
001973 9734      	SBIW R30,4
                +
001974 01de     +MOVW R26 , R28
001975 5aa6     +SUBI R26 , LOW ( - 90 )
001976 4fbf     +SBCI R27 , HIGH ( - 90 )
001977 93ed     +ST X + , R30
001978 93fc     +ST X , R31
                 	__PUTW1SX 90
001979 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7E:
00197a 81af      	LDD  R26,Y+7
00197b 85b8      	LDD  R27,Y+7+1
00197c 85e9      	LDD  R30,Y+9
00197d 85fa      	LDD  R31,Y+9+1
00197e 9509      	ICALL
00197f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x7F:
                +
001980 01de     +MOVW R26 , R28
001981 5aa6     +SUBI R26 , LOW ( - 90 )
001982 4fbf     +SBCI R27 , HIGH ( - 90 )
001983 900d     +LD R0 , X +
001984 91bc     +LD R27 , X
001985 2da0     +MOV R26 , R0
                 	__GETW2SX 90
001986 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x80:
                +
001987 87ea     +STD Y + 10 , R30
001988 87fb     +STD Y + 10 + 1 , R31
001989 876c     +STD Y + 10 + 2 , R22
00198a 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
00198b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x81:
00198c dfdf      	RCALL SUBOPT_0x7C
00198d cfe5      	RJMP SUBOPT_0x7D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x82:
                +
00198e 85ea     +LDD R30 , Y + 10
00198f 85fb     +LDD R31 , Y + 10 + 1
001990 856c     +LDD R22 , Y + 10 + 2
001991 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
001992 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x83:
001993 87ee      	STD  Y+14,R30
001994 87ff      	STD  Y+14+1,R31
001995 85ae      	LDD  R26,Y+14
001996 85bf      	LDD  R27,Y+14+1
001997 940e 1440 	CALL _strlen
001999 2f1e      	MOV  R17,R30
00199a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x84:
00199b dfe4      	RCALL SUBOPT_0x7F
00199c 9614      	ADIW R26,4
00199d 940e 1c9d 	CALL __GETW1P
00199f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x85:
                +
0019a0 8be8     +STD Y + 16 , R30
0019a1 8bf9     +STD Y + 16 + 1 , R31
0019a2 8b6a     +STD Y + 16 + 2 , R22
0019a3 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
0019a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x86:
0019a5 7f0b      	ANDI R16,LOW(251)
0019a6 89ed      	LDD  R30,Y+21
0019a7 93ea      	ST   -Y,R30
                +
0019a8 01de     +MOVW R26 , R28
0019a9 5aa9     +SUBI R26 , LOW ( - 87 )
0019aa 4fbf     +SBCI R27 , HIGH ( - 87 )
0019ab 900d     +LD R0 , X +
0019ac 91bc     +LD R27 , X
0019ad 2da0     +MOV R26 , R0
                 	__GETW2SX 87
                +
0019ae 01fe     +MOVW R30 , R28
0019af 5ae7     +SUBI R30 , LOW ( - 89 )
0019b0 4fff     +SBCI R31 , HIGH ( - 89 )
0019b1 9001     +LD R0 , Z +
0019b2 81f0     +LD R31 , Z
0019b3 2de0     +MOV R30 , R0
                 	__GETW1SX 89
0019b4 9509      	ICALL
0019b5 3050      	CPI  R21,0
0019b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x87:
                +
0019b7 89e8     +LDD R30 , Y + 16
0019b8 89f9     +LDD R31 , Y + 16 + 1
0019b9 896a     +LDD R22 , Y + 16 + 2
0019ba 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
0019bb 85aa     +LDD R26 , Y + 10
0019bc 85bb     +LDD R27 , Y + 10 + 1
0019bd 858c     +LDD R24 , Y + 10 + 2
0019be 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
0019bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x88:
                +
0019c0 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0019c1 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0019c2 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0019c3 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0019c4 940e 1ab9 	CALL __SUBF12
0019c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x89:
                +
0019c7 81ae     +LDD R26 , Y + 6
0019c8 81bf     +LDD R27 , Y + 6 + 1
0019c9 8588     +LDD R24 , Y + 6 + 2
0019ca 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
0019cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8A:
                +
0019cc 81ee     +LDD R30 , Y + 6
0019cd 81ff     +LDD R31 , Y + 6 + 1
0019ce 8568     +LDD R22 , Y + 6 + 2
0019cf 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
0019d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8B:
                +
0019d1 83ee     +STD Y + 6 , R30
0019d2 83ff     +STD Y + 6 + 1 , R31
0019d3 8768     +STD Y + 6 + 2 , R22
0019d4 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
0019d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8C:
0019d6 dff5      	RCALL SUBOPT_0x8A
0019d7 cfef      	RJMP SUBOPT_0x89
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8D:
0019d8 940e 1b10 	CALL __MULF12
0019da df4e      	RCALL SUBOPT_0x70
                +
0019db 81ea     +LDD R30 , Y + 2
0019dc 81fb     +LDD R31 , Y + 2 + 1
0019dd 816c     +LDD R22 , Y + 2 + 2
0019de 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0019df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8E:
                +
0019e0 81ea     +LDD R30 , Y + 2
0019e1 81fb     +LDD R31 , Y + 2 + 1
0019e2 816c     +LDD R22 , Y + 2 + 2
0019e3 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0019e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8F:
                +
0019e5 85aa     +LDD R26 , Y + 10
0019e6 85bb     +LDD R27 , Y + 10 + 1
0019e7 858c     +LDD R24 , Y + 10 + 2
0019e8 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
0019e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x90:
                +
0019ea e0e0     +LDI R30 , LOW ( 0x0 )
0019eb e0f0     +LDI R31 , HIGH ( 0x0 )
0019ec e060     +LDI R22 , BYTE3 ( 0x0 )
0019ed e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0019ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x91:
0019ef 940e 149d 	CALL _log
0019f1 ddea      	RCALL SUBOPT_0x43
0019f2 cefe      	RJMP SUBOPT_0x68
                 
                 
                 	.CSEG
                 _delay_ms:
0019f3 9610      	adiw r26,0
0019f4 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0019f5 ec8d     +LDI R24 , LOW ( 0xACD )
0019f6 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
0019f7 9701     +SBIW R24 , 1
0019f8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
0019f9 95a8      	wdr
0019fa 9711      	sbiw r26,1
0019fb f7c9      	brne __delay_ms0
                 __delay_ms1:
0019fc 9508      	ret
                 
                 _frexp:
0019fd 91e9      	LD   R30,Y+
0019fe 91f9      	LD   R31,Y+
0019ff 9169      	LD   R22,Y+
001a00 9179      	LD   R23,Y+
001a01 fb77      	BST  R23,7
001a02 0f66      	LSL  R22
001a03 1f77      	ROL  R23
001a04 2788      	CLR  R24
001a05 577e      	SUBI R23,0x7E
001a06 0b88      	SBC  R24,R24
001a07 937d      	ST   X+,R23
001a08 938c      	ST   X,R24
001a09 e77e      	LDI  R23,0x7E
001a0a 9576      	LSR  R23
001a0b 9567      	ROR  R22
001a0c f06e      	BRTS __ANEGF1
001a0d 9508      	RET
                 
                 _ldexp:
001a0e 91e9      	LD   R30,Y+
001a0f 91f9      	LD   R31,Y+
001a10 9169      	LD   R22,Y+
001a11 9179      	LD   R23,Y+
001a12 fb77      	BST  R23,7
001a13 0f66      	LSL  R22
001a14 1f77      	ROL  R23
001a15 0f7a      	ADD  R23,R26
001a16 9576      	LSR  R23
001a17 9567      	ROR  R22
001a18 f00e      	BRTS __ANEGF1
001a19 9508      	RET
                 
                 __ANEGF1:
001a1a 9730      	SBIW R30,0
001a1b 4060      	SBCI R22,0
001a1c 4070      	SBCI R23,0
001a1d f009      	BREQ __ANEGF10
001a1e 5870      	SUBI R23,0x80
                 __ANEGF10:
001a1f 9508      	RET
                 
                 __ROUND_REPACK:
001a20 2355      	TST  R21
001a21 f442      	BRPL __REPACK
001a22 3850      	CPI  R21,0x80
001a23 f411      	BRNE __ROUND_REPACK0
001a24 ffe0      	SBRS R30,0
001a25 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
001a26 9631      	ADIW R30,1
001a27 1f69      	ADC  R22,R25
001a28 1f79      	ADC  R23,R25
001a29 f06b      	BRVS __REPACK1
                 
                 __REPACK:
001a2a e850      	LDI  R21,0x80
001a2b 2757      	EOR  R21,R23
001a2c f411      	BRNE __REPACK0
001a2d 935f      	PUSH R21
001a2e c0cf      	RJMP __ZERORES
                 __REPACK0:
001a2f 3f5f      	CPI  R21,0xFF
001a30 f031      	BREQ __REPACK1
001a31 0f66      	LSL  R22
001a32 0c00      	LSL  R0
001a33 9557      	ROR  R21
001a34 9567      	ROR  R22
001a35 2f75      	MOV  R23,R21
001a36 9508      	RET
                 __REPACK1:
001a37 935f      	PUSH R21
001a38 2000      	TST  R0
001a39 f00a      	BRMI __REPACK2
001a3a c0cf      	RJMP __MAXRES
                 __REPACK2:
001a3b c0c8      	RJMP __MINRES
                 
                 __UNPACK:
001a3c e850      	LDI  R21,0x80
001a3d 2e19      	MOV  R1,R25
001a3e 2215      	AND  R1,R21
001a3f 0f88      	LSL  R24
001a40 1f99      	ROL  R25
001a41 2795      	EOR  R25,R21
001a42 0f55      	LSL  R21
001a43 9587      	ROR  R24
                 
                 __UNPACK1:
001a44 e850      	LDI  R21,0x80
001a45 2e07      	MOV  R0,R23
001a46 2205      	AND  R0,R21
001a47 0f66      	LSL  R22
001a48 1f77      	ROL  R23
001a49 2775      	EOR  R23,R21
001a4a 0f55      	LSL  R21
001a4b 9567      	ROR  R22
001a4c 9508      	RET
                 
                 __CFD1U:
001a4d 9468      	SET
001a4e c001      	RJMP __CFD1U0
                 __CFD1:
001a4f 94e8      	CLT
                 __CFD1U0:
001a50 935f      	PUSH R21
001a51 dff2      	RCALL __UNPACK1
001a52 3870      	CPI  R23,0x80
001a53 f018      	BRLO __CFD10
001a54 3f7f      	CPI  R23,0xFF
001a55 f408      	BRCC __CFD10
001a56 c0a7      	RJMP __ZERORES
                 __CFD10:
001a57 e156      	LDI  R21,22
001a58 1b57      	SUB  R21,R23
001a59 f4aa      	BRPL __CFD11
001a5a 9551      	NEG  R21
001a5b 3058      	CPI  R21,8
001a5c f40e      	BRTC __CFD19
001a5d 3059      	CPI  R21,9
                 __CFD19:
001a5e f030      	BRLO __CFD17
001a5f efef      	SER  R30
001a60 efff      	SER  R31
001a61 ef6f      	SER  R22
001a62 e77f      	LDI  R23,0x7F
001a63 f977      	BLD  R23,7
001a64 c01a      	RJMP __CFD15
                 __CFD17:
001a65 2777      	CLR  R23
001a66 2355      	TST  R21
001a67 f0b9      	BREQ __CFD15
                 __CFD18:
001a68 0fee      	LSL  R30
001a69 1fff      	ROL  R31
001a6a 1f66      	ROL  R22
001a6b 1f77      	ROL  R23
001a6c 955a      	DEC  R21
001a6d f7d1      	BRNE __CFD18
001a6e c010      	RJMP __CFD15
                 __CFD11:
001a6f 2777      	CLR  R23
                 __CFD12:
001a70 3058      	CPI  R21,8
001a71 f028      	BRLO __CFD13
001a72 2fef      	MOV  R30,R31
001a73 2ff6      	MOV  R31,R22
001a74 2f67      	MOV  R22,R23
001a75 5058      	SUBI R21,8
001a76 cff9      	RJMP __CFD12
                 __CFD13:
001a77 2355      	TST  R21
001a78 f031      	BREQ __CFD15
                 __CFD14:
001a79 9576      	LSR  R23
001a7a 9567      	ROR  R22
001a7b 95f7      	ROR  R31
001a7c 95e7      	ROR  R30
001a7d 955a      	DEC  R21
001a7e f7d1      	BRNE __CFD14
                 __CFD15:
001a7f 2000      	TST  R0
001a80 f40a      	BRPL __CFD16
001a81 d180      	RCALL __ANEGD1
                 __CFD16:
001a82 915f      	POP  R21
001a83 9508      	RET
                 
                 __CDF1U:
001a84 9468      	SET
001a85 c001      	RJMP __CDF1U0
                 __CDF1:
001a86 94e8      	CLT
                 __CDF1U0:
001a87 9730      	SBIW R30,0
001a88 4060      	SBCI R22,0
001a89 4070      	SBCI R23,0
001a8a f0b1      	BREQ __CDF10
001a8b 2400      	CLR  R0
001a8c f026      	BRTS __CDF11
001a8d 2377      	TST  R23
001a8e f412      	BRPL __CDF11
001a8f 9400      	COM  R0
001a90 d171      	RCALL __ANEGD1
                 __CDF11:
001a91 2e17      	MOV  R1,R23
001a92 e17e      	LDI  R23,30
001a93 2011      	TST  R1
                 __CDF12:
001a94 f032      	BRMI __CDF13
001a95 957a      	DEC  R23
001a96 0fee      	LSL  R30
001a97 1fff      	ROL  R31
001a98 1f66      	ROL  R22
001a99 1c11      	ROL  R1
001a9a cff9      	RJMP __CDF12
                 __CDF13:
001a9b 2fef      	MOV  R30,R31
001a9c 2ff6      	MOV  R31,R22
001a9d 2d61      	MOV  R22,R1
001a9e 935f      	PUSH R21
001a9f df8a      	RCALL __REPACK
001aa0 915f      	POP  R21
                 __CDF10:
001aa1 9508      	RET
                 
                 __SWAPACC:
001aa2 934f      	PUSH R20
001aa3 01af      	MOVW R20,R30
001aa4 01fd      	MOVW R30,R26
001aa5 01da      	MOVW R26,R20
001aa6 01ab      	MOVW R20,R22
001aa7 01bc      	MOVW R22,R24
001aa8 01ca      	MOVW R24,R20
001aa9 2d40      	MOV  R20,R0
001aaa 2c01      	MOV  R0,R1
001aab 2e14      	MOV  R1,R20
001aac 914f      	POP  R20
001aad 9508      	RET
                 
                 __UADD12:
001aae 0fea      	ADD  R30,R26
001aaf 1ffb      	ADC  R31,R27
001ab0 1f68      	ADC  R22,R24
001ab1 9508      	RET
                 
                 __NEGMAN1:
001ab2 95e0      	COM  R30
001ab3 95f0      	COM  R31
001ab4 9560      	COM  R22
001ab5 5fef      	SUBI R30,-1
001ab6 4fff      	SBCI R31,-1
001ab7 4f6f      	SBCI R22,-1
001ab8 9508      	RET
                 
                 __SUBF12:
001ab9 935f      	PUSH R21
001aba df81      	RCALL __UNPACK
001abb 3890      	CPI  R25,0x80
001abc f171      	BREQ __ADDF129
001abd e850      	LDI  R21,0x80
001abe 2615      	EOR  R1,R21
                 
001abf c004      	RJMP __ADDF120
                 
                 __ADDF12:
001ac0 935f      	PUSH R21
001ac1 df7a      	RCALL __UNPACK
001ac2 3890      	CPI  R25,0x80
001ac3 f139      	BREQ __ADDF129
                 
                 __ADDF120:
001ac4 3870      	CPI  R23,0x80
001ac5 f121      	BREQ __ADDF128
                 __ADDF121:
001ac6 2f57      	MOV  R21,R23
001ac7 1b59      	SUB  R21,R25
001ac8 f12b      	BRVS __ADDF1211
001ac9 f412      	BRPL __ADDF122
001aca dfd7      	RCALL __SWAPACC
001acb cffa      	RJMP __ADDF121
                 __ADDF122:
001acc 3158      	CPI  R21,24
001acd f018      	BRLO __ADDF123
001ace 27aa      	CLR  R26
001acf 27bb      	CLR  R27
001ad0 2788      	CLR  R24
                 __ADDF123:
001ad1 3058      	CPI  R21,8
001ad2 f028      	BRLO __ADDF124
001ad3 2fab      	MOV  R26,R27
001ad4 2fb8      	MOV  R27,R24
001ad5 2788      	CLR  R24
001ad6 5058      	SUBI R21,8
001ad7 cff9      	RJMP __ADDF123
                 __ADDF124:
001ad8 2355      	TST  R21
001ad9 f029      	BREQ __ADDF126
                 __ADDF125:
001ada 9586      	LSR  R24
001adb 95b7      	ROR  R27
001adc 95a7      	ROR  R26
001add 955a      	DEC  R21
001ade f7d9      	BRNE __ADDF125
                 __ADDF126:
001adf 2d50      	MOV  R21,R0
001ae0 2551      	EOR  R21,R1
001ae1 f072      	BRMI __ADDF127
001ae2 dfcb      	RCALL __UADD12
001ae3 f438      	BRCC __ADDF129
001ae4 9567      	ROR  R22
001ae5 95f7      	ROR  R31
001ae6 95e7      	ROR  R30
001ae7 9573      	INC  R23
001ae8 f413      	BRVC __ADDF129
001ae9 c020      	RJMP __MAXRES
                 __ADDF128:
001aea dfb7      	RCALL __SWAPACC
                 __ADDF129:
001aeb df3e      	RCALL __REPACK
001aec 915f      	POP  R21
001aed 9508      	RET
                 __ADDF1211:
001aee f7d8      	BRCC __ADDF128
001aef cffb      	RJMP __ADDF129
                 __ADDF127:
001af0 1bea      	SUB  R30,R26
001af1 0bfb      	SBC  R31,R27
001af2 0b68      	SBC  R22,R24
001af3 f051      	BREQ __ZERORES
001af4 f410      	BRCC __ADDF1210
001af5 9400      	COM  R0
001af6 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
001af7 2366      	TST  R22
001af8 f392      	BRMI __ADDF129
001af9 0fee      	LSL  R30
001afa 1fff      	ROL  R31
001afb 1f66      	ROL  R22
001afc 957a      	DEC  R23
001afd f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
001afe 27ee      	CLR  R30
001aff 27ff      	CLR  R31
001b00 2766      	CLR  R22
001b01 2777      	CLR  R23
001b02 915f      	POP  R21
001b03 9508      	RET
                 
                 __MINRES:
001b04 efef      	SER  R30
001b05 efff      	SER  R31
001b06 e76f      	LDI  R22,0x7F
001b07 ef7f      	SER  R23
001b08 915f      	POP  R21
001b09 9508      	RET
                 
                 __MAXRES:
001b0a efef      	SER  R30
001b0b efff      	SER  R31
001b0c e76f      	LDI  R22,0x7F
001b0d e77f      	LDI  R23,0x7F
001b0e 915f      	POP  R21
001b0f 9508      	RET
                 
                 __MULF12:
001b10 935f      	PUSH R21
001b11 df2a      	RCALL __UNPACK
001b12 3870      	CPI  R23,0x80
001b13 f351      	BREQ __ZERORES
001b14 3890      	CPI  R25,0x80
001b15 f341      	BREQ __ZERORES
001b16 2401      	EOR  R0,R1
001b17 9408      	SEC
001b18 1f79      	ADC  R23,R25
001b19 f423      	BRVC __MULF124
001b1a f31c      	BRLT __ZERORES
                 __MULF125:
001b1b 2000      	TST  R0
001b1c f33a      	BRMI __MINRES
001b1d cfec      	RJMP __MAXRES
                 __MULF124:
001b1e 920f      	PUSH R0
001b1f 931f      	PUSH R17
001b20 932f      	PUSH R18
001b21 933f      	PUSH R19
001b22 934f      	PUSH R20
001b23 2711      	CLR  R17
001b24 2722      	CLR  R18
001b25 2799      	CLR  R25
001b26 9f68      	MUL  R22,R24
001b27 01a0      	MOVW R20,R0
001b28 9f8f      	MUL  R24,R31
001b29 2d30      	MOV  R19,R0
001b2a 0d41      	ADD  R20,R1
001b2b 1f59      	ADC  R21,R25
001b2c 9f6b      	MUL  R22,R27
001b2d 0d30      	ADD  R19,R0
001b2e 1d41      	ADC  R20,R1
001b2f 1f59      	ADC  R21,R25
001b30 9f8e      	MUL  R24,R30
001b31 d027      	RCALL __MULF126
001b32 9fbf      	MUL  R27,R31
001b33 d025      	RCALL __MULF126
001b34 9f6a      	MUL  R22,R26
001b35 d023      	RCALL __MULF126
001b36 9fbe      	MUL  R27,R30
001b37 d01d      	RCALL __MULF127
001b38 9faf      	MUL  R26,R31
001b39 d01b      	RCALL __MULF127
001b3a 9fae      	MUL  R26,R30
001b3b 0d11      	ADD  R17,R1
001b3c 1f29      	ADC  R18,R25
001b3d 1f39      	ADC  R19,R25
001b3e 1f49      	ADC  R20,R25
001b3f 1f59      	ADC  R21,R25
001b40 2fe3      	MOV  R30,R19
001b41 2ff4      	MOV  R31,R20
001b42 2f65      	MOV  R22,R21
001b43 2f52      	MOV  R21,R18
001b44 914f      	POP  R20
001b45 913f      	POP  R19
001b46 912f      	POP  R18
001b47 911f      	POP  R17
001b48 900f      	POP  R0
001b49 2366      	TST  R22
001b4a f02a      	BRMI __MULF122
001b4b 0f55      	LSL  R21
001b4c 1fee      	ROL  R30
001b4d 1fff      	ROL  R31
001b4e 1f66      	ROL  R22
001b4f c002      	RJMP __MULF123
                 __MULF122:
001b50 9573      	INC  R23
001b51 f24b      	BRVS __MULF125
                 __MULF123:
001b52 decd      	RCALL __ROUND_REPACK
001b53 915f      	POP  R21
001b54 9508      	RET
                 
                 __MULF127:
001b55 0d10      	ADD  R17,R0
001b56 1d21      	ADC  R18,R1
001b57 1f39      	ADC  R19,R25
001b58 c002      	RJMP __MULF128
                 __MULF126:
001b59 0d20      	ADD  R18,R0
001b5a 1d31      	ADC  R19,R1
                 __MULF128:
001b5b 1f49      	ADC  R20,R25
001b5c 1f59      	ADC  R21,R25
001b5d 9508      	RET
                 
                 __DIVF21:
001b5e 935f      	PUSH R21
001b5f dedc      	RCALL __UNPACK
001b60 3870      	CPI  R23,0x80
001b61 f421      	BRNE __DIVF210
001b62 2011      	TST  R1
                 __DIVF211:
001b63 f40a      	BRPL __DIVF219
001b64 cf9f      	RJMP __MINRES
                 __DIVF219:
001b65 cfa4      	RJMP __MAXRES
                 __DIVF210:
001b66 3890      	CPI  R25,0x80
001b67 f409      	BRNE __DIVF218
                 __DIVF217:
001b68 cf95      	RJMP __ZERORES
                 __DIVF218:
001b69 2401      	EOR  R0,R1
001b6a 9408      	SEC
001b6b 0b97      	SBC  R25,R23
001b6c f41b      	BRVC __DIVF216
001b6d f3d4      	BRLT __DIVF217
001b6e 2000      	TST  R0
001b6f cff3      	RJMP __DIVF211
                 __DIVF216:
001b70 2f79      	MOV  R23,R25
001b71 931f      	PUSH R17
001b72 932f      	PUSH R18
001b73 933f      	PUSH R19
001b74 934f      	PUSH R20
001b75 2411      	CLR  R1
001b76 2711      	CLR  R17
001b77 2722      	CLR  R18
001b78 2733      	CLR  R19
001b79 2744      	CLR  R20
001b7a 2755      	CLR  R21
001b7b e290      	LDI  R25,32
                 __DIVF212:
001b7c 17ae      	CP   R26,R30
001b7d 07bf      	CPC  R27,R31
001b7e 0786      	CPC  R24,R22
001b7f 0741      	CPC  R20,R17
001b80 f030      	BRLO __DIVF213
001b81 1bae      	SUB  R26,R30
001b82 0bbf      	SBC  R27,R31
001b83 0b86      	SBC  R24,R22
001b84 0b41      	SBC  R20,R17
001b85 9408      	SEC
001b86 c001      	RJMP __DIVF214
                 __DIVF213:
001b87 9488      	CLC
                 __DIVF214:
001b88 1f55      	ROL  R21
001b89 1f22      	ROL  R18
001b8a 1f33      	ROL  R19
001b8b 1c11      	ROL  R1
001b8c 1faa      	ROL  R26
001b8d 1fbb      	ROL  R27
001b8e 1f88      	ROL  R24
001b8f 1f44      	ROL  R20
001b90 959a      	DEC  R25
001b91 f751      	BRNE __DIVF212
001b92 01f9      	MOVW R30,R18
001b93 2d61      	MOV  R22,R1
001b94 914f      	POP  R20
001b95 913f      	POP  R19
001b96 912f      	POP  R18
001b97 911f      	POP  R17
001b98 2366      	TST  R22
001b99 f032      	BRMI __DIVF215
001b9a 0f55      	LSL  R21
001b9b 1fee      	ROL  R30
001b9c 1fff      	ROL  R31
001b9d 1f66      	ROL  R22
001b9e 957a      	DEC  R23
001b9f f243      	BRVS __DIVF217
                 __DIVF215:
001ba0 de7f      	RCALL __ROUND_REPACK
001ba1 915f      	POP  R21
001ba2 9508      	RET
                 
                 __CMPF12:
001ba3 2399      	TST  R25
001ba4 f09a      	BRMI __CMPF120
001ba5 2377      	TST  R23
001ba6 f042      	BRMI __CMPF121
001ba7 1797      	CP   R25,R23
001ba8 f048      	BRLO __CMPF122
001ba9 f429      	BRNE __CMPF121
001baa 17ae      	CP   R26,R30
001bab 07bf      	CPC  R27,R31
001bac 0786      	CPC  R24,R22
001bad f020      	BRLO __CMPF122
001bae f031      	BREQ __CMPF123
                 __CMPF121:
001baf 9498      	CLZ
001bb0 9488      	CLC
001bb1 9508      	RET
                 __CMPF122:
001bb2 9498      	CLZ
001bb3 9408      	SEC
001bb4 9508      	RET
                 __CMPF123:
001bb5 9418      	SEZ
001bb6 9488      	CLC
001bb7 9508      	RET
                 __CMPF120:
001bb8 2377      	TST  R23
001bb9 f7c2      	BRPL __CMPF122
001bba 1797      	CP   R25,R23
001bbb f398      	BRLO __CMPF121
001bbc f7a9      	BRNE __CMPF122
001bbd 17ea      	CP   R30,R26
001bbe 07fb      	CPC  R31,R27
001bbf 0768      	CPC  R22,R24
001bc0 f388      	BRLO __CMPF122
001bc1 f399      	BREQ __CMPF123
001bc2 cfec      	RJMP __CMPF121
                 
                 _sqrt:
001bc3 d106      	rcall __PUTPARD2
001bc4 9724      	sbiw r28,4
001bc5 935f      	push r21
001bc6 819f      	ldd  r25,y+7
001bc7 2399      	tst  r25
001bc8 f411      	brne __sqrt0
001bc9 9628      	adiw r28,8
001bca cf33      	rjmp __zerores
                 __sqrt0:
001bcb f412      	brpl __sqrt1
001bcc 9628      	adiw r28,8
001bcd cf3c      	rjmp __maxres
                 __sqrt1:
001bce 934f      	push r20
001bcf e442      	ldi  r20,66
001bd0 818e      	ldd  r24,y+6
001bd1 81bd      	ldd  r27,y+5
001bd2 81ac      	ldd  r26,y+4
                 __sqrt2:
001bd3 8388      	st   y,r24
001bd4 8399      	std  y+1,r25
001bd5 83aa      	std  y+2,r26
001bd6 83bb      	std  y+3,r27
001bd7 01fd      	movw r30,r26
001bd8 01bc      	movw r22,r24
001bd9 81ac      	ldd  r26,y+4
001bda 81bd      	ldd  r27,y+5
001bdb 818e      	ldd  r24,y+6
001bdc 819f      	ldd  r25,y+7
001bdd df80      	rcall __divf21
001bde 8188      	ld   r24,y
001bdf 8199      	ldd  r25,y+1
001be0 81aa      	ldd  r26,y+2
001be1 81bb      	ldd  r27,y+3
001be2 dedd      	rcall __addf12
001be3 de60      	rcall __unpack1
001be4 957a      	dec  r23
001be5 de44      	rcall __repack
001be6 8188      	ld   r24,y
001be7 8199      	ldd  r25,y+1
001be8 81aa      	ldd  r26,y+2
001be9 81bb      	ldd  r27,y+3
001bea 27ae      	eor  r26,r30
001beb 7fa8      	andi r26,0xf8
001bec f421      	brne __sqrt4
001bed 17bf      	cp   r27,r31
001bee 0786      	cpc  r24,r22
001bef 0797      	cpc  r25,r23
001bf0 f029      	breq __sqrt3
                 __sqrt4:
001bf1 954a      	dec  r20
001bf2 f019      	breq __sqrt3
001bf3 01df      	movw r26,r30
001bf4 01cb      	movw r24,r22
001bf5 cfdd      	rjmp __sqrt2
                 __sqrt3:
001bf6 914f      	pop  r20
001bf7 915f      	pop  r21
001bf8 9628      	adiw r28,8
001bf9 9508      	ret
                 
                 __ADDW2R15:
001bfa 2400      	CLR  R0
001bfb 0daf      	ADD  R26,R15
001bfc 1db0      	ADC  R27,R0
001bfd 9508      	RET
                 
                 __ANEGW1:
001bfe 95f1      	NEG  R31
001bff 95e1      	NEG  R30
001c00 40f0      	SBCI R31,0
001c01 9508      	RET
                 
                 __ANEGD1:
001c02 95f0      	COM  R31
001c03 9560      	COM  R22
001c04 9570      	COM  R23
001c05 95e1      	NEG  R30
001c06 4fff      	SBCI R31,-1
001c07 4f6f      	SBCI R22,-1
001c08 4f7f      	SBCI R23,-1
001c09 9508      	RET
                 
                 __CBD1:
001c0a 2ffe      	MOV  R31,R30
001c0b 0fff      	ADD  R31,R31
001c0c 0bff      	SBC  R31,R31
001c0d 2f6f      	MOV  R22,R31
001c0e 2f7f      	MOV  R23,R31
001c0f 9508      	RET
                 
                 __CWD1:
001c10 2f6f      	MOV  R22,R31
001c11 0f66      	ADD  R22,R22
001c12 0b66      	SBC  R22,R22
001c13 2f76      	MOV  R23,R22
001c14 9508      	RET
                 
                 __DIVB21U:
001c15 2400      	CLR  R0
001c16 e098      	LDI  R25,8
                 __DIVB21U1:
001c17 0faa      	LSL  R26
001c18 1c00      	ROL  R0
001c19 1a0e      	SUB  R0,R30
001c1a f410      	BRCC __DIVB21U2
001c1b 0e0e      	ADD  R0,R30
001c1c c001      	RJMP __DIVB21U3
                 __DIVB21U2:
001c1d 60a1      	SBR  R26,1
                 __DIVB21U3:
001c1e 959a      	DEC  R25
001c1f f7b9      	BRNE __DIVB21U1
001c20 2fea      	MOV  R30,R26
001c21 2da0      	MOV  R26,R0
001c22 9508      	RET
                 
                 __DIVB21:
001c23 d05f      	RCALL __CHKSIGNB
001c24 dff0      	RCALL __DIVB21U
001c25 f40e      	BRTC __DIVB211
001c26 95e1      	NEG  R30
                 __DIVB211:
001c27 9508      	RET
                 
                 __DIVW21U:
001c28 2400      	CLR  R0
001c29 2411      	CLR  R1
001c2a e190      	LDI  R25,16
                 __DIVW21U1:
001c2b 0faa      	LSL  R26
001c2c 1fbb      	ROL  R27
001c2d 1c00      	ROL  R0
001c2e 1c11      	ROL  R1
001c2f 1a0e      	SUB  R0,R30
001c30 0a1f      	SBC  R1,R31
001c31 f418      	BRCC __DIVW21U2
001c32 0e0e      	ADD  R0,R30
001c33 1e1f      	ADC  R1,R31
001c34 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001c35 60a1      	SBR  R26,1
                 __DIVW21U3:
001c36 959a      	DEC  R25
001c37 f799      	BRNE __DIVW21U1
001c38 01fd      	MOVW R30,R26
001c39 01d0      	MOVW R26,R0
001c3a 9508      	RET
                 
                 __DIVW21:
001c3b d053      	RCALL __CHKSIGNW
001c3c dfeb      	RCALL __DIVW21U
001c3d f40e      	BRTC __DIVW211
001c3e dfbf      	RCALL __ANEGW1
                 __DIVW211:
001c3f 9508      	RET
                 
                 __DIVD21U:
001c40 933f      	PUSH R19
001c41 934f      	PUSH R20
001c42 935f      	PUSH R21
001c43 2400      	CLR  R0
001c44 2411      	CLR  R1
001c45 2744      	CLR  R20
001c46 2755      	CLR  R21
001c47 e230      	LDI  R19,32
                 __DIVD21U1:
001c48 0faa      	LSL  R26
001c49 1fbb      	ROL  R27
001c4a 1f88      	ROL  R24
001c4b 1f99      	ROL  R25
001c4c 1c00      	ROL  R0
001c4d 1c11      	ROL  R1
001c4e 1f44      	ROL  R20
001c4f 1f55      	ROL  R21
001c50 1a0e      	SUB  R0,R30
001c51 0a1f      	SBC  R1,R31
001c52 0b46      	SBC  R20,R22
001c53 0b57      	SBC  R21,R23
001c54 f428      	BRCC __DIVD21U2
001c55 0e0e      	ADD  R0,R30
001c56 1e1f      	ADC  R1,R31
001c57 1f46      	ADC  R20,R22
001c58 1f57      	ADC  R21,R23
001c59 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
001c5a 60a1      	SBR  R26,1
                 __DIVD21U3:
001c5b 953a      	DEC  R19
001c5c f759      	BRNE __DIVD21U1
001c5d 01fd      	MOVW R30,R26
001c5e 01bc      	MOVW R22,R24
001c5f 01d0      	MOVW R26,R0
001c60 01ca      	MOVW R24,R20
001c61 915f      	POP  R21
001c62 914f      	POP  R20
001c63 913f      	POP  R19
001c64 9508      	RET
                 
                 __MODB21:
001c65 94e8      	CLT
001c66 ffa7      	SBRS R26,7
001c67 c002      	RJMP __MODB211
001c68 95a1      	NEG  R26
001c69 9468      	SET
                 __MODB211:
001c6a fde7      	SBRC R30,7
001c6b 95e1      	NEG  R30
001c6c dfa8      	RCALL __DIVB21U
001c6d 2fea      	MOV  R30,R26
001c6e f40e      	BRTC __MODB212
001c6f 95e1      	NEG  R30
                 __MODB212:
001c70 9508      	RET
                 
                 __MODW21:
001c71 94e8      	CLT
001c72 ffb7      	SBRS R27,7
001c73 c004      	RJMP __MODW211
001c74 95a0      	COM  R26
001c75 95b0      	COM  R27
001c76 9611      	ADIW R26,1
001c77 9468      	SET
                 __MODW211:
001c78 fdf7      	SBRC R31,7
001c79 df84      	RCALL __ANEGW1
001c7a dfad      	RCALL __DIVW21U
001c7b 01fd      	MOVW R30,R26
001c7c f40e      	BRTC __MODW212
001c7d df80      	RCALL __ANEGW1
                 __MODW212:
001c7e 9508      	RET
                 
                 __MODD21U:
001c7f dfc0      	RCALL __DIVD21U
001c80 01fd      	MOVW R30,R26
001c81 01bc      	MOVW R22,R24
001c82 9508      	RET
                 
                 __CHKSIGNB:
001c83 94e8      	CLT
001c84 ffe7      	SBRS R30,7
001c85 c002      	RJMP __CHKSB1
001c86 95e1      	NEG  R30
001c87 9468      	SET
                 __CHKSB1:
001c88 ffa7      	SBRS R26,7
001c89 c004      	RJMP __CHKSB2
001c8a 95a1      	NEG  R26
001c8b f800      	BLD  R0,0
001c8c 9403      	INC  R0
001c8d fa00      	BST  R0,0
                 __CHKSB2:
001c8e 9508      	RET
                 
                 __CHKSIGNW:
001c8f 94e8      	CLT
001c90 fff7      	SBRS R31,7
001c91 c002      	RJMP __CHKSW1
001c92 df6b      	RCALL __ANEGW1
001c93 9468      	SET
                 __CHKSW1:
001c94 ffb7      	SBRS R27,7
001c95 c006      	RJMP __CHKSW2
001c96 95a0      	COM  R26
001c97 95b0      	COM  R27
001c98 9611      	ADIW R26,1
001c99 f800      	BLD  R0,0
001c9a 9403      	INC  R0
001c9b fa00      	BST  R0,0
                 __CHKSW2:
001c9c 9508      	RET
                 
                 __GETW1P:
001c9d 91ed      	LD   R30,X+
001c9e 91fc      	LD   R31,X
001c9f 9711      	SBIW R26,1
001ca0 9508      	RET
                 
                 __GETD1P:
001ca1 91ed      	LD   R30,X+
001ca2 91fd      	LD   R31,X+
001ca3 916d      	LD   R22,X+
001ca4 917c      	LD   R23,X
001ca5 9713      	SBIW R26,3
001ca6 9508      	RET
                 
                 __GETD1P_INC:
001ca7 91ed      	LD   R30,X+
001ca8 91fd      	LD   R31,X+
001ca9 916d      	LD   R22,X+
001caa 917d      	LD   R23,X+
001cab 9508      	RET
                 
                 __PUTDP1:
001cac 93ed      	ST   X+,R30
001cad 93fd      	ST   X+,R31
001cae 936d      	ST   X+,R22
001caf 937c      	ST   X,R23
001cb0 9508      	RET
                 
                 __PUTDP1_DEC:
001cb1 937e      	ST   -X,R23
001cb2 936e      	ST   -X,R22
001cb3 93fe      	ST   -X,R31
001cb4 93ee      	ST   -X,R30
001cb5 9508      	RET
                 
                 __GETD1S0:
001cb6 81e8      	LD   R30,Y
001cb7 81f9      	LDD  R31,Y+1
001cb8 816a      	LDD  R22,Y+2
001cb9 817b      	LDD  R23,Y+3
001cba 9508      	RET
                 
                 __GETD2S0:
001cbb 81a8      	LD   R26,Y
001cbc 81b9      	LDD  R27,Y+1
001cbd 818a      	LDD  R24,Y+2
001cbe 819b      	LDD  R25,Y+3
001cbf 9508      	RET
                 
                 __PUTD1S0:
001cc0 83e8      	ST   Y,R30
001cc1 83f9      	STD  Y+1,R31
001cc2 836a      	STD  Y+2,R22
001cc3 837b      	STD  Y+3,R23
001cc4 9508      	RET
                 
                 __PUTPARD1:
001cc5 937a      	ST   -Y,R23
001cc6 936a      	ST   -Y,R22
001cc7 93fa      	ST   -Y,R31
001cc8 93ea      	ST   -Y,R30
001cc9 9508      	RET
                 
                 __PUTPARD2:
001cca 939a      	ST   -Y,R25
001ccb 938a      	ST   -Y,R24
001ccc 93ba      	ST   -Y,R27
001ccd 93aa      	ST   -Y,R26
001cce 9508      	RET
                 
                 __SWAPD12:
001ccf 2e18      	MOV  R1,R24
001cd0 2f86      	MOV  R24,R22
001cd1 2d61      	MOV  R22,R1
001cd2 2e19      	MOV  R1,R25
001cd3 2f97      	MOV  R25,R23
001cd4 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
001cd5 2e1b      	MOV  R1,R27
001cd6 2fbf      	MOV  R27,R31
001cd7 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
001cd8 2e1a      	MOV  R1,R26
001cd9 2fae      	MOV  R26,R30
001cda 2de1      	MOV  R30,R1
001cdb 9508      	RET
                 
                 __EEPROMRDD:
001cdc 9612      	ADIW R26,2
001cdd d002      	RCALL __EEPROMRDW
001cde 01bf      	MOVW R22,R30
001cdf 9712      	SBIW R26,2
                 
                 __EEPROMRDW:
001ce0 9611      	ADIW R26,1
001ce1 d002      	RCALL __EEPROMRDB
001ce2 2ffe      	MOV  R31,R30
001ce3 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
001ce4 99e1      	SBIC EECR,EEWE
001ce5 cffe      	RJMP __EEPROMRDB
001ce6 93ff      	PUSH R31
001ce7 b7ff      	IN   R31,SREG
001ce8 94f8      	CLI
001ce9 bbae      	OUT  EEARL,R26
001cea bbbf      	OUT  EEARH,R27
001ceb 9ae0      	SBI  EECR,EERE
001cec b3ed      	IN   R30,EEDR
001ced bfff      	OUT  SREG,R31
001cee 91ff      	POP  R31
001cef 9508      	RET
                 
                 __CPD10:
001cf0 9730      	SBIW R30,0
001cf1 4060      	SBCI R22,0
001cf2 4070      	SBCI R23,0
001cf3 9508      	RET
                 
                 __CPW02:
001cf4 2400      	CLR  R0
001cf5 160a      	CP   R0,R26
001cf6 060b      	CPC  R0,R27
001cf7 9508      	RET
                 
                 __CPD02:
001cf8 2400      	CLR  R0
001cf9 160a      	CP   R0,R26
001cfa 060b      	CPC  R0,R27
001cfb 0608      	CPC  R0,R24
001cfc 0609      	CPC  R0,R25
001cfd 9508      	RET
                 
                 __CPD12:
001cfe 17ea      	CP   R30,R26
001cff 07fb      	CPC  R31,R27
001d00 0768      	CPC  R22,R24
001d01 0779      	CPC  R23,R25
001d02 9508      	RET
                 
                 __SAVELOCR6:
001d03 935a      	ST   -Y,R21
                 __SAVELOCR5:
001d04 934a      	ST   -Y,R20
                 __SAVELOCR4:
001d05 933a      	ST   -Y,R19
                 __SAVELOCR3:
001d06 932a      	ST   -Y,R18
                 __SAVELOCR2:
001d07 931a      	ST   -Y,R17
001d08 930a      	ST   -Y,R16
001d09 9508      	RET
                 
                 __LOADLOCR6:
001d0a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
001d0b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
001d0c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
001d0d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
001d0e 8119      	LDD  R17,Y+1
001d0f 8108      	LD   R16,Y
001d10 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  88 r1 :  40 r2 :   1 r3 :   0 r4 :   6 r5 :   2 r6 :   4 r7 :   3 
r8 :   5 r9 :   1 r10:   3 r11:   0 r12:   4 r13:   2 r14:   0 r15:   6 
r16: 134 r17: 127 r18:  66 r19:  48 r20:  69 r21: 101 r22: 223 r23: 200 
r24: 135 r25: 111 r26: 545 r27: 279 r28:  64 r29:   5 r30:1201 r31: 548 
x  :  92 y  : 812 z  :  34 
Registers used: 32 out of 35 (91.4%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  45 add   :  39 
adiw  :  74 and   :   5 andi  :  15 asr   :   0 bclr  :   0 bld   :   5 
brbc  :   0 brbs  :   0 brcc  :  15 brcs  :   1 break :   0 breq  :  73 
brge  :  17 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  32 
brlt  :   5 brmi  :  11 brne  : 138 brpl  :  10 brsh  :  14 brtc  :   6 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   6 call  : 729 
cbi   :   8 cbr   :   1 clc   :   3 clh   :   0 cli   :   3 cln   :   0 
clr   :  72 cls   :   0 clt   :   7 clv   :   0 clz   :   2 com   :  12 
cp    :  36 cpc   :  90 cpi   : 138 cpse  :   0 dec   :  15 des   :   0 
elpm  :   0 eor   :   8 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 
ijmp  :   0 in    :  15 inc   :   4 jmp   :  66 ld    : 121 ldd   : 368 
ldi   : 841 lds   : 176 lpm   :  12 lsl   :  24 lsr   :   5 mov   :  96 
movw  : 128 mul   :  11 muls  :   0 mulsu :   0 neg   :  11 nop   :   0 
or    :   8 ori   :  15 out   :  52 pop   :  43 push  :  43 rcall :  82 
ret   : 212 reti  :   3 rjmp  : 253 rol   :  38 ror   :  17 sbc   :  16 
sbci  :  43 sbi   :  15 sbic  :   9 sbis  :   3 sbiw  :  61 sbr   :   5 
sbrc  :   5 sbrs  :  23 sec   :   5 seh   :   0 sei   :   3 sen   :   0 
ser   :   8 ses   :   0 set   :   7 sev   :   0 sez   :   1 sleep :   0 
spm   :   0 st    : 338 std   : 100 sts   : 226 sub   :  10 subi  :  80 
swap  :   0 tst   :  26 wdr   :   1 
Instructions used: 82 out of 117 (70.1%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x003a22  12948   1934  14882  131072  11.4%
[.dseg] 0x000100 0x000a16      0   1046   1046    4351  24.0%
[.eseg] 0x000000 0x00000c      0     12     12    4096   0.3%

Assembly complete, 0 errors, 18 warnings
