#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <ctype.h>
#include <stdint.h>
#include <debug.h>
#include <uart.h>
#include <adc.h>
#include <initial_system.h>

/* ================================================================================= */ 
void printDebug(flash char *fmtstr, ...)
{
    char textBuffer[256];
    va_list argptr; 
    
    va_start(argptr, fmtstr);
    vsprintf(textBuffer,fmtstr,argptr);     
    send_uart(0, textBuffer);   
    va_end(argptr);        
    
    return;        
}
/* ================================================================================= */ 
 void print_payload(const unsigned char *payload, int len) {

    int len_rem = len;
    int line_width = 16;            // number of bytes per line //
    int line_len;
    int offset = 0;                  // zero-based offset counter //
    const unsigned char *ch = payload;

    if (len <= 0)
        return;

    // data fits on one line //
    if (len <= line_width) {
        print_hex_ascii_line(ch, len, offset);
        return;
    }
    // data spans multiple lines //
    for ( ;; ) {
        // compute current line length //
        line_len = line_width % len_rem;
        // print line //
        print_hex_ascii_line(ch, line_len, offset);
        // compute total remaining //
        len_rem = len_rem - line_len;
        // shift pointer to remaining bytes to print //
        ch = ch + line_len;
        // add offset //
        offset = offset + line_width;
        // check if we have line width chars or less //
        if (len_rem <= line_width) {
            // print last line and get out //
            print_hex_ascii_line(ch, len_rem, offset);
            break;
        }
    }
    return;
    
}                                 
/* ================================================================================= */ 
void print_hex_ascii_line(const unsigned char *payload, int len, int offset) {

    int i;
    int gap;
    const unsigned char *ch;

    // offset //                      
    printDebug("%05d   ", offset);               
    
    
    // hex //                                                                                                      
    ch = payload;
    for(i = 0; i < len; i++) {                            
        printDebug("%02X ", *ch);                    
        
        ch++;
        // print extra space after 8th byte for visual aid //
        if (i == 7){                            
            printDebug(" ");                                     
            
        }
    }
    // print space to handle line less than 8 bytes //
    if (len < 8){                            
        printDebug(" ");                                              
        
    }
    
    // fill hex gap with spaces if not full line //
    if (len < 16) {
        gap = 16 - len;
        for (i = 0; i < gap; i++) {
            printDebug("   ");                                           
            
        }
    }
    printDebug("   ");                                                      
    
    
    // ascii (if printable) //
    ch = payload;
    for(i = 0; i < len; i++) {
        if (isprint(*ch)){
            printDebug("%c", *ch);                                           
            
        }
        else{
            printDebug(".");                                                 
            
        }
        ch++;
    }

    printDebug("\r\n");                                                        
    return;    
}